
e-paper_18x5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8d8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000be30  0800f998  0800f998  00010998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b7c8  0801b7c8  0001c7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b7d0  0801b7d0  0001c7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b7d4  0801b7d4  0001c7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000340  20000000  0801b7d8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003b4  20000340  0801bb18  0001d340  2**2
                  ALLOC
  8 ._user_heap_stack 00001904  200006f4  0801bb18  0001d6f4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0001d340  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f16e  00000000  00000000  0001d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004c8c  00000000  00000000  0003c4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018f8  00000000  00000000  00041168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012e5  00000000  00000000  00042a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00024a2e  00000000  00000000  00043d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021e3f  00000000  00000000  00068773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d3252  00000000  00000000  0008a5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0015d804  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006804  00000000  00000000  0015d848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004f  00000000  00000000  0016404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000340 	.word	0x20000340
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f980 	.word	0x0800f980

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000344 	.word	0x20000344
 8000104:	0800f980 	.word	0x0800f980

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f891 	bl	8001564 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffd1 	bl	80013f4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f883 	bl	8001564 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f879 	bl	8001564 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fffb 	bl	800147c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fff1 	bl	800147c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__clzsi2>:
 80004a8:	211c      	movs	r1, #28
 80004aa:	2301      	movs	r3, #1
 80004ac:	041b      	lsls	r3, r3, #16
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d301      	bcc.n	80004b6 <__clzsi2+0xe>
 80004b2:	0c00      	lsrs	r0, r0, #16
 80004b4:	3910      	subs	r1, #16
 80004b6:	0a1b      	lsrs	r3, r3, #8
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d301      	bcc.n	80004c0 <__clzsi2+0x18>
 80004bc:	0a00      	lsrs	r0, r0, #8
 80004be:	3908      	subs	r1, #8
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	4298      	cmp	r0, r3
 80004c4:	d301      	bcc.n	80004ca <__clzsi2+0x22>
 80004c6:	0900      	lsrs	r0, r0, #4
 80004c8:	3904      	subs	r1, #4
 80004ca:	a202      	add	r2, pc, #8	@ (adr r2, 80004d4 <__clzsi2+0x2c>)
 80004cc:	5c10      	ldrb	r0, [r2, r0]
 80004ce:	1840      	adds	r0, r0, r1
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	02020304 	.word	0x02020304
 80004d8:	01010101 	.word	0x01010101
	...

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	0008      	movs	r0, r1
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	@ (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	@ (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	ffffff21 	.word	0xffffff21
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f824 	bl	8000560 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			@ (mov r8, r8)

08000524 <__aeabi_d2uiz>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2200      	movs	r2, #0
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <__aeabi_d2uiz+0x38>)
 800052a:	0004      	movs	r4, r0
 800052c:	000d      	movs	r5, r1
 800052e:	f7ff ffb1 	bl	8000494 <__aeabi_dcmpge>
 8000532:	2800      	cmp	r0, #0
 8000534:	d104      	bne.n	8000540 <__aeabi_d2uiz+0x1c>
 8000536:	0020      	movs	r0, r4
 8000538:	0029      	movs	r1, r5
 800053a:	f001 ff0b 	bl	8002354 <__aeabi_d2iz>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <__aeabi_d2uiz+0x38>)
 8000542:	2200      	movs	r2, #0
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fb46 	bl	8001bd8 <__aeabi_dsub>
 800054c:	f001 ff02 	bl	8002354 <__aeabi_d2iz>
 8000550:	2380      	movs	r3, #128	@ 0x80
 8000552:	061b      	lsls	r3, r3, #24
 8000554:	469c      	mov	ip, r3
 8000556:	4460      	add	r0, ip
 8000558:	e7f1      	b.n	800053e <__aeabi_d2uiz+0x1a>
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	41e00000 	.word	0x41e00000

08000560 <__udivmoddi4>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	4657      	mov	r7, sl
 8000564:	464e      	mov	r6, r9
 8000566:	4645      	mov	r5, r8
 8000568:	46de      	mov	lr, fp
 800056a:	b5e0      	push	{r5, r6, r7, lr}
 800056c:	0004      	movs	r4, r0
 800056e:	000d      	movs	r5, r1
 8000570:	4692      	mov	sl, r2
 8000572:	4699      	mov	r9, r3
 8000574:	b083      	sub	sp, #12
 8000576:	428b      	cmp	r3, r1
 8000578:	d830      	bhi.n	80005dc <__udivmoddi4+0x7c>
 800057a:	d02d      	beq.n	80005d8 <__udivmoddi4+0x78>
 800057c:	4649      	mov	r1, r9
 800057e:	4650      	mov	r0, sl
 8000580:	f001 ff76 	bl	8002470 <__clzdi2>
 8000584:	0029      	movs	r1, r5
 8000586:	0006      	movs	r6, r0
 8000588:	0020      	movs	r0, r4
 800058a:	f001 ff71 	bl	8002470 <__clzdi2>
 800058e:	1a33      	subs	r3, r6, r0
 8000590:	4698      	mov	r8, r3
 8000592:	3b20      	subs	r3, #32
 8000594:	d434      	bmi.n	8000600 <__udivmoddi4+0xa0>
 8000596:	469b      	mov	fp, r3
 8000598:	4653      	mov	r3, sl
 800059a:	465a      	mov	r2, fp
 800059c:	4093      	lsls	r3, r2
 800059e:	4642      	mov	r2, r8
 80005a0:	001f      	movs	r7, r3
 80005a2:	4653      	mov	r3, sl
 80005a4:	4093      	lsls	r3, r2
 80005a6:	001e      	movs	r6, r3
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d83b      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80005ac:	42af      	cmp	r7, r5
 80005ae:	d100      	bne.n	80005b2 <__udivmoddi4+0x52>
 80005b0:	e079      	b.n	80006a6 <__udivmoddi4+0x146>
 80005b2:	465b      	mov	r3, fp
 80005b4:	1ba4      	subs	r4, r4, r6
 80005b6:	41bd      	sbcs	r5, r7
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	da00      	bge.n	80005be <__udivmoddi4+0x5e>
 80005bc:	e076      	b.n	80006ac <__udivmoddi4+0x14c>
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2301      	movs	r3, #1
 80005c8:	465a      	mov	r2, fp
 80005ca:	4093      	lsls	r3, r2
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	4642      	mov	r2, r8
 80005d2:	4093      	lsls	r3, r2
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	e029      	b.n	800062c <__udivmoddi4+0xcc>
 80005d8:	4282      	cmp	r2, r0
 80005da:	d9cf      	bls.n	800057c <__udivmoddi4+0x1c>
 80005dc:	2200      	movs	r2, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <__udivmoddi4+0x8e>
 80005ea:	601c      	str	r4, [r3, #0]
 80005ec:	605d      	str	r5, [r3, #4]
 80005ee:	9800      	ldr	r0, [sp, #0]
 80005f0:	9901      	ldr	r1, [sp, #4]
 80005f2:	b003      	add	sp, #12
 80005f4:	bcf0      	pop	{r4, r5, r6, r7}
 80005f6:	46bb      	mov	fp, r7
 80005f8:	46b2      	mov	sl, r6
 80005fa:	46a9      	mov	r9, r5
 80005fc:	46a0      	mov	r8, r4
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	4642      	mov	r2, r8
 8000602:	469b      	mov	fp, r3
 8000604:	2320      	movs	r3, #32
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	4652      	mov	r2, sl
 800060a:	40da      	lsrs	r2, r3
 800060c:	4641      	mov	r1, r8
 800060e:	0013      	movs	r3, r2
 8000610:	464a      	mov	r2, r9
 8000612:	408a      	lsls	r2, r1
 8000614:	0017      	movs	r7, r2
 8000616:	4642      	mov	r2, r8
 8000618:	431f      	orrs	r7, r3
 800061a:	4653      	mov	r3, sl
 800061c:	4093      	lsls	r3, r2
 800061e:	001e      	movs	r6, r3
 8000620:	42af      	cmp	r7, r5
 8000622:	d9c3      	bls.n	80005ac <__udivmoddi4+0x4c>
 8000624:	2200      	movs	r2, #0
 8000626:	2300      	movs	r3, #0
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	4643      	mov	r3, r8
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0d8      	beq.n	80005e4 <__udivmoddi4+0x84>
 8000632:	07fb      	lsls	r3, r7, #31
 8000634:	0872      	lsrs	r2, r6, #1
 8000636:	431a      	orrs	r2, r3
 8000638:	4646      	mov	r6, r8
 800063a:	087b      	lsrs	r3, r7, #1
 800063c:	e00e      	b.n	800065c <__udivmoddi4+0xfc>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d101      	bne.n	8000646 <__udivmoddi4+0xe6>
 8000642:	42a2      	cmp	r2, r4
 8000644:	d80c      	bhi.n	8000660 <__udivmoddi4+0x100>
 8000646:	1aa4      	subs	r4, r4, r2
 8000648:	419d      	sbcs	r5, r3
 800064a:	2001      	movs	r0, #1
 800064c:	1924      	adds	r4, r4, r4
 800064e:	416d      	adcs	r5, r5
 8000650:	2100      	movs	r1, #0
 8000652:	3e01      	subs	r6, #1
 8000654:	1824      	adds	r4, r4, r0
 8000656:	414d      	adcs	r5, r1
 8000658:	2e00      	cmp	r6, #0
 800065a:	d006      	beq.n	800066a <__udivmoddi4+0x10a>
 800065c:	42ab      	cmp	r3, r5
 800065e:	d9ee      	bls.n	800063e <__udivmoddi4+0xde>
 8000660:	3e01      	subs	r6, #1
 8000662:	1924      	adds	r4, r4, r4
 8000664:	416d      	adcs	r5, r5
 8000666:	2e00      	cmp	r6, #0
 8000668:	d1f8      	bne.n	800065c <__udivmoddi4+0xfc>
 800066a:	9800      	ldr	r0, [sp, #0]
 800066c:	9901      	ldr	r1, [sp, #4]
 800066e:	465b      	mov	r3, fp
 8000670:	1900      	adds	r0, r0, r4
 8000672:	4169      	adcs	r1, r5
 8000674:	2b00      	cmp	r3, #0
 8000676:	db24      	blt.n	80006c2 <__udivmoddi4+0x162>
 8000678:	002b      	movs	r3, r5
 800067a:	465a      	mov	r2, fp
 800067c:	4644      	mov	r4, r8
 800067e:	40d3      	lsrs	r3, r2
 8000680:	002a      	movs	r2, r5
 8000682:	40e2      	lsrs	r2, r4
 8000684:	001c      	movs	r4, r3
 8000686:	465b      	mov	r3, fp
 8000688:	0015      	movs	r5, r2
 800068a:	2b00      	cmp	r3, #0
 800068c:	db2a      	blt.n	80006e4 <__udivmoddi4+0x184>
 800068e:	0026      	movs	r6, r4
 8000690:	409e      	lsls	r6, r3
 8000692:	0033      	movs	r3, r6
 8000694:	0026      	movs	r6, r4
 8000696:	4647      	mov	r7, r8
 8000698:	40be      	lsls	r6, r7
 800069a:	0032      	movs	r2, r6
 800069c:	1a80      	subs	r0, r0, r2
 800069e:	4199      	sbcs	r1, r3
 80006a0:	9000      	str	r0, [sp, #0]
 80006a2:	9101      	str	r1, [sp, #4]
 80006a4:	e79e      	b.n	80005e4 <__udivmoddi4+0x84>
 80006a6:	42a3      	cmp	r3, r4
 80006a8:	d8bc      	bhi.n	8000624 <__udivmoddi4+0xc4>
 80006aa:	e782      	b.n	80005b2 <__udivmoddi4+0x52>
 80006ac:	4642      	mov	r2, r8
 80006ae:	2320      	movs	r3, #32
 80006b0:	2100      	movs	r1, #0
 80006b2:	1a9b      	subs	r3, r3, r2
 80006b4:	2200      	movs	r2, #0
 80006b6:	9100      	str	r1, [sp, #0]
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	2201      	movs	r2, #1
 80006bc:	40da      	lsrs	r2, r3
 80006be:	9201      	str	r2, [sp, #4]
 80006c0:	e785      	b.n	80005ce <__udivmoddi4+0x6e>
 80006c2:	4642      	mov	r2, r8
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	002a      	movs	r2, r5
 80006ca:	4646      	mov	r6, r8
 80006cc:	409a      	lsls	r2, r3
 80006ce:	0023      	movs	r3, r4
 80006d0:	40f3      	lsrs	r3, r6
 80006d2:	4644      	mov	r4, r8
 80006d4:	4313      	orrs	r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	465b      	mov	r3, fp
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dad4      	bge.n	800068e <__udivmoddi4+0x12e>
 80006e4:	4642      	mov	r2, r8
 80006e6:	002f      	movs	r7, r5
 80006e8:	2320      	movs	r3, #32
 80006ea:	0026      	movs	r6, r4
 80006ec:	4097      	lsls	r7, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	40de      	lsrs	r6, r3
 80006f2:	003b      	movs	r3, r7
 80006f4:	4333      	orrs	r3, r6
 80006f6:	e7cd      	b.n	8000694 <__udivmoddi4+0x134>

080006f8 <__aeabi_dadd>:
 80006f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fa:	4657      	mov	r7, sl
 80006fc:	464e      	mov	r6, r9
 80006fe:	4645      	mov	r5, r8
 8000700:	46de      	mov	lr, fp
 8000702:	b5e0      	push	{r5, r6, r7, lr}
 8000704:	b083      	sub	sp, #12
 8000706:	9000      	str	r0, [sp, #0]
 8000708:	9101      	str	r1, [sp, #4]
 800070a:	030c      	lsls	r4, r1, #12
 800070c:	004f      	lsls	r7, r1, #1
 800070e:	0fce      	lsrs	r6, r1, #31
 8000710:	0a61      	lsrs	r1, r4, #9
 8000712:	9c00      	ldr	r4, [sp, #0]
 8000714:	031d      	lsls	r5, r3, #12
 8000716:	0f64      	lsrs	r4, r4, #29
 8000718:	430c      	orrs	r4, r1
 800071a:	9900      	ldr	r1, [sp, #0]
 800071c:	9200      	str	r2, [sp, #0]
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	00c8      	lsls	r0, r1, #3
 8000722:	0059      	lsls	r1, r3, #1
 8000724:	0d4b      	lsrs	r3, r1, #21
 8000726:	4699      	mov	r9, r3
 8000728:	9a00      	ldr	r2, [sp, #0]
 800072a:	9b01      	ldr	r3, [sp, #4]
 800072c:	0a6d      	lsrs	r5, r5, #9
 800072e:	0fd9      	lsrs	r1, r3, #31
 8000730:	0f53      	lsrs	r3, r2, #29
 8000732:	432b      	orrs	r3, r5
 8000734:	469a      	mov	sl, r3
 8000736:	9b00      	ldr	r3, [sp, #0]
 8000738:	0d7f      	lsrs	r7, r7, #21
 800073a:	00da      	lsls	r2, r3, #3
 800073c:	4694      	mov	ip, r2
 800073e:	464a      	mov	r2, r9
 8000740:	46b0      	mov	r8, r6
 8000742:	1aba      	subs	r2, r7, r2
 8000744:	428e      	cmp	r6, r1
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x52>
 8000748:	e0b0      	b.n	80008ac <__aeabi_dadd+0x1b4>
 800074a:	2a00      	cmp	r2, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_dadd+0x58>
 800074e:	e078      	b.n	8000842 <__aeabi_dadd+0x14a>
 8000750:	4649      	mov	r1, r9
 8000752:	2900      	cmp	r1, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x60>
 8000756:	e0e9      	b.n	800092c <__aeabi_dadd+0x234>
 8000758:	49c9      	ldr	r1, [pc, #804]	@ (8000a80 <__aeabi_dadd+0x388>)
 800075a:	428f      	cmp	r7, r1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x68>
 800075e:	e195      	b.n	8000a8c <__aeabi_dadd+0x394>
 8000760:	2501      	movs	r5, #1
 8000762:	2a38      	cmp	r2, #56	@ 0x38
 8000764:	dc16      	bgt.n	8000794 <__aeabi_dadd+0x9c>
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	4653      	mov	r3, sl
 800076a:	0409      	lsls	r1, r1, #16
 800076c:	430b      	orrs	r3, r1
 800076e:	469a      	mov	sl, r3
 8000770:	2a1f      	cmp	r2, #31
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0x7e>
 8000774:	e1e7      	b.n	8000b46 <__aeabi_dadd+0x44e>
 8000776:	2120      	movs	r1, #32
 8000778:	4655      	mov	r5, sl
 800077a:	1a8b      	subs	r3, r1, r2
 800077c:	4661      	mov	r1, ip
 800077e:	409d      	lsls	r5, r3
 8000780:	40d1      	lsrs	r1, r2
 8000782:	430d      	orrs	r5, r1
 8000784:	4661      	mov	r1, ip
 8000786:	4099      	lsls	r1, r3
 8000788:	1e4b      	subs	r3, r1, #1
 800078a:	4199      	sbcs	r1, r3
 800078c:	4653      	mov	r3, sl
 800078e:	40d3      	lsrs	r3, r2
 8000790:	430d      	orrs	r5, r1
 8000792:	1ae4      	subs	r4, r4, r3
 8000794:	1b45      	subs	r5, r0, r5
 8000796:	42a8      	cmp	r0, r5
 8000798:	4180      	sbcs	r0, r0
 800079a:	4240      	negs	r0, r0
 800079c:	1a24      	subs	r4, r4, r0
 800079e:	0223      	lsls	r3, r4, #8
 80007a0:	d400      	bmi.n	80007a4 <__aeabi_dadd+0xac>
 80007a2:	e10f      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 80007a4:	0264      	lsls	r4, r4, #9
 80007a6:	0a64      	lsrs	r4, r4, #9
 80007a8:	2c00      	cmp	r4, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0xb6>
 80007ac:	e139      	b.n	8000a22 <__aeabi_dadd+0x32a>
 80007ae:	0020      	movs	r0, r4
 80007b0:	f7ff fe7a 	bl	80004a8 <__clzsi2>
 80007b4:	0003      	movs	r3, r0
 80007b6:	3b08      	subs	r3, #8
 80007b8:	2120      	movs	r1, #32
 80007ba:	0028      	movs	r0, r5
 80007bc:	1aca      	subs	r2, r1, r3
 80007be:	40d0      	lsrs	r0, r2
 80007c0:	409c      	lsls	r4, r3
 80007c2:	0002      	movs	r2, r0
 80007c4:	409d      	lsls	r5, r3
 80007c6:	4322      	orrs	r2, r4
 80007c8:	429f      	cmp	r7, r3
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0xd6>
 80007cc:	e173      	b.n	8000ab6 <__aeabi_dadd+0x3be>
 80007ce:	1bd8      	subs	r0, r3, r7
 80007d0:	3001      	adds	r0, #1
 80007d2:	1a09      	subs	r1, r1, r0
 80007d4:	002c      	movs	r4, r5
 80007d6:	408d      	lsls	r5, r1
 80007d8:	40c4      	lsrs	r4, r0
 80007da:	1e6b      	subs	r3, r5, #1
 80007dc:	419d      	sbcs	r5, r3
 80007de:	0013      	movs	r3, r2
 80007e0:	40c2      	lsrs	r2, r0
 80007e2:	408b      	lsls	r3, r1
 80007e4:	4325      	orrs	r5, r4
 80007e6:	2700      	movs	r7, #0
 80007e8:	0014      	movs	r4, r2
 80007ea:	431d      	orrs	r5, r3
 80007ec:	076b      	lsls	r3, r5, #29
 80007ee:	d009      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f0:	230f      	movs	r3, #15
 80007f2:	402b      	ands	r3, r5
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d005      	beq.n	8000804 <__aeabi_dadd+0x10c>
 80007f8:	1d2b      	adds	r3, r5, #4
 80007fa:	42ab      	cmp	r3, r5
 80007fc:	41ad      	sbcs	r5, r5
 80007fe:	426d      	negs	r5, r5
 8000800:	1964      	adds	r4, r4, r5
 8000802:	001d      	movs	r5, r3
 8000804:	0223      	lsls	r3, r4, #8
 8000806:	d400      	bmi.n	800080a <__aeabi_dadd+0x112>
 8000808:	e12d      	b.n	8000a66 <__aeabi_dadd+0x36e>
 800080a:	4a9d      	ldr	r2, [pc, #628]	@ (8000a80 <__aeabi_dadd+0x388>)
 800080c:	3701      	adds	r7, #1
 800080e:	4297      	cmp	r7, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x11c>
 8000812:	e0d3      	b.n	80009bc <__aeabi_dadd+0x2c4>
 8000814:	4646      	mov	r6, r8
 8000816:	499b      	ldr	r1, [pc, #620]	@ (8000a84 <__aeabi_dadd+0x38c>)
 8000818:	08ed      	lsrs	r5, r5, #3
 800081a:	4021      	ands	r1, r4
 800081c:	074a      	lsls	r2, r1, #29
 800081e:	432a      	orrs	r2, r5
 8000820:	057c      	lsls	r4, r7, #21
 8000822:	024d      	lsls	r5, r1, #9
 8000824:	0b2d      	lsrs	r5, r5, #12
 8000826:	0d64      	lsrs	r4, r4, #21
 8000828:	0524      	lsls	r4, r4, #20
 800082a:	432c      	orrs	r4, r5
 800082c:	07f6      	lsls	r6, r6, #31
 800082e:	4334      	orrs	r4, r6
 8000830:	0010      	movs	r0, r2
 8000832:	0021      	movs	r1, r4
 8000834:	b003      	add	sp, #12
 8000836:	bcf0      	pop	{r4, r5, r6, r7}
 8000838:	46bb      	mov	fp, r7
 800083a:	46b2      	mov	sl, r6
 800083c:	46a9      	mov	r9, r5
 800083e:	46a0      	mov	r8, r4
 8000840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000842:	2a00      	cmp	r2, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x150>
 8000846:	e084      	b.n	8000952 <__aeabi_dadd+0x25a>
 8000848:	464a      	mov	r2, r9
 800084a:	1bd2      	subs	r2, r2, r7
 800084c:	2f00      	cmp	r7, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_dadd+0x15a>
 8000850:	e16d      	b.n	8000b2e <__aeabi_dadd+0x436>
 8000852:	0025      	movs	r5, r4
 8000854:	4305      	orrs	r5, r0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x162>
 8000858:	e127      	b.n	8000aaa <__aeabi_dadd+0x3b2>
 800085a:	1e56      	subs	r6, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x16a>
 8000860:	e23b      	b.n	8000cda <__aeabi_dadd+0x5e2>
 8000862:	4d87      	ldr	r5, [pc, #540]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000864:	42aa      	cmp	r2, r5
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x172>
 8000868:	e26a      	b.n	8000d40 <__aeabi_dadd+0x648>
 800086a:	2501      	movs	r5, #1
 800086c:	2e38      	cmp	r6, #56	@ 0x38
 800086e:	dc12      	bgt.n	8000896 <__aeabi_dadd+0x19e>
 8000870:	0032      	movs	r2, r6
 8000872:	2a1f      	cmp	r2, #31
 8000874:	dd00      	ble.n	8000878 <__aeabi_dadd+0x180>
 8000876:	e1f8      	b.n	8000c6a <__aeabi_dadd+0x572>
 8000878:	2620      	movs	r6, #32
 800087a:	0025      	movs	r5, r4
 800087c:	1ab6      	subs	r6, r6, r2
 800087e:	0007      	movs	r7, r0
 8000880:	4653      	mov	r3, sl
 8000882:	40b0      	lsls	r0, r6
 8000884:	40d4      	lsrs	r4, r2
 8000886:	40b5      	lsls	r5, r6
 8000888:	40d7      	lsrs	r7, r2
 800088a:	1e46      	subs	r6, r0, #1
 800088c:	41b0      	sbcs	r0, r6
 800088e:	1b1b      	subs	r3, r3, r4
 8000890:	469a      	mov	sl, r3
 8000892:	433d      	orrs	r5, r7
 8000894:	4305      	orrs	r5, r0
 8000896:	4662      	mov	r2, ip
 8000898:	1b55      	subs	r5, r2, r5
 800089a:	45ac      	cmp	ip, r5
 800089c:	4192      	sbcs	r2, r2
 800089e:	4653      	mov	r3, sl
 80008a0:	4252      	negs	r2, r2
 80008a2:	000e      	movs	r6, r1
 80008a4:	464f      	mov	r7, r9
 80008a6:	4688      	mov	r8, r1
 80008a8:	1a9c      	subs	r4, r3, r2
 80008aa:	e778      	b.n	800079e <__aeabi_dadd+0xa6>
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dadd+0x1ba>
 80008b0:	e08e      	b.n	80009d0 <__aeabi_dadd+0x2d8>
 80008b2:	4649      	mov	r1, r9
 80008b4:	2900      	cmp	r1, #0
 80008b6:	d175      	bne.n	80009a4 <__aeabi_dadd+0x2ac>
 80008b8:	4661      	mov	r1, ip
 80008ba:	4653      	mov	r3, sl
 80008bc:	4319      	orrs	r1, r3
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x1ca>
 80008c0:	e0f6      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 80008c2:	1e51      	subs	r1, r2, #1
 80008c4:	2a01      	cmp	r2, #1
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x1d2>
 80008c8:	e191      	b.n	8000bee <__aeabi_dadd+0x4f6>
 80008ca:	4d6d      	ldr	r5, [pc, #436]	@ (8000a80 <__aeabi_dadd+0x388>)
 80008cc:	42aa      	cmp	r2, r5
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x1da>
 80008d0:	e0dc      	b.n	8000a8c <__aeabi_dadd+0x394>
 80008d2:	2501      	movs	r5, #1
 80008d4:	2938      	cmp	r1, #56	@ 0x38
 80008d6:	dc14      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80008d8:	000a      	movs	r2, r1
 80008da:	2a1f      	cmp	r2, #31
 80008dc:	dd00      	ble.n	80008e0 <__aeabi_dadd+0x1e8>
 80008de:	e1a2      	b.n	8000c26 <__aeabi_dadd+0x52e>
 80008e0:	2120      	movs	r1, #32
 80008e2:	4653      	mov	r3, sl
 80008e4:	1a89      	subs	r1, r1, r2
 80008e6:	408b      	lsls	r3, r1
 80008e8:	001d      	movs	r5, r3
 80008ea:	4663      	mov	r3, ip
 80008ec:	40d3      	lsrs	r3, r2
 80008ee:	431d      	orrs	r5, r3
 80008f0:	4663      	mov	r3, ip
 80008f2:	408b      	lsls	r3, r1
 80008f4:	0019      	movs	r1, r3
 80008f6:	1e4b      	subs	r3, r1, #1
 80008f8:	4199      	sbcs	r1, r3
 80008fa:	4653      	mov	r3, sl
 80008fc:	40d3      	lsrs	r3, r2
 80008fe:	430d      	orrs	r5, r1
 8000900:	18e4      	adds	r4, r4, r3
 8000902:	182d      	adds	r5, r5, r0
 8000904:	4285      	cmp	r5, r0
 8000906:	4180      	sbcs	r0, r0
 8000908:	4240      	negs	r0, r0
 800090a:	1824      	adds	r4, r4, r0
 800090c:	0223      	lsls	r3, r4, #8
 800090e:	d559      	bpl.n	80009c4 <__aeabi_dadd+0x2cc>
 8000910:	4b5b      	ldr	r3, [pc, #364]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000912:	3701      	adds	r7, #1
 8000914:	429f      	cmp	r7, r3
 8000916:	d051      	beq.n	80009bc <__aeabi_dadd+0x2c4>
 8000918:	2101      	movs	r1, #1
 800091a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a84 <__aeabi_dadd+0x38c>)
 800091c:	086a      	lsrs	r2, r5, #1
 800091e:	401c      	ands	r4, r3
 8000920:	4029      	ands	r1, r5
 8000922:	430a      	orrs	r2, r1
 8000924:	07e5      	lsls	r5, r4, #31
 8000926:	4315      	orrs	r5, r2
 8000928:	0864      	lsrs	r4, r4, #1
 800092a:	e75f      	b.n	80007ec <__aeabi_dadd+0xf4>
 800092c:	4661      	mov	r1, ip
 800092e:	4653      	mov	r3, sl
 8000930:	4319      	orrs	r1, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x23e>
 8000934:	e0bc      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000936:	1e51      	subs	r1, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x246>
 800093c:	e164      	b.n	8000c08 <__aeabi_dadd+0x510>
 800093e:	4d50      	ldr	r5, [pc, #320]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x24e>
 8000944:	e16a      	b.n	8000c1c <__aeabi_dadd+0x524>
 8000946:	2501      	movs	r5, #1
 8000948:	2938      	cmp	r1, #56	@ 0x38
 800094a:	dd00      	ble.n	800094e <__aeabi_dadd+0x256>
 800094c:	e722      	b.n	8000794 <__aeabi_dadd+0x9c>
 800094e:	000a      	movs	r2, r1
 8000950:	e70e      	b.n	8000770 <__aeabi_dadd+0x78>
 8000952:	4a4d      	ldr	r2, [pc, #308]	@ (8000a88 <__aeabi_dadd+0x390>)
 8000954:	1c7d      	adds	r5, r7, #1
 8000956:	4215      	tst	r5, r2
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x264>
 800095a:	e0d0      	b.n	8000afe <__aeabi_dadd+0x406>
 800095c:	0025      	movs	r5, r4
 800095e:	4662      	mov	r2, ip
 8000960:	4653      	mov	r3, sl
 8000962:	4305      	orrs	r5, r0
 8000964:	431a      	orrs	r2, r3
 8000966:	2f00      	cmp	r7, #0
 8000968:	d000      	beq.n	800096c <__aeabi_dadd+0x274>
 800096a:	e137      	b.n	8000bdc <__aeabi_dadd+0x4e4>
 800096c:	2d00      	cmp	r5, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_dadd+0x27a>
 8000970:	e1a8      	b.n	8000cc4 <__aeabi_dadd+0x5cc>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x280>
 8000976:	e16a      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000978:	4663      	mov	r3, ip
 800097a:	1ac5      	subs	r5, r0, r3
 800097c:	4653      	mov	r3, sl
 800097e:	1ae2      	subs	r2, r4, r3
 8000980:	42a8      	cmp	r0, r5
 8000982:	419b      	sbcs	r3, r3
 8000984:	425b      	negs	r3, r3
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	021a      	lsls	r2, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x296>
 800098c:	e203      	b.n	8000d96 <__aeabi_dadd+0x69e>
 800098e:	4663      	mov	r3, ip
 8000990:	1a1d      	subs	r5, r3, r0
 8000992:	45ac      	cmp	ip, r5
 8000994:	4192      	sbcs	r2, r2
 8000996:	4653      	mov	r3, sl
 8000998:	4252      	negs	r2, r2
 800099a:	1b1c      	subs	r4, r3, r4
 800099c:	000e      	movs	r6, r1
 800099e:	4688      	mov	r8, r1
 80009a0:	1aa4      	subs	r4, r4, r2
 80009a2:	e723      	b.n	80007ec <__aeabi_dadd+0xf4>
 80009a4:	4936      	ldr	r1, [pc, #216]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009a6:	428f      	cmp	r7, r1
 80009a8:	d070      	beq.n	8000a8c <__aeabi_dadd+0x394>
 80009aa:	2501      	movs	r5, #1
 80009ac:	2a38      	cmp	r2, #56	@ 0x38
 80009ae:	dca8      	bgt.n	8000902 <__aeabi_dadd+0x20a>
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	4653      	mov	r3, sl
 80009b4:	0409      	lsls	r1, r1, #16
 80009b6:	430b      	orrs	r3, r1
 80009b8:	469a      	mov	sl, r3
 80009ba:	e78e      	b.n	80008da <__aeabi_dadd+0x1e2>
 80009bc:	003c      	movs	r4, r7
 80009be:	2500      	movs	r5, #0
 80009c0:	2200      	movs	r2, #0
 80009c2:	e731      	b.n	8000828 <__aeabi_dadd+0x130>
 80009c4:	2307      	movs	r3, #7
 80009c6:	402b      	ands	r3, r5
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x2d6>
 80009cc:	e710      	b.n	80007f0 <__aeabi_dadd+0xf8>
 80009ce:	e093      	b.n	8000af8 <__aeabi_dadd+0x400>
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d074      	beq.n	8000abe <__aeabi_dadd+0x3c6>
 80009d4:	464a      	mov	r2, r9
 80009d6:	1bd2      	subs	r2, r2, r7
 80009d8:	2f00      	cmp	r7, #0
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x2e6>
 80009dc:	e0c7      	b.n	8000b6e <__aeabi_dadd+0x476>
 80009de:	4928      	ldr	r1, [pc, #160]	@ (8000a80 <__aeabi_dadd+0x388>)
 80009e0:	4589      	cmp	r9, r1
 80009e2:	d100      	bne.n	80009e6 <__aeabi_dadd+0x2ee>
 80009e4:	e185      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 80009e6:	2501      	movs	r5, #1
 80009e8:	2a38      	cmp	r2, #56	@ 0x38
 80009ea:	dc12      	bgt.n	8000a12 <__aeabi_dadd+0x31a>
 80009ec:	2180      	movs	r1, #128	@ 0x80
 80009ee:	0409      	lsls	r1, r1, #16
 80009f0:	430c      	orrs	r4, r1
 80009f2:	2a1f      	cmp	r2, #31
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_dadd+0x300>
 80009f6:	e1ab      	b.n	8000d50 <__aeabi_dadd+0x658>
 80009f8:	2120      	movs	r1, #32
 80009fa:	0025      	movs	r5, r4
 80009fc:	1a89      	subs	r1, r1, r2
 80009fe:	0007      	movs	r7, r0
 8000a00:	4088      	lsls	r0, r1
 8000a02:	408d      	lsls	r5, r1
 8000a04:	40d7      	lsrs	r7, r2
 8000a06:	1e41      	subs	r1, r0, #1
 8000a08:	4188      	sbcs	r0, r1
 8000a0a:	40d4      	lsrs	r4, r2
 8000a0c:	433d      	orrs	r5, r7
 8000a0e:	4305      	orrs	r5, r0
 8000a10:	44a2      	add	sl, r4
 8000a12:	4465      	add	r5, ip
 8000a14:	4565      	cmp	r5, ip
 8000a16:	4192      	sbcs	r2, r2
 8000a18:	4252      	negs	r2, r2
 8000a1a:	4452      	add	r2, sl
 8000a1c:	0014      	movs	r4, r2
 8000a1e:	464f      	mov	r7, r9
 8000a20:	e774      	b.n	800090c <__aeabi_dadd+0x214>
 8000a22:	0028      	movs	r0, r5
 8000a24:	f7ff fd40 	bl	80004a8 <__clzsi2>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	3318      	adds	r3, #24
 8000a2c:	2b1f      	cmp	r3, #31
 8000a2e:	dc00      	bgt.n	8000a32 <__aeabi_dadd+0x33a>
 8000a30:	e6c2      	b.n	80007b8 <__aeabi_dadd+0xc0>
 8000a32:	002a      	movs	r2, r5
 8000a34:	3808      	subs	r0, #8
 8000a36:	4082      	lsls	r2, r0
 8000a38:	429f      	cmp	r7, r3
 8000a3a:	dd00      	ble.n	8000a3e <__aeabi_dadd+0x346>
 8000a3c:	e0a9      	b.n	8000b92 <__aeabi_dadd+0x49a>
 8000a3e:	1bdb      	subs	r3, r3, r7
 8000a40:	1c58      	adds	r0, r3, #1
 8000a42:	281f      	cmp	r0, #31
 8000a44:	dc00      	bgt.n	8000a48 <__aeabi_dadd+0x350>
 8000a46:	e1ac      	b.n	8000da2 <__aeabi_dadd+0x6aa>
 8000a48:	0015      	movs	r5, r2
 8000a4a:	3b1f      	subs	r3, #31
 8000a4c:	40dd      	lsrs	r5, r3
 8000a4e:	2820      	cmp	r0, #32
 8000a50:	d005      	beq.n	8000a5e <__aeabi_dadd+0x366>
 8000a52:	2340      	movs	r3, #64	@ 0x40
 8000a54:	1a1b      	subs	r3, r3, r0
 8000a56:	409a      	lsls	r2, r3
 8000a58:	1e53      	subs	r3, r2, #1
 8000a5a:	419a      	sbcs	r2, r3
 8000a5c:	4315      	orrs	r5, r2
 8000a5e:	2307      	movs	r3, #7
 8000a60:	2700      	movs	r7, #0
 8000a62:	402b      	ands	r3, r5
 8000a64:	e7b0      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000a66:	08ed      	lsrs	r5, r5, #3
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <__aeabi_dadd+0x388>)
 8000a6a:	0762      	lsls	r2, r4, #29
 8000a6c:	432a      	orrs	r2, r5
 8000a6e:	08e4      	lsrs	r4, r4, #3
 8000a70:	429f      	cmp	r7, r3
 8000a72:	d00f      	beq.n	8000a94 <__aeabi_dadd+0x39c>
 8000a74:	0324      	lsls	r4, r4, #12
 8000a76:	0b25      	lsrs	r5, r4, #12
 8000a78:	057c      	lsls	r4, r7, #21
 8000a7a:	0d64      	lsrs	r4, r4, #21
 8000a7c:	e6d4      	b.n	8000828 <__aeabi_dadd+0x130>
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	000007ff 	.word	0x000007ff
 8000a84:	ff7fffff 	.word	0xff7fffff
 8000a88:	000007fe 	.word	0x000007fe
 8000a8c:	08c0      	lsrs	r0, r0, #3
 8000a8e:	0762      	lsls	r2, r4, #29
 8000a90:	4302      	orrs	r2, r0
 8000a92:	08e4      	lsrs	r4, r4, #3
 8000a94:	0013      	movs	r3, r2
 8000a96:	4323      	orrs	r3, r4
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x3a4>
 8000a9a:	e186      	b.n	8000daa <__aeabi_dadd+0x6b2>
 8000a9c:	2580      	movs	r5, #128	@ 0x80
 8000a9e:	032d      	lsls	r5, r5, #12
 8000aa0:	4325      	orrs	r5, r4
 8000aa2:	032d      	lsls	r5, r5, #12
 8000aa4:	4cc3      	ldr	r4, [pc, #780]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000aa6:	0b2d      	lsrs	r5, r5, #12
 8000aa8:	e6be      	b.n	8000828 <__aeabi_dadd+0x130>
 8000aaa:	4660      	mov	r0, ip
 8000aac:	4654      	mov	r4, sl
 8000aae:	000e      	movs	r6, r1
 8000ab0:	0017      	movs	r7, r2
 8000ab2:	08c5      	lsrs	r5, r0, #3
 8000ab4:	e7d8      	b.n	8000a68 <__aeabi_dadd+0x370>
 8000ab6:	4cc0      	ldr	r4, [pc, #768]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000ab8:	1aff      	subs	r7, r7, r3
 8000aba:	4014      	ands	r4, r2
 8000abc:	e696      	b.n	80007ec <__aeabi_dadd+0xf4>
 8000abe:	4abf      	ldr	r2, [pc, #764]	@ (8000dbc <__aeabi_dadd+0x6c4>)
 8000ac0:	1c79      	adds	r1, r7, #1
 8000ac2:	4211      	tst	r1, r2
 8000ac4:	d16b      	bne.n	8000b9e <__aeabi_dadd+0x4a6>
 8000ac6:	0022      	movs	r2, r4
 8000ac8:	4302      	orrs	r2, r0
 8000aca:	2f00      	cmp	r7, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dadd+0x3d8>
 8000ace:	e0db      	b.n	8000c88 <__aeabi_dadd+0x590>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x3de>
 8000ad4:	e12d      	b.n	8000d32 <__aeabi_dadd+0x63a>
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	4653      	mov	r3, sl
 8000ada:	431a      	orrs	r2, r3
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x3e8>
 8000ade:	e0b6      	b.n	8000c4e <__aeabi_dadd+0x556>
 8000ae0:	4663      	mov	r3, ip
 8000ae2:	18c5      	adds	r5, r0, r3
 8000ae4:	4285      	cmp	r5, r0
 8000ae6:	4180      	sbcs	r0, r0
 8000ae8:	4454      	add	r4, sl
 8000aea:	4240      	negs	r0, r0
 8000aec:	1824      	adds	r4, r4, r0
 8000aee:	0223      	lsls	r3, r4, #8
 8000af0:	d502      	bpl.n	8000af8 <__aeabi_dadd+0x400>
 8000af2:	000f      	movs	r7, r1
 8000af4:	4bb0      	ldr	r3, [pc, #704]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000af6:	401c      	ands	r4, r3
 8000af8:	003a      	movs	r2, r7
 8000afa:	0028      	movs	r0, r5
 8000afc:	e7d8      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000afe:	4662      	mov	r2, ip
 8000b00:	1a85      	subs	r5, r0, r2
 8000b02:	42a8      	cmp	r0, r5
 8000b04:	4192      	sbcs	r2, r2
 8000b06:	4653      	mov	r3, sl
 8000b08:	4252      	negs	r2, r2
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	1ae3      	subs	r3, r4, r3
 8000b0e:	001a      	movs	r2, r3
 8000b10:	464b      	mov	r3, r9
 8000b12:	1ad2      	subs	r2, r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	4691      	mov	r9, r2
 8000b18:	021a      	lsls	r2, r3, #8
 8000b1a:	d454      	bmi.n	8000bc6 <__aeabi_dadd+0x4ce>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	464c      	mov	r4, r9
 8000b20:	432a      	orrs	r2, r5
 8000b22:	d000      	beq.n	8000b26 <__aeabi_dadd+0x42e>
 8000b24:	e640      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000b26:	2600      	movs	r6, #0
 8000b28:	2400      	movs	r4, #0
 8000b2a:	2500      	movs	r5, #0
 8000b2c:	e67c      	b.n	8000828 <__aeabi_dadd+0x130>
 8000b2e:	4da1      	ldr	r5, [pc, #644]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b30:	45a9      	cmp	r9, r5
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0x43e>
 8000b34:	e090      	b.n	8000c58 <__aeabi_dadd+0x560>
 8000b36:	2501      	movs	r5, #1
 8000b38:	2a38      	cmp	r2, #56	@ 0x38
 8000b3a:	dd00      	ble.n	8000b3e <__aeabi_dadd+0x446>
 8000b3c:	e6ab      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000b3e:	2580      	movs	r5, #128	@ 0x80
 8000b40:	042d      	lsls	r5, r5, #16
 8000b42:	432c      	orrs	r4, r5
 8000b44:	e695      	b.n	8000872 <__aeabi_dadd+0x17a>
 8000b46:	0011      	movs	r1, r2
 8000b48:	4655      	mov	r5, sl
 8000b4a:	3920      	subs	r1, #32
 8000b4c:	40cd      	lsrs	r5, r1
 8000b4e:	46a9      	mov	r9, r5
 8000b50:	2a20      	cmp	r2, #32
 8000b52:	d006      	beq.n	8000b62 <__aeabi_dadd+0x46a>
 8000b54:	2140      	movs	r1, #64	@ 0x40
 8000b56:	4653      	mov	r3, sl
 8000b58:	1a8a      	subs	r2, r1, r2
 8000b5a:	4093      	lsls	r3, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	4694      	mov	ip, r2
 8000b62:	4665      	mov	r5, ip
 8000b64:	1e6b      	subs	r3, r5, #1
 8000b66:	419d      	sbcs	r5, r3
 8000b68:	464b      	mov	r3, r9
 8000b6a:	431d      	orrs	r5, r3
 8000b6c:	e612      	b.n	8000794 <__aeabi_dadd+0x9c>
 8000b6e:	0021      	movs	r1, r4
 8000b70:	4301      	orrs	r1, r0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x47e>
 8000b74:	e0c4      	b.n	8000d00 <__aeabi_dadd+0x608>
 8000b76:	1e51      	subs	r1, r2, #1
 8000b78:	2a01      	cmp	r2, #1
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x486>
 8000b7c:	e0fb      	b.n	8000d76 <__aeabi_dadd+0x67e>
 8000b7e:	4d8d      	ldr	r5, [pc, #564]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000b80:	42aa      	cmp	r2, r5
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x48e>
 8000b84:	e0b5      	b.n	8000cf2 <__aeabi_dadd+0x5fa>
 8000b86:	2501      	movs	r5, #1
 8000b88:	2938      	cmp	r1, #56	@ 0x38
 8000b8a:	dd00      	ble.n	8000b8e <__aeabi_dadd+0x496>
 8000b8c:	e741      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000b8e:	000a      	movs	r2, r1
 8000b90:	e72f      	b.n	80009f2 <__aeabi_dadd+0x2fa>
 8000b92:	4c89      	ldr	r4, [pc, #548]	@ (8000db8 <__aeabi_dadd+0x6c0>)
 8000b94:	1aff      	subs	r7, r7, r3
 8000b96:	4014      	ands	r4, r2
 8000b98:	0762      	lsls	r2, r4, #29
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	e76a      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000b9e:	4a85      	ldr	r2, [pc, #532]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000ba0:	4291      	cmp	r1, r2
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x4ae>
 8000ba4:	e0e3      	b.n	8000d6e <__aeabi_dadd+0x676>
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	18c2      	adds	r2, r0, r3
 8000baa:	4282      	cmp	r2, r0
 8000bac:	4180      	sbcs	r0, r0
 8000bae:	0023      	movs	r3, r4
 8000bb0:	4240      	negs	r0, r0
 8000bb2:	4453      	add	r3, sl
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	07dd      	lsls	r5, r3, #31
 8000bb8:	085c      	lsrs	r4, r3, #1
 8000bba:	2307      	movs	r3, #7
 8000bbc:	0852      	lsrs	r2, r2, #1
 8000bbe:	4315      	orrs	r5, r2
 8000bc0:	000f      	movs	r7, r1
 8000bc2:	402b      	ands	r3, r5
 8000bc4:	e700      	b.n	80009c8 <__aeabi_dadd+0x2d0>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	1a1d      	subs	r5, r3, r0
 8000bca:	45ac      	cmp	ip, r5
 8000bcc:	4192      	sbcs	r2, r2
 8000bce:	4653      	mov	r3, sl
 8000bd0:	4252      	negs	r2, r2
 8000bd2:	1b1c      	subs	r4, r3, r4
 8000bd4:	000e      	movs	r6, r1
 8000bd6:	4688      	mov	r8, r1
 8000bd8:	1aa4      	subs	r4, r4, r2
 8000bda:	e5e5      	b.n	80007a8 <__aeabi_dadd+0xb0>
 8000bdc:	2d00      	cmp	r5, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_dadd+0x4ea>
 8000be0:	e091      	b.n	8000d06 <__aeabi_dadd+0x60e>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d138      	bne.n	8000c58 <__aeabi_dadd+0x560>
 8000be6:	2480      	movs	r4, #128	@ 0x80
 8000be8:	2600      	movs	r6, #0
 8000bea:	0324      	lsls	r4, r4, #12
 8000bec:	e756      	b.n	8000a9c <__aeabi_dadd+0x3a4>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	18c5      	adds	r5, r0, r3
 8000bf2:	4285      	cmp	r5, r0
 8000bf4:	4180      	sbcs	r0, r0
 8000bf6:	4454      	add	r4, sl
 8000bf8:	4240      	negs	r0, r0
 8000bfa:	1824      	adds	r4, r4, r0
 8000bfc:	2701      	movs	r7, #1
 8000bfe:	0223      	lsls	r3, r4, #8
 8000c00:	d400      	bmi.n	8000c04 <__aeabi_dadd+0x50c>
 8000c02:	e6df      	b.n	80009c4 <__aeabi_dadd+0x2cc>
 8000c04:	2702      	movs	r7, #2
 8000c06:	e687      	b.n	8000918 <__aeabi_dadd+0x220>
 8000c08:	4663      	mov	r3, ip
 8000c0a:	1ac5      	subs	r5, r0, r3
 8000c0c:	42a8      	cmp	r0, r5
 8000c0e:	4180      	sbcs	r0, r0
 8000c10:	4653      	mov	r3, sl
 8000c12:	4240      	negs	r0, r0
 8000c14:	1ae4      	subs	r4, r4, r3
 8000c16:	2701      	movs	r7, #1
 8000c18:	1a24      	subs	r4, r4, r0
 8000c1a:	e5c0      	b.n	800079e <__aeabi_dadd+0xa6>
 8000c1c:	0762      	lsls	r2, r4, #29
 8000c1e:	08c0      	lsrs	r0, r0, #3
 8000c20:	4302      	orrs	r2, r0
 8000c22:	08e4      	lsrs	r4, r4, #3
 8000c24:	e736      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c26:	0011      	movs	r1, r2
 8000c28:	4653      	mov	r3, sl
 8000c2a:	3920      	subs	r1, #32
 8000c2c:	40cb      	lsrs	r3, r1
 8000c2e:	4699      	mov	r9, r3
 8000c30:	2a20      	cmp	r2, #32
 8000c32:	d006      	beq.n	8000c42 <__aeabi_dadd+0x54a>
 8000c34:	2140      	movs	r1, #64	@ 0x40
 8000c36:	4653      	mov	r3, sl
 8000c38:	1a8a      	subs	r2, r1, r2
 8000c3a:	4093      	lsls	r3, r2
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	4694      	mov	ip, r2
 8000c42:	4665      	mov	r5, ip
 8000c44:	1e6b      	subs	r3, r5, #1
 8000c46:	419d      	sbcs	r5, r3
 8000c48:	464b      	mov	r3, r9
 8000c4a:	431d      	orrs	r5, r3
 8000c4c:	e659      	b.n	8000902 <__aeabi_dadd+0x20a>
 8000c4e:	0762      	lsls	r2, r4, #29
 8000c50:	08c0      	lsrs	r0, r0, #3
 8000c52:	4302      	orrs	r2, r0
 8000c54:	08e4      	lsrs	r4, r4, #3
 8000c56:	e70d      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000c58:	4653      	mov	r3, sl
 8000c5a:	075a      	lsls	r2, r3, #29
 8000c5c:	4663      	mov	r3, ip
 8000c5e:	08d8      	lsrs	r0, r3, #3
 8000c60:	4653      	mov	r3, sl
 8000c62:	000e      	movs	r6, r1
 8000c64:	4302      	orrs	r2, r0
 8000c66:	08dc      	lsrs	r4, r3, #3
 8000c68:	e714      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000c6a:	0015      	movs	r5, r2
 8000c6c:	0026      	movs	r6, r4
 8000c6e:	3d20      	subs	r5, #32
 8000c70:	40ee      	lsrs	r6, r5
 8000c72:	2a20      	cmp	r2, #32
 8000c74:	d003      	beq.n	8000c7e <__aeabi_dadd+0x586>
 8000c76:	2540      	movs	r5, #64	@ 0x40
 8000c78:	1aaa      	subs	r2, r5, r2
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	4320      	orrs	r0, r4
 8000c7e:	1e42      	subs	r2, r0, #1
 8000c80:	4190      	sbcs	r0, r2
 8000c82:	0005      	movs	r5, r0
 8000c84:	4335      	orrs	r5, r6
 8000c86:	e606      	b.n	8000896 <__aeabi_dadd+0x19e>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d07c      	beq.n	8000d86 <__aeabi_dadd+0x68e>
 8000c8c:	4662      	mov	r2, ip
 8000c8e:	4653      	mov	r3, sl
 8000c90:	08c0      	lsrs	r0, r0, #3
 8000c92:	431a      	orrs	r2, r3
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x5a0>
 8000c96:	e6fa      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000c98:	0762      	lsls	r2, r4, #29
 8000c9a:	4310      	orrs	r0, r2
 8000c9c:	2280      	movs	r2, #128	@ 0x80
 8000c9e:	08e4      	lsrs	r4, r4, #3
 8000ca0:	0312      	lsls	r2, r2, #12
 8000ca2:	4214      	tst	r4, r2
 8000ca4:	d008      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000ca6:	08d9      	lsrs	r1, r3, #3
 8000ca8:	4211      	tst	r1, r2
 8000caa:	d105      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000cac:	4663      	mov	r3, ip
 8000cae:	08d8      	lsrs	r0, r3, #3
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	000c      	movs	r4, r1
 8000cb4:	075b      	lsls	r3, r3, #29
 8000cb6:	4318      	orrs	r0, r3
 8000cb8:	0f42      	lsrs	r2, r0, #29
 8000cba:	00c0      	lsls	r0, r0, #3
 8000cbc:	08c0      	lsrs	r0, r0, #3
 8000cbe:	0752      	lsls	r2, r2, #29
 8000cc0:	4302      	orrs	r2, r0
 8000cc2:	e6e7      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d100      	bne.n	8000cca <__aeabi_dadd+0x5d2>
 8000cc8:	e72d      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000cca:	4663      	mov	r3, ip
 8000ccc:	08d8      	lsrs	r0, r3, #3
 8000cce:	4653      	mov	r3, sl
 8000cd0:	075a      	lsls	r2, r3, #29
 8000cd2:	000e      	movs	r6, r1
 8000cd4:	4302      	orrs	r2, r0
 8000cd6:	08dc      	lsrs	r4, r3, #3
 8000cd8:	e6cc      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000cda:	4663      	mov	r3, ip
 8000cdc:	1a1d      	subs	r5, r3, r0
 8000cde:	45ac      	cmp	ip, r5
 8000ce0:	4192      	sbcs	r2, r2
 8000ce2:	4653      	mov	r3, sl
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	1b1c      	subs	r4, r3, r4
 8000ce8:	000e      	movs	r6, r1
 8000cea:	4688      	mov	r8, r1
 8000cec:	1aa4      	subs	r4, r4, r2
 8000cee:	3701      	adds	r7, #1
 8000cf0:	e555      	b.n	800079e <__aeabi_dadd+0xa6>
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	08d9      	lsrs	r1, r3, #3
 8000cf6:	4653      	mov	r3, sl
 8000cf8:	075a      	lsls	r2, r3, #29
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	08dc      	lsrs	r4, r3, #3
 8000cfe:	e6c9      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d00:	4660      	mov	r0, ip
 8000d02:	4654      	mov	r4, sl
 8000d04:	e6d4      	b.n	8000ab0 <__aeabi_dadd+0x3b8>
 8000d06:	08c0      	lsrs	r0, r0, #3
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_dadd+0x616>
 8000d0c:	e6bf      	b.n	8000a8e <__aeabi_dadd+0x396>
 8000d0e:	0762      	lsls	r2, r4, #29
 8000d10:	4310      	orrs	r0, r2
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	08e4      	lsrs	r4, r4, #3
 8000d16:	0312      	lsls	r2, r2, #12
 8000d18:	4214      	tst	r4, r2
 8000d1a:	d0cd      	beq.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d1c:	08dd      	lsrs	r5, r3, #3
 8000d1e:	4215      	tst	r5, r2
 8000d20:	d1ca      	bne.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d22:	4663      	mov	r3, ip
 8000d24:	08d8      	lsrs	r0, r3, #3
 8000d26:	4653      	mov	r3, sl
 8000d28:	075b      	lsls	r3, r3, #29
 8000d2a:	000e      	movs	r6, r1
 8000d2c:	002c      	movs	r4, r5
 8000d2e:	4318      	orrs	r0, r3
 8000d30:	e7c2      	b.n	8000cb8 <__aeabi_dadd+0x5c0>
 8000d32:	4663      	mov	r3, ip
 8000d34:	08d9      	lsrs	r1, r3, #3
 8000d36:	4653      	mov	r3, sl
 8000d38:	075a      	lsls	r2, r3, #29
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	08dc      	lsrs	r4, r3, #3
 8000d3e:	e699      	b.n	8000a74 <__aeabi_dadd+0x37c>
 8000d40:	4663      	mov	r3, ip
 8000d42:	08d8      	lsrs	r0, r3, #3
 8000d44:	4653      	mov	r3, sl
 8000d46:	075a      	lsls	r2, r3, #29
 8000d48:	000e      	movs	r6, r1
 8000d4a:	4302      	orrs	r2, r0
 8000d4c:	08dc      	lsrs	r4, r3, #3
 8000d4e:	e6a1      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d50:	0011      	movs	r1, r2
 8000d52:	0027      	movs	r7, r4
 8000d54:	3920      	subs	r1, #32
 8000d56:	40cf      	lsrs	r7, r1
 8000d58:	2a20      	cmp	r2, #32
 8000d5a:	d003      	beq.n	8000d64 <__aeabi_dadd+0x66c>
 8000d5c:	2140      	movs	r1, #64	@ 0x40
 8000d5e:	1a8a      	subs	r2, r1, r2
 8000d60:	4094      	lsls	r4, r2
 8000d62:	4320      	orrs	r0, r4
 8000d64:	1e42      	subs	r2, r0, #1
 8000d66:	4190      	sbcs	r0, r2
 8000d68:	0005      	movs	r5, r0
 8000d6a:	433d      	orrs	r5, r7
 8000d6c:	e651      	b.n	8000a12 <__aeabi_dadd+0x31a>
 8000d6e:	000c      	movs	r4, r1
 8000d70:	2500      	movs	r5, #0
 8000d72:	2200      	movs	r2, #0
 8000d74:	e558      	b.n	8000828 <__aeabi_dadd+0x130>
 8000d76:	4460      	add	r0, ip
 8000d78:	4560      	cmp	r0, ip
 8000d7a:	4192      	sbcs	r2, r2
 8000d7c:	4454      	add	r4, sl
 8000d7e:	4252      	negs	r2, r2
 8000d80:	0005      	movs	r5, r0
 8000d82:	18a4      	adds	r4, r4, r2
 8000d84:	e73a      	b.n	8000bfc <__aeabi_dadd+0x504>
 8000d86:	4653      	mov	r3, sl
 8000d88:	075a      	lsls	r2, r3, #29
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	08d9      	lsrs	r1, r3, #3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	430a      	orrs	r2, r1
 8000d92:	08dc      	lsrs	r4, r3, #3
 8000d94:	e67e      	b.n	8000a94 <__aeabi_dadd+0x39c>
 8000d96:	001a      	movs	r2, r3
 8000d98:	001c      	movs	r4, r3
 8000d9a:	432a      	orrs	r2, r5
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_dadd+0x6a8>
 8000d9e:	e6ab      	b.n	8000af8 <__aeabi_dadd+0x400>
 8000da0:	e6c1      	b.n	8000b26 <__aeabi_dadd+0x42e>
 8000da2:	2120      	movs	r1, #32
 8000da4:	2500      	movs	r5, #0
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	e519      	b.n	80007de <__aeabi_dadd+0xe6>
 8000daa:	2200      	movs	r2, #0
 8000dac:	2500      	movs	r5, #0
 8000dae:	4c01      	ldr	r4, [pc, #4]	@ (8000db4 <__aeabi_dadd+0x6bc>)
 8000db0:	e53a      	b.n	8000828 <__aeabi_dadd+0x130>
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	000007ff 	.word	0x000007ff
 8000db8:	ff7fffff 	.word	0xff7fffff
 8000dbc:	000007fe 	.word	0x000007fe

08000dc0 <__aeabi_ddiv>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	46de      	mov	lr, fp
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	4657      	mov	r7, sl
 8000dc8:	464e      	mov	r6, r9
 8000dca:	b5e0      	push	{r5, r6, r7, lr}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	030b      	lsls	r3, r1, #12
 8000dd4:	0b1b      	lsrs	r3, r3, #12
 8000dd6:	469b      	mov	fp, r3
 8000dd8:	0fca      	lsrs	r2, r1, #31
 8000dda:	004b      	lsls	r3, r1, #1
 8000ddc:	0004      	movs	r4, r0
 8000dde:	4680      	mov	r8, r0
 8000de0:	0d5b      	lsrs	r3, r3, #21
 8000de2:	9202      	str	r2, [sp, #8]
 8000de4:	d100      	bne.n	8000de8 <__aeabi_ddiv+0x28>
 8000de6:	e16a      	b.n	80010be <__aeabi_ddiv+0x2fe>
 8000de8:	4ad4      	ldr	r2, [pc, #848]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x30>
 8000dee:	e18c      	b.n	800110a <__aeabi_ddiv+0x34a>
 8000df0:	4659      	mov	r1, fp
 8000df2:	0f42      	lsrs	r2, r0, #29
 8000df4:	00c9      	lsls	r1, r1, #3
 8000df6:	430a      	orrs	r2, r1
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	4311      	orrs	r1, r2
 8000dfe:	00c2      	lsls	r2, r0, #3
 8000e00:	4690      	mov	r8, r2
 8000e02:	4acf      	ldr	r2, [pc, #828]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e04:	4689      	mov	r9, r1
 8000e06:	4692      	mov	sl, r2
 8000e08:	449a      	add	sl, r3
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9e00      	ldr	r6, [sp, #0]
 8000e12:	9f01      	ldr	r7, [sp, #4]
 8000e14:	033b      	lsls	r3, r7, #12
 8000e16:	0b1b      	lsrs	r3, r3, #12
 8000e18:	469b      	mov	fp, r3
 8000e1a:	007b      	lsls	r3, r7, #1
 8000e1c:	0030      	movs	r0, r6
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	0ffd      	lsrs	r5, r7, #31
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x68>
 8000e26:	e128      	b.n	800107a <__aeabi_ddiv+0x2ba>
 8000e28:	4ac4      	ldr	r2, [pc, #784]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x70>
 8000e2e:	e177      	b.n	8001120 <__aeabi_ddiv+0x360>
 8000e30:	4659      	mov	r1, fp
 8000e32:	0f72      	lsrs	r2, r6, #29
 8000e34:	00c9      	lsls	r1, r1, #3
 8000e36:	430a      	orrs	r2, r1
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	0409      	lsls	r1, r1, #16
 8000e3c:	4311      	orrs	r1, r2
 8000e3e:	468b      	mov	fp, r1
 8000e40:	49bf      	ldr	r1, [pc, #764]	@ (8001140 <__aeabi_ddiv+0x380>)
 8000e42:	00f2      	lsls	r2, r6, #3
 8000e44:	468c      	mov	ip, r1
 8000e46:	4651      	mov	r1, sl
 8000e48:	4463      	add	r3, ip
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9e02      	ldr	r6, [sp, #8]
 8000e52:	406e      	eors	r6, r5
 8000e54:	2c0f      	cmp	r4, #15
 8000e56:	d827      	bhi.n	8000ea8 <__aeabi_ddiv+0xe8>
 8000e58:	49ba      	ldr	r1, [pc, #744]	@ (8001144 <__aeabi_ddiv+0x384>)
 8000e5a:	00a4      	lsls	r4, r4, #2
 8000e5c:	5909      	ldr	r1, [r1, r4]
 8000e5e:	468f      	mov	pc, r1
 8000e60:	46cb      	mov	fp, r9
 8000e62:	4642      	mov	r2, r8
 8000e64:	9e02      	ldr	r6, [sp, #8]
 8000e66:	9b03      	ldr	r3, [sp, #12]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d016      	beq.n	8000e9a <__aeabi_ddiv+0xda>
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0xb2>
 8000e70:	e2a6      	b.n	80013c0 <__aeabi_ddiv+0x600>
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_ddiv+0xb8>
 8000e76:	e0df      	b.n	8001038 <__aeabi_ddiv+0x278>
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	2400      	movs	r4, #0
 8000e7e:	4690      	mov	r8, r2
 8000e80:	051b      	lsls	r3, r3, #20
 8000e82:	4323      	orrs	r3, r4
 8000e84:	07f6      	lsls	r6, r6, #31
 8000e86:	4333      	orrs	r3, r6
 8000e88:	4640      	mov	r0, r8
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	b007      	add	sp, #28
 8000e8e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e90:	46bb      	mov	fp, r7
 8000e92:	46b2      	mov	sl, r6
 8000e94:	46a9      	mov	r9, r5
 8000e96:	46a0      	mov	r8, r4
 8000e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	4690      	mov	r8, r2
 8000ea0:	4ba6      	ldr	r3, [pc, #664]	@ (800113c <__aeabi_ddiv+0x37c>)
 8000ea2:	e7ed      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8000ea4:	002e      	movs	r6, r5
 8000ea6:	e7df      	b.n	8000e68 <__aeabi_ddiv+0xa8>
 8000ea8:	45cb      	cmp	fp, r9
 8000eaa:	d200      	bcs.n	8000eae <__aeabi_ddiv+0xee>
 8000eac:	e1d4      	b.n	8001258 <__aeabi_ddiv+0x498>
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_ddiv+0xf2>
 8000eb0:	e1cf      	b.n	8001252 <__aeabi_ddiv+0x492>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	4644      	mov	r4, r8
 8000eba:	4648      	mov	r0, r9
 8000ebc:	2700      	movs	r7, #0
 8000ebe:	44e2      	add	sl, ip
 8000ec0:	465b      	mov	r3, fp
 8000ec2:	0e15      	lsrs	r5, r2, #24
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	431d      	orrs	r5, r3
 8000ec8:	0c19      	lsrs	r1, r3, #16
 8000eca:	042b      	lsls	r3, r5, #16
 8000ecc:	0212      	lsls	r2, r2, #8
 8000ece:	9500      	str	r5, [sp, #0]
 8000ed0:	0c1d      	lsrs	r5, r3, #16
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	9102      	str	r1, [sp, #8]
 8000ed6:	9503      	str	r5, [sp, #12]
 8000ed8:	f7ff f9b8 	bl	800024c <__aeabi_uidivmod>
 8000edc:	0002      	movs	r2, r0
 8000ede:	436a      	muls	r2, r5
 8000ee0:	040b      	lsls	r3, r1, #16
 8000ee2:	0c21      	lsrs	r1, r4, #16
 8000ee4:	4680      	mov	r8, r0
 8000ee6:	4319      	orrs	r1, r3
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d909      	bls.n	8000f00 <__aeabi_ddiv+0x140>
 8000eec:	9d00      	ldr	r5, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	46ac      	mov	ip, r5
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	4461      	add	r1, ip
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	44e0      	add	r8, ip
 8000efa:	428d      	cmp	r5, r1
 8000efc:	d800      	bhi.n	8000f00 <__aeabi_ddiv+0x140>
 8000efe:	e1fb      	b.n	80012f8 <__aeabi_ddiv+0x538>
 8000f00:	1a88      	subs	r0, r1, r2
 8000f02:	9902      	ldr	r1, [sp, #8]
 8000f04:	f7ff f9a2 	bl	800024c <__aeabi_uidivmod>
 8000f08:	9a03      	ldr	r2, [sp, #12]
 8000f0a:	0424      	lsls	r4, r4, #16
 8000f0c:	4342      	muls	r2, r0
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	0c24      	lsrs	r4, r4, #16
 8000f12:	0003      	movs	r3, r0
 8000f14:	430c      	orrs	r4, r1
 8000f16:	42a2      	cmp	r2, r4
 8000f18:	d906      	bls.n	8000f28 <__aeabi_ddiv+0x168>
 8000f1a:	9900      	ldr	r1, [sp, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	468c      	mov	ip, r1
 8000f20:	4464      	add	r4, ip
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	d800      	bhi.n	8000f28 <__aeabi_ddiv+0x168>
 8000f26:	e1e1      	b.n	80012ec <__aeabi_ddiv+0x52c>
 8000f28:	1aa0      	subs	r0, r4, r2
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	0412      	lsls	r2, r2, #16
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	4693      	mov	fp, r2
 8000f32:	464b      	mov	r3, r9
 8000f34:	4659      	mov	r1, fp
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	001d      	movs	r5, r3
 8000f3a:	9304      	str	r3, [sp, #16]
 8000f3c:	040b      	lsls	r3, r1, #16
 8000f3e:	4649      	mov	r1, r9
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	0c09      	lsrs	r1, r1, #16
 8000f44:	000c      	movs	r4, r1
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	435c      	muls	r4, r3
 8000f4a:	0c12      	lsrs	r2, r2, #16
 8000f4c:	436b      	muls	r3, r5
 8000f4e:	4688      	mov	r8, r1
 8000f50:	4351      	muls	r1, r2
 8000f52:	436a      	muls	r2, r5
 8000f54:	0c25      	lsrs	r5, r4, #16
 8000f56:	46ac      	mov	ip, r5
 8000f58:	185b      	adds	r3, r3, r1
 8000f5a:	4463      	add	r3, ip
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d903      	bls.n	8000f68 <__aeabi_ddiv+0x1a8>
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	0249      	lsls	r1, r1, #9
 8000f64:	468c      	mov	ip, r1
 8000f66:	4462      	add	r2, ip
 8000f68:	0c19      	lsrs	r1, r3, #16
 8000f6a:	0424      	lsls	r4, r4, #16
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	0c24      	lsrs	r4, r4, #16
 8000f70:	188a      	adds	r2, r1, r2
 8000f72:	191c      	adds	r4, r3, r4
 8000f74:	4290      	cmp	r0, r2
 8000f76:	d302      	bcc.n	8000f7e <__aeabi_ddiv+0x1be>
 8000f78:	d116      	bne.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7a:	42a7      	cmp	r7, r4
 8000f7c:	d214      	bcs.n	8000fa8 <__aeabi_ddiv+0x1e8>
 8000f7e:	465b      	mov	r3, fp
 8000f80:	9d00      	ldr	r5, [sp, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	444f      	add	r7, r9
 8000f86:	9305      	str	r3, [sp, #20]
 8000f88:	454f      	cmp	r7, r9
 8000f8a:	419b      	sbcs	r3, r3
 8000f8c:	46ac      	mov	ip, r5
 8000f8e:	425b      	negs	r3, r3
 8000f90:	4463      	add	r3, ip
 8000f92:	18c0      	adds	r0, r0, r3
 8000f94:	4285      	cmp	r5, r0
 8000f96:	d300      	bcc.n	8000f9a <__aeabi_ddiv+0x1da>
 8000f98:	e1a1      	b.n	80012de <__aeabi_ddiv+0x51e>
 8000f9a:	4282      	cmp	r2, r0
 8000f9c:	d900      	bls.n	8000fa0 <__aeabi_ddiv+0x1e0>
 8000f9e:	e1f6      	b.n	800138e <__aeabi_ddiv+0x5ce>
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x1e4>
 8000fa2:	e1f1      	b.n	8001388 <__aeabi_ddiv+0x5c8>
 8000fa4:	9b05      	ldr	r3, [sp, #20]
 8000fa6:	469b      	mov	fp, r3
 8000fa8:	1b3c      	subs	r4, r7, r4
 8000faa:	42a7      	cmp	r7, r4
 8000fac:	41bf      	sbcs	r7, r7
 8000fae:	9d00      	ldr	r5, [sp, #0]
 8000fb0:	1a80      	subs	r0, r0, r2
 8000fb2:	427f      	negs	r7, r7
 8000fb4:	1bc0      	subs	r0, r0, r7
 8000fb6:	4285      	cmp	r5, r0
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_ddiv+0x1fc>
 8000fba:	e1d0      	b.n	800135e <__aeabi_ddiv+0x59e>
 8000fbc:	9902      	ldr	r1, [sp, #8]
 8000fbe:	f7ff f945 	bl	800024c <__aeabi_uidivmod>
 8000fc2:	9a03      	ldr	r2, [sp, #12]
 8000fc4:	040b      	lsls	r3, r1, #16
 8000fc6:	4342      	muls	r2, r0
 8000fc8:	0c21      	lsrs	r1, r4, #16
 8000fca:	0007      	movs	r7, r0
 8000fcc:	4319      	orrs	r1, r3
 8000fce:	428a      	cmp	r2, r1
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x214>
 8000fd2:	e178      	b.n	80012c6 <__aeabi_ddiv+0x506>
 8000fd4:	1a88      	subs	r0, r1, r2
 8000fd6:	9902      	ldr	r1, [sp, #8]
 8000fd8:	f7ff f938 	bl	800024c <__aeabi_uidivmod>
 8000fdc:	9a03      	ldr	r2, [sp, #12]
 8000fde:	0424      	lsls	r4, r4, #16
 8000fe0:	4342      	muls	r2, r0
 8000fe2:	0409      	lsls	r1, r1, #16
 8000fe4:	0c24      	lsrs	r4, r4, #16
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	430c      	orrs	r4, r1
 8000fea:	42a2      	cmp	r2, r4
 8000fec:	d900      	bls.n	8000ff0 <__aeabi_ddiv+0x230>
 8000fee:	e15d      	b.n	80012ac <__aeabi_ddiv+0x4ec>
 8000ff0:	4641      	mov	r1, r8
 8000ff2:	1aa4      	subs	r4, r4, r2
 8000ff4:	043a      	lsls	r2, r7, #16
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	9d04      	ldr	r5, [sp, #16]
 8000ffa:	0413      	lsls	r3, r2, #16
 8000ffc:	0c1b      	lsrs	r3, r3, #16
 8000ffe:	4359      	muls	r1, r3
 8001000:	4647      	mov	r7, r8
 8001002:	436b      	muls	r3, r5
 8001004:	469c      	mov	ip, r3
 8001006:	0c10      	lsrs	r0, r2, #16
 8001008:	4347      	muls	r7, r0
 800100a:	0c0b      	lsrs	r3, r1, #16
 800100c:	44bc      	add	ip, r7
 800100e:	4463      	add	r3, ip
 8001010:	4368      	muls	r0, r5
 8001012:	429f      	cmp	r7, r3
 8001014:	d903      	bls.n	800101e <__aeabi_ddiv+0x25e>
 8001016:	2580      	movs	r5, #128	@ 0x80
 8001018:	026d      	lsls	r5, r5, #9
 800101a:	46ac      	mov	ip, r5
 800101c:	4460      	add	r0, ip
 800101e:	0c1f      	lsrs	r7, r3, #16
 8001020:	0409      	lsls	r1, r1, #16
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	0c09      	lsrs	r1, r1, #16
 8001026:	183f      	adds	r7, r7, r0
 8001028:	185b      	adds	r3, r3, r1
 800102a:	42bc      	cmp	r4, r7
 800102c:	d200      	bcs.n	8001030 <__aeabi_ddiv+0x270>
 800102e:	e102      	b.n	8001236 <__aeabi_ddiv+0x476>
 8001030:	d100      	bne.n	8001034 <__aeabi_ddiv+0x274>
 8001032:	e0fd      	b.n	8001230 <__aeabi_ddiv+0x470>
 8001034:	2301      	movs	r3, #1
 8001036:	431a      	orrs	r2, r3
 8001038:	4b43      	ldr	r3, [pc, #268]	@ (8001148 <__aeabi_ddiv+0x388>)
 800103a:	4453      	add	r3, sl
 800103c:	2b00      	cmp	r3, #0
 800103e:	dc00      	bgt.n	8001042 <__aeabi_ddiv+0x282>
 8001040:	e0ae      	b.n	80011a0 <__aeabi_ddiv+0x3e0>
 8001042:	0751      	lsls	r1, r2, #29
 8001044:	d000      	beq.n	8001048 <__aeabi_ddiv+0x288>
 8001046:	e198      	b.n	800137a <__aeabi_ddiv+0x5ba>
 8001048:	4659      	mov	r1, fp
 800104a:	01c9      	lsls	r1, r1, #7
 800104c:	d506      	bpl.n	800105c <__aeabi_ddiv+0x29c>
 800104e:	4659      	mov	r1, fp
 8001050:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <__aeabi_ddiv+0x38c>)
 8001052:	4019      	ands	r1, r3
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	468b      	mov	fp, r1
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4453      	add	r3, sl
 800105c:	493c      	ldr	r1, [pc, #240]	@ (8001150 <__aeabi_ddiv+0x390>)
 800105e:	428b      	cmp	r3, r1
 8001060:	dd00      	ble.n	8001064 <__aeabi_ddiv+0x2a4>
 8001062:	e71a      	b.n	8000e9a <__aeabi_ddiv+0xda>
 8001064:	4659      	mov	r1, fp
 8001066:	08d2      	lsrs	r2, r2, #3
 8001068:	0749      	lsls	r1, r1, #29
 800106a:	4311      	orrs	r1, r2
 800106c:	465a      	mov	r2, fp
 800106e:	055b      	lsls	r3, r3, #21
 8001070:	0254      	lsls	r4, r2, #9
 8001072:	4688      	mov	r8, r1
 8001074:	0b24      	lsrs	r4, r4, #12
 8001076:	0d5b      	lsrs	r3, r3, #21
 8001078:	e702      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800107a:	465a      	mov	r2, fp
 800107c:	9b00      	ldr	r3, [sp, #0]
 800107e:	431a      	orrs	r2, r3
 8001080:	d100      	bne.n	8001084 <__aeabi_ddiv+0x2c4>
 8001082:	e07e      	b.n	8001182 <__aeabi_ddiv+0x3c2>
 8001084:	465b      	mov	r3, fp
 8001086:	2b00      	cmp	r3, #0
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x2cc>
 800108a:	e100      	b.n	800128e <__aeabi_ddiv+0x4ce>
 800108c:	4658      	mov	r0, fp
 800108e:	f7ff fa0b 	bl	80004a8 <__clzsi2>
 8001092:	0002      	movs	r2, r0
 8001094:	0003      	movs	r3, r0
 8001096:	3a0b      	subs	r2, #11
 8001098:	271d      	movs	r7, #29
 800109a:	9e00      	ldr	r6, [sp, #0]
 800109c:	1aba      	subs	r2, r7, r2
 800109e:	0019      	movs	r1, r3
 80010a0:	4658      	mov	r0, fp
 80010a2:	40d6      	lsrs	r6, r2
 80010a4:	3908      	subs	r1, #8
 80010a6:	4088      	lsls	r0, r1
 80010a8:	0032      	movs	r2, r6
 80010aa:	4302      	orrs	r2, r0
 80010ac:	4693      	mov	fp, r2
 80010ae:	9a00      	ldr	r2, [sp, #0]
 80010b0:	408a      	lsls	r2, r1
 80010b2:	4928      	ldr	r1, [pc, #160]	@ (8001154 <__aeabi_ddiv+0x394>)
 80010b4:	4453      	add	r3, sl
 80010b6:	468a      	mov	sl, r1
 80010b8:	449a      	add	sl, r3
 80010ba:	2300      	movs	r3, #0
 80010bc:	e6c8      	b.n	8000e50 <__aeabi_ddiv+0x90>
 80010be:	465b      	mov	r3, fp
 80010c0:	4303      	orrs	r3, r0
 80010c2:	4699      	mov	r9, r3
 80010c4:	d056      	beq.n	8001174 <__aeabi_ddiv+0x3b4>
 80010c6:	465b      	mov	r3, fp
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_ddiv+0x30e>
 80010cc:	e0cd      	b.n	800126a <__aeabi_ddiv+0x4aa>
 80010ce:	4658      	mov	r0, fp
 80010d0:	f7ff f9ea 	bl	80004a8 <__clzsi2>
 80010d4:	230b      	movs	r3, #11
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	0002      	movs	r2, r0
 80010dc:	4484      	add	ip, r0
 80010de:	4666      	mov	r6, ip
 80010e0:	231d      	movs	r3, #29
 80010e2:	1b9b      	subs	r3, r3, r6
 80010e4:	0026      	movs	r6, r4
 80010e6:	0011      	movs	r1, r2
 80010e8:	4658      	mov	r0, fp
 80010ea:	40de      	lsrs	r6, r3
 80010ec:	3908      	subs	r1, #8
 80010ee:	4088      	lsls	r0, r1
 80010f0:	0033      	movs	r3, r6
 80010f2:	4303      	orrs	r3, r0
 80010f4:	4699      	mov	r9, r3
 80010f6:	0023      	movs	r3, r4
 80010f8:	408b      	lsls	r3, r1
 80010fa:	4698      	mov	r8, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <__aeabi_ddiv+0x398>)
 80010fe:	2400      	movs	r4, #0
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	469a      	mov	sl, r3
 8001104:	2300      	movs	r3, #0
 8001106:	9303      	str	r3, [sp, #12]
 8001108:	e682      	b.n	8000e10 <__aeabi_ddiv+0x50>
 800110a:	465a      	mov	r2, fp
 800110c:	4302      	orrs	r2, r0
 800110e:	4691      	mov	r9, r2
 8001110:	d12a      	bne.n	8001168 <__aeabi_ddiv+0x3a8>
 8001112:	2200      	movs	r2, #0
 8001114:	469a      	mov	sl, r3
 8001116:	2302      	movs	r3, #2
 8001118:	4690      	mov	r8, r2
 800111a:	2408      	movs	r4, #8
 800111c:	9303      	str	r3, [sp, #12]
 800111e:	e677      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001120:	465a      	mov	r2, fp
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	431a      	orrs	r2, r3
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <__aeabi_ddiv+0x39c>)
 8001128:	469c      	mov	ip, r3
 800112a:	44e2      	add	sl, ip
 800112c:	2a00      	cmp	r2, #0
 800112e:	d117      	bne.n	8001160 <__aeabi_ddiv+0x3a0>
 8001130:	2302      	movs	r3, #2
 8001132:	431c      	orrs	r4, r3
 8001134:	2300      	movs	r3, #0
 8001136:	469b      	mov	fp, r3
 8001138:	3302      	adds	r3, #2
 800113a:	e689      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800113c:	000007ff 	.word	0x000007ff
 8001140:	fffffc01 	.word	0xfffffc01
 8001144:	0800fe68 	.word	0x0800fe68
 8001148:	000003ff 	.word	0x000003ff
 800114c:	feffffff 	.word	0xfeffffff
 8001150:	000007fe 	.word	0x000007fe
 8001154:	000003f3 	.word	0x000003f3
 8001158:	fffffc0d 	.word	0xfffffc0d
 800115c:	fffff801 	.word	0xfffff801
 8001160:	2303      	movs	r3, #3
 8001162:	0032      	movs	r2, r6
 8001164:	431c      	orrs	r4, r3
 8001166:	e673      	b.n	8000e50 <__aeabi_ddiv+0x90>
 8001168:	469a      	mov	sl, r3
 800116a:	2303      	movs	r3, #3
 800116c:	46d9      	mov	r9, fp
 800116e:	240c      	movs	r4, #12
 8001170:	9303      	str	r3, [sp, #12]
 8001172:	e64d      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001174:	2300      	movs	r3, #0
 8001176:	4698      	mov	r8, r3
 8001178:	469a      	mov	sl, r3
 800117a:	3301      	adds	r3, #1
 800117c:	2404      	movs	r4, #4
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	e646      	b.n	8000e10 <__aeabi_ddiv+0x50>
 8001182:	2301      	movs	r3, #1
 8001184:	431c      	orrs	r4, r3
 8001186:	2300      	movs	r3, #0
 8001188:	469b      	mov	fp, r3
 800118a:	3301      	adds	r3, #1
 800118c:	e660      	b.n	8000e50 <__aeabi_ddiv+0x90>
 800118e:	2300      	movs	r3, #0
 8001190:	2480      	movs	r4, #128	@ 0x80
 8001192:	4698      	mov	r8, r3
 8001194:	2600      	movs	r6, #0
 8001196:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <__aeabi_ddiv+0x620>)
 8001198:	0324      	lsls	r4, r4, #12
 800119a:	e671      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800119c:	2201      	movs	r2, #1
 800119e:	4252      	negs	r2, r2
 80011a0:	2101      	movs	r1, #1
 80011a2:	1ac9      	subs	r1, r1, r3
 80011a4:	2938      	cmp	r1, #56	@ 0x38
 80011a6:	dd00      	ble.n	80011aa <__aeabi_ddiv+0x3ea>
 80011a8:	e666      	b.n	8000e78 <__aeabi_ddiv+0xb8>
 80011aa:	291f      	cmp	r1, #31
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_ddiv+0x3f0>
 80011ae:	e0ab      	b.n	8001308 <__aeabi_ddiv+0x548>
 80011b0:	201f      	movs	r0, #31
 80011b2:	4240      	negs	r0, r0
 80011b4:	1ac3      	subs	r3, r0, r3
 80011b6:	4658      	mov	r0, fp
 80011b8:	40d8      	lsrs	r0, r3
 80011ba:	0003      	movs	r3, r0
 80011bc:	2920      	cmp	r1, #32
 80011be:	d004      	beq.n	80011ca <__aeabi_ddiv+0x40a>
 80011c0:	4658      	mov	r0, fp
 80011c2:	4988      	ldr	r1, [pc, #544]	@ (80013e4 <__aeabi_ddiv+0x624>)
 80011c4:	4451      	add	r1, sl
 80011c6:	4088      	lsls	r0, r1
 80011c8:	4302      	orrs	r2, r0
 80011ca:	1e51      	subs	r1, r2, #1
 80011cc:	418a      	sbcs	r2, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	2307      	movs	r3, #7
 80011d2:	0019      	movs	r1, r3
 80011d4:	2400      	movs	r4, #0
 80011d6:	4011      	ands	r1, r2
 80011d8:	4213      	tst	r3, r2
 80011da:	d00c      	beq.n	80011f6 <__aeabi_ddiv+0x436>
 80011dc:	230f      	movs	r3, #15
 80011de:	4013      	ands	r3, r2
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x426>
 80011e4:	e0f9      	b.n	80013da <__aeabi_ddiv+0x61a>
 80011e6:	1d11      	adds	r1, r2, #4
 80011e8:	4291      	cmp	r1, r2
 80011ea:	419b      	sbcs	r3, r3
 80011ec:	000a      	movs	r2, r1
 80011ee:	425b      	negs	r3, r3
 80011f0:	0759      	lsls	r1, r3, #29
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	0b1c      	lsrs	r4, r3, #12
 80011f6:	08d2      	lsrs	r2, r2, #3
 80011f8:	430a      	orrs	r2, r1
 80011fa:	4690      	mov	r8, r2
 80011fc:	2300      	movs	r3, #0
 80011fe:	e63f      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001200:	2480      	movs	r4, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	0324      	lsls	r4, r4, #12
 8001206:	4223      	tst	r3, r4
 8001208:	d009      	beq.n	800121e <__aeabi_ddiv+0x45e>
 800120a:	465b      	mov	r3, fp
 800120c:	4223      	tst	r3, r4
 800120e:	d106      	bne.n	800121e <__aeabi_ddiv+0x45e>
 8001210:	431c      	orrs	r4, r3
 8001212:	0324      	lsls	r4, r4, #12
 8001214:	002e      	movs	r6, r5
 8001216:	4690      	mov	r8, r2
 8001218:	4b71      	ldr	r3, [pc, #452]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800121a:	0b24      	lsrs	r4, r4, #12
 800121c:	e630      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800121e:	2480      	movs	r4, #128	@ 0x80
 8001220:	464b      	mov	r3, r9
 8001222:	0324      	lsls	r4, r4, #12
 8001224:	431c      	orrs	r4, r3
 8001226:	0324      	lsls	r4, r4, #12
 8001228:	9e02      	ldr	r6, [sp, #8]
 800122a:	4b6d      	ldr	r3, [pc, #436]	@ (80013e0 <__aeabi_ddiv+0x620>)
 800122c:	0b24      	lsrs	r4, r4, #12
 800122e:	e627      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x476>
 8001234:	e700      	b.n	8001038 <__aeabi_ddiv+0x278>
 8001236:	9800      	ldr	r0, [sp, #0]
 8001238:	1e51      	subs	r1, r2, #1
 800123a:	4684      	mov	ip, r0
 800123c:	4464      	add	r4, ip
 800123e:	4284      	cmp	r4, r0
 8001240:	d200      	bcs.n	8001244 <__aeabi_ddiv+0x484>
 8001242:	e084      	b.n	800134e <__aeabi_ddiv+0x58e>
 8001244:	42bc      	cmp	r4, r7
 8001246:	d200      	bcs.n	800124a <__aeabi_ddiv+0x48a>
 8001248:	e0ae      	b.n	80013a8 <__aeabi_ddiv+0x5e8>
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0x48e>
 800124c:	e0c1      	b.n	80013d2 <__aeabi_ddiv+0x612>
 800124e:	000a      	movs	r2, r1
 8001250:	e6f0      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001252:	4542      	cmp	r2, r8
 8001254:	d900      	bls.n	8001258 <__aeabi_ddiv+0x498>
 8001256:	e62c      	b.n	8000eb2 <__aeabi_ddiv+0xf2>
 8001258:	464b      	mov	r3, r9
 800125a:	07dc      	lsls	r4, r3, #31
 800125c:	0858      	lsrs	r0, r3, #1
 800125e:	4643      	mov	r3, r8
 8001260:	085b      	lsrs	r3, r3, #1
 8001262:	431c      	orrs	r4, r3
 8001264:	4643      	mov	r3, r8
 8001266:	07df      	lsls	r7, r3, #31
 8001268:	e62a      	b.n	8000ec0 <__aeabi_ddiv+0x100>
 800126a:	f7ff f91d 	bl	80004a8 <__clzsi2>
 800126e:	2315      	movs	r3, #21
 8001270:	469c      	mov	ip, r3
 8001272:	4484      	add	ip, r0
 8001274:	0002      	movs	r2, r0
 8001276:	4663      	mov	r3, ip
 8001278:	3220      	adds	r2, #32
 800127a:	2b1c      	cmp	r3, #28
 800127c:	dc00      	bgt.n	8001280 <__aeabi_ddiv+0x4c0>
 800127e:	e72e      	b.n	80010de <__aeabi_ddiv+0x31e>
 8001280:	0023      	movs	r3, r4
 8001282:	3808      	subs	r0, #8
 8001284:	4083      	lsls	r3, r0
 8001286:	4699      	mov	r9, r3
 8001288:	2300      	movs	r3, #0
 800128a:	4698      	mov	r8, r3
 800128c:	e736      	b.n	80010fc <__aeabi_ddiv+0x33c>
 800128e:	f7ff f90b 	bl	80004a8 <__clzsi2>
 8001292:	0002      	movs	r2, r0
 8001294:	0003      	movs	r3, r0
 8001296:	3215      	adds	r2, #21
 8001298:	3320      	adds	r3, #32
 800129a:	2a1c      	cmp	r2, #28
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_ddiv+0x4e0>
 800129e:	e6fb      	b.n	8001098 <__aeabi_ddiv+0x2d8>
 80012a0:	9900      	ldr	r1, [sp, #0]
 80012a2:	3808      	subs	r0, #8
 80012a4:	4081      	lsls	r1, r0
 80012a6:	2200      	movs	r2, #0
 80012a8:	468b      	mov	fp, r1
 80012aa:	e702      	b.n	80010b2 <__aeabi_ddiv+0x2f2>
 80012ac:	9900      	ldr	r1, [sp, #0]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	468c      	mov	ip, r1
 80012b2:	4464      	add	r4, ip
 80012b4:	42a1      	cmp	r1, r4
 80012b6:	d900      	bls.n	80012ba <__aeabi_ddiv+0x4fa>
 80012b8:	e69a      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012ba:	42a2      	cmp	r2, r4
 80012bc:	d800      	bhi.n	80012c0 <__aeabi_ddiv+0x500>
 80012be:	e697      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c0:	1e83      	subs	r3, r0, #2
 80012c2:	4464      	add	r4, ip
 80012c4:	e694      	b.n	8000ff0 <__aeabi_ddiv+0x230>
 80012c6:	46ac      	mov	ip, r5
 80012c8:	4461      	add	r1, ip
 80012ca:	3f01      	subs	r7, #1
 80012cc:	428d      	cmp	r5, r1
 80012ce:	d900      	bls.n	80012d2 <__aeabi_ddiv+0x512>
 80012d0:	e680      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x518>
 80012d6:	e67d      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012d8:	1e87      	subs	r7, r0, #2
 80012da:	4461      	add	r1, ip
 80012dc:	e67a      	b.n	8000fd4 <__aeabi_ddiv+0x214>
 80012de:	4285      	cmp	r5, r0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_ddiv+0x524>
 80012e2:	e65f      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012e4:	45b9      	cmp	r9, r7
 80012e6:	d900      	bls.n	80012ea <__aeabi_ddiv+0x52a>
 80012e8:	e65c      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 80012ea:	e656      	b.n	8000f9a <__aeabi_ddiv+0x1da>
 80012ec:	42a2      	cmp	r2, r4
 80012ee:	d800      	bhi.n	80012f2 <__aeabi_ddiv+0x532>
 80012f0:	e61a      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f2:	1e83      	subs	r3, r0, #2
 80012f4:	4464      	add	r4, ip
 80012f6:	e617      	b.n	8000f28 <__aeabi_ddiv+0x168>
 80012f8:	428a      	cmp	r2, r1
 80012fa:	d800      	bhi.n	80012fe <__aeabi_ddiv+0x53e>
 80012fc:	e600      	b.n	8000f00 <__aeabi_ddiv+0x140>
 80012fe:	46ac      	mov	ip, r5
 8001300:	1e83      	subs	r3, r0, #2
 8001302:	4698      	mov	r8, r3
 8001304:	4461      	add	r1, ip
 8001306:	e5fb      	b.n	8000f00 <__aeabi_ddiv+0x140>
 8001308:	4837      	ldr	r0, [pc, #220]	@ (80013e8 <__aeabi_ddiv+0x628>)
 800130a:	0014      	movs	r4, r2
 800130c:	4450      	add	r0, sl
 800130e:	4082      	lsls	r2, r0
 8001310:	465b      	mov	r3, fp
 8001312:	0017      	movs	r7, r2
 8001314:	4083      	lsls	r3, r0
 8001316:	40cc      	lsrs	r4, r1
 8001318:	1e7a      	subs	r2, r7, #1
 800131a:	4197      	sbcs	r7, r2
 800131c:	4323      	orrs	r3, r4
 800131e:	433b      	orrs	r3, r7
 8001320:	001a      	movs	r2, r3
 8001322:	465b      	mov	r3, fp
 8001324:	40cb      	lsrs	r3, r1
 8001326:	0751      	lsls	r1, r2, #29
 8001328:	d009      	beq.n	800133e <__aeabi_ddiv+0x57e>
 800132a:	210f      	movs	r1, #15
 800132c:	4011      	ands	r1, r2
 800132e:	2904      	cmp	r1, #4
 8001330:	d005      	beq.n	800133e <__aeabi_ddiv+0x57e>
 8001332:	1d11      	adds	r1, r2, #4
 8001334:	4291      	cmp	r1, r2
 8001336:	4192      	sbcs	r2, r2
 8001338:	4252      	negs	r2, r2
 800133a:	189b      	adds	r3, r3, r2
 800133c:	000a      	movs	r2, r1
 800133e:	0219      	lsls	r1, r3, #8
 8001340:	d400      	bmi.n	8001344 <__aeabi_ddiv+0x584>
 8001342:	e755      	b.n	80011f0 <__aeabi_ddiv+0x430>
 8001344:	2200      	movs	r2, #0
 8001346:	2301      	movs	r3, #1
 8001348:	2400      	movs	r4, #0
 800134a:	4690      	mov	r8, r2
 800134c:	e598      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 800134e:	000a      	movs	r2, r1
 8001350:	42bc      	cmp	r4, r7
 8001352:	d000      	beq.n	8001356 <__aeabi_ddiv+0x596>
 8001354:	e66e      	b.n	8001034 <__aeabi_ddiv+0x274>
 8001356:	454b      	cmp	r3, r9
 8001358:	d000      	beq.n	800135c <__aeabi_ddiv+0x59c>
 800135a:	e66b      	b.n	8001034 <__aeabi_ddiv+0x274>
 800135c:	e66c      	b.n	8001038 <__aeabi_ddiv+0x278>
 800135e:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <__aeabi_ddiv+0x62c>)
 8001360:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <__aeabi_ddiv+0x630>)
 8001362:	4453      	add	r3, sl
 8001364:	4592      	cmp	sl, r2
 8001366:	da00      	bge.n	800136a <__aeabi_ddiv+0x5aa>
 8001368:	e718      	b.n	800119c <__aeabi_ddiv+0x3dc>
 800136a:	2101      	movs	r1, #1
 800136c:	4249      	negs	r1, r1
 800136e:	1d0a      	adds	r2, r1, #4
 8001370:	428a      	cmp	r2, r1
 8001372:	4189      	sbcs	r1, r1
 8001374:	4249      	negs	r1, r1
 8001376:	448b      	add	fp, r1
 8001378:	e666      	b.n	8001048 <__aeabi_ddiv+0x288>
 800137a:	210f      	movs	r1, #15
 800137c:	4011      	ands	r1, r2
 800137e:	2904      	cmp	r1, #4
 8001380:	d100      	bne.n	8001384 <__aeabi_ddiv+0x5c4>
 8001382:	e661      	b.n	8001048 <__aeabi_ddiv+0x288>
 8001384:	0011      	movs	r1, r2
 8001386:	e7f2      	b.n	800136e <__aeabi_ddiv+0x5ae>
 8001388:	42bc      	cmp	r4, r7
 800138a:	d800      	bhi.n	800138e <__aeabi_ddiv+0x5ce>
 800138c:	e60a      	b.n	8000fa4 <__aeabi_ddiv+0x1e4>
 800138e:	2302      	movs	r3, #2
 8001390:	425b      	negs	r3, r3
 8001392:	469c      	mov	ip, r3
 8001394:	9900      	ldr	r1, [sp, #0]
 8001396:	444f      	add	r7, r9
 8001398:	454f      	cmp	r7, r9
 800139a:	419b      	sbcs	r3, r3
 800139c:	44e3      	add	fp, ip
 800139e:	468c      	mov	ip, r1
 80013a0:	425b      	negs	r3, r3
 80013a2:	4463      	add	r3, ip
 80013a4:	18c0      	adds	r0, r0, r3
 80013a6:	e5ff      	b.n	8000fa8 <__aeabi_ddiv+0x1e8>
 80013a8:	4649      	mov	r1, r9
 80013aa:	9d00      	ldr	r5, [sp, #0]
 80013ac:	0048      	lsls	r0, r1, #1
 80013ae:	4548      	cmp	r0, r9
 80013b0:	4189      	sbcs	r1, r1
 80013b2:	46ac      	mov	ip, r5
 80013b4:	4249      	negs	r1, r1
 80013b6:	4461      	add	r1, ip
 80013b8:	4681      	mov	r9, r0
 80013ba:	3a02      	subs	r2, #2
 80013bc:	1864      	adds	r4, r4, r1
 80013be:	e7c7      	b.n	8001350 <__aeabi_ddiv+0x590>
 80013c0:	2480      	movs	r4, #128	@ 0x80
 80013c2:	465b      	mov	r3, fp
 80013c4:	0324      	lsls	r4, r4, #12
 80013c6:	431c      	orrs	r4, r3
 80013c8:	0324      	lsls	r4, r4, #12
 80013ca:	4690      	mov	r8, r2
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__aeabi_ddiv+0x620>)
 80013ce:	0b24      	lsrs	r4, r4, #12
 80013d0:	e556      	b.n	8000e80 <__aeabi_ddiv+0xc0>
 80013d2:	4599      	cmp	r9, r3
 80013d4:	d3e8      	bcc.n	80013a8 <__aeabi_ddiv+0x5e8>
 80013d6:	000a      	movs	r2, r1
 80013d8:	e7bd      	b.n	8001356 <__aeabi_ddiv+0x596>
 80013da:	2300      	movs	r3, #0
 80013dc:	e708      	b.n	80011f0 <__aeabi_ddiv+0x430>
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	000007ff 	.word	0x000007ff
 80013e4:	0000043e 	.word	0x0000043e
 80013e8:	0000041e 	.word	0x0000041e
 80013ec:	000003ff 	.word	0x000003ff
 80013f0:	fffffc02 	.word	0xfffffc02

080013f4 <__eqdf2>:
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	4657      	mov	r7, sl
 80013f8:	46de      	mov	lr, fp
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	b5e0      	push	{r5, r6, r7, lr}
 8001400:	000d      	movs	r5, r1
 8001402:	0004      	movs	r4, r0
 8001404:	0fe8      	lsrs	r0, r5, #31
 8001406:	4683      	mov	fp, r0
 8001408:	0309      	lsls	r1, r1, #12
 800140a:	0fd8      	lsrs	r0, r3, #31
 800140c:	0b09      	lsrs	r1, r1, #12
 800140e:	4682      	mov	sl, r0
 8001410:	4819      	ldr	r0, [pc, #100]	@ (8001478 <__eqdf2+0x84>)
 8001412:	468c      	mov	ip, r1
 8001414:	031f      	lsls	r7, r3, #12
 8001416:	0069      	lsls	r1, r5, #1
 8001418:	005e      	lsls	r6, r3, #1
 800141a:	0d49      	lsrs	r1, r1, #21
 800141c:	0b3f      	lsrs	r7, r7, #12
 800141e:	0d76      	lsrs	r6, r6, #21
 8001420:	4281      	cmp	r1, r0
 8001422:	d018      	beq.n	8001456 <__eqdf2+0x62>
 8001424:	4286      	cmp	r6, r0
 8001426:	d00f      	beq.n	8001448 <__eqdf2+0x54>
 8001428:	2001      	movs	r0, #1
 800142a:	42b1      	cmp	r1, r6
 800142c:	d10d      	bne.n	800144a <__eqdf2+0x56>
 800142e:	45bc      	cmp	ip, r7
 8001430:	d10b      	bne.n	800144a <__eqdf2+0x56>
 8001432:	4294      	cmp	r4, r2
 8001434:	d109      	bne.n	800144a <__eqdf2+0x56>
 8001436:	45d3      	cmp	fp, sl
 8001438:	d01c      	beq.n	8001474 <__eqdf2+0x80>
 800143a:	2900      	cmp	r1, #0
 800143c:	d105      	bne.n	800144a <__eqdf2+0x56>
 800143e:	4660      	mov	r0, ip
 8001440:	4320      	orrs	r0, r4
 8001442:	1e43      	subs	r3, r0, #1
 8001444:	4198      	sbcs	r0, r3
 8001446:	e000      	b.n	800144a <__eqdf2+0x56>
 8001448:	2001      	movs	r0, #1
 800144a:	bcf0      	pop	{r4, r5, r6, r7}
 800144c:	46bb      	mov	fp, r7
 800144e:	46b2      	mov	sl, r6
 8001450:	46a9      	mov	r9, r5
 8001452:	46a0      	mov	r8, r4
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	2001      	movs	r0, #1
 8001458:	428e      	cmp	r6, r1
 800145a:	d1f6      	bne.n	800144a <__eqdf2+0x56>
 800145c:	4661      	mov	r1, ip
 800145e:	4339      	orrs	r1, r7
 8001460:	000f      	movs	r7, r1
 8001462:	4317      	orrs	r7, r2
 8001464:	4327      	orrs	r7, r4
 8001466:	d1f0      	bne.n	800144a <__eqdf2+0x56>
 8001468:	465b      	mov	r3, fp
 800146a:	4652      	mov	r2, sl
 800146c:	1a98      	subs	r0, r3, r2
 800146e:	1e43      	subs	r3, r0, #1
 8001470:	4198      	sbcs	r0, r3
 8001472:	e7ea      	b.n	800144a <__eqdf2+0x56>
 8001474:	2000      	movs	r0, #0
 8001476:	e7e8      	b.n	800144a <__eqdf2+0x56>
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4657      	mov	r7, sl
 8001480:	464e      	mov	r6, r9
 8001482:	4645      	mov	r5, r8
 8001484:	46de      	mov	lr, fp
 8001486:	b5e0      	push	{r5, r6, r7, lr}
 8001488:	000d      	movs	r5, r1
 800148a:	030f      	lsls	r7, r1, #12
 800148c:	0b39      	lsrs	r1, r7, #12
 800148e:	b083      	sub	sp, #12
 8001490:	0004      	movs	r4, r0
 8001492:	4680      	mov	r8, r0
 8001494:	9101      	str	r1, [sp, #4]
 8001496:	0058      	lsls	r0, r3, #1
 8001498:	0fe9      	lsrs	r1, r5, #31
 800149a:	4f31      	ldr	r7, [pc, #196]	@ (8001560 <__gedf2+0xe4>)
 800149c:	0d40      	lsrs	r0, r0, #21
 800149e:	468c      	mov	ip, r1
 80014a0:	006e      	lsls	r6, r5, #1
 80014a2:	0319      	lsls	r1, r3, #12
 80014a4:	4682      	mov	sl, r0
 80014a6:	4691      	mov	r9, r2
 80014a8:	0d76      	lsrs	r6, r6, #21
 80014aa:	0b09      	lsrs	r1, r1, #12
 80014ac:	0fd8      	lsrs	r0, r3, #31
 80014ae:	42be      	cmp	r6, r7
 80014b0:	d01f      	beq.n	80014f2 <__gedf2+0x76>
 80014b2:	45ba      	cmp	sl, r7
 80014b4:	d00f      	beq.n	80014d6 <__gedf2+0x5a>
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d12f      	bne.n	800151a <__gedf2+0x9e>
 80014ba:	4655      	mov	r5, sl
 80014bc:	9e01      	ldr	r6, [sp, #4]
 80014be:	4334      	orrs	r4, r6
 80014c0:	2d00      	cmp	r5, #0
 80014c2:	d127      	bne.n	8001514 <__gedf2+0x98>
 80014c4:	430a      	orrs	r2, r1
 80014c6:	d03a      	beq.n	800153e <__gedf2+0xc2>
 80014c8:	2c00      	cmp	r4, #0
 80014ca:	d145      	bne.n	8001558 <__gedf2+0xdc>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d11a      	bne.n	8001506 <__gedf2+0x8a>
 80014d0:	2001      	movs	r0, #1
 80014d2:	4240      	negs	r0, r0
 80014d4:	e017      	b.n	8001506 <__gedf2+0x8a>
 80014d6:	4311      	orrs	r1, r2
 80014d8:	d13b      	bne.n	8001552 <__gedf2+0xd6>
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d102      	bne.n	80014e4 <__gedf2+0x68>
 80014de:	9f01      	ldr	r7, [sp, #4]
 80014e0:	4327      	orrs	r7, r4
 80014e2:	d0f3      	beq.n	80014cc <__gedf2+0x50>
 80014e4:	4584      	cmp	ip, r0
 80014e6:	d109      	bne.n	80014fc <__gedf2+0x80>
 80014e8:	4663      	mov	r3, ip
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <__gedf2+0x54>
 80014ee:	4660      	mov	r0, ip
 80014f0:	e009      	b.n	8001506 <__gedf2+0x8a>
 80014f2:	9f01      	ldr	r7, [sp, #4]
 80014f4:	4327      	orrs	r7, r4
 80014f6:	d12c      	bne.n	8001552 <__gedf2+0xd6>
 80014f8:	45b2      	cmp	sl, r6
 80014fa:	d024      	beq.n	8001546 <__gedf2+0xca>
 80014fc:	4663      	mov	r3, ip
 80014fe:	2002      	movs	r0, #2
 8001500:	3b01      	subs	r3, #1
 8001502:	4018      	ands	r0, r3
 8001504:	3801      	subs	r0, #1
 8001506:	b003      	add	sp, #12
 8001508:	bcf0      	pop	{r4, r5, r6, r7}
 800150a:	46bb      	mov	fp, r7
 800150c:	46b2      	mov	sl, r6
 800150e:	46a9      	mov	r9, r5
 8001510:	46a0      	mov	r8, r4
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001514:	2c00      	cmp	r4, #0
 8001516:	d0d9      	beq.n	80014cc <__gedf2+0x50>
 8001518:	e7e4      	b.n	80014e4 <__gedf2+0x68>
 800151a:	4654      	mov	r4, sl
 800151c:	2c00      	cmp	r4, #0
 800151e:	d0ed      	beq.n	80014fc <__gedf2+0x80>
 8001520:	4584      	cmp	ip, r0
 8001522:	d1eb      	bne.n	80014fc <__gedf2+0x80>
 8001524:	4556      	cmp	r6, sl
 8001526:	dce9      	bgt.n	80014fc <__gedf2+0x80>
 8001528:	dbde      	blt.n	80014e8 <__gedf2+0x6c>
 800152a:	9b01      	ldr	r3, [sp, #4]
 800152c:	428b      	cmp	r3, r1
 800152e:	d8e5      	bhi.n	80014fc <__gedf2+0x80>
 8001530:	d1da      	bne.n	80014e8 <__gedf2+0x6c>
 8001532:	45c8      	cmp	r8, r9
 8001534:	d8e2      	bhi.n	80014fc <__gedf2+0x80>
 8001536:	2000      	movs	r0, #0
 8001538:	45c8      	cmp	r8, r9
 800153a:	d2e4      	bcs.n	8001506 <__gedf2+0x8a>
 800153c:	e7d4      	b.n	80014e8 <__gedf2+0x6c>
 800153e:	2000      	movs	r0, #0
 8001540:	2c00      	cmp	r4, #0
 8001542:	d0e0      	beq.n	8001506 <__gedf2+0x8a>
 8001544:	e7da      	b.n	80014fc <__gedf2+0x80>
 8001546:	4311      	orrs	r1, r2
 8001548:	d103      	bne.n	8001552 <__gedf2+0xd6>
 800154a:	4584      	cmp	ip, r0
 800154c:	d1d6      	bne.n	80014fc <__gedf2+0x80>
 800154e:	2000      	movs	r0, #0
 8001550:	e7d9      	b.n	8001506 <__gedf2+0x8a>
 8001552:	2002      	movs	r0, #2
 8001554:	4240      	negs	r0, r0
 8001556:	e7d6      	b.n	8001506 <__gedf2+0x8a>
 8001558:	4584      	cmp	ip, r0
 800155a:	d0e6      	beq.n	800152a <__gedf2+0xae>
 800155c:	e7ce      	b.n	80014fc <__gedf2+0x80>
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	000007ff 	.word	0x000007ff

08001564 <__ledf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4657      	mov	r7, sl
 8001568:	464e      	mov	r6, r9
 800156a:	4645      	mov	r5, r8
 800156c:	46de      	mov	lr, fp
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	000d      	movs	r5, r1
 8001572:	030f      	lsls	r7, r1, #12
 8001574:	0004      	movs	r4, r0
 8001576:	4680      	mov	r8, r0
 8001578:	0fe8      	lsrs	r0, r5, #31
 800157a:	0b39      	lsrs	r1, r7, #12
 800157c:	4684      	mov	ip, r0
 800157e:	b083      	sub	sp, #12
 8001580:	0058      	lsls	r0, r3, #1
 8001582:	4f30      	ldr	r7, [pc, #192]	@ (8001644 <__ledf2+0xe0>)
 8001584:	0d40      	lsrs	r0, r0, #21
 8001586:	9101      	str	r1, [sp, #4]
 8001588:	031e      	lsls	r6, r3, #12
 800158a:	0069      	lsls	r1, r5, #1
 800158c:	4682      	mov	sl, r0
 800158e:	4691      	mov	r9, r2
 8001590:	0d49      	lsrs	r1, r1, #21
 8001592:	0b36      	lsrs	r6, r6, #12
 8001594:	0fd8      	lsrs	r0, r3, #31
 8001596:	42b9      	cmp	r1, r7
 8001598:	d020      	beq.n	80015dc <__ledf2+0x78>
 800159a:	45ba      	cmp	sl, r7
 800159c:	d00f      	beq.n	80015be <__ledf2+0x5a>
 800159e:	2900      	cmp	r1, #0
 80015a0:	d12b      	bne.n	80015fa <__ledf2+0x96>
 80015a2:	9901      	ldr	r1, [sp, #4]
 80015a4:	430c      	orrs	r4, r1
 80015a6:	4651      	mov	r1, sl
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d137      	bne.n	800161c <__ledf2+0xb8>
 80015ac:	4332      	orrs	r2, r6
 80015ae:	d038      	beq.n	8001622 <__ledf2+0xbe>
 80015b0:	2c00      	cmp	r4, #0
 80015b2:	d144      	bne.n	800163e <__ledf2+0xda>
 80015b4:	2800      	cmp	r0, #0
 80015b6:	d119      	bne.n	80015ec <__ledf2+0x88>
 80015b8:	2001      	movs	r0, #1
 80015ba:	4240      	negs	r0, r0
 80015bc:	e016      	b.n	80015ec <__ledf2+0x88>
 80015be:	4316      	orrs	r6, r2
 80015c0:	d113      	bne.n	80015ea <__ledf2+0x86>
 80015c2:	2900      	cmp	r1, #0
 80015c4:	d102      	bne.n	80015cc <__ledf2+0x68>
 80015c6:	9f01      	ldr	r7, [sp, #4]
 80015c8:	4327      	orrs	r7, r4
 80015ca:	d0f3      	beq.n	80015b4 <__ledf2+0x50>
 80015cc:	4584      	cmp	ip, r0
 80015ce:	d020      	beq.n	8001612 <__ledf2+0xae>
 80015d0:	4663      	mov	r3, ip
 80015d2:	2002      	movs	r0, #2
 80015d4:	3b01      	subs	r3, #1
 80015d6:	4018      	ands	r0, r3
 80015d8:	3801      	subs	r0, #1
 80015da:	e007      	b.n	80015ec <__ledf2+0x88>
 80015dc:	9f01      	ldr	r7, [sp, #4]
 80015de:	4327      	orrs	r7, r4
 80015e0:	d103      	bne.n	80015ea <__ledf2+0x86>
 80015e2:	458a      	cmp	sl, r1
 80015e4:	d1f4      	bne.n	80015d0 <__ledf2+0x6c>
 80015e6:	4316      	orrs	r6, r2
 80015e8:	d01f      	beq.n	800162a <__ledf2+0xc6>
 80015ea:	2002      	movs	r0, #2
 80015ec:	b003      	add	sp, #12
 80015ee:	bcf0      	pop	{r4, r5, r6, r7}
 80015f0:	46bb      	mov	fp, r7
 80015f2:	46b2      	mov	sl, r6
 80015f4:	46a9      	mov	r9, r5
 80015f6:	46a0      	mov	r8, r4
 80015f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015fa:	4654      	mov	r4, sl
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d0e7      	beq.n	80015d0 <__ledf2+0x6c>
 8001600:	4584      	cmp	ip, r0
 8001602:	d1e5      	bne.n	80015d0 <__ledf2+0x6c>
 8001604:	4551      	cmp	r1, sl
 8001606:	dce3      	bgt.n	80015d0 <__ledf2+0x6c>
 8001608:	db03      	blt.n	8001612 <__ledf2+0xae>
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	42b3      	cmp	r3, r6
 800160e:	d8df      	bhi.n	80015d0 <__ledf2+0x6c>
 8001610:	d00f      	beq.n	8001632 <__ledf2+0xce>
 8001612:	4663      	mov	r3, ip
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0cf      	beq.n	80015b8 <__ledf2+0x54>
 8001618:	4660      	mov	r0, ip
 800161a:	e7e7      	b.n	80015ec <__ledf2+0x88>
 800161c:	2c00      	cmp	r4, #0
 800161e:	d0c9      	beq.n	80015b4 <__ledf2+0x50>
 8001620:	e7d4      	b.n	80015cc <__ledf2+0x68>
 8001622:	2000      	movs	r0, #0
 8001624:	2c00      	cmp	r4, #0
 8001626:	d0e1      	beq.n	80015ec <__ledf2+0x88>
 8001628:	e7d2      	b.n	80015d0 <__ledf2+0x6c>
 800162a:	4584      	cmp	ip, r0
 800162c:	d1d0      	bne.n	80015d0 <__ledf2+0x6c>
 800162e:	2000      	movs	r0, #0
 8001630:	e7dc      	b.n	80015ec <__ledf2+0x88>
 8001632:	45c8      	cmp	r8, r9
 8001634:	d8cc      	bhi.n	80015d0 <__ledf2+0x6c>
 8001636:	2000      	movs	r0, #0
 8001638:	45c8      	cmp	r8, r9
 800163a:	d2d7      	bcs.n	80015ec <__ledf2+0x88>
 800163c:	e7e9      	b.n	8001612 <__ledf2+0xae>
 800163e:	4584      	cmp	ip, r0
 8001640:	d0e3      	beq.n	800160a <__ledf2+0xa6>
 8001642:	e7c5      	b.n	80015d0 <__ledf2+0x6c>
 8001644:	000007ff 	.word	0x000007ff

08001648 <__aeabi_dmul>:
 8001648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164a:	4657      	mov	r7, sl
 800164c:	46de      	mov	lr, fp
 800164e:	464e      	mov	r6, r9
 8001650:	4645      	mov	r5, r8
 8001652:	b5e0      	push	{r5, r6, r7, lr}
 8001654:	001f      	movs	r7, r3
 8001656:	030b      	lsls	r3, r1, #12
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	0016      	movs	r6, r2
 800165c:	469a      	mov	sl, r3
 800165e:	0fca      	lsrs	r2, r1, #31
 8001660:	004b      	lsls	r3, r1, #1
 8001662:	0004      	movs	r4, r0
 8001664:	4693      	mov	fp, r2
 8001666:	b087      	sub	sp, #28
 8001668:	0d5b      	lsrs	r3, r3, #21
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x26>
 800166c:	e0d5      	b.n	800181a <__aeabi_dmul+0x1d2>
 800166e:	4abb      	ldr	r2, [pc, #748]	@ (800195c <__aeabi_dmul+0x314>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x2e>
 8001674:	e0f8      	b.n	8001868 <__aeabi_dmul+0x220>
 8001676:	4651      	mov	r1, sl
 8001678:	0f42      	lsrs	r2, r0, #29
 800167a:	00c9      	lsls	r1, r1, #3
 800167c:	430a      	orrs	r2, r1
 800167e:	2180      	movs	r1, #128	@ 0x80
 8001680:	0409      	lsls	r1, r1, #16
 8001682:	4311      	orrs	r1, r2
 8001684:	00c2      	lsls	r2, r0, #3
 8001686:	4691      	mov	r9, r2
 8001688:	4ab5      	ldr	r2, [pc, #724]	@ (8001960 <__aeabi_dmul+0x318>)
 800168a:	468a      	mov	sl, r1
 800168c:	189d      	adds	r5, r3, r2
 800168e:	2300      	movs	r3, #0
 8001690:	4698      	mov	r8, r3
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	033c      	lsls	r4, r7, #12
 8001696:	007b      	lsls	r3, r7, #1
 8001698:	0ffa      	lsrs	r2, r7, #31
 800169a:	0030      	movs	r0, r6
 800169c:	0b24      	lsrs	r4, r4, #12
 800169e:	0d5b      	lsrs	r3, r3, #21
 80016a0:	9200      	str	r2, [sp, #0]
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dmul+0x5e>
 80016a4:	e096      	b.n	80017d4 <__aeabi_dmul+0x18c>
 80016a6:	4aad      	ldr	r2, [pc, #692]	@ (800195c <__aeabi_dmul+0x314>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d031      	beq.n	8001710 <__aeabi_dmul+0xc8>
 80016ac:	0f72      	lsrs	r2, r6, #29
 80016ae:	00e4      	lsls	r4, r4, #3
 80016b0:	4322      	orrs	r2, r4
 80016b2:	2480      	movs	r4, #128	@ 0x80
 80016b4:	0424      	lsls	r4, r4, #16
 80016b6:	4314      	orrs	r4, r2
 80016b8:	4aa9      	ldr	r2, [pc, #676]	@ (8001960 <__aeabi_dmul+0x318>)
 80016ba:	00f0      	lsls	r0, r6, #3
 80016bc:	4694      	mov	ip, r2
 80016be:	4463      	add	r3, ip
 80016c0:	195b      	adds	r3, r3, r5
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	4642      	mov	r2, r8
 80016c8:	2600      	movs	r6, #0
 80016ca:	2a0a      	cmp	r2, #10
 80016cc:	dc42      	bgt.n	8001754 <__aeabi_dmul+0x10c>
 80016ce:	465a      	mov	r2, fp
 80016d0:	9900      	ldr	r1, [sp, #0]
 80016d2:	404a      	eors	r2, r1
 80016d4:	4693      	mov	fp, r2
 80016d6:	4642      	mov	r2, r8
 80016d8:	2a02      	cmp	r2, #2
 80016da:	dc32      	bgt.n	8001742 <__aeabi_dmul+0xfa>
 80016dc:	3a01      	subs	r2, #1
 80016de:	2a01      	cmp	r2, #1
 80016e0:	d900      	bls.n	80016e4 <__aeabi_dmul+0x9c>
 80016e2:	e149      	b.n	8001978 <__aeabi_dmul+0x330>
 80016e4:	2e02      	cmp	r6, #2
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0xa2>
 80016e8:	e0ca      	b.n	8001880 <__aeabi_dmul+0x238>
 80016ea:	2e01      	cmp	r6, #1
 80016ec:	d13d      	bne.n	800176a <__aeabi_dmul+0x122>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2200      	movs	r2, #0
 80016f4:	0010      	movs	r0, r2
 80016f6:	465a      	mov	r2, fp
 80016f8:	051b      	lsls	r3, r3, #20
 80016fa:	4323      	orrs	r3, r4
 80016fc:	07d2      	lsls	r2, r2, #31
 80016fe:	4313      	orrs	r3, r2
 8001700:	0019      	movs	r1, r3
 8001702:	b007      	add	sp, #28
 8001704:	bcf0      	pop	{r4, r5, r6, r7}
 8001706:	46bb      	mov	fp, r7
 8001708:	46b2      	mov	sl, r6
 800170a:	46a9      	mov	r9, r5
 800170c:	46a0      	mov	r8, r4
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	4b92      	ldr	r3, [pc, #584]	@ (800195c <__aeabi_dmul+0x314>)
 8001712:	4326      	orrs	r6, r4
 8001714:	18eb      	adds	r3, r5, r3
 8001716:	2e00      	cmp	r6, #0
 8001718:	d100      	bne.n	800171c <__aeabi_dmul+0xd4>
 800171a:	e0bb      	b.n	8001894 <__aeabi_dmul+0x24c>
 800171c:	2203      	movs	r2, #3
 800171e:	4641      	mov	r1, r8
 8001720:	4311      	orrs	r1, r2
 8001722:	465a      	mov	r2, fp
 8001724:	4688      	mov	r8, r1
 8001726:	9900      	ldr	r1, [sp, #0]
 8001728:	404a      	eors	r2, r1
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	0109      	lsls	r1, r1, #4
 800172e:	468c      	mov	ip, r1
 8001730:	0029      	movs	r1, r5
 8001732:	4461      	add	r1, ip
 8001734:	9101      	str	r1, [sp, #4]
 8001736:	4641      	mov	r1, r8
 8001738:	290a      	cmp	r1, #10
 800173a:	dd00      	ble.n	800173e <__aeabi_dmul+0xf6>
 800173c:	e233      	b.n	8001ba6 <__aeabi_dmul+0x55e>
 800173e:	4693      	mov	fp, r2
 8001740:	2603      	movs	r6, #3
 8001742:	4642      	mov	r2, r8
 8001744:	2701      	movs	r7, #1
 8001746:	4097      	lsls	r7, r2
 8001748:	21a6      	movs	r1, #166	@ 0xa6
 800174a:	003a      	movs	r2, r7
 800174c:	00c9      	lsls	r1, r1, #3
 800174e:	400a      	ands	r2, r1
 8001750:	420f      	tst	r7, r1
 8001752:	d031      	beq.n	80017b8 <__aeabi_dmul+0x170>
 8001754:	9e02      	ldr	r6, [sp, #8]
 8001756:	2e02      	cmp	r6, #2
 8001758:	d100      	bne.n	800175c <__aeabi_dmul+0x114>
 800175a:	e235      	b.n	8001bc8 <__aeabi_dmul+0x580>
 800175c:	2e03      	cmp	r6, #3
 800175e:	d100      	bne.n	8001762 <__aeabi_dmul+0x11a>
 8001760:	e1d2      	b.n	8001b08 <__aeabi_dmul+0x4c0>
 8001762:	4654      	mov	r4, sl
 8001764:	4648      	mov	r0, r9
 8001766:	2e01      	cmp	r6, #1
 8001768:	d0c1      	beq.n	80016ee <__aeabi_dmul+0xa6>
 800176a:	9a01      	ldr	r2, [sp, #4]
 800176c:	4b7d      	ldr	r3, [pc, #500]	@ (8001964 <__aeabi_dmul+0x31c>)
 800176e:	4694      	mov	ip, r2
 8001770:	4463      	add	r3, ip
 8001772:	2b00      	cmp	r3, #0
 8001774:	dc00      	bgt.n	8001778 <__aeabi_dmul+0x130>
 8001776:	e0c0      	b.n	80018fa <__aeabi_dmul+0x2b2>
 8001778:	0742      	lsls	r2, r0, #29
 800177a:	d009      	beq.n	8001790 <__aeabi_dmul+0x148>
 800177c:	220f      	movs	r2, #15
 800177e:	4002      	ands	r2, r0
 8001780:	2a04      	cmp	r2, #4
 8001782:	d005      	beq.n	8001790 <__aeabi_dmul+0x148>
 8001784:	1d02      	adds	r2, r0, #4
 8001786:	4282      	cmp	r2, r0
 8001788:	4180      	sbcs	r0, r0
 800178a:	4240      	negs	r0, r0
 800178c:	1824      	adds	r4, r4, r0
 800178e:	0010      	movs	r0, r2
 8001790:	01e2      	lsls	r2, r4, #7
 8001792:	d506      	bpl.n	80017a2 <__aeabi_dmul+0x15a>
 8001794:	4b74      	ldr	r3, [pc, #464]	@ (8001968 <__aeabi_dmul+0x320>)
 8001796:	9a01      	ldr	r2, [sp, #4]
 8001798:	401c      	ands	r4, r3
 800179a:	2380      	movs	r3, #128	@ 0x80
 800179c:	4694      	mov	ip, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4463      	add	r3, ip
 80017a2:	4a72      	ldr	r2, [pc, #456]	@ (800196c <__aeabi_dmul+0x324>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	dc6b      	bgt.n	8001880 <__aeabi_dmul+0x238>
 80017a8:	0762      	lsls	r2, r4, #29
 80017aa:	08c0      	lsrs	r0, r0, #3
 80017ac:	0264      	lsls	r4, r4, #9
 80017ae:	055b      	lsls	r3, r3, #21
 80017b0:	4302      	orrs	r2, r0
 80017b2:	0b24      	lsrs	r4, r4, #12
 80017b4:	0d5b      	lsrs	r3, r3, #21
 80017b6:	e79d      	b.n	80016f4 <__aeabi_dmul+0xac>
 80017b8:	2190      	movs	r1, #144	@ 0x90
 80017ba:	0089      	lsls	r1, r1, #2
 80017bc:	420f      	tst	r7, r1
 80017be:	d163      	bne.n	8001888 <__aeabi_dmul+0x240>
 80017c0:	2288      	movs	r2, #136	@ 0x88
 80017c2:	423a      	tst	r2, r7
 80017c4:	d100      	bne.n	80017c8 <__aeabi_dmul+0x180>
 80017c6:	e0d7      	b.n	8001978 <__aeabi_dmul+0x330>
 80017c8:	9b00      	ldr	r3, [sp, #0]
 80017ca:	46a2      	mov	sl, r4
 80017cc:	469b      	mov	fp, r3
 80017ce:	4681      	mov	r9, r0
 80017d0:	9602      	str	r6, [sp, #8]
 80017d2:	e7bf      	b.n	8001754 <__aeabi_dmul+0x10c>
 80017d4:	0023      	movs	r3, r4
 80017d6:	4333      	orrs	r3, r6
 80017d8:	d100      	bne.n	80017dc <__aeabi_dmul+0x194>
 80017da:	e07f      	b.n	80018dc <__aeabi_dmul+0x294>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x19a>
 80017e0:	e1ad      	b.n	8001b3e <__aeabi_dmul+0x4f6>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f7fe fe60 	bl	80004a8 <__clzsi2>
 80017e8:	0002      	movs	r2, r0
 80017ea:	0003      	movs	r3, r0
 80017ec:	3a0b      	subs	r2, #11
 80017ee:	201d      	movs	r0, #29
 80017f0:	0019      	movs	r1, r3
 80017f2:	1a82      	subs	r2, r0, r2
 80017f4:	0030      	movs	r0, r6
 80017f6:	3908      	subs	r1, #8
 80017f8:	40d0      	lsrs	r0, r2
 80017fa:	408c      	lsls	r4, r1
 80017fc:	4304      	orrs	r4, r0
 80017fe:	0030      	movs	r0, r6
 8001800:	4088      	lsls	r0, r1
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <__aeabi_dmul+0x328>)
 8001804:	1aeb      	subs	r3, r5, r3
 8001806:	4694      	mov	ip, r2
 8001808:	4463      	add	r3, ip
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	4642      	mov	r2, r8
 8001810:	2600      	movs	r6, #0
 8001812:	2a0a      	cmp	r2, #10
 8001814:	dc00      	bgt.n	8001818 <__aeabi_dmul+0x1d0>
 8001816:	e75a      	b.n	80016ce <__aeabi_dmul+0x86>
 8001818:	e79c      	b.n	8001754 <__aeabi_dmul+0x10c>
 800181a:	4653      	mov	r3, sl
 800181c:	4303      	orrs	r3, r0
 800181e:	4699      	mov	r9, r3
 8001820:	d054      	beq.n	80018cc <__aeabi_dmul+0x284>
 8001822:	4653      	mov	r3, sl
 8001824:	2b00      	cmp	r3, #0
 8001826:	d100      	bne.n	800182a <__aeabi_dmul+0x1e2>
 8001828:	e177      	b.n	8001b1a <__aeabi_dmul+0x4d2>
 800182a:	4650      	mov	r0, sl
 800182c:	f7fe fe3c 	bl	80004a8 <__clzsi2>
 8001830:	230b      	movs	r3, #11
 8001832:	425b      	negs	r3, r3
 8001834:	469c      	mov	ip, r3
 8001836:	0002      	movs	r2, r0
 8001838:	4484      	add	ip, r0
 800183a:	0011      	movs	r1, r2
 800183c:	4650      	mov	r0, sl
 800183e:	3908      	subs	r1, #8
 8001840:	4088      	lsls	r0, r1
 8001842:	231d      	movs	r3, #29
 8001844:	4680      	mov	r8, r0
 8001846:	4660      	mov	r0, ip
 8001848:	1a1b      	subs	r3, r3, r0
 800184a:	0020      	movs	r0, r4
 800184c:	40d8      	lsrs	r0, r3
 800184e:	0003      	movs	r3, r0
 8001850:	4640      	mov	r0, r8
 8001852:	4303      	orrs	r3, r0
 8001854:	469a      	mov	sl, r3
 8001856:	0023      	movs	r3, r4
 8001858:	408b      	lsls	r3, r1
 800185a:	4699      	mov	r9, r3
 800185c:	2300      	movs	r3, #0
 800185e:	4d44      	ldr	r5, [pc, #272]	@ (8001970 <__aeabi_dmul+0x328>)
 8001860:	4698      	mov	r8, r3
 8001862:	1aad      	subs	r5, r5, r2
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	e715      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001868:	4652      	mov	r2, sl
 800186a:	4302      	orrs	r2, r0
 800186c:	4691      	mov	r9, r2
 800186e:	d126      	bne.n	80018be <__aeabi_dmul+0x276>
 8001870:	2200      	movs	r2, #0
 8001872:	001d      	movs	r5, r3
 8001874:	2302      	movs	r3, #2
 8001876:	4692      	mov	sl, r2
 8001878:	3208      	adds	r2, #8
 800187a:	4690      	mov	r8, r2
 800187c:	9302      	str	r3, [sp, #8]
 800187e:	e709      	b.n	8001694 <__aeabi_dmul+0x4c>
 8001880:	2400      	movs	r4, #0
 8001882:	2200      	movs	r2, #0
 8001884:	4b35      	ldr	r3, [pc, #212]	@ (800195c <__aeabi_dmul+0x314>)
 8001886:	e735      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001888:	2300      	movs	r3, #0
 800188a:	2480      	movs	r4, #128	@ 0x80
 800188c:	469b      	mov	fp, r3
 800188e:	0324      	lsls	r4, r4, #12
 8001890:	4b32      	ldr	r3, [pc, #200]	@ (800195c <__aeabi_dmul+0x314>)
 8001892:	e72f      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001894:	2202      	movs	r2, #2
 8001896:	4641      	mov	r1, r8
 8001898:	4311      	orrs	r1, r2
 800189a:	2280      	movs	r2, #128	@ 0x80
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	4694      	mov	ip, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	4462      	add	r2, ip
 80018a4:	4688      	mov	r8, r1
 80018a6:	9201      	str	r2, [sp, #4]
 80018a8:	290a      	cmp	r1, #10
 80018aa:	dd00      	ble.n	80018ae <__aeabi_dmul+0x266>
 80018ac:	e752      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018ae:	465a      	mov	r2, fp
 80018b0:	2000      	movs	r0, #0
 80018b2:	9900      	ldr	r1, [sp, #0]
 80018b4:	0004      	movs	r4, r0
 80018b6:	404a      	eors	r2, r1
 80018b8:	4693      	mov	fp, r2
 80018ba:	2602      	movs	r6, #2
 80018bc:	e70b      	b.n	80016d6 <__aeabi_dmul+0x8e>
 80018be:	220c      	movs	r2, #12
 80018c0:	001d      	movs	r5, r3
 80018c2:	2303      	movs	r3, #3
 80018c4:	4681      	mov	r9, r0
 80018c6:	4690      	mov	r8, r2
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	e6e3      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018cc:	2300      	movs	r3, #0
 80018ce:	469a      	mov	sl, r3
 80018d0:	3304      	adds	r3, #4
 80018d2:	4698      	mov	r8, r3
 80018d4:	3b03      	subs	r3, #3
 80018d6:	2500      	movs	r5, #0
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	e6db      	b.n	8001694 <__aeabi_dmul+0x4c>
 80018dc:	4642      	mov	r2, r8
 80018de:	3301      	adds	r3, #1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	002b      	movs	r3, r5
 80018e4:	4690      	mov	r8, r2
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	4642      	mov	r2, r8
 80018ec:	2400      	movs	r4, #0
 80018ee:	2000      	movs	r0, #0
 80018f0:	2601      	movs	r6, #1
 80018f2:	2a0a      	cmp	r2, #10
 80018f4:	dc00      	bgt.n	80018f8 <__aeabi_dmul+0x2b0>
 80018f6:	e6ea      	b.n	80016ce <__aeabi_dmul+0x86>
 80018f8:	e72c      	b.n	8001754 <__aeabi_dmul+0x10c>
 80018fa:	2201      	movs	r2, #1
 80018fc:	1ad2      	subs	r2, r2, r3
 80018fe:	2a38      	cmp	r2, #56	@ 0x38
 8001900:	dd00      	ble.n	8001904 <__aeabi_dmul+0x2bc>
 8001902:	e6f4      	b.n	80016ee <__aeabi_dmul+0xa6>
 8001904:	2a1f      	cmp	r2, #31
 8001906:	dc00      	bgt.n	800190a <__aeabi_dmul+0x2c2>
 8001908:	e12a      	b.n	8001b60 <__aeabi_dmul+0x518>
 800190a:	211f      	movs	r1, #31
 800190c:	4249      	negs	r1, r1
 800190e:	1acb      	subs	r3, r1, r3
 8001910:	0021      	movs	r1, r4
 8001912:	40d9      	lsrs	r1, r3
 8001914:	000b      	movs	r3, r1
 8001916:	2a20      	cmp	r2, #32
 8001918:	d005      	beq.n	8001926 <__aeabi_dmul+0x2de>
 800191a:	4a16      	ldr	r2, [pc, #88]	@ (8001974 <__aeabi_dmul+0x32c>)
 800191c:	9d01      	ldr	r5, [sp, #4]
 800191e:	4694      	mov	ip, r2
 8001920:	4465      	add	r5, ip
 8001922:	40ac      	lsls	r4, r5
 8001924:	4320      	orrs	r0, r4
 8001926:	1e42      	subs	r2, r0, #1
 8001928:	4190      	sbcs	r0, r2
 800192a:	4318      	orrs	r0, r3
 800192c:	2307      	movs	r3, #7
 800192e:	0019      	movs	r1, r3
 8001930:	2400      	movs	r4, #0
 8001932:	4001      	ands	r1, r0
 8001934:	4203      	tst	r3, r0
 8001936:	d00c      	beq.n	8001952 <__aeabi_dmul+0x30a>
 8001938:	230f      	movs	r3, #15
 800193a:	4003      	ands	r3, r0
 800193c:	2b04      	cmp	r3, #4
 800193e:	d100      	bne.n	8001942 <__aeabi_dmul+0x2fa>
 8001940:	e140      	b.n	8001bc4 <__aeabi_dmul+0x57c>
 8001942:	1d03      	adds	r3, r0, #4
 8001944:	4283      	cmp	r3, r0
 8001946:	41a4      	sbcs	r4, r4
 8001948:	0018      	movs	r0, r3
 800194a:	4264      	negs	r4, r4
 800194c:	0761      	lsls	r1, r4, #29
 800194e:	0264      	lsls	r4, r4, #9
 8001950:	0b24      	lsrs	r4, r4, #12
 8001952:	08c2      	lsrs	r2, r0, #3
 8001954:	2300      	movs	r3, #0
 8001956:	430a      	orrs	r2, r1
 8001958:	e6cc      	b.n	80016f4 <__aeabi_dmul+0xac>
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	000007ff 	.word	0x000007ff
 8001960:	fffffc01 	.word	0xfffffc01
 8001964:	000003ff 	.word	0x000003ff
 8001968:	feffffff 	.word	0xfeffffff
 800196c:	000007fe 	.word	0x000007fe
 8001970:	fffffc0d 	.word	0xfffffc0d
 8001974:	0000043e 	.word	0x0000043e
 8001978:	4649      	mov	r1, r9
 800197a:	464a      	mov	r2, r9
 800197c:	0409      	lsls	r1, r1, #16
 800197e:	0c09      	lsrs	r1, r1, #16
 8001980:	000d      	movs	r5, r1
 8001982:	0c16      	lsrs	r6, r2, #16
 8001984:	0c02      	lsrs	r2, r0, #16
 8001986:	0400      	lsls	r0, r0, #16
 8001988:	0c00      	lsrs	r0, r0, #16
 800198a:	4345      	muls	r5, r0
 800198c:	46ac      	mov	ip, r5
 800198e:	0005      	movs	r5, r0
 8001990:	4375      	muls	r5, r6
 8001992:	46a8      	mov	r8, r5
 8001994:	0015      	movs	r5, r2
 8001996:	000f      	movs	r7, r1
 8001998:	4375      	muls	r5, r6
 800199a:	9200      	str	r2, [sp, #0]
 800199c:	9502      	str	r5, [sp, #8]
 800199e:	002a      	movs	r2, r5
 80019a0:	9d00      	ldr	r5, [sp, #0]
 80019a2:	436f      	muls	r7, r5
 80019a4:	4665      	mov	r5, ip
 80019a6:	0c2d      	lsrs	r5, r5, #16
 80019a8:	46a9      	mov	r9, r5
 80019aa:	4447      	add	r7, r8
 80019ac:	444f      	add	r7, r9
 80019ae:	45b8      	cmp	r8, r7
 80019b0:	d905      	bls.n	80019be <__aeabi_dmul+0x376>
 80019b2:	0015      	movs	r5, r2
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	0252      	lsls	r2, r2, #9
 80019b8:	4690      	mov	r8, r2
 80019ba:	4445      	add	r5, r8
 80019bc:	9502      	str	r5, [sp, #8]
 80019be:	0c3d      	lsrs	r5, r7, #16
 80019c0:	9503      	str	r5, [sp, #12]
 80019c2:	4665      	mov	r5, ip
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	043f      	lsls	r7, r7, #16
 80019c8:	0c2d      	lsrs	r5, r5, #16
 80019ca:	46ac      	mov	ip, r5
 80019cc:	003d      	movs	r5, r7
 80019ce:	4465      	add	r5, ip
 80019d0:	9504      	str	r5, [sp, #16]
 80019d2:	0c25      	lsrs	r5, r4, #16
 80019d4:	0424      	lsls	r4, r4, #16
 80019d6:	0c24      	lsrs	r4, r4, #16
 80019d8:	46ac      	mov	ip, r5
 80019da:	0025      	movs	r5, r4
 80019dc:	4375      	muls	r5, r6
 80019de:	46a8      	mov	r8, r5
 80019e0:	4665      	mov	r5, ip
 80019e2:	000f      	movs	r7, r1
 80019e4:	4369      	muls	r1, r5
 80019e6:	4441      	add	r1, r8
 80019e8:	4689      	mov	r9, r1
 80019ea:	4367      	muls	r7, r4
 80019ec:	0c39      	lsrs	r1, r7, #16
 80019ee:	4449      	add	r1, r9
 80019f0:	436e      	muls	r6, r5
 80019f2:	4588      	cmp	r8, r1
 80019f4:	d903      	bls.n	80019fe <__aeabi_dmul+0x3b6>
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	0252      	lsls	r2, r2, #9
 80019fa:	4690      	mov	r8, r2
 80019fc:	4446      	add	r6, r8
 80019fe:	0c0d      	lsrs	r5, r1, #16
 8001a00:	46a8      	mov	r8, r5
 8001a02:	0035      	movs	r5, r6
 8001a04:	4445      	add	r5, r8
 8001a06:	9505      	str	r5, [sp, #20]
 8001a08:	9d03      	ldr	r5, [sp, #12]
 8001a0a:	043f      	lsls	r7, r7, #16
 8001a0c:	46a8      	mov	r8, r5
 8001a0e:	0c3f      	lsrs	r7, r7, #16
 8001a10:	0409      	lsls	r1, r1, #16
 8001a12:	19c9      	adds	r1, r1, r7
 8001a14:	4488      	add	r8, r1
 8001a16:	4645      	mov	r5, r8
 8001a18:	9503      	str	r5, [sp, #12]
 8001a1a:	4655      	mov	r5, sl
 8001a1c:	042e      	lsls	r6, r5, #16
 8001a1e:	0c36      	lsrs	r6, r6, #16
 8001a20:	0c2f      	lsrs	r7, r5, #16
 8001a22:	0035      	movs	r5, r6
 8001a24:	4345      	muls	r5, r0
 8001a26:	4378      	muls	r0, r7
 8001a28:	4681      	mov	r9, r0
 8001a2a:	0038      	movs	r0, r7
 8001a2c:	46a8      	mov	r8, r5
 8001a2e:	0c2d      	lsrs	r5, r5, #16
 8001a30:	46aa      	mov	sl, r5
 8001a32:	9a00      	ldr	r2, [sp, #0]
 8001a34:	4350      	muls	r0, r2
 8001a36:	4372      	muls	r2, r6
 8001a38:	444a      	add	r2, r9
 8001a3a:	4452      	add	r2, sl
 8001a3c:	4591      	cmp	r9, r2
 8001a3e:	d903      	bls.n	8001a48 <__aeabi_dmul+0x400>
 8001a40:	2580      	movs	r5, #128	@ 0x80
 8001a42:	026d      	lsls	r5, r5, #9
 8001a44:	46a9      	mov	r9, r5
 8001a46:	4448      	add	r0, r9
 8001a48:	0c15      	lsrs	r5, r2, #16
 8001a4a:	46a9      	mov	r9, r5
 8001a4c:	4645      	mov	r5, r8
 8001a4e:	042d      	lsls	r5, r5, #16
 8001a50:	0c2d      	lsrs	r5, r5, #16
 8001a52:	46a8      	mov	r8, r5
 8001a54:	4665      	mov	r5, ip
 8001a56:	437d      	muls	r5, r7
 8001a58:	0412      	lsls	r2, r2, #16
 8001a5a:	4448      	add	r0, r9
 8001a5c:	4490      	add	r8, r2
 8001a5e:	46a9      	mov	r9, r5
 8001a60:	0032      	movs	r2, r6
 8001a62:	4665      	mov	r5, ip
 8001a64:	4362      	muls	r2, r4
 8001a66:	436e      	muls	r6, r5
 8001a68:	437c      	muls	r4, r7
 8001a6a:	0c17      	lsrs	r7, r2, #16
 8001a6c:	1936      	adds	r6, r6, r4
 8001a6e:	19bf      	adds	r7, r7, r6
 8001a70:	42bc      	cmp	r4, r7
 8001a72:	d903      	bls.n	8001a7c <__aeabi_dmul+0x434>
 8001a74:	2480      	movs	r4, #128	@ 0x80
 8001a76:	0264      	lsls	r4, r4, #9
 8001a78:	46a4      	mov	ip, r4
 8001a7a:	44e1      	add	r9, ip
 8001a7c:	9c02      	ldr	r4, [sp, #8]
 8001a7e:	9e03      	ldr	r6, [sp, #12]
 8001a80:	46a4      	mov	ip, r4
 8001a82:	9d05      	ldr	r5, [sp, #20]
 8001a84:	4466      	add	r6, ip
 8001a86:	428e      	cmp	r6, r1
 8001a88:	4189      	sbcs	r1, r1
 8001a8a:	46ac      	mov	ip, r5
 8001a8c:	0412      	lsls	r2, r2, #16
 8001a8e:	043c      	lsls	r4, r7, #16
 8001a90:	0c12      	lsrs	r2, r2, #16
 8001a92:	18a2      	adds	r2, r4, r2
 8001a94:	4462      	add	r2, ip
 8001a96:	4249      	negs	r1, r1
 8001a98:	1854      	adds	r4, r2, r1
 8001a9a:	4446      	add	r6, r8
 8001a9c:	46a4      	mov	ip, r4
 8001a9e:	4546      	cmp	r6, r8
 8001aa0:	41a4      	sbcs	r4, r4
 8001aa2:	4682      	mov	sl, r0
 8001aa4:	4264      	negs	r4, r4
 8001aa6:	46a0      	mov	r8, r4
 8001aa8:	42aa      	cmp	r2, r5
 8001aaa:	4192      	sbcs	r2, r2
 8001aac:	458c      	cmp	ip, r1
 8001aae:	4189      	sbcs	r1, r1
 8001ab0:	44e2      	add	sl, ip
 8001ab2:	44d0      	add	r8, sl
 8001ab4:	4249      	negs	r1, r1
 8001ab6:	4252      	negs	r2, r2
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	45a0      	cmp	r8, r4
 8001abc:	41a4      	sbcs	r4, r4
 8001abe:	4582      	cmp	sl, r0
 8001ac0:	4189      	sbcs	r1, r1
 8001ac2:	4264      	negs	r4, r4
 8001ac4:	4249      	negs	r1, r1
 8001ac6:	430c      	orrs	r4, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	0c3f      	lsrs	r7, r7, #16
 8001acc:	19d2      	adds	r2, r2, r7
 8001ace:	1912      	adds	r2, r2, r4
 8001ad0:	0dcc      	lsrs	r4, r1, #23
 8001ad2:	9904      	ldr	r1, [sp, #16]
 8001ad4:	0270      	lsls	r0, r6, #9
 8001ad6:	4308      	orrs	r0, r1
 8001ad8:	1e41      	subs	r1, r0, #1
 8001ada:	4188      	sbcs	r0, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	444a      	add	r2, r9
 8001ae0:	0df6      	lsrs	r6, r6, #23
 8001ae2:	0252      	lsls	r2, r2, #9
 8001ae4:	4330      	orrs	r0, r6
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	4314      	orrs	r4, r2
 8001aea:	4308      	orrs	r0, r1
 8001aec:	01d2      	lsls	r2, r2, #7
 8001aee:	d535      	bpl.n	8001b5c <__aeabi_dmul+0x514>
 8001af0:	2201      	movs	r2, #1
 8001af2:	0843      	lsrs	r3, r0, #1
 8001af4:	4002      	ands	r2, r0
 8001af6:	4313      	orrs	r3, r2
 8001af8:	07e0      	lsls	r0, r4, #31
 8001afa:	4318      	orrs	r0, r3
 8001afc:	0864      	lsrs	r4, r4, #1
 8001afe:	e634      	b.n	800176a <__aeabi_dmul+0x122>
 8001b00:	9b00      	ldr	r3, [sp, #0]
 8001b02:	46a2      	mov	sl, r4
 8001b04:	469b      	mov	fp, r3
 8001b06:	4681      	mov	r9, r0
 8001b08:	2480      	movs	r4, #128	@ 0x80
 8001b0a:	4653      	mov	r3, sl
 8001b0c:	0324      	lsls	r4, r4, #12
 8001b0e:	431c      	orrs	r4, r3
 8001b10:	0324      	lsls	r4, r4, #12
 8001b12:	464a      	mov	r2, r9
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001b16:	0b24      	lsrs	r4, r4, #12
 8001b18:	e5ec      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001b1a:	f7fe fcc5 	bl	80004a8 <__clzsi2>
 8001b1e:	2315      	movs	r3, #21
 8001b20:	469c      	mov	ip, r3
 8001b22:	4484      	add	ip, r0
 8001b24:	0002      	movs	r2, r0
 8001b26:	4663      	mov	r3, ip
 8001b28:	3220      	adds	r2, #32
 8001b2a:	2b1c      	cmp	r3, #28
 8001b2c:	dc00      	bgt.n	8001b30 <__aeabi_dmul+0x4e8>
 8001b2e:	e684      	b.n	800183a <__aeabi_dmul+0x1f2>
 8001b30:	2300      	movs	r3, #0
 8001b32:	4699      	mov	r9, r3
 8001b34:	0023      	movs	r3, r4
 8001b36:	3808      	subs	r0, #8
 8001b38:	4083      	lsls	r3, r0
 8001b3a:	469a      	mov	sl, r3
 8001b3c:	e68e      	b.n	800185c <__aeabi_dmul+0x214>
 8001b3e:	f7fe fcb3 	bl	80004a8 <__clzsi2>
 8001b42:	0002      	movs	r2, r0
 8001b44:	0003      	movs	r3, r0
 8001b46:	3215      	adds	r2, #21
 8001b48:	3320      	adds	r3, #32
 8001b4a:	2a1c      	cmp	r2, #28
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_dmul+0x508>
 8001b4e:	e64e      	b.n	80017ee <__aeabi_dmul+0x1a6>
 8001b50:	0002      	movs	r2, r0
 8001b52:	0034      	movs	r4, r6
 8001b54:	3a08      	subs	r2, #8
 8001b56:	2000      	movs	r0, #0
 8001b58:	4094      	lsls	r4, r2
 8001b5a:	e652      	b.n	8001802 <__aeabi_dmul+0x1ba>
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	e604      	b.n	800176a <__aeabi_dmul+0x122>
 8001b60:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <__aeabi_dmul+0x58c>)
 8001b62:	0021      	movs	r1, r4
 8001b64:	469c      	mov	ip, r3
 8001b66:	0003      	movs	r3, r0
 8001b68:	9d01      	ldr	r5, [sp, #4]
 8001b6a:	40d3      	lsrs	r3, r2
 8001b6c:	4465      	add	r5, ip
 8001b6e:	40a9      	lsls	r1, r5
 8001b70:	4319      	orrs	r1, r3
 8001b72:	0003      	movs	r3, r0
 8001b74:	40ab      	lsls	r3, r5
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	4183      	sbcs	r3, r0
 8001b7a:	4319      	orrs	r1, r3
 8001b7c:	0008      	movs	r0, r1
 8001b7e:	40d4      	lsrs	r4, r2
 8001b80:	074b      	lsls	r3, r1, #29
 8001b82:	d009      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b84:	230f      	movs	r3, #15
 8001b86:	400b      	ands	r3, r1
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d005      	beq.n	8001b98 <__aeabi_dmul+0x550>
 8001b8c:	1d0b      	adds	r3, r1, #4
 8001b8e:	428b      	cmp	r3, r1
 8001b90:	4180      	sbcs	r0, r0
 8001b92:	4240      	negs	r0, r0
 8001b94:	1824      	adds	r4, r4, r0
 8001b96:	0018      	movs	r0, r3
 8001b98:	0223      	lsls	r3, r4, #8
 8001b9a:	d400      	bmi.n	8001b9e <__aeabi_dmul+0x556>
 8001b9c:	e6d6      	b.n	800194c <__aeabi_dmul+0x304>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	e5a6      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001ba6:	290f      	cmp	r1, #15
 8001ba8:	d1aa      	bne.n	8001b00 <__aeabi_dmul+0x4b8>
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	4652      	mov	r2, sl
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	421a      	tst	r2, r3
 8001bb2:	d0a9      	beq.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb4:	421c      	tst	r4, r3
 8001bb6:	d1a7      	bne.n	8001b08 <__aeabi_dmul+0x4c0>
 8001bb8:	431c      	orrs	r4, r3
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	469b      	mov	fp, r3
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bc2:	e597      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bc4:	2400      	movs	r4, #0
 8001bc6:	e6c1      	b.n	800194c <__aeabi_dmul+0x304>
 8001bc8:	2400      	movs	r4, #0
 8001bca:	4b01      	ldr	r3, [pc, #4]	@ (8001bd0 <__aeabi_dmul+0x588>)
 8001bcc:	0022      	movs	r2, r4
 8001bce:	e591      	b.n	80016f4 <__aeabi_dmul+0xac>
 8001bd0:	000007ff 	.word	0x000007ff
 8001bd4:	0000041e 	.word	0x0000041e

08001bd8 <__aeabi_dsub>:
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	464e      	mov	r6, r9
 8001bdc:	4645      	mov	r5, r8
 8001bde:	46de      	mov	lr, fp
 8001be0:	4657      	mov	r7, sl
 8001be2:	b5e0      	push	{r5, r6, r7, lr}
 8001be4:	b085      	sub	sp, #20
 8001be6:	9000      	str	r0, [sp, #0]
 8001be8:	9101      	str	r1, [sp, #4]
 8001bea:	030c      	lsls	r4, r1, #12
 8001bec:	004f      	lsls	r7, r1, #1
 8001bee:	0fce      	lsrs	r6, r1, #31
 8001bf0:	0a61      	lsrs	r1, r4, #9
 8001bf2:	9c00      	ldr	r4, [sp, #0]
 8001bf4:	46b0      	mov	r8, r6
 8001bf6:	0f64      	lsrs	r4, r4, #29
 8001bf8:	430c      	orrs	r4, r1
 8001bfa:	9900      	ldr	r1, [sp, #0]
 8001bfc:	0d7f      	lsrs	r7, r7, #21
 8001bfe:	00c8      	lsls	r0, r1, #3
 8001c00:	0011      	movs	r1, r2
 8001c02:	001a      	movs	r2, r3
 8001c04:	031b      	lsls	r3, r3, #12
 8001c06:	469c      	mov	ip, r3
 8001c08:	9100      	str	r1, [sp, #0]
 8001c0a:	9201      	str	r2, [sp, #4]
 8001c0c:	0051      	lsls	r1, r2, #1
 8001c0e:	0d4b      	lsrs	r3, r1, #21
 8001c10:	4699      	mov	r9, r3
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	9d00      	ldr	r5, [sp, #0]
 8001c16:	0fd9      	lsrs	r1, r3, #31
 8001c18:	4663      	mov	r3, ip
 8001c1a:	0f6a      	lsrs	r2, r5, #29
 8001c1c:	0a5b      	lsrs	r3, r3, #9
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	00ea      	lsls	r2, r5, #3
 8001c22:	4694      	mov	ip, r2
 8001c24:	4693      	mov	fp, r2
 8001c26:	4ac1      	ldr	r2, [pc, #772]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001c28:	9003      	str	r0, [sp, #12]
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	4591      	cmp	r9, r2
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x5a>
 8001c30:	e0cd      	b.n	8001dce <__aeabi_dsub+0x1f6>
 8001c32:	2501      	movs	r5, #1
 8001c34:	4069      	eors	r1, r5
 8001c36:	464d      	mov	r5, r9
 8001c38:	1b7d      	subs	r5, r7, r5
 8001c3a:	46aa      	mov	sl, r5
 8001c3c:	428e      	cmp	r6, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x6a>
 8001c40:	e080      	b.n	8001d44 <__aeabi_dsub+0x16c>
 8001c42:	2d00      	cmp	r5, #0
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_dsub+0x70>
 8001c46:	e335      	b.n	80022b4 <__aeabi_dsub+0x6dc>
 8001c48:	4649      	mov	r1, r9
 8001c4a:	2900      	cmp	r1, #0
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_dsub+0x78>
 8001c4e:	e0df      	b.n	8001e10 <__aeabi_dsub+0x238>
 8001c50:	4297      	cmp	r7, r2
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dsub+0x7e>
 8001c54:	e194      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001c56:	4652      	mov	r2, sl
 8001c58:	2501      	movs	r5, #1
 8001c5a:	2a38      	cmp	r2, #56	@ 0x38
 8001c5c:	dc19      	bgt.n	8001c92 <__aeabi_dsub+0xba>
 8001c5e:	2280      	movs	r2, #128	@ 0x80
 8001c60:	9b02      	ldr	r3, [sp, #8]
 8001c62:	0412      	lsls	r2, r2, #16
 8001c64:	4313      	orrs	r3, r2
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	4652      	mov	r2, sl
 8001c6a:	2a1f      	cmp	r2, #31
 8001c6c:	dd00      	ble.n	8001c70 <__aeabi_dsub+0x98>
 8001c6e:	e1e3      	b.n	8002038 <__aeabi_dsub+0x460>
 8001c70:	4653      	mov	r3, sl
 8001c72:	2220      	movs	r2, #32
 8001c74:	4661      	mov	r1, ip
 8001c76:	9d02      	ldr	r5, [sp, #8]
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	4095      	lsls	r5, r2
 8001c7c:	40d9      	lsrs	r1, r3
 8001c7e:	430d      	orrs	r5, r1
 8001c80:	4661      	mov	r1, ip
 8001c82:	4091      	lsls	r1, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	1e51      	subs	r1, r2, #1
 8001c88:	418a      	sbcs	r2, r1
 8001c8a:	4315      	orrs	r5, r2
 8001c8c:	9a02      	ldr	r2, [sp, #8]
 8001c8e:	40da      	lsrs	r2, r3
 8001c90:	1aa4      	subs	r4, r4, r2
 8001c92:	1b45      	subs	r5, r0, r5
 8001c94:	42a8      	cmp	r0, r5
 8001c96:	4180      	sbcs	r0, r0
 8001c98:	4240      	negs	r0, r0
 8001c9a:	1a24      	subs	r4, r4, r0
 8001c9c:	0223      	lsls	r3, r4, #8
 8001c9e:	d400      	bmi.n	8001ca2 <__aeabi_dsub+0xca>
 8001ca0:	e13d      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001ca2:	0264      	lsls	r4, r4, #9
 8001ca4:	0a64      	lsrs	r4, r4, #9
 8001ca6:	2c00      	cmp	r4, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0xd4>
 8001caa:	e147      	b.n	8001f3c <__aeabi_dsub+0x364>
 8001cac:	0020      	movs	r0, r4
 8001cae:	f7fe fbfb 	bl	80004a8 <__clzsi2>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	3b08      	subs	r3, #8
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	0028      	movs	r0, r5
 8001cba:	1aca      	subs	r2, r1, r3
 8001cbc:	40d0      	lsrs	r0, r2
 8001cbe:	409c      	lsls	r4, r3
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	409d      	lsls	r5, r3
 8001cc4:	4322      	orrs	r2, r4
 8001cc6:	429f      	cmp	r7, r3
 8001cc8:	dd00      	ble.n	8001ccc <__aeabi_dsub+0xf4>
 8001cca:	e177      	b.n	8001fbc <__aeabi_dsub+0x3e4>
 8001ccc:	1bd8      	subs	r0, r3, r7
 8001cce:	3001      	adds	r0, #1
 8001cd0:	1a09      	subs	r1, r1, r0
 8001cd2:	002c      	movs	r4, r5
 8001cd4:	408d      	lsls	r5, r1
 8001cd6:	40c4      	lsrs	r4, r0
 8001cd8:	1e6b      	subs	r3, r5, #1
 8001cda:	419d      	sbcs	r5, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	40c2      	lsrs	r2, r0
 8001ce0:	408b      	lsls	r3, r1
 8001ce2:	4325      	orrs	r5, r4
 8001ce4:	2700      	movs	r7, #0
 8001ce6:	0014      	movs	r4, r2
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	076b      	lsls	r3, r5, #29
 8001cec:	d009      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cee:	230f      	movs	r3, #15
 8001cf0:	402b      	ands	r3, r5
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d005      	beq.n	8001d02 <__aeabi_dsub+0x12a>
 8001cf6:	1d2b      	adds	r3, r5, #4
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	41ad      	sbcs	r5, r5
 8001cfc:	426d      	negs	r5, r5
 8001cfe:	1964      	adds	r4, r4, r5
 8001d00:	001d      	movs	r5, r3
 8001d02:	0223      	lsls	r3, r4, #8
 8001d04:	d400      	bmi.n	8001d08 <__aeabi_dsub+0x130>
 8001d06:	e140      	b.n	8001f8a <__aeabi_dsub+0x3b2>
 8001d08:	4a88      	ldr	r2, [pc, #544]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001d0a:	3701      	adds	r7, #1
 8001d0c:	4297      	cmp	r7, r2
 8001d0e:	d100      	bne.n	8001d12 <__aeabi_dsub+0x13a>
 8001d10:	e101      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001d12:	2601      	movs	r6, #1
 8001d14:	4643      	mov	r3, r8
 8001d16:	4986      	ldr	r1, [pc, #536]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001d18:	08ed      	lsrs	r5, r5, #3
 8001d1a:	4021      	ands	r1, r4
 8001d1c:	074a      	lsls	r2, r1, #29
 8001d1e:	432a      	orrs	r2, r5
 8001d20:	057c      	lsls	r4, r7, #21
 8001d22:	024d      	lsls	r5, r1, #9
 8001d24:	0b2d      	lsrs	r5, r5, #12
 8001d26:	0d64      	lsrs	r4, r4, #21
 8001d28:	401e      	ands	r6, r3
 8001d2a:	0524      	lsls	r4, r4, #20
 8001d2c:	432c      	orrs	r4, r5
 8001d2e:	07f6      	lsls	r6, r6, #31
 8001d30:	4334      	orrs	r4, r6
 8001d32:	0010      	movs	r0, r2
 8001d34:	0021      	movs	r1, r4
 8001d36:	b005      	add	sp, #20
 8001d38:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3a:	46bb      	mov	fp, r7
 8001d3c:	46b2      	mov	sl, r6
 8001d3e:	46a9      	mov	r9, r5
 8001d40:	46a0      	mov	r8, r4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	2d00      	cmp	r5, #0
 8001d46:	dc00      	bgt.n	8001d4a <__aeabi_dsub+0x172>
 8001d48:	e2d0      	b.n	80022ec <__aeabi_dsub+0x714>
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	2900      	cmp	r1, #0
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dsub+0x17a>
 8001d50:	e0d4      	b.n	8001efc <__aeabi_dsub+0x324>
 8001d52:	4661      	mov	r1, ip
 8001d54:	9b02      	ldr	r3, [sp, #8]
 8001d56:	4319      	orrs	r1, r3
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x184>
 8001d5a:	e12b      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001d5c:	1e69      	subs	r1, r5, #1
 8001d5e:	2d01      	cmp	r5, #1
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x18c>
 8001d62:	e1d9      	b.n	8002118 <__aeabi_dsub+0x540>
 8001d64:	4295      	cmp	r5, r2
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x192>
 8001d68:	e10a      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001d6a:	2501      	movs	r5, #1
 8001d6c:	2938      	cmp	r1, #56	@ 0x38
 8001d6e:	dc17      	bgt.n	8001da0 <__aeabi_dsub+0x1c8>
 8001d70:	468a      	mov	sl, r1
 8001d72:	4653      	mov	r3, sl
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	dd00      	ble.n	8001d7a <__aeabi_dsub+0x1a2>
 8001d78:	e1e7      	b.n	800214a <__aeabi_dsub+0x572>
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	1ad2      	subs	r2, r2, r3
 8001d7e:	9b02      	ldr	r3, [sp, #8]
 8001d80:	4661      	mov	r1, ip
 8001d82:	4093      	lsls	r3, r2
 8001d84:	001d      	movs	r5, r3
 8001d86:	4653      	mov	r3, sl
 8001d88:	40d9      	lsrs	r1, r3
 8001d8a:	4663      	mov	r3, ip
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	001a      	movs	r2, r3
 8001d90:	430d      	orrs	r5, r1
 8001d92:	1e51      	subs	r1, r2, #1
 8001d94:	418a      	sbcs	r2, r1
 8001d96:	4653      	mov	r3, sl
 8001d98:	4315      	orrs	r5, r2
 8001d9a:	9a02      	ldr	r2, [sp, #8]
 8001d9c:	40da      	lsrs	r2, r3
 8001d9e:	18a4      	adds	r4, r4, r2
 8001da0:	182d      	adds	r5, r5, r0
 8001da2:	4285      	cmp	r5, r0
 8001da4:	4180      	sbcs	r0, r0
 8001da6:	4240      	negs	r0, r0
 8001da8:	1824      	adds	r4, r4, r0
 8001daa:	0223      	lsls	r3, r4, #8
 8001dac:	d400      	bmi.n	8001db0 <__aeabi_dsub+0x1d8>
 8001dae:	e0b6      	b.n	8001f1e <__aeabi_dsub+0x346>
 8001db0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001db2:	3701      	adds	r7, #1
 8001db4:	429f      	cmp	r7, r3
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x1e2>
 8001db8:	e0ad      	b.n	8001f16 <__aeabi_dsub+0x33e>
 8001dba:	2101      	movs	r1, #1
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <__aeabi_dsub+0x358>)
 8001dbe:	086a      	lsrs	r2, r5, #1
 8001dc0:	401c      	ands	r4, r3
 8001dc2:	4029      	ands	r1, r5
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	07e5      	lsls	r5, r4, #31
 8001dc8:	4315      	orrs	r5, r2
 8001dca:	0864      	lsrs	r4, r4, #1
 8001dcc:	e78d      	b.n	8001cea <__aeabi_dsub+0x112>
 8001dce:	4a59      	ldr	r2, [pc, #356]	@ (8001f34 <__aeabi_dsub+0x35c>)
 8001dd0:	9b02      	ldr	r3, [sp, #8]
 8001dd2:	4692      	mov	sl, r2
 8001dd4:	4662      	mov	r2, ip
 8001dd6:	44ba      	add	sl, r7
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	d02c      	beq.n	8001e36 <__aeabi_dsub+0x25e>
 8001ddc:	428e      	cmp	r6, r1
 8001dde:	d02e      	beq.n	8001e3e <__aeabi_dsub+0x266>
 8001de0:	4652      	mov	r2, sl
 8001de2:	2a00      	cmp	r2, #0
 8001de4:	d060      	beq.n	8001ea8 <__aeabi_dsub+0x2d0>
 8001de6:	2f00      	cmp	r7, #0
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x214>
 8001dea:	e0db      	b.n	8001fa4 <__aeabi_dsub+0x3cc>
 8001dec:	4663      	mov	r3, ip
 8001dee:	000e      	movs	r6, r1
 8001df0:	9c02      	ldr	r4, [sp, #8]
 8001df2:	08d8      	lsrs	r0, r3, #3
 8001df4:	0762      	lsls	r2, r4, #29
 8001df6:	4302      	orrs	r2, r0
 8001df8:	08e4      	lsrs	r4, r4, #3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	4323      	orrs	r3, r4
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0x22a>
 8001e00:	e254      	b.n	80022ac <__aeabi_dsub+0x6d4>
 8001e02:	2580      	movs	r5, #128	@ 0x80
 8001e04:	032d      	lsls	r5, r5, #12
 8001e06:	4325      	orrs	r5, r4
 8001e08:	032d      	lsls	r5, r5, #12
 8001e0a:	4c48      	ldr	r4, [pc, #288]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e0c:	0b2d      	lsrs	r5, r5, #12
 8001e0e:	e78c      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001e10:	4661      	mov	r1, ip
 8001e12:	9b02      	ldr	r3, [sp, #8]
 8001e14:	4319      	orrs	r1, r3
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x242>
 8001e18:	e0cc      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8001e1a:	0029      	movs	r1, r5
 8001e1c:	3901      	subs	r1, #1
 8001e1e:	2d01      	cmp	r5, #1
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x24c>
 8001e22:	e188      	b.n	8002136 <__aeabi_dsub+0x55e>
 8001e24:	4295      	cmp	r5, r2
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x252>
 8001e28:	e0aa      	b.n	8001f80 <__aeabi_dsub+0x3a8>
 8001e2a:	2501      	movs	r5, #1
 8001e2c:	2938      	cmp	r1, #56	@ 0x38
 8001e2e:	dd00      	ble.n	8001e32 <__aeabi_dsub+0x25a>
 8001e30:	e72f      	b.n	8001c92 <__aeabi_dsub+0xba>
 8001e32:	468a      	mov	sl, r1
 8001e34:	e718      	b.n	8001c68 <__aeabi_dsub+0x90>
 8001e36:	2201      	movs	r2, #1
 8001e38:	4051      	eors	r1, r2
 8001e3a:	428e      	cmp	r6, r1
 8001e3c:	d1d0      	bne.n	8001de0 <__aeabi_dsub+0x208>
 8001e3e:	4653      	mov	r3, sl
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x26e>
 8001e44:	e0be      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 8001e46:	2f00      	cmp	r7, #0
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x274>
 8001e4a:	e138      	b.n	80020be <__aeabi_dsub+0x4e6>
 8001e4c:	46ca      	mov	sl, r9
 8001e4e:	0022      	movs	r2, r4
 8001e50:	4302      	orrs	r2, r0
 8001e52:	d100      	bne.n	8001e56 <__aeabi_dsub+0x27e>
 8001e54:	e1e2      	b.n	800221c <__aeabi_dsub+0x644>
 8001e56:	4653      	mov	r3, sl
 8001e58:	1e59      	subs	r1, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x288>
 8001e5e:	e20d      	b.n	800227c <__aeabi_dsub+0x6a4>
 8001e60:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <__aeabi_dsub+0x354>)
 8001e62:	4592      	cmp	sl, r2
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x290>
 8001e66:	e1d2      	b.n	800220e <__aeabi_dsub+0x636>
 8001e68:	2701      	movs	r7, #1
 8001e6a:	2938      	cmp	r1, #56	@ 0x38
 8001e6c:	dc13      	bgt.n	8001e96 <__aeabi_dsub+0x2be>
 8001e6e:	291f      	cmp	r1, #31
 8001e70:	dd00      	ble.n	8001e74 <__aeabi_dsub+0x29c>
 8001e72:	e1ee      	b.n	8002252 <__aeabi_dsub+0x67a>
 8001e74:	2220      	movs	r2, #32
 8001e76:	9b02      	ldr	r3, [sp, #8]
 8001e78:	1a52      	subs	r2, r2, r1
 8001e7a:	0025      	movs	r5, r4
 8001e7c:	0007      	movs	r7, r0
 8001e7e:	469a      	mov	sl, r3
 8001e80:	40cc      	lsrs	r4, r1
 8001e82:	4090      	lsls	r0, r2
 8001e84:	4095      	lsls	r5, r2
 8001e86:	40cf      	lsrs	r7, r1
 8001e88:	44a2      	add	sl, r4
 8001e8a:	1e42      	subs	r2, r0, #1
 8001e8c:	4190      	sbcs	r0, r2
 8001e8e:	4653      	mov	r3, sl
 8001e90:	432f      	orrs	r7, r5
 8001e92:	4307      	orrs	r7, r0
 8001e94:	9302      	str	r3, [sp, #8]
 8001e96:	003d      	movs	r5, r7
 8001e98:	4465      	add	r5, ip
 8001e9a:	4565      	cmp	r5, ip
 8001e9c:	4192      	sbcs	r2, r2
 8001e9e:	9b02      	ldr	r3, [sp, #8]
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	464f      	mov	r7, r9
 8001ea4:	18d4      	adds	r4, r2, r3
 8001ea6:	e780      	b.n	8001daa <__aeabi_dsub+0x1d2>
 8001ea8:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <__aeabi_dsub+0x360>)
 8001eaa:	1c7d      	adds	r5, r7, #1
 8001eac:	4215      	tst	r5, r2
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_dsub+0x2da>
 8001eb0:	e0aa      	b.n	8002008 <__aeabi_dsub+0x430>
 8001eb2:	4662      	mov	r2, ip
 8001eb4:	0025      	movs	r5, r4
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	4305      	orrs	r5, r0
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	2f00      	cmp	r7, #0
 8001ebe:	d000      	beq.n	8001ec2 <__aeabi_dsub+0x2ea>
 8001ec0:	e0f5      	b.n	80020ae <__aeabi_dsub+0x4d6>
 8001ec2:	2d00      	cmp	r5, #0
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x2f0>
 8001ec6:	e16b      	b.n	80021a0 <__aeabi_dsub+0x5c8>
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x2f6>
 8001ecc:	e152      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001ece:	4663      	mov	r3, ip
 8001ed0:	1ac5      	subs	r5, r0, r3
 8001ed2:	9b02      	ldr	r3, [sp, #8]
 8001ed4:	1ae2      	subs	r2, r4, r3
 8001ed6:	42a8      	cmp	r0, r5
 8001ed8:	419b      	sbcs	r3, r3
 8001eda:	425b      	negs	r3, r3
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	021a      	lsls	r2, r3, #8
 8001ee0:	d400      	bmi.n	8001ee4 <__aeabi_dsub+0x30c>
 8001ee2:	e1d5      	b.n	8002290 <__aeabi_dsub+0x6b8>
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	1a1d      	subs	r5, r3, r0
 8001ee8:	45ac      	cmp	ip, r5
 8001eea:	4192      	sbcs	r2, r2
 8001eec:	2601      	movs	r6, #1
 8001eee:	9b02      	ldr	r3, [sp, #8]
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	1b1c      	subs	r4, r3, r4
 8001ef4:	4688      	mov	r8, r1
 8001ef6:	1aa4      	subs	r4, r4, r2
 8001ef8:	400e      	ands	r6, r1
 8001efa:	e6f6      	b.n	8001cea <__aeabi_dsub+0x112>
 8001efc:	4297      	cmp	r7, r2
 8001efe:	d03f      	beq.n	8001f80 <__aeabi_dsub+0x3a8>
 8001f00:	4652      	mov	r2, sl
 8001f02:	2501      	movs	r5, #1
 8001f04:	2a38      	cmp	r2, #56	@ 0x38
 8001f06:	dd00      	ble.n	8001f0a <__aeabi_dsub+0x332>
 8001f08:	e74a      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8001f0a:	2280      	movs	r2, #128	@ 0x80
 8001f0c:	9b02      	ldr	r3, [sp, #8]
 8001f0e:	0412      	lsls	r2, r2, #16
 8001f10:	4313      	orrs	r3, r2
 8001f12:	9302      	str	r3, [sp, #8]
 8001f14:	e72d      	b.n	8001d72 <__aeabi_dsub+0x19a>
 8001f16:	003c      	movs	r4, r7
 8001f18:	2500      	movs	r5, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	e705      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	402b      	ands	r3, r5
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x350>
 8001f26:	e6e2      	b.n	8001cee <__aeabi_dsub+0x116>
 8001f28:	e06b      	b.n	8002002 <__aeabi_dsub+0x42a>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	000007ff 	.word	0x000007ff
 8001f30:	ff7fffff 	.word	0xff7fffff
 8001f34:	fffff801 	.word	0xfffff801
 8001f38:	000007fe 	.word	0x000007fe
 8001f3c:	0028      	movs	r0, r5
 8001f3e:	f7fe fab3 	bl	80004a8 <__clzsi2>
 8001f42:	0003      	movs	r3, r0
 8001f44:	3318      	adds	r3, #24
 8001f46:	2b1f      	cmp	r3, #31
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x374>
 8001f4a:	e6b4      	b.n	8001cb6 <__aeabi_dsub+0xde>
 8001f4c:	002a      	movs	r2, r5
 8001f4e:	3808      	subs	r0, #8
 8001f50:	4082      	lsls	r2, r0
 8001f52:	429f      	cmp	r7, r3
 8001f54:	dd00      	ble.n	8001f58 <__aeabi_dsub+0x380>
 8001f56:	e0b9      	b.n	80020cc <__aeabi_dsub+0x4f4>
 8001f58:	1bdb      	subs	r3, r3, r7
 8001f5a:	1c58      	adds	r0, r3, #1
 8001f5c:	281f      	cmp	r0, #31
 8001f5e:	dc00      	bgt.n	8001f62 <__aeabi_dsub+0x38a>
 8001f60:	e1a0      	b.n	80022a4 <__aeabi_dsub+0x6cc>
 8001f62:	0015      	movs	r5, r2
 8001f64:	3b1f      	subs	r3, #31
 8001f66:	40dd      	lsrs	r5, r3
 8001f68:	2820      	cmp	r0, #32
 8001f6a:	d005      	beq.n	8001f78 <__aeabi_dsub+0x3a0>
 8001f6c:	2340      	movs	r3, #64	@ 0x40
 8001f6e:	1a1b      	subs	r3, r3, r0
 8001f70:	409a      	lsls	r2, r3
 8001f72:	1e53      	subs	r3, r2, #1
 8001f74:	419a      	sbcs	r2, r3
 8001f76:	4315      	orrs	r5, r2
 8001f78:	2307      	movs	r3, #7
 8001f7a:	2700      	movs	r7, #0
 8001f7c:	402b      	ands	r3, r5
 8001f7e:	e7d0      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8001f80:	08c0      	lsrs	r0, r0, #3
 8001f82:	0762      	lsls	r2, r4, #29
 8001f84:	4302      	orrs	r2, r0
 8001f86:	08e4      	lsrs	r4, r4, #3
 8001f88:	e737      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f8a:	08ea      	lsrs	r2, r5, #3
 8001f8c:	0763      	lsls	r3, r4, #29
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	4bd3      	ldr	r3, [pc, #844]	@ (80022e0 <__aeabi_dsub+0x708>)
 8001f92:	08e4      	lsrs	r4, r4, #3
 8001f94:	429f      	cmp	r7, r3
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dsub+0x3c2>
 8001f98:	e72f      	b.n	8001dfa <__aeabi_dsub+0x222>
 8001f9a:	0324      	lsls	r4, r4, #12
 8001f9c:	0b25      	lsrs	r5, r4, #12
 8001f9e:	057c      	lsls	r4, r7, #21
 8001fa0:	0d64      	lsrs	r4, r4, #21
 8001fa2:	e6c2      	b.n	8001d2a <__aeabi_dsub+0x152>
 8001fa4:	46ca      	mov	sl, r9
 8001fa6:	0022      	movs	r2, r4
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	d158      	bne.n	800205e <__aeabi_dsub+0x486>
 8001fac:	4663      	mov	r3, ip
 8001fae:	000e      	movs	r6, r1
 8001fb0:	9c02      	ldr	r4, [sp, #8]
 8001fb2:	9303      	str	r3, [sp, #12]
 8001fb4:	9b03      	ldr	r3, [sp, #12]
 8001fb6:	4657      	mov	r7, sl
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	e7e7      	b.n	8001f8c <__aeabi_dsub+0x3b4>
 8001fbc:	4cc9      	ldr	r4, [pc, #804]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001fbe:	1aff      	subs	r7, r7, r3
 8001fc0:	4014      	ands	r4, r2
 8001fc2:	e692      	b.n	8001cea <__aeabi_dsub+0x112>
 8001fc4:	4dc8      	ldr	r5, [pc, #800]	@ (80022e8 <__aeabi_dsub+0x710>)
 8001fc6:	1c7a      	adds	r2, r7, #1
 8001fc8:	422a      	tst	r2, r5
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x3f6>
 8001fcc:	e084      	b.n	80020d8 <__aeabi_dsub+0x500>
 8001fce:	0022      	movs	r2, r4
 8001fd0:	4302      	orrs	r2, r0
 8001fd2:	2f00      	cmp	r7, #0
 8001fd4:	d000      	beq.n	8001fd8 <__aeabi_dsub+0x400>
 8001fd6:	e0ef      	b.n	80021b8 <__aeabi_dsub+0x5e0>
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x406>
 8001fdc:	e0e5      	b.n	80021aa <__aeabi_dsub+0x5d2>
 8001fde:	4662      	mov	r2, ip
 8001fe0:	9902      	ldr	r1, [sp, #8]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x410>
 8001fe6:	e0c5      	b.n	8002174 <__aeabi_dsub+0x59c>
 8001fe8:	4663      	mov	r3, ip
 8001fea:	18c5      	adds	r5, r0, r3
 8001fec:	468c      	mov	ip, r1
 8001fee:	4285      	cmp	r5, r0
 8001ff0:	4180      	sbcs	r0, r0
 8001ff2:	4464      	add	r4, ip
 8001ff4:	4240      	negs	r0, r0
 8001ff6:	1824      	adds	r4, r4, r0
 8001ff8:	0223      	lsls	r3, r4, #8
 8001ffa:	d502      	bpl.n	8002002 <__aeabi_dsub+0x42a>
 8001ffc:	4bb9      	ldr	r3, [pc, #740]	@ (80022e4 <__aeabi_dsub+0x70c>)
 8001ffe:	3701      	adds	r7, #1
 8002000:	401c      	ands	r4, r3
 8002002:	46ba      	mov	sl, r7
 8002004:	9503      	str	r5, [sp, #12]
 8002006:	e7d5      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002008:	4662      	mov	r2, ip
 800200a:	1a85      	subs	r5, r0, r2
 800200c:	42a8      	cmp	r0, r5
 800200e:	4192      	sbcs	r2, r2
 8002010:	4252      	negs	r2, r2
 8002012:	4691      	mov	r9, r2
 8002014:	9b02      	ldr	r3, [sp, #8]
 8002016:	1ae3      	subs	r3, r4, r3
 8002018:	001a      	movs	r2, r3
 800201a:	464b      	mov	r3, r9
 800201c:	1ad2      	subs	r2, r2, r3
 800201e:	0013      	movs	r3, r2
 8002020:	4691      	mov	r9, r2
 8002022:	021a      	lsls	r2, r3, #8
 8002024:	d46c      	bmi.n	8002100 <__aeabi_dsub+0x528>
 8002026:	464a      	mov	r2, r9
 8002028:	464c      	mov	r4, r9
 800202a:	432a      	orrs	r2, r5
 800202c:	d000      	beq.n	8002030 <__aeabi_dsub+0x458>
 800202e:	e63a      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002030:	2600      	movs	r6, #0
 8002032:	2400      	movs	r4, #0
 8002034:	2500      	movs	r5, #0
 8002036:	e678      	b.n	8001d2a <__aeabi_dsub+0x152>
 8002038:	9902      	ldr	r1, [sp, #8]
 800203a:	4653      	mov	r3, sl
 800203c:	000d      	movs	r5, r1
 800203e:	3a20      	subs	r2, #32
 8002040:	40d5      	lsrs	r5, r2
 8002042:	2b20      	cmp	r3, #32
 8002044:	d006      	beq.n	8002054 <__aeabi_dsub+0x47c>
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	000b      	movs	r3, r1
 800204c:	4093      	lsls	r3, r2
 800204e:	4662      	mov	r2, ip
 8002050:	431a      	orrs	r2, r3
 8002052:	4693      	mov	fp, r2
 8002054:	465b      	mov	r3, fp
 8002056:	1e5a      	subs	r2, r3, #1
 8002058:	4193      	sbcs	r3, r2
 800205a:	431d      	orrs	r5, r3
 800205c:	e619      	b.n	8001c92 <__aeabi_dsub+0xba>
 800205e:	4653      	mov	r3, sl
 8002060:	1e5a      	subs	r2, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x490>
 8002066:	e0c6      	b.n	80021f6 <__aeabi_dsub+0x61e>
 8002068:	4e9d      	ldr	r6, [pc, #628]	@ (80022e0 <__aeabi_dsub+0x708>)
 800206a:	45b2      	cmp	sl, r6
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x498>
 800206e:	e6bd      	b.n	8001dec <__aeabi_dsub+0x214>
 8002070:	4688      	mov	r8, r1
 8002072:	000e      	movs	r6, r1
 8002074:	2501      	movs	r5, #1
 8002076:	2a38      	cmp	r2, #56	@ 0x38
 8002078:	dc10      	bgt.n	800209c <__aeabi_dsub+0x4c4>
 800207a:	2a1f      	cmp	r2, #31
 800207c:	dc7f      	bgt.n	800217e <__aeabi_dsub+0x5a6>
 800207e:	2120      	movs	r1, #32
 8002080:	0025      	movs	r5, r4
 8002082:	1a89      	subs	r1, r1, r2
 8002084:	0007      	movs	r7, r0
 8002086:	4088      	lsls	r0, r1
 8002088:	408d      	lsls	r5, r1
 800208a:	40d7      	lsrs	r7, r2
 800208c:	40d4      	lsrs	r4, r2
 800208e:	1e41      	subs	r1, r0, #1
 8002090:	4188      	sbcs	r0, r1
 8002092:	9b02      	ldr	r3, [sp, #8]
 8002094:	433d      	orrs	r5, r7
 8002096:	1b1b      	subs	r3, r3, r4
 8002098:	4305      	orrs	r5, r0
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	4662      	mov	r2, ip
 800209e:	1b55      	subs	r5, r2, r5
 80020a0:	45ac      	cmp	ip, r5
 80020a2:	4192      	sbcs	r2, r2
 80020a4:	9b02      	ldr	r3, [sp, #8]
 80020a6:	4252      	negs	r2, r2
 80020a8:	464f      	mov	r7, r9
 80020aa:	1a9c      	subs	r4, r3, r2
 80020ac:	e5f6      	b.n	8001c9c <__aeabi_dsub+0xc4>
 80020ae:	2d00      	cmp	r5, #0
 80020b0:	d000      	beq.n	80020b4 <__aeabi_dsub+0x4dc>
 80020b2:	e0b7      	b.n	8002224 <__aeabi_dsub+0x64c>
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x4e2>
 80020b8:	e0f0      	b.n	800229c <__aeabi_dsub+0x6c4>
 80020ba:	2601      	movs	r6, #1
 80020bc:	400e      	ands	r6, r1
 80020be:	4663      	mov	r3, ip
 80020c0:	9802      	ldr	r0, [sp, #8]
 80020c2:	08d9      	lsrs	r1, r3, #3
 80020c4:	0742      	lsls	r2, r0, #29
 80020c6:	430a      	orrs	r2, r1
 80020c8:	08c4      	lsrs	r4, r0, #3
 80020ca:	e696      	b.n	8001dfa <__aeabi_dsub+0x222>
 80020cc:	4c85      	ldr	r4, [pc, #532]	@ (80022e4 <__aeabi_dsub+0x70c>)
 80020ce:	1aff      	subs	r7, r7, r3
 80020d0:	4014      	ands	r4, r2
 80020d2:	0762      	lsls	r2, r4, #29
 80020d4:	08e4      	lsrs	r4, r4, #3
 80020d6:	e760      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80020d8:	4981      	ldr	r1, [pc, #516]	@ (80022e0 <__aeabi_dsub+0x708>)
 80020da:	428a      	cmp	r2, r1
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dsub+0x508>
 80020de:	e0c9      	b.n	8002274 <__aeabi_dsub+0x69c>
 80020e0:	4663      	mov	r3, ip
 80020e2:	18c1      	adds	r1, r0, r3
 80020e4:	4281      	cmp	r1, r0
 80020e6:	4180      	sbcs	r0, r0
 80020e8:	9b02      	ldr	r3, [sp, #8]
 80020ea:	4240      	negs	r0, r0
 80020ec:	18e3      	adds	r3, r4, r3
 80020ee:	181b      	adds	r3, r3, r0
 80020f0:	07dd      	lsls	r5, r3, #31
 80020f2:	085c      	lsrs	r4, r3, #1
 80020f4:	2307      	movs	r3, #7
 80020f6:	0849      	lsrs	r1, r1, #1
 80020f8:	430d      	orrs	r5, r1
 80020fa:	0017      	movs	r7, r2
 80020fc:	402b      	ands	r3, r5
 80020fe:	e710      	b.n	8001f22 <__aeabi_dsub+0x34a>
 8002100:	4663      	mov	r3, ip
 8002102:	1a1d      	subs	r5, r3, r0
 8002104:	45ac      	cmp	ip, r5
 8002106:	4192      	sbcs	r2, r2
 8002108:	2601      	movs	r6, #1
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	4252      	negs	r2, r2
 800210e:	1b1c      	subs	r4, r3, r4
 8002110:	4688      	mov	r8, r1
 8002112:	1aa4      	subs	r4, r4, r2
 8002114:	400e      	ands	r6, r1
 8002116:	e5c6      	b.n	8001ca6 <__aeabi_dsub+0xce>
 8002118:	4663      	mov	r3, ip
 800211a:	18c5      	adds	r5, r0, r3
 800211c:	9b02      	ldr	r3, [sp, #8]
 800211e:	4285      	cmp	r5, r0
 8002120:	4180      	sbcs	r0, r0
 8002122:	469c      	mov	ip, r3
 8002124:	4240      	negs	r0, r0
 8002126:	4464      	add	r4, ip
 8002128:	1824      	adds	r4, r4, r0
 800212a:	2701      	movs	r7, #1
 800212c:	0223      	lsls	r3, r4, #8
 800212e:	d400      	bmi.n	8002132 <__aeabi_dsub+0x55a>
 8002130:	e6f5      	b.n	8001f1e <__aeabi_dsub+0x346>
 8002132:	2702      	movs	r7, #2
 8002134:	e641      	b.n	8001dba <__aeabi_dsub+0x1e2>
 8002136:	4663      	mov	r3, ip
 8002138:	1ac5      	subs	r5, r0, r3
 800213a:	42a8      	cmp	r0, r5
 800213c:	4180      	sbcs	r0, r0
 800213e:	9b02      	ldr	r3, [sp, #8]
 8002140:	4240      	negs	r0, r0
 8002142:	1ae4      	subs	r4, r4, r3
 8002144:	2701      	movs	r7, #1
 8002146:	1a24      	subs	r4, r4, r0
 8002148:	e5a8      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800214a:	9d02      	ldr	r5, [sp, #8]
 800214c:	4652      	mov	r2, sl
 800214e:	002b      	movs	r3, r5
 8002150:	3a20      	subs	r2, #32
 8002152:	40d3      	lsrs	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	4653      	mov	r3, sl
 8002158:	2b20      	cmp	r3, #32
 800215a:	d006      	beq.n	800216a <__aeabi_dsub+0x592>
 800215c:	2240      	movs	r2, #64	@ 0x40
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	002b      	movs	r3, r5
 8002162:	4093      	lsls	r3, r2
 8002164:	4662      	mov	r2, ip
 8002166:	431a      	orrs	r2, r3
 8002168:	4693      	mov	fp, r2
 800216a:	465d      	mov	r5, fp
 800216c:	1e6b      	subs	r3, r5, #1
 800216e:	419d      	sbcs	r5, r3
 8002170:	430d      	orrs	r5, r1
 8002172:	e615      	b.n	8001da0 <__aeabi_dsub+0x1c8>
 8002174:	0762      	lsls	r2, r4, #29
 8002176:	08c0      	lsrs	r0, r0, #3
 8002178:	4302      	orrs	r2, r0
 800217a:	08e4      	lsrs	r4, r4, #3
 800217c:	e70d      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 800217e:	0011      	movs	r1, r2
 8002180:	0027      	movs	r7, r4
 8002182:	3920      	subs	r1, #32
 8002184:	40cf      	lsrs	r7, r1
 8002186:	2a20      	cmp	r2, #32
 8002188:	d005      	beq.n	8002196 <__aeabi_dsub+0x5be>
 800218a:	2140      	movs	r1, #64	@ 0x40
 800218c:	1a8a      	subs	r2, r1, r2
 800218e:	4094      	lsls	r4, r2
 8002190:	0025      	movs	r5, r4
 8002192:	4305      	orrs	r5, r0
 8002194:	9503      	str	r5, [sp, #12]
 8002196:	9d03      	ldr	r5, [sp, #12]
 8002198:	1e6a      	subs	r2, r5, #1
 800219a:	4195      	sbcs	r5, r2
 800219c:	433d      	orrs	r5, r7
 800219e:	e77d      	b.n	800209c <__aeabi_dsub+0x4c4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x5ce>
 80021a4:	e744      	b.n	8002030 <__aeabi_dsub+0x458>
 80021a6:	2601      	movs	r6, #1
 80021a8:	400e      	ands	r6, r1
 80021aa:	4663      	mov	r3, ip
 80021ac:	08d9      	lsrs	r1, r3, #3
 80021ae:	9b02      	ldr	r3, [sp, #8]
 80021b0:	075a      	lsls	r2, r3, #29
 80021b2:	430a      	orrs	r2, r1
 80021b4:	08dc      	lsrs	r4, r3, #3
 80021b6:	e6f0      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d028      	beq.n	800220e <__aeabi_dsub+0x636>
 80021bc:	4662      	mov	r2, ip
 80021be:	9f02      	ldr	r7, [sp, #8]
 80021c0:	08c0      	lsrs	r0, r0, #3
 80021c2:	433a      	orrs	r2, r7
 80021c4:	d100      	bne.n	80021c8 <__aeabi_dsub+0x5f0>
 80021c6:	e6dc      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 80021c8:	0762      	lsls	r2, r4, #29
 80021ca:	4310      	orrs	r0, r2
 80021cc:	2280      	movs	r2, #128	@ 0x80
 80021ce:	08e4      	lsrs	r4, r4, #3
 80021d0:	0312      	lsls	r2, r2, #12
 80021d2:	4214      	tst	r4, r2
 80021d4:	d009      	beq.n	80021ea <__aeabi_dsub+0x612>
 80021d6:	08fd      	lsrs	r5, r7, #3
 80021d8:	4215      	tst	r5, r2
 80021da:	d106      	bne.n	80021ea <__aeabi_dsub+0x612>
 80021dc:	4663      	mov	r3, ip
 80021de:	2601      	movs	r6, #1
 80021e0:	002c      	movs	r4, r5
 80021e2:	08d8      	lsrs	r0, r3, #3
 80021e4:	077b      	lsls	r3, r7, #29
 80021e6:	4318      	orrs	r0, r3
 80021e8:	400e      	ands	r6, r1
 80021ea:	0f42      	lsrs	r2, r0, #29
 80021ec:	00c0      	lsls	r0, r0, #3
 80021ee:	08c0      	lsrs	r0, r0, #3
 80021f0:	0752      	lsls	r2, r2, #29
 80021f2:	4302      	orrs	r2, r0
 80021f4:	e601      	b.n	8001dfa <__aeabi_dsub+0x222>
 80021f6:	4663      	mov	r3, ip
 80021f8:	1a1d      	subs	r5, r3, r0
 80021fa:	45ac      	cmp	ip, r5
 80021fc:	4192      	sbcs	r2, r2
 80021fe:	9b02      	ldr	r3, [sp, #8]
 8002200:	4252      	negs	r2, r2
 8002202:	1b1c      	subs	r4, r3, r4
 8002204:	000e      	movs	r6, r1
 8002206:	4688      	mov	r8, r1
 8002208:	2701      	movs	r7, #1
 800220a:	1aa4      	subs	r4, r4, r2
 800220c:	e546      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800220e:	4663      	mov	r3, ip
 8002210:	08d9      	lsrs	r1, r3, #3
 8002212:	9b02      	ldr	r3, [sp, #8]
 8002214:	075a      	lsls	r2, r3, #29
 8002216:	430a      	orrs	r2, r1
 8002218:	08dc      	lsrs	r4, r3, #3
 800221a:	e5ee      	b.n	8001dfa <__aeabi_dsub+0x222>
 800221c:	4663      	mov	r3, ip
 800221e:	9c02      	ldr	r4, [sp, #8]
 8002220:	9303      	str	r3, [sp, #12]
 8002222:	e6c7      	b.n	8001fb4 <__aeabi_dsub+0x3dc>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	2a00      	cmp	r2, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x654>
 800222a:	e6aa      	b.n	8001f82 <__aeabi_dsub+0x3aa>
 800222c:	0762      	lsls	r2, r4, #29
 800222e:	4310      	orrs	r0, r2
 8002230:	2280      	movs	r2, #128	@ 0x80
 8002232:	08e4      	lsrs	r4, r4, #3
 8002234:	0312      	lsls	r2, r2, #12
 8002236:	4214      	tst	r4, r2
 8002238:	d0d7      	beq.n	80021ea <__aeabi_dsub+0x612>
 800223a:	9f02      	ldr	r7, [sp, #8]
 800223c:	08fd      	lsrs	r5, r7, #3
 800223e:	4215      	tst	r5, r2
 8002240:	d1d3      	bne.n	80021ea <__aeabi_dsub+0x612>
 8002242:	4663      	mov	r3, ip
 8002244:	2601      	movs	r6, #1
 8002246:	08d8      	lsrs	r0, r3, #3
 8002248:	077b      	lsls	r3, r7, #29
 800224a:	002c      	movs	r4, r5
 800224c:	4318      	orrs	r0, r3
 800224e:	400e      	ands	r6, r1
 8002250:	e7cb      	b.n	80021ea <__aeabi_dsub+0x612>
 8002252:	000a      	movs	r2, r1
 8002254:	0027      	movs	r7, r4
 8002256:	3a20      	subs	r2, #32
 8002258:	40d7      	lsrs	r7, r2
 800225a:	2920      	cmp	r1, #32
 800225c:	d005      	beq.n	800226a <__aeabi_dsub+0x692>
 800225e:	2240      	movs	r2, #64	@ 0x40
 8002260:	1a52      	subs	r2, r2, r1
 8002262:	4094      	lsls	r4, r2
 8002264:	0025      	movs	r5, r4
 8002266:	4305      	orrs	r5, r0
 8002268:	9503      	str	r5, [sp, #12]
 800226a:	9d03      	ldr	r5, [sp, #12]
 800226c:	1e6a      	subs	r2, r5, #1
 800226e:	4195      	sbcs	r5, r2
 8002270:	432f      	orrs	r7, r5
 8002272:	e610      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002274:	0014      	movs	r4, r2
 8002276:	2500      	movs	r5, #0
 8002278:	2200      	movs	r2, #0
 800227a:	e556      	b.n	8001d2a <__aeabi_dsub+0x152>
 800227c:	9b02      	ldr	r3, [sp, #8]
 800227e:	4460      	add	r0, ip
 8002280:	4699      	mov	r9, r3
 8002282:	4560      	cmp	r0, ip
 8002284:	4192      	sbcs	r2, r2
 8002286:	444c      	add	r4, r9
 8002288:	4252      	negs	r2, r2
 800228a:	0005      	movs	r5, r0
 800228c:	18a4      	adds	r4, r4, r2
 800228e:	e74c      	b.n	800212a <__aeabi_dsub+0x552>
 8002290:	001a      	movs	r2, r3
 8002292:	001c      	movs	r4, r3
 8002294:	432a      	orrs	r2, r5
 8002296:	d000      	beq.n	800229a <__aeabi_dsub+0x6c2>
 8002298:	e6b3      	b.n	8002002 <__aeabi_dsub+0x42a>
 800229a:	e6c9      	b.n	8002030 <__aeabi_dsub+0x458>
 800229c:	2480      	movs	r4, #128	@ 0x80
 800229e:	2600      	movs	r6, #0
 80022a0:	0324      	lsls	r4, r4, #12
 80022a2:	e5ae      	b.n	8001e02 <__aeabi_dsub+0x22a>
 80022a4:	2120      	movs	r1, #32
 80022a6:	2500      	movs	r5, #0
 80022a8:	1a09      	subs	r1, r1, r0
 80022aa:	e517      	b.n	8001cdc <__aeabi_dsub+0x104>
 80022ac:	2200      	movs	r2, #0
 80022ae:	2500      	movs	r5, #0
 80022b0:	4c0b      	ldr	r4, [pc, #44]	@ (80022e0 <__aeabi_dsub+0x708>)
 80022b2:	e53a      	b.n	8001d2a <__aeabi_dsub+0x152>
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	d100      	bne.n	80022ba <__aeabi_dsub+0x6e2>
 80022b8:	e5f6      	b.n	8001ea8 <__aeabi_dsub+0x2d0>
 80022ba:	464b      	mov	r3, r9
 80022bc:	1bda      	subs	r2, r3, r7
 80022be:	4692      	mov	sl, r2
 80022c0:	2f00      	cmp	r7, #0
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dsub+0x6ee>
 80022c4:	e66f      	b.n	8001fa6 <__aeabi_dsub+0x3ce>
 80022c6:	2a38      	cmp	r2, #56	@ 0x38
 80022c8:	dc05      	bgt.n	80022d6 <__aeabi_dsub+0x6fe>
 80022ca:	2680      	movs	r6, #128	@ 0x80
 80022cc:	0436      	lsls	r6, r6, #16
 80022ce:	4334      	orrs	r4, r6
 80022d0:	4688      	mov	r8, r1
 80022d2:	000e      	movs	r6, r1
 80022d4:	e6d1      	b.n	800207a <__aeabi_dsub+0x4a2>
 80022d6:	4688      	mov	r8, r1
 80022d8:	000e      	movs	r6, r1
 80022da:	2501      	movs	r5, #1
 80022dc:	e6de      	b.n	800209c <__aeabi_dsub+0x4c4>
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	000007ff 	.word	0x000007ff
 80022e4:	ff7fffff 	.word	0xff7fffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dsub+0x71a>
 80022f0:	e668      	b.n	8001fc4 <__aeabi_dsub+0x3ec>
 80022f2:	464b      	mov	r3, r9
 80022f4:	1bd9      	subs	r1, r3, r7
 80022f6:	2f00      	cmp	r7, #0
 80022f8:	d101      	bne.n	80022fe <__aeabi_dsub+0x726>
 80022fa:	468a      	mov	sl, r1
 80022fc:	e5a7      	b.n	8001e4e <__aeabi_dsub+0x276>
 80022fe:	2701      	movs	r7, #1
 8002300:	2938      	cmp	r1, #56	@ 0x38
 8002302:	dd00      	ble.n	8002306 <__aeabi_dsub+0x72e>
 8002304:	e5c7      	b.n	8001e96 <__aeabi_dsub+0x2be>
 8002306:	2280      	movs	r2, #128	@ 0x80
 8002308:	0412      	lsls	r2, r2, #16
 800230a:	4314      	orrs	r4, r2
 800230c:	e5af      	b.n	8001e6e <__aeabi_dsub+0x296>
 800230e:	46c0      	nop			@ (mov r8, r8)

08002310 <__aeabi_dcmpun>:
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	46c6      	mov	lr, r8
 8002314:	031e      	lsls	r6, r3, #12
 8002316:	0b36      	lsrs	r6, r6, #12
 8002318:	46b0      	mov	r8, r6
 800231a:	4e0d      	ldr	r6, [pc, #52]	@ (8002350 <__aeabi_dcmpun+0x40>)
 800231c:	030c      	lsls	r4, r1, #12
 800231e:	004d      	lsls	r5, r1, #1
 8002320:	005f      	lsls	r7, r3, #1
 8002322:	b500      	push	{lr}
 8002324:	0b24      	lsrs	r4, r4, #12
 8002326:	0d6d      	lsrs	r5, r5, #21
 8002328:	0d7f      	lsrs	r7, r7, #21
 800232a:	42b5      	cmp	r5, r6
 800232c:	d00b      	beq.n	8002346 <__aeabi_dcmpun+0x36>
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__aeabi_dcmpun+0x40>)
 8002330:	2000      	movs	r0, #0
 8002332:	428f      	cmp	r7, r1
 8002334:	d104      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 8002336:	4646      	mov	r6, r8
 8002338:	4316      	orrs	r6, r2
 800233a:	0030      	movs	r0, r6
 800233c:	1e43      	subs	r3, r0, #1
 800233e:	4198      	sbcs	r0, r3
 8002340:	bc80      	pop	{r7}
 8002342:	46b8      	mov	r8, r7
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	4304      	orrs	r4, r0
 8002348:	2001      	movs	r0, #1
 800234a:	2c00      	cmp	r4, #0
 800234c:	d1f8      	bne.n	8002340 <__aeabi_dcmpun+0x30>
 800234e:	e7ee      	b.n	800232e <__aeabi_dcmpun+0x1e>
 8002350:	000007ff 	.word	0x000007ff

08002354 <__aeabi_d2iz>:
 8002354:	000b      	movs	r3, r1
 8002356:	0002      	movs	r2, r0
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4d16      	ldr	r5, [pc, #88]	@ (80023b4 <__aeabi_d2iz+0x60>)
 800235c:	030c      	lsls	r4, r1, #12
 800235e:	b082      	sub	sp, #8
 8002360:	0049      	lsls	r1, r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	0b24      	lsrs	r4, r4, #12
 800236a:	0d49      	lsrs	r1, r1, #21
 800236c:	0fde      	lsrs	r6, r3, #31
 800236e:	42a9      	cmp	r1, r5
 8002370:	dd04      	ble.n	800237c <__aeabi_d2iz+0x28>
 8002372:	4811      	ldr	r0, [pc, #68]	@ (80023b8 <__aeabi_d2iz+0x64>)
 8002374:	4281      	cmp	r1, r0
 8002376:	dd03      	ble.n	8002380 <__aeabi_d2iz+0x2c>
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <__aeabi_d2iz+0x68>)
 800237a:	18f0      	adds	r0, r6, r3
 800237c:	b002      	add	sp, #8
 800237e:	bd70      	pop	{r4, r5, r6, pc}
 8002380:	2080      	movs	r0, #128	@ 0x80
 8002382:	0340      	lsls	r0, r0, #13
 8002384:	4320      	orrs	r0, r4
 8002386:	4c0e      	ldr	r4, [pc, #56]	@ (80023c0 <__aeabi_d2iz+0x6c>)
 8002388:	1a64      	subs	r4, r4, r1
 800238a:	2c1f      	cmp	r4, #31
 800238c:	dd08      	ble.n	80023a0 <__aeabi_d2iz+0x4c>
 800238e:	4b0d      	ldr	r3, [pc, #52]	@ (80023c4 <__aeabi_d2iz+0x70>)
 8002390:	1a5b      	subs	r3, r3, r1
 8002392:	40d8      	lsrs	r0, r3
 8002394:	0003      	movs	r3, r0
 8002396:	4258      	negs	r0, r3
 8002398:	2e00      	cmp	r6, #0
 800239a:	d1ef      	bne.n	800237c <__aeabi_d2iz+0x28>
 800239c:	0018      	movs	r0, r3
 800239e:	e7ed      	b.n	800237c <__aeabi_d2iz+0x28>
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <__aeabi_d2iz+0x74>)
 80023a2:	9a00      	ldr	r2, [sp, #0]
 80023a4:	469c      	mov	ip, r3
 80023a6:	0003      	movs	r3, r0
 80023a8:	4461      	add	r1, ip
 80023aa:	408b      	lsls	r3, r1
 80023ac:	40e2      	lsrs	r2, r4
 80023ae:	4313      	orrs	r3, r2
 80023b0:	e7f1      	b.n	8002396 <__aeabi_d2iz+0x42>
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	000003fe 	.word	0x000003fe
 80023b8:	0000041d 	.word	0x0000041d
 80023bc:	7fffffff 	.word	0x7fffffff
 80023c0:	00000433 	.word	0x00000433
 80023c4:	00000413 	.word	0x00000413
 80023c8:	fffffbed 	.word	0xfffffbed

080023cc <__aeabi_i2d>:
 80023cc:	b570      	push	{r4, r5, r6, lr}
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d016      	beq.n	8002400 <__aeabi_i2d+0x34>
 80023d2:	17c3      	asrs	r3, r0, #31
 80023d4:	18c5      	adds	r5, r0, r3
 80023d6:	405d      	eors	r5, r3
 80023d8:	0fc4      	lsrs	r4, r0, #31
 80023da:	0028      	movs	r0, r5
 80023dc:	f7fe f864 	bl	80004a8 <__clzsi2>
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <__aeabi_i2d+0x58>)
 80023e2:	1a1b      	subs	r3, r3, r0
 80023e4:	055b      	lsls	r3, r3, #21
 80023e6:	0d5b      	lsrs	r3, r3, #21
 80023e8:	280a      	cmp	r0, #10
 80023ea:	dc14      	bgt.n	8002416 <__aeabi_i2d+0x4a>
 80023ec:	0002      	movs	r2, r0
 80023ee:	002e      	movs	r6, r5
 80023f0:	3215      	adds	r2, #21
 80023f2:	4096      	lsls	r6, r2
 80023f4:	220b      	movs	r2, #11
 80023f6:	1a12      	subs	r2, r2, r0
 80023f8:	40d5      	lsrs	r5, r2
 80023fa:	032d      	lsls	r5, r5, #12
 80023fc:	0b2d      	lsrs	r5, r5, #12
 80023fe:	e003      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002400:	2400      	movs	r4, #0
 8002402:	2300      	movs	r3, #0
 8002404:	2500      	movs	r5, #0
 8002406:	2600      	movs	r6, #0
 8002408:	051b      	lsls	r3, r3, #20
 800240a:	432b      	orrs	r3, r5
 800240c:	07e4      	lsls	r4, r4, #31
 800240e:	4323      	orrs	r3, r4
 8002410:	0030      	movs	r0, r6
 8002412:	0019      	movs	r1, r3
 8002414:	bd70      	pop	{r4, r5, r6, pc}
 8002416:	380b      	subs	r0, #11
 8002418:	4085      	lsls	r5, r0
 800241a:	032d      	lsls	r5, r5, #12
 800241c:	2600      	movs	r6, #0
 800241e:	0b2d      	lsrs	r5, r5, #12
 8002420:	e7f2      	b.n	8002408 <__aeabi_i2d+0x3c>
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	0000041e 	.word	0x0000041e

08002428 <__aeabi_ui2d>:
 8002428:	b510      	push	{r4, lr}
 800242a:	1e04      	subs	r4, r0, #0
 800242c:	d010      	beq.n	8002450 <__aeabi_ui2d+0x28>
 800242e:	f7fe f83b 	bl	80004a8 <__clzsi2>
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <__aeabi_ui2d+0x44>)
 8002434:	1a1b      	subs	r3, r3, r0
 8002436:	055b      	lsls	r3, r3, #21
 8002438:	0d5b      	lsrs	r3, r3, #21
 800243a:	280a      	cmp	r0, #10
 800243c:	dc0f      	bgt.n	800245e <__aeabi_ui2d+0x36>
 800243e:	220b      	movs	r2, #11
 8002440:	0021      	movs	r1, r4
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	40d1      	lsrs	r1, r2
 8002446:	3015      	adds	r0, #21
 8002448:	030a      	lsls	r2, r1, #12
 800244a:	4084      	lsls	r4, r0
 800244c:	0b12      	lsrs	r2, r2, #12
 800244e:	e001      	b.n	8002454 <__aeabi_ui2d+0x2c>
 8002450:	2300      	movs	r3, #0
 8002452:	2200      	movs	r2, #0
 8002454:	051b      	lsls	r3, r3, #20
 8002456:	4313      	orrs	r3, r2
 8002458:	0020      	movs	r0, r4
 800245a:	0019      	movs	r1, r3
 800245c:	bd10      	pop	{r4, pc}
 800245e:	0022      	movs	r2, r4
 8002460:	380b      	subs	r0, #11
 8002462:	4082      	lsls	r2, r0
 8002464:	0312      	lsls	r2, r2, #12
 8002466:	2400      	movs	r4, #0
 8002468:	0b12      	lsrs	r2, r2, #12
 800246a:	e7f3      	b.n	8002454 <__aeabi_ui2d+0x2c>
 800246c:	0000041e 	.word	0x0000041e

08002470 <__clzdi2>:
 8002470:	b510      	push	{r4, lr}
 8002472:	2900      	cmp	r1, #0
 8002474:	d103      	bne.n	800247e <__clzdi2+0xe>
 8002476:	f7fe f817 	bl	80004a8 <__clzsi2>
 800247a:	3020      	adds	r0, #32
 800247c:	e002      	b.n	8002484 <__clzdi2+0x14>
 800247e:	0008      	movs	r0, r1
 8002480:	f7fe f812 	bl	80004a8 <__clzsi2>
 8002484:	bd10      	pop	{r4, pc}
 8002486:	46c0      	nop			@ (mov r8, r8)

08002488 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}

080024aa <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d101      	bne.n	80024c2 <LL_SPI_IsActiveFlag_TXE+0x18>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	330c      	adds	r3, #12
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	000a      	movs	r2, r1
 80024ee:	1cfb      	adds	r3, r7, #3
 80024f0:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	330c      	adds	r3, #12
 80024f6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1cfa      	adds	r2, r7, #3
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002500:	46c0      	nop			@ (mov r8, r8)
 8002502:	46bd      	mov	sp, r7
 8002504:	b004      	add	sp, #16
 8002506:	bd80      	pop	{r7, pc}

08002508 <spi_select_slave>:
 * @brief True if we've set the RTC from the cloud time
 */
// bool timeSet = false;

static inline void spi_select_slave(bool select)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	0002      	movs	r2, r0
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	701a      	strb	r2, [r3, #0]
    if (select)
 8002514:	1dfb      	adds	r3, r7, #7
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <spi_select_slave+0x1e>
    {
        RTC_H();
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <spi_select_slave+0x30>)
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	01d2      	lsls	r2, r2, #7
 8002522:	619a      	str	r2, [r3, #24]
    }
    else
    {
        RTC_L();
    }
}
 8002524:	e003      	b.n	800252e <spi_select_slave+0x26>
        RTC_L();
 8002526:	4b04      	ldr	r3, [pc, #16]	@ (8002538 <spi_select_slave+0x30>)
 8002528:	2280      	movs	r2, #128	@ 0x80
 800252a:	05d2      	lsls	r2, r2, #23
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	50000400 	.word	0x50000400

0800253c <resetConfig>:

    return (value & REG_OSC_STATUS_OMODE) != 0;
}

bool resetConfig(uint32_t flags)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    printf("resetConfig(0x%08lx)\n", flags);
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4b3f      	ldr	r3, [pc, #252]	@ (8002644 <resetConfig+0x108>)
 8002548:	0011      	movs	r1, r2
 800254a:	0018      	movs	r0, r3
 800254c:	f003 f87a 	bl	8005644 <printf_>

    // Reset configuration registers to default values
    write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 8002550:	230f      	movs	r3, #15
 8002552:	2200      	movs	r2, #0
 8002554:	0011      	movs	r1, r2
 8002556:	0018      	movs	r0, r3
 8002558:	f000 fc54 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_CTRL_1, REG_CTRL_1_DEFAULT);
 800255c:	2310      	movs	r3, #16
 800255e:	2212      	movs	r2, #18
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f000 fc4e 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_CTRL_2, REG_CTRL_2_DEFAULT);
 8002568:	2311      	movs	r3, #17
 800256a:	223c      	movs	r2, #60	@ 0x3c
 800256c:	0011      	movs	r1, r2
 800256e:	0018      	movs	r0, r3
 8002570:	f000 fc48 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_INT_MASK, REG_INT_MASK_DEFAULT);
 8002574:	2312      	movs	r3, #18
 8002576:	22e0      	movs	r2, #224	@ 0xe0
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f000 fc42 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_SQW, REG_SQW_DEFAULT);
 8002580:	2313      	movs	r3, #19
 8002582:	2226      	movs	r2, #38	@ 0x26
 8002584:	0011      	movs	r1, r2
 8002586:	0018      	movs	r0, r3
 8002588:	f000 fc3c 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT);
 800258c:	2317      	movs	r3, #23
 800258e:	2200      	movs	r2, #0
 8002590:	0011      	movs	r1, r2
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fc36 	bl	8002e04 <write_rtc_register>

    if ((flags & RESET_PRESERVE_REPEATING_TIMER) != 0)
 8002598:	2201      	movs	r2, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4013      	ands	r3, r2
 800259e:	d010      	beq.n	80025c2 <resetConfig+0x86>
    {
        maskRegister(REG_TIMER_CTRL, ~REG_TIMER_CTRL_RPT_MASK, REG_TIMER_CTRL_DEFAULT & ~REG_TIMER_CTRL_RPT_MASK, false);
 80025a0:	2018      	movs	r0, #24
 80025a2:	231c      	movs	r3, #28
 80025a4:	43db      	mvns	r3, r3
 80025a6:	b2d9      	uxtb	r1, r3
 80025a8:	231c      	movs	r3, #28
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	2223      	movs	r2, #35	@ 0x23
 80025b2:	b252      	sxtb	r2, r2
 80025b4:	4013      	ands	r3, r2
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	f000 fa54 	bl	8002a68 <maskRegister>
 80025c0:	e005      	b.n	80025ce <resetConfig+0x92>
    }
    else
    {
        write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 80025c2:	2318      	movs	r3, #24
 80025c4:	2223      	movs	r2, #35	@ 0x23
 80025c6:	0011      	movs	r1, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	f000 fc1b 	bl	8002e04 <write_rtc_register>
    }

    write_rtc_register(REG_TIMER, REG_TIMER_DEFAULT);
 80025ce:	2319      	movs	r3, #25
 80025d0:	2200      	movs	r2, #0
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fc15 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT);
 80025da:	231a      	movs	r3, #26
 80025dc:	2200      	movs	r2, #0
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fc0f 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_WDT, REG_WDT_DEFAULT);
 80025e6:	231b      	movs	r3, #27
 80025e8:	2200      	movs	r2, #0
 80025ea:	0011      	movs	r1, r2
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 fc09 	bl	8002e04 <write_rtc_register>

    uint8_t oscCtrl = REG_OSC_CTRL_DEFAULT;
 80025f2:	200f      	movs	r0, #15
 80025f4:	183b      	adds	r3, r7, r0
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
    if ((flags & RESET_DISABLE_XT) != 0)
 80025fa:	2202      	movs	r2, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4013      	ands	r3, r2
 8002600:	d008      	beq.n	8002614 <resetConfig+0xd8>
    {
        // If disabling XT oscillator, set OSEL to 1 (RC oscillator)
        // Also enable FOS so if the XT oscillator fails, it will switch to RC (just in case)
        // and ACAL to 0 (however REG_OSC_CTRL_DEFAULT already sets ACAL to 0)
        oscCtrl |= REG_OSC_CTRL_OSEL | REG_OSC_CTRL_FOS;
 8002602:	2280      	movs	r2, #128	@ 0x80
 8002604:	2308      	movs	r3, #8
 8002606:	4313      	orrs	r3, r2
 8002608:	b2d9      	uxtb	r1, r3
 800260a:	183b      	adds	r3, r7, r0
 800260c:	183a      	adds	r2, r7, r0
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
    }
    // write_rtc_register(REG_OSC_CTRL, oscCtrl);
    // write_rtc_register(REG_TRICKLE, REG_TRICKLE_DEFAULT);
    write_rtc_register(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT);
 8002614:	2321      	movs	r3, #33	@ 0x21
 8002616:	22f0      	movs	r2, #240	@ 0xf0
 8002618:	0011      	movs	r1, r2
 800261a:	0018      	movs	r0, r3
 800261c:	f000 fbf2 	bl	8002e04 <write_rtc_register>
    write_rtc_register(REG_AFCTRL, REG_AFCTRL_DEFAULT);
 8002620:	2326      	movs	r3, #38	@ 0x26
 8002622:	2200      	movs	r2, #0
 8002624:	0011      	movs	r1, r2
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fbec 	bl	8002e04 <write_rtc_register>
    // write_rtc_register(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT);
    write_rtc_register(REG_OCTRL, REG_OCTRL_DEFAULT);
 800262c:	2330      	movs	r3, #48	@ 0x30
 800262e:	2200      	movs	r2, #0
 8002630:	0011      	movs	r1, r2
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fbe6 	bl	8002e04 <write_rtc_register>

    return true;
 8002638:	2301      	movs	r3, #1
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	0800f9dc 	.word	0x0800f9dc

08002648 <setWDT>:

    return true;
}

bool setWDT(int seconds)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    bool bResult = false;
 8002650:	230f      	movs	r3, #15
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
    // printf("setWDT %d\n", seconds);

    if (seconds < 0)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da02      	bge.n	8002664 <setWDT+0x1c>
    {
        seconds = watchdogSecs;
 800265e:	4b2d      	ldr	r3, [pc, #180]	@ (8002714 <setWDT+0xcc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	607b      	str	r3, [r7, #4]
    }

    if (seconds == 0)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d112      	bne.n	8002690 <setWDT+0x48>
    {
        // Disable WDT
        bResult = write_rtc_register(REG_WDT, 0x00);
 800266a:	231b      	movs	r3, #27
 800266c:	2100      	movs	r1, #0
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fbc8 	bl	8002e04 <write_rtc_register>
 8002674:	0003      	movs	r3, r0
 8002676:	001a      	movs	r2, r3
 8002678:	230f      	movs	r3, #15
 800267a:	18fb      	adds	r3, r7, r3
 800267c:	1e51      	subs	r1, r2, #1
 800267e:	418a      	sbcs	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]

        watchdogSecs = 0;
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <setWDT+0xcc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
        watchdogUpdatePeriod = 0;
 8002688:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <setWDT+0xd0>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e03a      	b.n	8002706 <setWDT+0xbe>
    }
    else
    {
        // Use 1/4 Hz clock
        int fourSecs = seconds / 4;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <setWDT+0x50>
 8002696:	3303      	adds	r3, #3
 8002698:	109b      	asrs	r3, r3, #2
 800269a:	60bb      	str	r3, [r7, #8]
        if (fourSecs < 1)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	dc01      	bgt.n	80026a6 <setWDT+0x5e>
        {
            fourSecs = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
        }
        if (fourSecs > 31)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b1f      	cmp	r3, #31
 80026aa:	dd01      	ble.n	80026b0 <setWDT+0x68>
        {
            fourSecs = 31;
 80026ac:	231f      	movs	r3, #31
 80026ae:	60bb      	str	r3, [r7, #8]
        }
        bResult = write_rtc_register(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
 80026b0:	201b      	movs	r0, #27
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	2380      	movs	r3, #128	@ 0x80
 80026ba:	b25b      	sxtb	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	2303      	movs	r3, #3
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	0019      	movs	r1, r3
 80026cc:	f000 fb9a 	bl	8002e04 <write_rtc_register>
 80026d0:	0003      	movs	r3, r0
 80026d2:	001a      	movs	r2, r3
 80026d4:	200f      	movs	r0, #15
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	1e51      	subs	r1, r2, #1
 80026da:	418a      	sbcs	r2, r1
 80026dc:	701a      	strb	r2, [r3, #0]

        printf("watchdog set fourSecs=%d bResult=%d\n", fourSecs, bResult);
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <setWDT+0xd4>)
 80026e6:	0018      	movs	r0, r3
 80026e8:	f002 ffac 	bl	8005644 <printf_>

        watchdogSecs = seconds;
 80026ec:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <setWDT+0xcc>)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	601a      	str	r2, [r3, #0]

        // Update watchdog half way through period
        watchdogUpdatePeriod = (fourSecs * 2000);
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	0013      	movs	r3, r2
 80026f6:	015b      	lsls	r3, r3, #5
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	001a      	movs	r2, r3
 8002702:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <setWDT+0xd0>)
 8002704:	601a      	str	r2, [r3, #0]
    }

    return bResult;
 8002706:	230f      	movs	r3, #15
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	781b      	ldrb	r3, [r3, #0]
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b004      	add	sp, #16
 8002712:	bd80      	pop	{r7, pc}
 8002714:	2000035c 	.word	0x2000035c
 8002718:	20000360 	.word	0x20000360
 800271c:	0800fa3c 	.word	0x0800fa3c

08002720 <deepPowerDown>:

    return true;
}

bool deepPowerDown(int seconds)
{
 8002720:	b5b0      	push	{r4, r5, r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
    const char *errorMsg = "failure in deepPowerDown %d\n";
 8002728:	4b6e      	ldr	r3, [pc, #440]	@ (80028e4 <deepPowerDown+0x1c4>)
 800272a:	617b      	str	r3, [r7, #20]
    bool bResult;

    printf("deepPowerDown %d\n", seconds);
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4b6e      	ldr	r3, [pc, #440]	@ (80028e8 <deepPowerDown+0x1c8>)
 8002730:	0011      	movs	r1, r2
 8002732:	0018      	movs	r0, r3
 8002734:	f002 ff86 	bl	8005644 <printf_>

    // Disable watchdog
    bResult = setWDT(0);
 8002738:	2513      	movs	r5, #19
 800273a:	197c      	adds	r4, r7, r5
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff ff83 	bl	8002648 <setWDT>
 8002742:	0003      	movs	r3, r0
 8002744:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002746:	197b      	adds	r3, r7, r5
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	4053      	eors	r3, r2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <deepPowerDown+0x48>
    {
        printf(errorMsg, __LINE__);
 8002754:	2346      	movs	r3, #70	@ 0x46
 8002756:	33ff      	adds	r3, #255	@ 0xff
 8002758:	001a      	movs	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f002 ff70 	bl	8005644 <printf_>
        return false;
 8002764:	2300      	movs	r3, #0
 8002766:	e0b8      	b.n	80028da <deepPowerDown+0x1ba>
    }

    bResult = setCountdownTimer(seconds, false);
 8002768:	2513      	movs	r5, #19
 800276a:	197c      	adds	r4, r7, r5
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2100      	movs	r1, #0
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f8bf 	bl	80028f4 <setCountdownTimer>
 8002776:	0003      	movs	r3, r0
 8002778:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 800277a:	197b      	adds	r3, r7, r5
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2201      	movs	r2, #1
 8002780:	4053      	eors	r3, r2
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <deepPowerDown+0x7a>
    {
        printf(errorMsg, __LINE__);
 8002788:	23a6      	movs	r3, #166	@ 0xa6
 800278a:	005a      	lsls	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	0011      	movs	r1, r2
 8002790:	0018      	movs	r0, r3
 8002792:	f002 ff57 	bl	8005644 <printf_>
        return false;
 8002796:	2300      	movs	r3, #0
 8002798:	e09f      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // Make sure STOP (stop clocking system is 0, otherwise sleep mode cannot be entered)
    // PWR2 = 1 (low resistance power switch)
    // (also would probably work with PWR2 = 0, as nIRQ2 should be high-true for sleep mode)
    bResult = maskRegister(REG_CTRL_1, (uint8_t) ~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2, 0);
 800279a:	2010      	movs	r0, #16
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	2308      	movs	r3, #8
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	b2d9      	uxtb	r1, r3
 80027a8:	2202      	movs	r2, #2
 80027aa:	2513      	movs	r5, #19
 80027ac:	197c      	adds	r4, r7, r5
 80027ae:	2300      	movs	r3, #0
 80027b0:	f000 f95a 	bl	8002a68 <maskRegister>
 80027b4:	0003      	movs	r3, r0
 80027b6:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027b8:	197b      	adds	r3, r7, r5
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2201      	movs	r2, #1
 80027be:	4053      	eors	r3, r2
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <deepPowerDown+0xb8>
    {
        printf(errorMsg, __LINE__);
 80027c6:	23ab      	movs	r3, #171	@ 0xab
 80027c8:	005a      	lsls	r2, r3, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f002 ff38 	bl	8005644 <printf_>
        return false;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e080      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // Disable the I/O interface in sleep
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT, 0);
 80027d8:	231c      	movs	r3, #28
 80027da:	2104      	movs	r1, #4
 80027dc:	2513      	movs	r5, #19
 80027de:	197c      	adds	r4, r7, r5
 80027e0:	2200      	movs	r2, #0
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f9a0 	bl	8002b28 <setRegisterBit>
 80027e8:	0003      	movs	r3, r0
 80027ea:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80027ec:	197b      	adds	r3, r7, r5
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4053      	eors	r3, r2
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <deepPowerDown+0xec>
    {
        printf(errorMsg, __LINE__);
 80027fa:	23af      	movs	r3, #175	@ 0xaf
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	0011      	movs	r1, r2
 8002802:	0018      	movs	r0, r3
 8002804:	f002 ff1e 	bl	8005644 <printf_>
        return false;
 8002808:	2300      	movs	r3, #0
 800280a:	e066      	b.n	80028da <deepPowerDown+0x1ba>
    }

    // OUT2S = 6 to enable sleep mode
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP, 0);
 800280c:	2011      	movs	r0, #17
 800280e:	231c      	movs	r3, #28
 8002810:	43db      	mvns	r3, r3
 8002812:	b2d9      	uxtb	r1, r3
 8002814:	2218      	movs	r2, #24
 8002816:	2513      	movs	r5, #19
 8002818:	197c      	adds	r4, r7, r5
 800281a:	2300      	movs	r3, #0
 800281c:	f000 f924 	bl	8002a68 <maskRegister>
 8002820:	0003      	movs	r3, r0
 8002822:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 8002824:	197b      	adds	r3, r7, r5
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4053      	eors	r3, r2
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <deepPowerDown+0x124>
    {
        printf(errorMsg, __LINE__);
 8002832:	23b3      	movs	r3, #179	@ 0xb3
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	0011      	movs	r1, r2
 800283a:	0018      	movs	r0, r3
 800283c:	f002 ff02 	bl	8005644 <printf_>
        return false;
 8002840:	2300      	movs	r3, #0
 8002842:	e04a      	b.n	80028da <deepPowerDown+0x1ba>
    }
    //    hex_dump();
    HAL_Delay(1);
 8002844:	2001      	movs	r0, #1
 8002846:	f003 fb99 	bl	8005f7c <HAL_Delay>
    // Enter sleep mode
    bResult = write_rtc_register(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES); // REG_SLEEP_CTRL_SLP | 0x01
 800284a:	2017      	movs	r0, #23
 800284c:	2280      	movs	r2, #128	@ 0x80
 800284e:	2340      	movs	r3, #64	@ 0x40
 8002850:	4313      	orrs	r3, r2
 8002852:	b2db      	uxtb	r3, r3
 8002854:	0019      	movs	r1, r3
 8002856:	f000 fad5 	bl	8002e04 <write_rtc_register>
 800285a:	0003      	movs	r3, r0
 800285c:	001a      	movs	r2, r3
 800285e:	2013      	movs	r0, #19
 8002860:	183b      	adds	r3, r7, r0
 8002862:	1e51      	subs	r1, r2, #1
 8002864:	418a      	sbcs	r2, r1
 8002866:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002868:	183b      	adds	r3, r7, r0
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	4053      	eors	r3, r2
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <deepPowerDown+0x16a>
    {
        printf(errorMsg, __LINE__);
 8002876:	2370      	movs	r3, #112	@ 0x70
 8002878:	33ff      	adds	r3, #255	@ 0xff
 800287a:	001a      	movs	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	0011      	movs	r1, r2
 8002880:	0018      	movs	r0, r3
 8002882:	f002 fedf 	bl	8005644 <printf_>
        return false;
 8002886:	2300      	movs	r3, #0
 8002888:	e027      	b.n	80028da <deepPowerDown+0x1ba>
    }
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0xc2); // enable
    // _log.trace("delay in case we didn't power down");
    uint32_t start = HAL_GetTick();
 800288a:	f003 fb6d 	bl	8005f68 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	60fb      	str	r3, [r7, #12]
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 8002892:	e00f      	b.n	80028b4 <deepPowerDown+0x194>
    {
        printf("REG_SLEEP_CTRL=0x%2x\n", read_rtc_register(REG_SLEEP_CTRL));
 8002894:	2317      	movs	r3, #23
 8002896:	0018      	movs	r0, r3
 8002898:	f000 fa82 	bl	8002da0 <read_rtc_register>
 800289c:	0003      	movs	r3, r0
 800289e:	001a      	movs	r2, r3
 80028a0:	4b12      	ldr	r3, [pc, #72]	@ (80028ec <deepPowerDown+0x1cc>)
 80028a2:	0011      	movs	r1, r2
 80028a4:	0018      	movs	r0, r3
 80028a6:	f002 fecd 	bl	8005644 <printf_>
        HAL_Delay(1000);
 80028aa:	23fa      	movs	r3, #250	@ 0xfa
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	0018      	movs	r0, r3
 80028b0:	f003 fb64 	bl	8005f7c <HAL_Delay>
    while ((HAL_GetTick() - start) < (uint32_t)(seconds * 1000))
 80028b4:	f003 fb58 	bl	8005f68 <HAL_GetTick>
 80028b8:	0002      	movs	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad1      	subs	r1, r2, r3
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	0013      	movs	r3, r2
 80028c2:	015b      	lsls	r3, r3, #5
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	189b      	adds	r3, r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4299      	cmp	r1, r3
 80028ce:	d3e1      	bcc.n	8002894 <deepPowerDown+0x174>
    }

    printf("didn't power down\n");
 80028d0:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <deepPowerDown+0x1d0>)
 80028d2:	0018      	movs	r0, r3
 80028d4:	f002 feb6 	bl	8005644 <printf_>

    return true;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b006      	add	sp, #24
 80028e0:	bdb0      	pop	{r4, r5, r7, pc}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	0800fab4 	.word	0x0800fab4
 80028e8:	0800fad4 	.word	0x0800fad4
 80028ec:	0800fae8 	.word	0x0800fae8
 80028f0:	0800fb00 	.word	0x0800fb00

080028f4 <setCountdownTimer>:

bool setCountdownTimer(int value, bool minutes)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	000a      	movs	r2, r1
 80028fe:	1cfb      	adds	r3, r7, #3
 8002900:	701a      	strb	r2, [r3, #0]
    const char *errorMsg = "failure in setCountdownTimer %d\n";
 8002902:	4b58      	ldr	r3, [pc, #352]	@ (8002a64 <setCountdownTimer+0x170>)
 8002904:	60fb      	str	r3, [r7, #12]
    bool bResult;

    // Clear any pending interrupts
    bResult = write_rtc_register(REG_STATUS, REG_STATUS_DEFAULT);
 8002906:	230f      	movs	r3, #15
 8002908:	2200      	movs	r2, #0
 800290a:	0011      	movs	r1, r2
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fa79 	bl	8002e04 <write_rtc_register>
 8002912:	0003      	movs	r3, r0
 8002914:	001a      	movs	r2, r3
 8002916:	200b      	movs	r0, #11
 8002918:	183b      	adds	r3, r7, r0
 800291a:	1e51      	subs	r1, r2, #1
 800291c:	418a      	sbcs	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 8002920:	183b      	adds	r3, r7, r0
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	4053      	eors	r3, r2
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <setCountdownTimer+0x4e>
    {
        printf(errorMsg, __LINE__);
 800292e:	238a      	movs	r3, #138	@ 0x8a
 8002930:	33ff      	adds	r3, #255	@ 0xff
 8002932:	001a      	movs	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f002 fe83 	bl	8005644 <printf_>
        return false;
 800293e:	2300      	movs	r3, #0
 8002940:	e08c      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Stop countdown timer if already running since it can't be set while running
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
 8002942:	2318      	movs	r3, #24
 8002944:	2223      	movs	r2, #35	@ 0x23
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f000 fa5b 	bl	8002e04 <write_rtc_register>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	200b      	movs	r0, #11
 8002954:	183b      	adds	r3, r7, r0
 8002956:	1e51      	subs	r1, r2, #1
 8002958:	418a      	sbcs	r2, r1
 800295a:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 800295c:	183b      	adds	r3, r7, r0
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4053      	eors	r3, r2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <setCountdownTimer+0x8a>
    {
        printf(errorMsg, __LINE__);
 800296a:	2392      	movs	r3, #146	@ 0x92
 800296c:	33ff      	adds	r3, #255	@ 0xff
 800296e:	001a      	movs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	0011      	movs	r1, r2
 8002974:	0018      	movs	r0, r3
 8002976:	f002 fe65 	bl	8005644 <printf_>
        return false;
 800297a:	2300      	movs	r3, #0
 800297c:	e06e      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Set countdown timer duration
    if (value < 1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	dc01      	bgt.n	8002988 <setCountdownTimer+0x94>
    {
        value = 1;
 8002984:	2301      	movs	r3, #1
 8002986:	607b      	str	r3, [r7, #4]
    }
    if (value > 255)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2bff      	cmp	r3, #255	@ 0xff
 800298c:	dd01      	ble.n	8002992 <setCountdownTimer+0x9e>
    {
        value = 255;
 800298e:	23ff      	movs	r3, #255	@ 0xff
 8002990:	607b      	str	r3, [r7, #4]
    }
    bResult = write_rtc_register(REG_TIMER, (uint8_t)value);
 8002992:	2219      	movs	r2, #25
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	0019      	movs	r1, r3
 800299a:	0010      	movs	r0, r2
 800299c:	f000 fa32 	bl	8002e04 <write_rtc_register>
 80029a0:	0003      	movs	r3, r0
 80029a2:	001a      	movs	r2, r3
 80029a4:	200b      	movs	r0, #11
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	1e51      	subs	r1, r2, #1
 80029aa:	418a      	sbcs	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
    if (!bResult)
 80029ae:	183b      	adds	r3, r7, r0
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2201      	movs	r2, #1
 80029b4:	4053      	eors	r3, r2
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <setCountdownTimer+0xdc>
    {
        printf(errorMsg, __LINE__);
 80029bc:	23a2      	movs	r3, #162	@ 0xa2
 80029be:	33ff      	adds	r3, #255	@ 0xff
 80029c0:	001a      	movs	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	0011      	movs	r1, r2
 80029c6:	0018      	movs	r0, r3
 80029c8:	f002 fe3c 	bl	8005644 <printf_>
        return false;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e045      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Enable countdown timer interrupt (TIE = 1) in IntMask
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE, 0);
 80029d0:	2312      	movs	r3, #18
 80029d2:	2108      	movs	r1, #8
 80029d4:	250b      	movs	r5, #11
 80029d6:	197c      	adds	r4, r7, r5
 80029d8:	2200      	movs	r2, #0
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f8a4 	bl	8002b28 <setRegisterBit>
 80029e0:	0003      	movs	r3, r0
 80029e2:	7023      	strb	r3, [r4, #0]
    if (!bResult)
 80029e4:	197b      	adds	r3, r7, r5
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	4053      	eors	r3, r2
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <setCountdownTimer+0x112>
    {
        printf(errorMsg, __LINE__);
 80029f2:	23aa      	movs	r3, #170	@ 0xaa
 80029f4:	33ff      	adds	r3, #255	@ 0xff
 80029f6:	001a      	movs	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f002 fe21 	bl	8005644 <printf_>
        return false;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e02a      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    // Set the TFS frequency to 1/60 Hz for minutes or 1 Hz for seconds
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
 8002a06:	1cfb      	adds	r3, r7, #3
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <setCountdownTimer+0x11e>
 8002a0e:	2203      	movs	r2, #3
 8002a10:	e000      	b.n	8002a14 <setCountdownTimer+0x120>
 8002a12:	2202      	movs	r2, #2
 8002a14:	210a      	movs	r1, #10
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	701a      	strb	r2, [r3, #0]

    // Enable countdown timer (TE = 1) in countdown timer control register
    bResult = write_rtc_register(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
 8002a1a:	2018      	movs	r0, #24
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	187b      	adds	r3, r7, r1
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	0019      	movs	r1, r3
 8002a28:	f000 f9ec 	bl	8002e04 <write_rtc_register>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	001a      	movs	r2, r3
 8002a30:	200b      	movs	r0, #11
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	1e51      	subs	r1, r2, #1
 8002a36:	418a      	sbcs	r2, r1
 8002a38:	701a      	strb	r2, [r3, #0]
    // bResult = write_rtc_register(REG_TIMER_CTRL, 0x42); // 0xc2

    if (!bResult)
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4053      	eors	r3, r2
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <setCountdownTimer+0x166>
    {
        printf(errorMsg, __LINE__);
 8002a48:	23db      	movs	r3, #219	@ 0xdb
 8002a4a:	005a      	lsls	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f002 fdf7 	bl	8005644 <printf_>
        return false;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <setCountdownTimer+0x168>
    }

    return true;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b004      	add	sp, #16
 8002a62:	bdb0      	pop	{r4, r5, r7, pc}
 8002a64:	0800fb14 	.word	0x0800fb14

08002a68 <maskRegister>:

bool maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock)
{
 8002a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	0005      	movs	r5, r0
 8002a70:	000c      	movs	r4, r1
 8002a72:	0010      	movs	r0, r2
 8002a74:	0019      	movs	r1, r3
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	1c2a      	adds	r2, r5, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
 8002a7c:	1dbb      	adds	r3, r7, #6
 8002a7e:	1c22      	adds	r2, r4, #0
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	1d7b      	adds	r3, r7, #5
 8002a84:	1c02      	adds	r2, r0, #0
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	1c0a      	adds	r2, r1, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
    bool bResult = false;
 8002a8e:	250f      	movs	r5, #15
 8002a90:	197b      	adds	r3, r7, r5
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]

    uint8_t value;

    value = read_rtc_register(regAddr);
 8002a96:	260e      	movs	r6, #14
 8002a98:	19bc      	adds	r4, r7, r6
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f97e 	bl	8002da0 <read_rtc_register>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	7023      	strb	r3, [r4, #0]

    uint8_t newValue = (value & andValue) | orValue;
 8002aa8:	19bb      	adds	r3, r7, r6
 8002aaa:	1dba      	adds	r2, r7, #6
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b2d9      	uxtb	r1, r3
 8002ab4:	200d      	movs	r0, #13
 8002ab6:	183b      	adds	r3, r7, r0
 8002ab8:	1d7a      	adds	r2, r7, #5
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	701a      	strb	r2, [r3, #0]

    bResult = write_rtc_register(regAddr, newValue);
 8002ac0:	183b      	adds	r3, r7, r0
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	0011      	movs	r1, r2
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f99a 	bl	8002e04 <write_rtc_register>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	197b      	adds	r3, r7, r5
 8002ad6:	1e51      	subs	r1, r2, #1
 8002ad8:	418a      	sbcs	r2, r1
 8002ada:	701a      	strb	r2, [r3, #0]

    return bResult;
 8002adc:	197b      	adds	r3, r7, r5
 8002ade:	781b      	ldrb	r3, [r3, #0]
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b005      	add	sp, #20
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ae8 <clearRegisterBit>:

    return bResult && ((value & bitMask) != 0);
}

bool clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	0004      	movs	r4, r0
 8002af0:	0008      	movs	r0, r1
 8002af2:	0011      	movs	r1, r2
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	1c22      	adds	r2, r4, #0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	1dbb      	adds	r3, r7, #6
 8002afc:	1c02      	adds	r2, r0, #0
 8002afe:	701a      	strb	r2, [r3, #0]
 8002b00:	1d7b      	adds	r3, r7, #5
 8002b02:	1c0a      	adds	r2, r1, #0
 8002b04:	701a      	strb	r2, [r3, #0]
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
 8002b06:	1dbb      	adds	r3, r7, #6
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	b2d9      	uxtb	r1, r3
 8002b0e:	1d7b      	adds	r3, r7, #5
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	7818      	ldrb	r0, [r3, #0]
 8002b16:	0013      	movs	r3, r2
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f7ff ffa5 	bl	8002a68 <maskRegister>
 8002b1e:	0003      	movs	r3, r0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b003      	add	sp, #12
 8002b26:	bd90      	pop	{r4, r7, pc}

08002b28 <setRegisterBit>:

bool setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	0004      	movs	r4, r0
 8002b30:	0008      	movs	r0, r1
 8002b32:	0011      	movs	r1, r2
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	1c22      	adds	r2, r4, #0
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	1dbb      	adds	r3, r7, #6
 8002b3c:	1c02      	adds	r2, r0, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	1d7b      	adds	r3, r7, #5
 8002b42:	1c0a      	adds	r2, r1, #0
 8002b44:	701a      	strb	r2, [r3, #0]
    return maskRegister(regAddr, 0xff, bitMask, lock);
 8002b46:	1d7b      	adds	r3, r7, #5
 8002b48:	7819      	ldrb	r1, [r3, #0]
 8002b4a:	1dbb      	adds	r3, r7, #6
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	7818      	ldrb	r0, [r3, #0]
 8002b52:	000b      	movs	r3, r1
 8002b54:	21ff      	movs	r1, #255	@ 0xff
 8002b56:	f7ff ff87 	bl	8002a68 <maskRegister>
 8002b5a:	0003      	movs	r3, r0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b003      	add	sp, #12
 8002b62:	bd90      	pop	{r4, r7, pc}

08002b64 <readRam>:
    }
    return bResult;
}

bool readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock)
{
 8002b64:	b5b0      	push	{r4, r5, r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	001a      	movs	r2, r3
 8002b72:	1cfb      	adds	r3, r7, #3
 8002b74:	701a      	strb	r2, [r3, #0]
    bool bResult = true;
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]

    uint32_t primask_bit = utils_enter_critical_section();
 8002b7e:	f000 f97d 	bl	8002e7c <utils_enter_critical_section>
 8002b82:	0003      	movs	r3, r0
 8002b84:	617b      	str	r3, [r7, #20]

    while (dataLen > 0)
 8002b86:	e047      	b.n	8002c18 <readRam+0xb4>
    {
        size_t count = dataLen;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        if (count > 32)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d901      	bls.n	8002b96 <readRam+0x32>
        {
            // Too large for a single I2C operation
            count = 32;
 8002b92:	2320      	movs	r3, #32
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        if ((ramAddr < 128) && ((ramAddr + count) > 128))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b9a:	d808      	bhi.n	8002bae <readRam+0x4a>
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	18d3      	adds	r3, r2, r3
 8002ba2:	2b80      	cmp	r3, #128	@ 0x80
 8002ba4:	d903      	bls.n	8002bae <readRam+0x4a>
        {
            // Crossing a page boundary
            count = 128 - ramAddr;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2280      	movs	r2, #128	@ 0x80
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        if (ramAddr < 128)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bb2:	d806      	bhi.n	8002bc2 <readRam+0x5e>
        {
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002bb4:	233f      	movs	r3, #63	@ 0x3f
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	2200      	movs	r2, #0
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff ff94 	bl	8002ae8 <clearRegisterBit>
 8002bc0:	e005      	b.n	8002bce <readRam+0x6a>
        }
        else
        {
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002bc2:	233f      	movs	r3, #63	@ 0x3f
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff ffad 	bl	8002b28 <setRegisterBit>
        }

        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count); // !!!!!!!!!
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	227f      	movs	r2, #127	@ 0x7f
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2280      	movs	r2, #128	@ 0x80
 8002bda:	189b      	adds	r3, r3, r2
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	251f      	movs	r5, #31
 8002be4:	197c      	adds	r4, r7, r5
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f965 	bl	8002eb8 <readRegisters>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	7023      	strb	r3, [r4, #0]
        if (!bResult)
 8002bf2:	197b      	adds	r3, r7, r5
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4053      	eors	r3, r2
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <readRam+0xbc>
        {
            break;
        }
        ramAddr += count;
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	60fb      	str	r3, [r7, #12]
        dataLen -= count;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	607b      	str	r3, [r7, #4]
        data += count;
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	60bb      	str	r3, [r7, #8]
    while (dataLen > 0)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1b4      	bne.n	8002b88 <readRam+0x24>
 8002c1e:	e000      	b.n	8002c22 <readRam+0xbe>
            break;
 8002c20:	46c0      	nop			@ (mov r8, r8)
    }

    utils_exit_critical_section(primask_bit);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f938 	bl	8002e9a <utils_exit_critical_section>

    return bResult;
 8002c2a:	231f      	movs	r3, #31
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b008      	add	sp, #32
 8002c36:	bdb0      	pop	{r4, r5, r7, pc}

08002c38 <writeRam>:
 * @param data The buffer containing the data to write
 * @param dataLen The number of bytes to write
 * The dataLen can be larger than the maximum I2C write. Multiple writes will be done if necessary.
 */
bool writeRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) // The initial values of the RAM locations are undefined.
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	001a      	movs	r2, r3
 8002c46:	1cfb      	adds	r3, r7, #3
 8002c48:	701a      	strb	r2, [r3, #0]
    bool bResult = true;
 8002c4a:	2317      	movs	r3, #23
 8002c4c:	18fb      	adds	r3, r7, r3
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]

    while (dataLen > 0)
 8002c52:	e047      	b.n	8002ce4 <writeRam+0xac>
    {
        size_t count = dataLen;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	613b      	str	r3, [r7, #16]
        if (count > 31)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b1f      	cmp	r3, #31
 8002c5c:	d901      	bls.n	8002c62 <writeRam+0x2a>
        {
            // Too large for a single I2C operation
            count = 31;
 8002c5e:	231f      	movs	r3, #31
 8002c60:	613b      	str	r3, [r7, #16]
        }
        if ((ramAddr < 128) && ((ramAddr + count) > 128))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c66:	d808      	bhi.n	8002c7a <writeRam+0x42>
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	18d3      	adds	r3, r2, r3
 8002c6e:	2b80      	cmp	r3, #128	@ 0x80
 8002c70:	d903      	bls.n	8002c7a <writeRam+0x42>
        {
            // Crossing a page boundary
            count = 128 - ramAddr;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2280      	movs	r2, #128	@ 0x80
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	613b      	str	r3, [r7, #16]
        }
        if (ramAddr < 128)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c7e:	d806      	bhi.n	8002c8e <writeRam+0x56>
        {
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002c80:	233f      	movs	r3, #63	@ 0x3f
 8002c82:	2104      	movs	r1, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff ff2e 	bl	8002ae8 <clearRegisterBit>
 8002c8c:	e005      	b.n	8002c9a <writeRam+0x62>
        }
        else
        {
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA, 0);
 8002c8e:	233f      	movs	r3, #63	@ 0x3f
 8002c90:	2104      	movs	r1, #4
 8002c92:	2200      	movs	r2, #0
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff ff47 	bl	8002b28 <setRegisterBit>
        }

        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	227f      	movs	r2, #127	@ 0x7f
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2280      	movs	r2, #128	@ 0x80
 8002ca6:	189b      	adds	r3, r3, r2
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	2517      	movs	r5, #23
 8002cb0:	197c      	adds	r4, r7, r5
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 f949 	bl	8002f4c <writeRegisters>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	7023      	strb	r3, [r4, #0]
        if (!bResult)
 8002cbe:	197b      	adds	r3, r7, r5
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4053      	eors	r3, r2
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10f      	bne.n	8002cec <writeRam+0xb4>
        {
            break;
        }
        ramAddr += count;
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	60fb      	str	r3, [r7, #12]
        dataLen -= count;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	607b      	str	r3, [r7, #4]
        data += count;
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	18d3      	adds	r3, r2, r3
 8002ce2:	60bb      	str	r3, [r7, #8]
    while (dataLen > 0)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1b4      	bne.n	8002c54 <writeRam+0x1c>
 8002cea:	e000      	b.n	8002cee <writeRam+0xb6>
            break;
 8002cec:	46c0      	nop			@ (mov r8, r8)
    }

    return bResult;
 8002cee:	2317      	movs	r3, #23
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b006      	add	sp, #24
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}

08002cfc <SPI1_SendByte>:
{
    return wakeReason;
};

inline static uint8_t SPI1_SendByte(uint8_t data)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	0002      	movs	r2, r0
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	701a      	strb	r2, [r3, #0]
    uint32_t start_time = HAL_GetTick();
 8002d08:	f003 f92e 	bl	8005f68 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002d10:	e00e      	b.n	8002d30 <SPI1_SendByte+0x34>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002d12:	f003 f929 	bl	8005f68 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1ad2      	subs	r2, r2, r3
 8002d1c:	23fa      	movs	r3, #250	@ 0xfa
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d905      	bls.n	8002d30 <SPI1_SendByte+0x34>
        {
            print_error(__func__, __LINE__);
 8002d24:	4a1a      	ldr	r2, [pc, #104]	@ (8002d90 <SPI1_SendByte+0x94>)
 8002d26:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <SPI1_SendByte+0x98>)
 8002d28:	0011      	movs	r1, r2
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 fffe 	bl	8003d2c <print_error>
    while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 8002d30:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff fbb9 	bl	80024aa <LL_SPI_IsActiveFlag_TXE>
 8002d38:	1e03      	subs	r3, r0, #0
 8002d3a:	d0ea      	beq.n	8002d12 <SPI1_SendByte+0x16>
        }
    }

    LL_SPI_TransmitData8(SPI1, data);
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4a15      	ldr	r2, [pc, #84]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d42:	0019      	movs	r1, r3
 8002d44:	0010      	movs	r0, r2
 8002d46:	f7ff fbcd 	bl	80024e4 <LL_SPI_TransmitData8>

    start_time = HAL_GetTick();
 8002d4a:	f003 f90d 	bl	8005f68 <HAL_GetTick>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	60fb      	str	r3, [r7, #12]
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002d52:	e00e      	b.n	8002d72 <SPI1_SendByte+0x76>
    {
        if ((HAL_GetTick() - start_time) > 1000)
 8002d54:	f003 f908 	bl	8005f68 <HAL_GetTick>
 8002d58:	0002      	movs	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	23fa      	movs	r3, #250	@ 0xfa
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d905      	bls.n	8002d72 <SPI1_SendByte+0x76>
        {
            print_error(__func__, __LINE__);
 8002d66:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <SPI1_SendByte+0xa0>)
 8002d68:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <SPI1_SendByte+0x98>)
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 ffdd 	bl	8003d2c <print_error>
    while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 8002d72:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff fb87 	bl	8002488 <LL_SPI_IsActiveFlag_RXNE>
 8002d7a:	1e03      	subs	r3, r0, #0
 8002d7c:	d0ea      	beq.n	8002d54 <SPI1_SendByte+0x58>
        }
    }

    return LL_SPI_ReceiveData8(SPI1);
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <SPI1_SendByte+0x9c>)
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff fba3 	bl	80024cc <LL_SPI_ReceiveData8>
 8002d86:	0003      	movs	r3, r0
}
 8002d88:	0018      	movs	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b004      	add	sp, #16
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	0000027a 	.word	0x0000027a
 8002d94:	0800feac 	.word	0x0800feac
 8002d98:	40013000 	.word	0x40013000
 8002d9c:	00000285 	.word	0x00000285

08002da0 <read_rtc_register>:

inline static uint8_t read_rtc_register(uint8_t reg_addr)
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	0002      	movs	r2, r0
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	701a      	strb	r2, [r3, #0]
    uint8_t val;
    uint32_t primask_bit = utils_enter_critical_section();
 8002dac:	f000 f866 	bl	8002e7c <utils_enter_critical_section>
 8002db0:	0003      	movs	r3, r0
 8002db2:	60fb      	str	r3, [r7, #12]

    // #define AB1815_SPI_READ(offset) (127 & offset)		127 - 0x7F
    // #define AB1815_SPI_WRITE(offset) (128 | offset)  	128 - 0x80
    uint8_t addr = AB1815_SPI_READ(reg_addr);
 8002db4:	200b      	movs	r0, #11
 8002db6:	183b      	adds	r3, r7, r0
 8002db8:	1dfa      	adds	r2, r7, #7
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	217f      	movs	r1, #127	@ 0x7f
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	701a      	strb	r2, [r3, #0]
    RTC_L();
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <read_rtc_register+0x60>)
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	05d2      	lsls	r2, r2, #23
 8002dc8:	619a      	str	r2, [r3, #24]
    SPI1_SendByte(addr);
 8002dca:	183b      	adds	r3, r7, r0
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7ff ff94 	bl	8002cfc <SPI1_SendByte>
    val = SPI1_SendByte(0x00); // Send DUMMY to read data
 8002dd4:	250a      	movs	r5, #10
 8002dd6:	197c      	adds	r4, r7, r5
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7ff ff8f 	bl	8002cfc <SPI1_SendByte>
 8002dde:	0003      	movs	r3, r0
 8002de0:	7023      	strb	r3, [r4, #0]
    RTC_H();
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <read_rtc_register+0x60>)
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	01d2      	lsls	r2, r2, #7
 8002de8:	619a      	str	r2, [r3, #24]
    utils_exit_critical_section(primask_bit);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f854 	bl	8002e9a <utils_exit_critical_section>

    return val;
 8002df2:	197b      	adds	r3, r7, r5
 8002df4:	781b      	ldrb	r3, [r3, #0]
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	50000400 	.word	0x50000400

08002e04 <write_rtc_register>:

inline static uint8_t write_rtc_register(uint8_t offset, uint8_t buf)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	1c0a      	adds	r2, r1, #0
 8002e14:	701a      	strb	r2, [r3, #0]
    // uint8_t address = AB1815_SPI_WRITE(offset);
    uint8_t address = offset | 0x80;
 8002e16:	230f      	movs	r3, #15
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	1dfa      	adds	r2, r7, #7
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	2180      	movs	r1, #128	@ 0x80
 8002e20:	4249      	negs	r1, r1
 8002e22:	430a      	orrs	r2, r1
 8002e24:	701a      	strb	r2, [r3, #0]
    uint32_t primask_bit = utils_enter_critical_section();
 8002e26:	f000 f829 	bl	8002e7c <utils_enter_critical_section>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	60bb      	str	r3, [r7, #8]

    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002e2e:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <write_rtc_register+0x74>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2240      	movs	r2, #64	@ 0x40
 8002e34:	4013      	ands	r3, r2
 8002e36:	d105      	bne.n	8002e44 <write_rtc_register+0x40>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <write_rtc_register+0x74>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <write_rtc_register+0x74>)
 8002e3e:	2140      	movs	r1, #64	@ 0x40
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
    }
    spi_select_slave(0);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7ff fb5f 	bl	8002508 <spi_select_slave>
    SPI1_SendByte(address);
 8002e4a:	230f      	movs	r3, #15
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f7ff ff53 	bl	8002cfc <SPI1_SendByte>
    SPI1_SendByte(buf); // Send Data to write
 8002e56:	1dbb      	adds	r3, r7, #6
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff ff4e 	bl	8002cfc <SPI1_SendByte>

    spi_select_slave(1);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7ff fb51 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 f816 	bl	8002e9a <utils_exit_critical_section>
    return 1;
 8002e6e:	2301      	movs	r3, #1
};
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b004      	add	sp, #16
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40013000 	.word	0x40013000

08002e7c <utils_enter_critical_section>:
		printf("# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\r\n", pos, buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6], buffer[7]);
	}
}

static inline uint32_t utils_enter_critical_section(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e82:	f3ef 8310 	mrs	r3, PRIMASK
 8002e86:	603b      	str	r3, [r7, #0]
  return(result);
 8002e88:	683b      	ldr	r3, [r7, #0]
    uint32_t primask_bit = __get_PRIMASK();
 8002e8a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8c:	b672      	cpsid	i
}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();
    return primask_bit;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b002      	add	sp, #8
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <utils_exit_critical_section>:

static inline void utils_exit_critical_section(uint32_t primask_bit)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f383 8810 	msr	PRIMASK, r3
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
    __set_PRIMASK(primask_bit);
}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b004      	add	sp, #16
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <readRegisters>:
};

// #########################################################################

bool readRegisters(uint8_t offset, uint8_t *buf, uint8_t length)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6039      	str	r1, [r7, #0]
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	1dfb      	adds	r3, r7, #7
 8002ec4:	1c02      	adds	r2, r0, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	1dbb      	adds	r3, r7, #6
 8002eca:	1c0a      	adds	r2, r1, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
    uint8_t address = AB1815_SPI_READ(offset);
 8002ece:	2313      	movs	r3, #19
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	1dfa      	adds	r2, r7, #7
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	217f      	movs	r1, #127	@ 0x7f
 8002ed8:	400a      	ands	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]
    uint32_t primask_bit = utils_enter_critical_section();
 8002edc:	f7ff ffce 	bl	8002e7c <utils_enter_critical_section>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	60fb      	str	r3, [r7, #12]
    spi_select_slave(0);
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7ff fb0f 	bl	8002508 <spi_select_slave>

    unsigned int i = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <readRegisters+0x90>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2240      	movs	r2, #64	@ 0x40
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d105      	bne.n	8002f04 <readRegisters+0x4c>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002ef8:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <readRegisters+0x90>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <readRegisters+0x90>)
 8002efe:	2140      	movs	r1, #64	@ 0x40
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
    }

    SPI1_SendByte(address);
 8002f04:	2313      	movs	r3, #19
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff fef6 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 8002f10:	e009      	b.n	8002f26 <readRegisters+0x6e>
    {
        buf[i++] = SPI1_SendByte(0x00); // Send DUMMY to read data
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	617a      	str	r2, [r7, #20]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	18d4      	adds	r4, r2, r3
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7ff feed 	bl	8002cfc <SPI1_SendByte>
 8002f22:	0003      	movs	r3, r0
 8002f24:	7023      	strb	r3, [r4, #0]
    while (i < length)
 8002f26:	1dbb      	adds	r3, r7, #6
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d3f0      	bcc.n	8002f12 <readRegisters+0x5a>
    }

    spi_select_slave(1);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f7ff fae9 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff ffae 	bl	8002e9a <utils_exit_critical_section>
    return true;
 8002f3e:	2301      	movs	r3, #1
};
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b007      	add	sp, #28
 8002f46:	bd90      	pop	{r4, r7, pc}
 8002f48:	40013000 	.word	0x40013000

08002f4c <writeRegisters>:

// ##########################################################################
bool writeRegisters(uint8_t offset, uint8_t *buf, uint8_t length)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6039      	str	r1, [r7, #0]
 8002f54:	0011      	movs	r1, r2
 8002f56:	1dfb      	adds	r3, r7, #7
 8002f58:	1c02      	adds	r2, r0, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	1dbb      	adds	r3, r7, #6
 8002f5e:	1c0a      	adds	r2, r1, #0
 8002f60:	701a      	strb	r2, [r3, #0]
    uint8_t address = AB1815_SPI_WRITE(offset);
 8002f62:	230e      	movs	r3, #14
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	1dfa      	adds	r2, r7, #7
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	2180      	movs	r1, #128	@ 0x80
 8002f6c:	4249      	negs	r1, r1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	701a      	strb	r2, [r3, #0]

    uint32_t primask_bit = utils_enter_critical_section();
 8002f72:	f7ff ff83 	bl	8002e7c <utils_enter_critical_section>
 8002f76:	0003      	movs	r3, r0
 8002f78:	60bb      	str	r3, [r7, #8]
    spi_select_slave(0);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7ff fac4 	bl	8002508 <spi_select_slave>

    uint8_t i = 0;
 8002f80:	230f      	movs	r3, #15
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
    if (!((SPI1)->CR1 & SPI_CR1_SPE))
 8002f88:	4b18      	ldr	r3, [pc, #96]	@ (8002fec <writeRegisters+0xa0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d105      	bne.n	8002f9e <writeRegisters+0x52>
    {
        SPI1->CR1 |= SPI_CR1_SPE;
 8002f92:	4b16      	ldr	r3, [pc, #88]	@ (8002fec <writeRegisters+0xa0>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <writeRegisters+0xa0>)
 8002f98:	2140      	movs	r1, #64	@ 0x40
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
    }

    SPI1_SendByte(address);
 8002f9e:	230e      	movs	r3, #14
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff fea9 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 8002faa:	e00c      	b.n	8002fc6 <writeRegisters+0x7a>
    {
        SPI1_SendByte(buf[i++]); // Send Data to write
 8002fac:	220f      	movs	r2, #15
 8002fae:	18bb      	adds	r3, r7, r2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	18ba      	adds	r2, r7, r2
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	7011      	strb	r1, [r2, #0]
 8002fb8:	001a      	movs	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	189b      	adds	r3, r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7ff fe9b 	bl	8002cfc <SPI1_SendByte>
    while (i < length)
 8002fc6:	230f      	movs	r3, #15
 8002fc8:	18fa      	adds	r2, r7, r3
 8002fca:	1dbb      	adds	r3, r7, #6
 8002fcc:	7812      	ldrb	r2, [r2, #0]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d3eb      	bcc.n	8002fac <writeRegisters+0x60>
    }

    spi_select_slave(1); // set 1
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f7ff fa97 	bl	8002508 <spi_select_slave>
    utils_exit_critical_section(primask_bit);
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7ff ff5c 	bl	8002e9a <utils_exit_critical_section>
    return true;
 8002fe2:	2301      	movs	r3, #1
};
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40013000 	.word	0x40013000

08002ff0 <read>:
{
    return setWDT(-1);
}

uint8_t read(uint8_t reg)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	701a      	strb	r2, [r3, #0]
    return read_rtc_register(reg);
 8002ffc:	1dfb      	adds	r3, r7, #7
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	0018      	movs	r0, r3
 8003002:	f7ff fecd 	bl	8002da0 <read_rtc_register>
 8003006:	0003      	movs	r3, r0
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}

08003010 <write>:

uint8_t write(uint8_t reg, uint8_t value)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	0002      	movs	r2, r0
 8003018:	1dfb      	adds	r3, r7, #7
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	1dbb      	adds	r3, r7, #6
 800301e:	1c0a      	adds	r2, r1, #0
 8003020:	701a      	strb	r2, [r3, #0]
    return write_rtc_register(reg, value);
 8003022:	1dbb      	adds	r3, r7, #6
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	1dfb      	adds	r3, r7, #7
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	0011      	movs	r1, r2
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff fee9 	bl	8002e04 <write_rtc_register>
 8003032:	0003      	movs	r3, r0
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b002      	add	sp, #8
 800303a:	bd80      	pop	{r7, pc}

0800303c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <LL_ADC_EnableInternalRegulator+0x24>)
 800304a:	4013      	ands	r3, r2
 800304c:	2280      	movs	r2, #128	@ 0x80
 800304e:	0552      	lsls	r2, r2, #21
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	6fffffe8 	.word	0x6fffffe8

08003064 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <LL_ADC_Enable+0x20>)
 8003072:	4013      	ands	r3, r2
 8003074:	2201      	movs	r2, #1
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}
 8003084:	7fffffe8 	.word	0x7fffffe8

08003088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2201      	movs	r2, #1
 8003096:	4013      	ands	r3, r2
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <LL_ADC_IsEnabled+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_IsEnabled+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	bd80      	pop	{r7, pc}

080030aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2202      	movs	r2, #2
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d101      	bne.n	80030c2 <LL_ADC_IsDisableOngoing+0x18>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <LL_ADC_IsDisableOngoing+0x1a>
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}

080030cc <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4a05      	ldr	r2, [pc, #20]	@ (80030f0 <LL_ADC_StartCalibration+0x24>)
 80030da:	4013      	ands	r3, r2
 80030dc:	2280      	movs	r2, #128	@ 0x80
 80030de:	0612      	lsls	r2, r2, #24
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	7fffffe8 	.word	0x7fffffe8

080030f4 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(const ADC_TypeDef *ADCx)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	0fdb      	lsrs	r3, r3, #31
 8003102:	07da      	lsls	r2, r3, #31
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	429a      	cmp	r2, r3
 800310a:	d101      	bne.n	8003110 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003110:	2300      	movs	r3, #0
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b002      	add	sp, #8
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a04      	ldr	r2, [pc, #16]	@ (800313c <LL_ADC_REG_StartConversion+0x20>)
 800312a:	4013      	ands	r3, r2
 800312c:	2204      	movs	r2, #4
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}
 800313c:	7fffffe8 	.word	0x7fffffe8

08003140 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2204      	movs	r2, #4
 800314e:	4013      	ands	r3, r2
 8003150:	2b04      	cmp	r3, #4
 8003152:	d101      	bne.n	8003158 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003158:	2300      	movs	r3, #0
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b002      	add	sp, #8
 8003160:	bd80      	pop	{r7, pc}

08003162 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(const ADC_TypeDef *ADCx)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA) & 0x00000FFFUL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	b29b      	uxth	r3, r3
 8003170:	051b      	lsls	r3, r3, #20
 8003172:	0d1b      	lsrs	r3, r3, #20
 8003174:	b29b      	uxth	r3, r3
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b002      	add	sp, #8
 800317c:	bd80      	pop	{r7, pc}

0800317e <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(const ADC_TypeDef *ADCx)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2201      	movs	r2, #1
 800318c:	4013      	ands	r3, r2
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8003196:	2300      	movs	r3, #0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(const ADC_TypeDef *ADCx)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2204      	movs	r2, #4
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d101      	bne.n	80031b8 <LL_ADC_IsActiveFlag_EOC+0x18>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <LL_ADC_IsActiveFlag_EOC+0x1a>
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2204      	movs	r2, #4
 80031ce:	601a      	str	r2, [r3, #0]
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	0018      	movs	r0, r3
 80031e2:	230c      	movs	r3, #12
 80031e4:	001a      	movs	r2, r3
 80031e6:	2100      	movs	r1, #0
 80031e8:	f00a fcb6 	bl	800db58 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80031ec:	4b32      	ldr	r3, [pc, #200]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 80031ee:	4a33      	ldr	r2, [pc, #204]	@ (80032bc <MX_ADC1_Init+0xe4>)
 80031f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80031f2:	4b31      	ldr	r3, [pc, #196]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 80031f4:	22c0      	movs	r2, #192	@ 0xc0
 80031f6:	0612      	lsls	r2, r2, #24
 80031f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031fa:	4b2f      	ldr	r3, [pc, #188]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003200:	4b2d      	ldr	r3, [pc, #180]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003206:	4b2c      	ldr	r3, [pc, #176]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800320c:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800320e:	2204      	movs	r2, #4
 8003210:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003212:	4b29      	ldr	r3, [pc, #164]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003214:	2200      	movs	r2, #0
 8003216:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003218:	4b27      	ldr	r3, [pc, #156]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800321a:	2200      	movs	r2, #0
 800321c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800321e:	4b26      	ldr	r3, [pc, #152]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003220:	2200      	movs	r2, #0
 8003222:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003224:	4b24      	ldr	r3, [pc, #144]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003226:	2201      	movs	r2, #1
 8003228:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800322a:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800322c:	2220      	movs	r2, #32
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003232:	4b21      	ldr	r3, [pc, #132]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003234:	2200      	movs	r2, #0
 8003236:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003238:	4b1f      	ldr	r3, [pc, #124]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800323a:	2200      	movs	r2, #0
 800323c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800323e:	4b1e      	ldr	r3, [pc, #120]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003240:	222c      	movs	r2, #44	@ 0x2c
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003246:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 800324c:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800324e:	2204      	movs	r2, #4
 8003250:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8003252:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003254:	2206      	movs	r2, #6
 8003256:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 8003258:	4b17      	ldr	r3, [pc, #92]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800325a:	223c      	movs	r2, #60	@ 0x3c
 800325c:	2101      	movs	r1, #1
 800325e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_8;
 8003260:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003262:	2208      	movs	r2, #8
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_3;
 8003266:	4b14      	ldr	r3, [pc, #80]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003268:	2260      	movs	r2, #96	@ 0x60
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800326c:	4b12      	ldr	r3, [pc, #72]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800326e:	2200      	movs	r2, #0
 8003270:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003272:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 8003274:	2200      	movs	r2, #0
 8003276:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800327a:	0018      	movs	r0, r3
 800327c:	f002 ffba 	bl	80061f4 <HAL_ADC_Init>
 8003280:	1e03      	subs	r3, r0, #0
 8003282:	d001      	beq.n	8003288 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003284:	f000 fdce 	bl	8003e24 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	4a0d      	ldr	r2, [pc, #52]	@ (80032c0 <MX_ADC1_Init+0xe8>)
 800328c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800329a:	1d3a      	adds	r2, r7, #4
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <MX_ADC1_Init+0xe0>)
 800329e:	0011      	movs	r1, r2
 80032a0:	0018      	movs	r0, r3
 80032a2:	f003 f94f 	bl	8006544 <HAL_ADC_ConfigChannel>
 80032a6:	1e03      	subs	r3, r0, #0
 80032a8:	d001      	beq.n	80032ae <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80032aa:	f000 fdbb 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b004      	add	sp, #16
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	20000364 	.word	0x20000364
 80032bc:	40012400 	.word	0x40012400
 80032c0:	b0001000 	.word	0xb0001000

080032c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b095      	sub	sp, #84	@ 0x54
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032cc:	240c      	movs	r4, #12
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	0018      	movs	r0, r3
 80032d2:	2344      	movs	r3, #68	@ 0x44
 80032d4:	001a      	movs	r2, r3
 80032d6:	2100      	movs	r1, #0
 80032d8:	f00a fc3e 	bl	800db58 <memset>
  if (adcHandle->Instance == ADC1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a11      	ldr	r2, [pc, #68]	@ (8003328 <HAL_ADC_MspInit+0x64>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d11c      	bne.n	8003320 <HAL_ADC_MspInit+0x5c>

    /* USER CODE END ADC1_MspInit 0 */

    /** Initializes the peripherals clocks
     */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80032e6:	193b      	adds	r3, r7, r4
 80032e8:	2280      	movs	r2, #128	@ 0x80
 80032ea:	01d2      	lsls	r2, r2, #7
 80032ec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	2200      	movs	r2, #0
 80032f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032f4:	193b      	adds	r3, r7, r4
 80032f6:	0018      	movs	r0, r3
 80032f8:	f004 fbac 	bl	8007a54 <HAL_RCCEx_PeriphCLKConfig>
 80032fc:	1e03      	subs	r3, r0, #0
 80032fe:	d001      	beq.n	8003304 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 8003300:	f000 fd90 	bl	8003e24 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <HAL_ADC_MspInit+0x68>)
 8003306:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003308:	4b08      	ldr	r3, [pc, #32]	@ (800332c <HAL_ADC_MspInit+0x68>)
 800330a:	2180      	movs	r1, #128	@ 0x80
 800330c:	0349      	lsls	r1, r1, #13
 800330e:	430a      	orrs	r2, r1
 8003310:	661a      	str	r2, [r3, #96]	@ 0x60
 8003312:	4b06      	ldr	r3, [pc, #24]	@ (800332c <HAL_ADC_MspInit+0x68>)
 8003314:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	035b      	lsls	r3, r3, #13
 800331a:	4013      	ands	r3, r2
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003320:	46c0      	nop			@ (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b015      	add	sp, #84	@ 0x54
 8003326:	bd90      	pop	{r4, r7, pc}
 8003328:	40012400 	.word	0x40012400
 800332c:	40021000 	.word	0x40021000

08003330 <get_vbat>:
/* USER CODE BEGIN 1 */

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

uint32_t get_vbat(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
  // printf("get_vbat\n");
  uint32_t Vdda;

  if (ubAdcGrpRegularUnitaryConvStatus != 0)
 8003336:	4b15      	ldr	r3, [pc, #84]	@ (800338c <get_vbat+0x5c>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <get_vbat+0x18>
  {
    ubAdcGrpRegularUnitaryConvStatus = 0;
 8003340:	4b12      	ldr	r3, [pc, #72]	@ (800338c <get_vbat+0x5c>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e001      	b.n	800334c <get_vbat+0x1c>
  }
  else
  {
    Error_Handler();
 8003348:	f000 fd6c 	bl	8003e24 <Error_Handler>
  }

  /* Init variable containing ADC conversion data */
  uhADCxConvertedData = VAR_CONVERTED_DATA_INIT_VALUE; // VAR_CONVERTED_DATA_INIT_VALUE
 800334c:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <get_vbat+0x60>)
 800334e:	2280      	movs	r2, #128	@ 0x80
 8003350:	0152      	lsls	r2, r2, #5
 8003352:	801a      	strh	r2, [r3, #0]

  /* Perform ADC group regular conversion start, poll for conversion        */
  /* completion.                                                            */
  ConversionStartPoll_ADC_GrpRegular();
 8003354:	f000 f874 	bl	8003440 <ConversionStartPoll_ADC_GrpRegular>

  /* Retrieve ADC conversion data */
  /* (data scale corresponds to ADC resolution: 12 bits) */
  uhADCxConvertedData = LL_ADC_REG_ReadConversionData12(ADC1);
 8003358:	4b0e      	ldr	r3, [pc, #56]	@ (8003394 <get_vbat+0x64>)
 800335a:	0018      	movs	r0, r3
 800335c:	f7ff ff01 	bl	8003162 <LL_ADC_REG_ReadConversionData12>
 8003360:	0003      	movs	r3, r0
 8003362:	001a      	movs	r2, r3
 8003364:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <get_vbat+0x60>)
 8003366:	801a      	strh	r2, [r3, #0]

  /* Update status variable of ADC unitary conversion */
  ubAdcGrpRegularUnitaryConvStatus = 1;
 8003368:	4b08      	ldr	r3, [pc, #32]	@ (800338c <get_vbat+0x5c>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]

  /* Computation of ADC conversions raw data to physical values           */
  /* using LL ADC driver helper macro.                                    */
  // printf("uhADCxConvertedData:  %d\n", uhADCxConvertedData);

  Vdda = 1220 * 4096 / uhADCxConvertedData;
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <get_vbat+0x60>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	0019      	movs	r1, r3
 8003376:	4808      	ldr	r0, [pc, #32]	@ (8003398 <get_vbat+0x68>)
 8003378:	f7fc ff6c 	bl	8000254 <__divsi3>
 800337c:	0003      	movs	r3, r0
 800337e:	607b      	str	r3, [r7, #4]
  // printf("Vdda = %d\n", Vdda);
  return Vdda;
 8003380:	687b      	ldr	r3, [r7, #4]
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	b002      	add	sp, #8
 8003388:	bd80      	pop	{r7, pc}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	20000002 	.word	0x20000002
 8003390:	20000000 	.word	0x20000000
 8003394:	40012400 	.word	0x40012400
 8003398:	004c4000 	.word	0x004c4000

0800339c <Activate_ADC>:
 *                 after this function
 * @param  None
 * @retval None
 */
void Activate_ADC(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (LL_ADC_IsEnabled(ADC1) == 0)
 80033a6:	4b23      	ldr	r3, [pc, #140]	@ (8003434 <Activate_ADC+0x98>)
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff fe6d 	bl	8003088 <LL_ADC_IsEnabled>
 80033ae:	1e03      	subs	r3, r0, #0
 80033b0:	d13b      	bne.n	800342a <Activate_ADC+0x8e>
  {
    /* Disable ADC deep power down (enabled by default after reset state) */
    // LL_ADC_DisableDeepPowerDown(ADC1);

    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADC1);
 80033b2:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <Activate_ADC+0x98>)
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7ff fe41 	bl	800303c <LL_ADC_EnableInternalRegulator>
    /* Compute number of CPU cycles to wait for, from delay in us.            */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    /* Note: If system core clock frequency is below 200kHz, wait time        */
    /*       is only a few CPU processing cycles.                             */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80033ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003438 <Activate_ADC+0x9c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	491f      	ldr	r1, [pc, #124]	@ (800343c <Activate_ADC+0xa0>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fc febd 	bl	8000140 <__udivsi3>
 80033c6:	0003      	movs	r3, r0
 80033c8:	001a      	movs	r2, r3
 80033ca:	0013      	movs	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	210a      	movs	r1, #10
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7fc feb3 	bl	8000140 <__udivsi3>
 80033da:	0003      	movs	r3, r0
 80033dc:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80033de:	e002      	b.n	80033e6 <Activate_ADC+0x4a>
    {
      wait_loop_index--;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f9      	bne.n	80033e0 <Activate_ADC+0x44>
    }

    /* Run ADC self calibration */
    LL_ADC_StartCalibration(ADC1);
 80033ec:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <Activate_ADC+0x98>)
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7ff fe6c 	bl	80030cc <LL_ADC_StartCalibration>
/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 80033f4:	46c0      	nop			@ (mov r8, r8)
 80033f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <Activate_ADC+0x98>)
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff fe7b 	bl	80030f4 <LL_ADC_IsCalibrationOnGoing>
 80033fe:	1e03      	subs	r3, r0, #0
 8003400:	d1f9      	bne.n	80033f6 <Activate_ADC+0x5a>
    }

    /* Delay between ADC end of calibration and ADC enable.                   */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 8003402:	2320      	movs	r3, #32
 8003404:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 8003406:	e002      	b.n	800340e <Activate_ADC+0x72>
    {
      wait_loop_index--;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3b01      	subs	r3, #1
 800340c:	607b      	str	r3, [r7, #4]
    while (wait_loop_index != 0)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f9      	bne.n	8003408 <Activate_ADC+0x6c>
    }

    /* Enable ADC */
    LL_ADC_Enable(ADC1);
 8003414:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <Activate_ADC+0x98>)
 8003416:	0018      	movs	r0, r3
 8003418:	f7ff fe24 	bl	8003064 <LL_ADC_Enable>
/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_ENABLE_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 800341c:	46c0      	nop			@ (mov r8, r8)
 800341e:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <Activate_ADC+0x98>)
 8003420:	0018      	movs	r0, r3
 8003422:	f7ff feac 	bl	800317e <LL_ADC_IsActiveFlag_ADRDY>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d0f9      	beq.n	800341e <Activate_ADC+0x82>
  /*## Operation on ADC hierarchical scope: ADC group injected ###############*/
  /* Note: No operation on ADC group injected performed here.                 */
  /*       ADC group injected conversions to be performed after this function */
  /*       using function:                                                    */
  /*   																		*/
}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b002      	add	sp, #8
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	40012400 	.word	0x40012400
 8003438:	20000004 	.word	0x20000004
 800343c:	00030d40 	.word	0x00030d40

08003440 <ConversionStartPoll_ADC_GrpRegular>:
 *         external trigger, ADC group regular conversion stop must be added.
 * @param  None
 * @retval None
 */
void ConversionStartPoll_ADC_GrpRegular(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 8003444:	4b13      	ldr	r3, [pc, #76]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003446:	0018      	movs	r0, r3
 8003448:	f7ff fe1e 	bl	8003088 <LL_ADC_IsEnabled>
 800344c:	0003      	movs	r3, r0
 800344e:	2b01      	cmp	r3, #1
 8003450:	d110      	bne.n	8003474 <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 8003452:	4b10      	ldr	r3, [pc, #64]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff fe28 	bl	80030aa <LL_ADC_IsDisableOngoing>
 800345a:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1) &&
 800345c:	d10a      	bne.n	8003474 <ConversionStartPoll_ADC_GrpRegular+0x34>
      (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 800345e:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff fe6d 	bl	8003140 <LL_ADC_REG_IsConversionOngoing>
 8003466:	1e03      	subs	r3, r0, #0
      (LL_ADC_IsDisableOngoing(ADC1) == 0) &&
 8003468:	d104      	bne.n	8003474 <ConversionStartPoll_ADC_GrpRegular+0x34>
  {
    LL_ADC_REG_StartConversion(ADC1);
 800346a:	4b0a      	ldr	r3, [pc, #40]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff fe55 	bl	800311c <LL_ADC_REG_StartConversion>
 8003472:	e001      	b.n	8003478 <ConversionStartPoll_ADC_GrpRegular+0x38>
  }
  else
  {
    /* Error: ADC conversion start could not be performed */
    Error_Handler();
 8003474:	f000 fcd6 	bl	8003e24 <Error_Handler>

#if (USE_TIMEOUT == 1)
  Timeout = ADC_UNITARY_CONVERSION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

  while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0)
 8003478:	46c0      	nop			@ (mov r8, r8)
 800347a:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 800347c:	0018      	movs	r0, r3
 800347e:	f7ff fe8f 	bl	80031a0 <LL_ADC_IsActiveFlag_EOC>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d0f9      	beq.n	800347a <ConversionStartPoll_ADC_GrpRegular+0x3a>
      }
    }
#endif /* USE_TIMEOUT */
  }

  LL_ADC_ClearFlag_EOC(ADC1);
 8003486:	4b03      	ldr	r3, [pc, #12]	@ (8003494 <ConversionStartPoll_ADC_GrpRegular+0x54>)
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff fe9a 	bl	80031c2 <LL_ADC_ClearFlag_EOC>
}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40012400 	.word	0x40012400

08003498 <MX_GPIO_Init>:
/** Configure pins
     PA13 (SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b08b      	sub	sp, #44	@ 0x2c
 800349c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349e:	2414      	movs	r4, #20
 80034a0:	193b      	adds	r3, r7, r4
 80034a2:	0018      	movs	r0, r3
 80034a4:	2314      	movs	r3, #20
 80034a6:	001a      	movs	r2, r3
 80034a8:	2100      	movs	r1, #0
 80034aa:	f00a fb55 	bl	800db58 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ae:	4b81      	ldr	r3, [pc, #516]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034b2:	4b80      	ldr	r3, [pc, #512]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034b4:	2104      	movs	r1, #4
 80034b6:	430a      	orrs	r2, r1
 80034b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034ba:	4b7e      	ldr	r3, [pc, #504]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034be:	2204      	movs	r2, #4
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034c6:	4b7b      	ldr	r3, [pc, #492]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034ca:	4b7a      	ldr	r3, [pc, #488]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034cc:	2120      	movs	r1, #32
 80034ce:	430a      	orrs	r2, r1
 80034d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034d2:	4b78      	ldr	r3, [pc, #480]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d6:	2220      	movs	r2, #32
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034de:	4b75      	ldr	r3, [pc, #468]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034e2:	4b74      	ldr	r3, [pc, #464]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	430a      	orrs	r2, r1
 80034e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034ea:	4b72      	ldr	r3, [pc, #456]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ee:	2201      	movs	r2, #1
 80034f0:	4013      	ands	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034f6:	4b6f      	ldr	r3, [pc, #444]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034fa:	4b6e      	ldr	r3, [pc, #440]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 80034fc:	2102      	movs	r1, #2
 80034fe:	430a      	orrs	r2, r1
 8003500:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003502:	4b6c      	ldr	r3, [pc, #432]	@ (80036b4 <MX_GPIO_Init+0x21c>)
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	2202      	movs	r2, #2
 8003508:	4013      	ands	r3, r2
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|WDI_Pin|PAPER_ON_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800350e:	496a      	ldr	r1, [pc, #424]	@ (80036b8 <MX_GPIO_Init+0x220>)
 8003510:	4b6a      	ldr	r3, [pc, #424]	@ (80036bc <MX_GPIO_Init+0x224>)
 8003512:	2200      	movs	r2, #0
 8003514:	0018      	movs	r0, r3
 8003516:	f003 fbd3 	bl	8006cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_RTC_GPIO_Port, CE_RTC_Pin, GPIO_PIN_SET);
 800351a:	2380      	movs	r3, #128	@ 0x80
 800351c:	01db      	lsls	r3, r3, #7
 800351e:	4867      	ldr	r0, [pc, #412]	@ (80036bc <MX_GPIO_Init+0x224>)
 8003520:	2201      	movs	r2, #1
 8003522:	0019      	movs	r1, r3
 8003524:	f003 fbcc 	bl	8006cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D_C_Pin|RST_Pin, GPIO_PIN_RESET);
 8003528:	2390      	movs	r3, #144	@ 0x90
 800352a:	0119      	lsls	r1, r3, #4
 800352c:	23a0      	movs	r3, #160	@ 0xa0
 800352e:	05db      	lsls	r3, r3, #23
 8003530:	2200      	movs	r2, #0
 8003532:	0018      	movs	r0, r3
 8003534:	f003 fbc4 	bl	8006cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|CS_Pin, GPIO_PIN_SET);
 8003538:	23a0      	movs	r3, #160	@ 0xa0
 800353a:	0159      	lsls	r1, r3, #5
 800353c:	23a0      	movs	r3, #160	@ 0xa0
 800353e:	05db      	lsls	r3, r3, #23
 8003540:	2201      	movs	r2, #1
 8003542:	0018      	movs	r0, r3
 8003544:	f003 fbbc 	bl	8006cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003548:	193b      	adds	r3, r7, r4
 800354a:	22e0      	movs	r2, #224	@ 0xe0
 800354c:	0212      	lsls	r2, r2, #8
 800354e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003550:	193b      	adds	r3, r7, r4
 8003552:	2203      	movs	r2, #3
 8003554:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	193b      	adds	r3, r7, r4
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355c:	193b      	adds	r3, r7, r4
 800355e:	4a58      	ldr	r2, [pc, #352]	@ (80036c0 <MX_GPIO_Init+0x228>)
 8003560:	0019      	movs	r1, r3
 8003562:	0010      	movs	r0, r2
 8003564:	f003 fa38 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003568:	193b      	adds	r3, r7, r4
 800356a:	220f      	movs	r2, #15
 800356c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800356e:	193b      	adds	r3, r7, r4
 8003570:	2203      	movs	r2, #3
 8003572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	193b      	adds	r3, r7, r4
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800357a:	193b      	adds	r3, r7, r4
 800357c:	4a51      	ldr	r2, [pc, #324]	@ (80036c4 <MX_GPIO_Init+0x22c>)
 800357e:	0019      	movs	r1, r3
 8003580:	0010      	movs	r0, r2
 8003582:	f003 fa29 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 8003586:	193b      	adds	r3, r7, r4
 8003588:	4a4f      	ldr	r2, [pc, #316]	@ (80036c8 <MX_GPIO_Init+0x230>)
 800358a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800358c:	193b      	adds	r3, r7, r4
 800358e:	2203      	movs	r2, #3
 8003590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	193b      	adds	r3, r7, r4
 8003594:	2200      	movs	r2, #0
 8003596:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003598:	193a      	adds	r2, r7, r4
 800359a:	23a0      	movs	r3, #160	@ 0xa0
 800359c:	05db      	lsls	r3, r3, #23
 800359e:	0011      	movs	r1, r2
 80035a0:	0018      	movs	r0, r3
 80035a2:	f003 fa19 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB10 PB11
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	4a48      	ldr	r2, [pc, #288]	@ (80036cc <MX_GPIO_Init+0x234>)
 80035aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	2203      	movs	r2, #3
 80035b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	4a40      	ldr	r2, [pc, #256]	@ (80036bc <MX_GPIO_Init+0x224>)
 80035bc:	0019      	movs	r1, r3
 80035be:	0010      	movs	r0, r2
 80035c0:	f003 fa0a 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|WDI_Pin|PAPER_ON_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80035c4:	193b      	adds	r3, r7, r4
 80035c6:	4a3c      	ldr	r2, [pc, #240]	@ (80036b8 <MX_GPIO_Init+0x220>)
 80035c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	2201      	movs	r2, #1
 80035ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	193b      	adds	r3, r7, r4
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	2200      	movs	r2, #0
 80035da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035dc:	193b      	adds	r3, r7, r4
 80035de:	4a37      	ldr	r2, [pc, #220]	@ (80036bc <MX_GPIO_Init+0x224>)
 80035e0:	0019      	movs	r1, r3
 80035e2:	0010      	movs	r0, r2
 80035e4:	f003 f9f8 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_PIN_6,GPIO_PIN_7 */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035e8:	193b      	adds	r3, r7, r4
 80035ea:	22c0      	movs	r2, #192	@ 0xc0
 80035ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ee:	193b      	adds	r3, r7, r4
 80035f0:	2201      	movs	r2, #1
 80035f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035f4:	193b      	adds	r3, r7, r4
 80035f6:	2202      	movs	r2, #2
 80035f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80035fa:	193b      	adds	r3, r7, r4
 80035fc:	2201      	movs	r2, #1
 80035fe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003600:	193b      	adds	r3, r7, r4
 8003602:	4a2e      	ldr	r2, [pc, #184]	@ (80036bc <MX_GPIO_Init+0x224>)
 8003604:	0019      	movs	r1, r3
 8003606:	0010      	movs	r0, r2
 8003608:	f003 f9e6 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NIRQ_Pin;
 800360c:	0021      	movs	r1, r4
 800360e:	187b      	adds	r3, r7, r1
 8003610:	2280      	movs	r2, #128	@ 0x80
 8003612:	0152      	lsls	r2, r2, #5
 8003614:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003616:	000c      	movs	r4, r1
 8003618:	193b      	adds	r3, r7, r4
 800361a:	2200      	movs	r2, #0
 800361c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361e:	193b      	adds	r3, r7, r4
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NIRQ_GPIO_Port, &GPIO_InitStruct);
 8003624:	193b      	adds	r3, r7, r4
 8003626:	4a25      	ldr	r2, [pc, #148]	@ (80036bc <MX_GPIO_Init+0x224>)
 8003628:	0019      	movs	r1, r3
 800362a:	0010      	movs	r0, r2
 800362c:	f003 f9d4 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_RTC_Pin;
 8003630:	0021      	movs	r1, r4
 8003632:	187b      	adds	r3, r7, r1
 8003634:	2280      	movs	r2, #128	@ 0x80
 8003636:	01d2      	lsls	r2, r2, #7
 8003638:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800363a:	000c      	movs	r4, r1
 800363c:	193b      	adds	r3, r7, r4
 800363e:	2201      	movs	r2, #1
 8003640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	193b      	adds	r3, r7, r4
 8003644:	2200      	movs	r2, #0
 8003646:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003648:	193b      	adds	r3, r7, r4
 800364a:	2201      	movs	r2, #1
 800364c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CE_RTC_GPIO_Port, &GPIO_InitStruct);
 800364e:	193b      	adds	r3, r7, r4
 8003650:	4a1a      	ldr	r2, [pc, #104]	@ (80036bc <MX_GPIO_Init+0x224>)
 8003652:	0019      	movs	r1, r3
 8003654:	0010      	movs	r0, r2
 8003656:	f003 f9bf 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D_C_Pin|CSB_Pin|RST_Pin|CS_Pin;
 800365a:	0021      	movs	r1, r4
 800365c:	187b      	adds	r3, r7, r1
 800365e:	22e8      	movs	r2, #232	@ 0xe8
 8003660:	0152      	lsls	r2, r2, #5
 8003662:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003664:	000c      	movs	r4, r1
 8003666:	193b      	adds	r3, r7, r4
 8003668:	2201      	movs	r2, #1
 800366a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	193b      	adds	r3, r7, r4
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	193b      	adds	r3, r7, r4
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003678:	193a      	adds	r2, r7, r4
 800367a:	23a0      	movs	r3, #160	@ 0xa0
 800367c:	05db      	lsls	r3, r3, #23
 800367e:	0011      	movs	r1, r2
 8003680:	0018      	movs	r0, r3
 8003682:	f003 f9a9 	bl	80069d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8003686:	0021      	movs	r1, r4
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2280      	movs	r2, #128	@ 0x80
 800368c:	0092      	lsls	r2, r2, #2
 800368e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003690:	187b      	adds	r3, r7, r1
 8003692:	2200      	movs	r2, #0
 8003694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	187b      	adds	r3, r7, r1
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800369c:	187a      	adds	r2, r7, r1
 800369e:	23a0      	movs	r3, #160	@ 0xa0
 80036a0:	05db      	lsls	r3, r3, #23
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f003 f997 	bl	80069d8 <HAL_GPIO_Init>

}
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b00b      	add	sp, #44	@ 0x2c
 80036b0:	bd90      	pop	{r4, r7, pc}
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	40021000 	.word	0x40021000
 80036b8:	0000a0c2 	.word	0x0000a0c2
 80036bc:	50000400 	.word	0x50000400
 80036c0:	50000800 	.word	0x50000800
 80036c4:	50001400 	.word	0x50001400
 80036c8:	00008013 	.word	0x00008013
 80036cc:	00000f3d 	.word	0x00000f3d

080036d0 <enter_stop2>:
 * @param  None
 * @retval None
 */

void enter_stop2(uint32_t sleep_time, uint32_t wakeup_clock)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
	//	uint32_t Timeout = 0; /* Variable used for Timeout management */

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleep_time, wakeup_clock, 0) != HAL_OK)
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4816      	ldr	r0, [pc, #88]	@ (8003738 <enter_stop2+0x68>)
 80036e0:	2300      	movs	r3, #0
 80036e2:	f005 fadf 	bl	8008ca4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80036e6:	1e03      	subs	r3, r0, #0
 80036e8:	d001      	beq.n	80036ee <enter_stop2+0x1e>
	{
		Error_Handler();
 80036ea:	f000 fb9b 	bl	8003e24 <Error_Handler>
	}

	//gpio_before_stop2();
	LED1_OFF();
 80036ee:	4b13      	ldr	r3, [pc, #76]	@ (800373c <enter_stop2+0x6c>)
 80036f0:	2280      	movs	r2, #128	@ 0x80
 80036f2:	0292      	lsls	r2, r2, #10
 80036f4:	619a      	str	r2, [r3, #24]
	HAL_SuspendTick();
 80036f6:	f002 fc63 	bl	8005fc0 <HAL_SuspendTick>

	/* Set Standby mode */
	// Configure MCU low-power mode for CPU deep sleep mode
	PWR->CR1 |= LL_PWR_MODE_STOP2; // PWR_CR1_LPMS_SHUTDOWN
 80036fa:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <enter_stop2+0x70>)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b10      	ldr	r3, [pc, #64]	@ (8003740 <enter_stop2+0x70>)
 8003700:	2102      	movs	r1, #2
 8003702:	430a      	orrs	r2, r1
 8003704:	601a      	str	r2, [r3, #0]
	(void)PWR->CR1;				   // Ensure that the previous PWR register operations have been completed
 8003706:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <enter_stop2+0x70>)
 8003708:	681b      	ldr	r3, [r3, #0]

	// Configure CPU core
	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk; // Enable CPU deep sleep mode
 800370a:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <enter_stop2+0x74>)
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <enter_stop2+0x74>)
 8003710:	2104      	movs	r1, #4
 8003712:	430a      	orrs	r2, r1
 8003714:	611a      	str	r2, [r3, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8003716:	f3bf 8f4f 	dsb	sy
}
 800371a:	46c0      	nop			@ (mov r8, r8)
	DBGMCU->CR = 0; // Disable debug, trace and IWDG in low-power modes
#endif

	// Enter low-power mode
	__DSB();
	__WFI();
 800371c:	bf30      	wfi

	HAL_ResumeTick();
 800371e:	f002 fc5d 	bl	8005fdc <HAL_ResumeTick>
	LED1_ON();
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <enter_stop2+0x6c>)
 8003724:	2202      	movs	r2, #2
 8003726:	619a      	str	r2, [r3, #24]
	//gpio_from_stop2();
	printf("Exit from STOP2");
 8003728:	4b07      	ldr	r3, [pc, #28]	@ (8003748 <enter_stop2+0x78>)
 800372a:	0018      	movs	r0, r3
 800372c:	f001 ff8a 	bl	8005644 <printf_>
}
 8003730:	46c0      	nop			@ (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000420 	.word	0x20000420
 800373c:	50000400 	.word	0x50000400
 8003740:	40007000 	.word	0x40007000
 8003744:	e000ed00 	.word	0xe000ed00
 8003748:	0800fb94 	.word	0x0800fb94

0800374c <LL_SPI_Enable>:
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2240      	movs	r2, #64	@ 0x40
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	601a      	str	r2, [r3, #0]
}
 8003760:	46c0      	nop			@ (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}

08003768 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBG_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800376c:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	4b03      	ldr	r3, [pc, #12]	@ (8003780 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8003772:	2102      	movs	r1, #2
 8003774:	438a      	bics	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
}
 8003778:	46c0      	nop			@ (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	40015800 	.word	0x40015800

08003784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003784:	b5b0      	push	{r4, r5, r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

  volatile int8_t rslt;
  uint8_t dev_addr = 0;
 800378a:	1cbb      	adds	r3, r7, #2
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
  dev.intf_ptr = &dev_addr;
 8003790:	4bd9      	ldr	r3, [pc, #868]	@ (8003af8 <main+0x374>)
 8003792:	1cba      	adds	r2, r7, #2
 8003794:	605a      	str	r2, [r3, #4]
  dev.intf = BME280_SPI_INTF;
 8003796:	4bd8      	ldr	r3, [pc, #864]	@ (8003af8 <main+0x374>)
 8003798:	2200      	movs	r2, #0
 800379a:	721a      	strb	r2, [r3, #8]
  dev.read = user_spi_read;
 800379c:	4bd6      	ldr	r3, [pc, #856]	@ (8003af8 <main+0x374>)
 800379e:	4ad7      	ldr	r2, [pc, #860]	@ (8003afc <main+0x378>)
 80037a0:	60da      	str	r2, [r3, #12]
  dev.write = user_spi_write;
 80037a2:	4bd5      	ldr	r3, [pc, #852]	@ (8003af8 <main+0x374>)
 80037a4:	4ad6      	ldr	r2, [pc, #856]	@ (8003b00 <main+0x37c>)
 80037a6:	611a      	str	r2, [r3, #16]
  dev.delay_us = user_delay_us;
 80037a8:	4bd3      	ldr	r3, [pc, #844]	@ (8003af8 <main+0x374>)
 80037aa:	4ad6      	ldr	r2, [pc, #856]	@ (8003b04 <main+0x380>)
 80037ac:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037ae:	f002 fb6a 	bl	8005e86 <HAL_Init>
  /* USER CODE BEGIN Init */
  uint16_t h_;
  uint16_t t_;
  uint16_t vbat_output_flag;

  uint8_t temperature_new = 0;
 80037b2:	230f      	movs	r3, #15
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
  uint8_t battery_new = 0;
 80037ba:	2317      	movs	r3, #23
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
  uint8_t humidity_new = 0;
 80037c2:	2316      	movs	r3, #22
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037ca:	f000 fa0b 	bl	8003be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037ce:	f7ff fe63 	bl	8003498 <MX_GPIO_Init>
  MX_ADC1_Init();
 80037d2:	f7ff fd01 	bl	80031d8 <MX_ADC1_Init>
  MX_RTC_Init();
 80037d6:	f002 f831 	bl	800583c <MX_RTC_Init>
  MX_SPI1_Init();
 80037da:	f002 f8c3 	bl	8005964 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80037de:	f002 fa7b 	bl	8005cd8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LL_DBGMCU_DisableDBGStopMode(); // !!!__ Disable debug in stop mode __!!!
 80037e2:	f7ff ffc1 	bl	8003768 <LL_DBGMCU_DisableDBGStopMode>
                                  //	LL_DBGMCU_EnableDBGStopMode();
  LED1_ON();
 80037e6:	4bc8      	ldr	r3, [pc, #800]	@ (8003b08 <main+0x384>)
 80037e8:	2202      	movs	r2, #2
 80037ea:	619a      	str	r2, [r3, #24]

  LL_SPI_Enable(SPI1);
 80037ec:	4bc7      	ldr	r3, [pc, #796]	@ (8003b0c <main+0x388>)
 80037ee:	0018      	movs	r0, r3
 80037f0:	f7ff ffac 	bl	800374c <LL_SPI_Enable>

  //  ==============___ Power ON __=======================

  uint8_t wdalarm = read(REG_WEEKDAY_ALARM); // REG_WEEKDAY_ALARM  0x0e;
 80037f4:	4bc6      	ldr	r3, [pc, #792]	@ (8003b10 <main+0x38c>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	250e      	movs	r5, #14
 80037fa:	197c      	adds	r4, r7, r5
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7ff fbf7 	bl	8002ff0 <read>
 8003802:	0003      	movs	r3, r0
 8003804:	7023      	strb	r3, [r4, #0]
  if ((wdalarm & 0xf8) != 0xa0)              // ********    Startup from power up.   ******** ((wdalarm & 0xf8) != 0xa0)
 8003806:	197b      	adds	r3, r7, r5
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	22f8      	movs	r2, #248	@ 0xf8
 800380c:	4013      	ands	r3, r2
 800380e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003810:	d038      	beq.n	8003884 <main+0x100>
  {
    uint32_t clk = HAL_RCC_GetSysClockFreq();
 8003812:	f003 fff5 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 8003816:	0003      	movs	r3, r0
 8003818:	60bb      	str	r3, [r7, #8]
    printf("\nMAIN. First power ON.   %d\n", clk);
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4bbd      	ldr	r3, [pc, #756]	@ (8003b14 <main+0x390>)
 800381e:	0011      	movs	r1, r2
 8003820:	0018      	movs	r0, r3
 8003822:	f001 ff0f 	bl	8005644 <printf_>
    HAL_Delay(3000);  	// AB1805 self initializtion time
 8003826:	4bbc      	ldr	r3, [pc, #752]	@ (8003b18 <main+0x394>)
 8003828:	0018      	movs	r0, r3
 800382a:	f002 fba7 	bl	8005f7c <HAL_Delay>

    vbat_output_flag = (BAT_OUTPUT_PERIOD); // For first time output must be bigger 15
 800382e:	003b      	movs	r3, r7
 8003830:	2210      	movs	r2, #16
 8003832:	801a      	strh	r2, [r3, #0]
    resetConfig(0);
 8003834:	2000      	movs	r0, #0
 8003836:	f7fe fe81 	bl	800253c <resetConfig>
    write(REG_WEEKDAY_ALARM, 0xa0); // Magic 0xa0
 800383a:	4bb5      	ldr	r3, [pc, #724]	@ (8003b10 <main+0x38c>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	21a0      	movs	r1, #160	@ 0xa0
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff fbe5 	bl	8003010 <write>
    printf("wdalarm = 0x%x\n",read(REG_WEEKDAY_ALARM));
 8003846:	4bb2      	ldr	r3, [pc, #712]	@ (8003b10 <main+0x38c>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	0018      	movs	r0, r3
 800384c:	f7ff fbd0 	bl	8002ff0 <read>
 8003850:	0003      	movs	r3, r0
 8003852:	001a      	movs	r2, r3
 8003854:	4bb1      	ldr	r3, [pc, #708]	@ (8003b1c <main+0x398>)
 8003856:	0011      	movs	r1, r2
 8003858:	0018      	movs	r0, r3
 800385a:	f001 fef3 	bl	8005644 <printf_>

 //   return writeRam(address, (uint8_t *)data, sizeof(data), lock);
    writeRam(H_old_RAM_address, 0, 1, 0);
 800385e:	2300      	movs	r3, #0
 8003860:	2201      	movs	r2, #1
 8003862:	2100      	movs	r1, #0
 8003864:	2040      	movs	r0, #64	@ 0x40
 8003866:	f7ff f9e7 	bl	8002c38 <writeRam>
    writeRam(T_old_RAM_address, 0, 1, 0);
 800386a:	2300      	movs	r3, #0
 800386c:	2201      	movs	r2, #1
 800386e:	2100      	movs	r1, #0
 8003870:	2042      	movs	r0, #66	@ 0x42
 8003872:	f7ff f9e1 	bl	8002c38 <writeRam>
    writeRam(vbat_old_RAM_address, 0, 1, 0);
 8003876:	2300      	movs	r3, #0
 8003878:	2201      	movs	r2, #1
 800387a:	2100      	movs	r1, #0
 800387c:	2044      	movs	r0, #68	@ 0x44
 800387e:	f7ff f9db 	bl	8002c38 <writeRam>
 8003882:	e028      	b.n	80038d6 <main+0x152>

  }
  else
  {
    read_RTCRam(vbat_output_flag_address, &vbat_output_flag, 1); // Read vbat_output_flag from RTC RAM
 8003884:	003b      	movs	r3, r7
 8003886:	2201      	movs	r2, #1
 8003888:	0019      	movs	r1, r3
 800388a:	2046      	movs	r0, #70	@ 0x46
 800388c:	f000 f9f5 	bl	8003c7a <read_RTCRam>
    vbat_output_flag++;
 8003890:	003b      	movs	r3, r7
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	003b      	movs	r3, r7
 800389a:	801a      	strh	r2, [r3, #0]
    printf("\nMAIN. Startup from RTC\n");
 800389c:	4ba0      	ldr	r3, [pc, #640]	@ (8003b20 <main+0x39c>)
 800389e:	0018      	movs	r0, r3
 80038a0:	f001 fed0 	bl	8005644 <printf_>
    //hex_dump();

    read_RTCRam(H_old_RAM_address, &H_old, 0);
 80038a4:	4b9f      	ldr	r3, [pc, #636]	@ (8003b24 <main+0x3a0>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	0019      	movs	r1, r3
 80038aa:	2040      	movs	r0, #64	@ 0x40
 80038ac:	f000 f9e5 	bl	8003c7a <read_RTCRam>
    read_RTCRam(T_old_RAM_address, &T_old, 0);
 80038b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003b28 <main+0x3a4>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	0019      	movs	r1, r3
 80038b6:	2042      	movs	r0, #66	@ 0x42
 80038b8:	f000 f9df 	bl	8003c7a <read_RTCRam>
    read_RTCRam(vbat_old_RAM_address, &vbat_old, 0);
 80038bc:	4b9b      	ldr	r3, [pc, #620]	@ (8003b2c <main+0x3a8>)
 80038be:	2200      	movs	r2, #0
 80038c0:	0019      	movs	r1, r3
 80038c2:	2044      	movs	r0, #68	@ 0x44
 80038c4:	f000 f9d9 	bl	8003c7a <read_RTCRam>
    initialized_flag = read(initialized_flag_address); // uint8_t
 80038c8:	2048      	movs	r0, #72	@ 0x48
 80038ca:	f7ff fb91 	bl	8002ff0 <read>
 80038ce:	0003      	movs	r3, r0
 80038d0:	001a      	movs	r2, r3
 80038d2:	4b97      	ldr	r3, [pc, #604]	@ (8003b30 <main+0x3ac>)
 80038d4:	701a      	strb	r2, [r3, #0]
  }

  // ##################________measureME280_________#########################

  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80038d6:	4b88      	ldr	r3, [pc, #544]	@ (8003af8 <main+0x374>)
 80038d8:	2242      	movs	r2, #66	@ 0x42
 80038da:	2101      	movs	r1, #1
 80038dc:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_p = BME280_NO_OVERSAMPLING; // UINT8_C(0x00)
 80038de:	4b86      	ldr	r3, [pc, #536]	@ (8003af8 <main+0x374>)
 80038e0:	2240      	movs	r2, #64	@ 0x40
 80038e2:	2100      	movs	r1, #0
 80038e4:	5499      	strb	r1, [r3, r2]
  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80038e6:	4b84      	ldr	r3, [pc, #528]	@ (8003af8 <main+0x374>)
 80038e8:	2241      	movs	r2, #65	@ 0x41
 80038ea:	2102      	movs	r1, #2
 80038ec:	5499      	strb	r1, [r3, r2]
  dev.settings.filter = BME280_FILTER_COEFF_OFF;
 80038ee:	4b82      	ldr	r3, [pc, #520]	@ (8003af8 <main+0x374>)
 80038f0:	2243      	movs	r2, #67	@ 0x43
 80038f2:	2100      	movs	r1, #0
 80038f4:	5499      	strb	r1, [r3, r2]

  rslt = bme280_init(&dev);
 80038f6:	4b80      	ldr	r3, [pc, #512]	@ (8003af8 <main+0x374>)
 80038f8:	0018      	movs	r0, r3
 80038fa:	f006 f8bb 	bl	8009a74 <bme280_init>
 80038fe:	0003      	movs	r3, r0
 8003900:	001a      	movs	r2, r3
 8003902:	1cfb      	adds	r3, r7, #3
 8003904:	701a      	strb	r2, [r3, #0]
  if (rslt != BME280_OK) // OK = 0
 8003906:	1cfb      	adds	r3, r7, #3
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b25b      	sxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <main+0x1a2>
  {
    printf("Failed to initialize the device (code %+d).\n", rslt);
 8003910:	1cfb      	adds	r3, r7, #3
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	b25b      	sxtb	r3, r3
 8003916:	001a      	movs	r2, r3
 8003918:	4b86      	ldr	r3, [pc, #536]	@ (8003b34 <main+0x3b0>)
 800391a:	0011      	movs	r1, r2
 800391c:	0018      	movs	r0, r3
 800391e:	f001 fe91 	bl	8005644 <printf_>
    Error_Handler();
 8003922:	f000 fa7f 	bl	8003e24 <Error_Handler>
  }

  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003926:	4b74      	ldr	r3, [pc, #464]	@ (8003af8 <main+0x374>)
 8003928:	0019      	movs	r1, r3
 800392a:	200f      	movs	r0, #15
 800392c:	f006 fa04 	bl	8009d38 <bme280_set_sensor_settings>
 8003930:	0003      	movs	r3, r0
 8003932:	001a      	movs	r2, r3
 8003934:	1cfb      	adds	r3, r7, #3
 8003936:	701a      	strb	r2, [r3, #0]
  /*Calculate the minimum delay (ms) required between consecutive measurement based upon the sensor enabled
   *  and the oversampling configuration. */
  req_delay = bme280_cal_meas_delay(&dev.settings);
 8003938:	4b7f      	ldr	r3, [pc, #508]	@ (8003b38 <main+0x3b4>)
 800393a:	0018      	movs	r0, r3
 800393c:	f006 fc40 	bl	800a1c0 <bme280_cal_meas_delay>
 8003940:	0002      	movs	r2, r0
 8003942:	4b7e      	ldr	r3, [pc, #504]	@ (8003b3c <main+0x3b8>)
 8003944:	601a      	str	r2, [r3, #0]
  // printf("req_delay = %d\n", req_delay);

  rslt = stream_sensor_data_forced_mode(&dev); // working time = 0.8 sec
 8003946:	4b6c      	ldr	r3, [pc, #432]	@ (8003af8 <main+0x374>)
 8003948:	0018      	movs	r0, r3
 800394a:	f000 fa25 	bl	8003d98 <stream_sensor_data_forced_mode>
 800394e:	0003      	movs	r3, r0
 8003950:	001a      	movs	r2, r3
 8003952:	1cfb      	adds	r3, r7, #3
 8003954:	701a      	strb	r2, [r3, #0]
  if (rslt != BME280_OK)
 8003956:	1cfb      	adds	r3, r7, #3
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b25b      	sxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00c      	beq.n	800397a <main+0x1f6>
  {
    fprintf(stderr, "Failed to stream sensor data (code %+d).", rslt);
 8003960:	4b77      	ldr	r3, [pc, #476]	@ (8003b40 <main+0x3bc>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68d8      	ldr	r0, [r3, #12]
 8003966:	1cfb      	adds	r3, r7, #3
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b25b      	sxtb	r3, r3
 800396c:	001a      	movs	r2, r3
 800396e:	4b75      	ldr	r3, [pc, #468]	@ (8003b44 <main+0x3c0>)
 8003970:	0019      	movs	r1, r3
 8003972:	f00a f879 	bl	800da68 <fiprintf>
    Error_Handler();
 8003976:	f000 fa55 	bl	8003e24 <Error_Handler>
  }
  // h_ = comp_data.humidity / 1000.0;
  h_ = (((uint16_t)comp_data.humidity * 1049 + 500) >> 20); // fast_divide_by_1000
 800397a:	4b73      	ldr	r3, [pc, #460]	@ (8003b48 <main+0x3c4>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	b29b      	uxth	r3, r3
 8003980:	001a      	movs	r2, r3
 8003982:	0013      	movs	r3, r2
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	189b      	adds	r3, r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	189b      	adds	r3, r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	189b      	adds	r3, r3, r2
 8003990:	33f5      	adds	r3, #245	@ 0xf5
 8003992:	33ff      	adds	r3, #255	@ 0xff
 8003994:	151a      	asrs	r2, r3, #20
 8003996:	1dbb      	adds	r3, r7, #6
 8003998:	801a      	strh	r2, [r3, #0]

  // t_ = comp_data.temperature / 10.0;
  t_ = (((uint16_t)comp_data.temperature * 6554 + 2) >> 16); // fast_divide_by_10
 800399a:	4b6b      	ldr	r3, [pc, #428]	@ (8003b48 <main+0x3c4>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	001a      	movs	r2, r3
 80039a2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b4c <main+0x3c8>)
 80039a4:	4353      	muls	r3, r2
 80039a6:	3302      	adds	r3, #2
 80039a8:	141a      	asrs	r2, r3, #16
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	801a      	strh	r2, [r3, #0]

  printf("h_ = %d   h_old = %d   t_ = %d   t_old = %d\n", h_, H_old, t_, T_old);
 80039ae:	1dbb      	adds	r3, r7, #6
 80039b0:	8819      	ldrh	r1, [r3, #0]
 80039b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003b24 <main+0x3a0>)
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	001c      	movs	r4, r3
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	881a      	ldrh	r2, [r3, #0]
 80039bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003b28 <main+0x3a4>)
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	4863      	ldr	r0, [pc, #396]	@ (8003b50 <main+0x3cc>)
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	0013      	movs	r3, r2
 80039c6:	0022      	movs	r2, r4
 80039c8:	f001 fe3c 	bl	8005644 <printf_>

  // ============================_____END____===================================

  if ((t_ != T_old) | (vbat_output_flag > BAT_OUTPUT_MAX_PERIOD))
 80039cc:	4b56      	ldr	r3, [pc, #344]	@ (8003b28 <main+0x3a4>)
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	1d3a      	adds	r2, r7, #4
 80039d2:	8812      	ldrh	r2, [r2, #0]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	1e5a      	subs	r2, r3, #1
 80039d8:	4193      	sbcs	r3, r2
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	003b      	movs	r3, r7
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	211e      	movs	r1, #30
 80039e2:	4299      	cmp	r1, r3
 80039e4:	419b      	sbcs	r3, r3
 80039e6:	425b      	negs	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4313      	orrs	r3, r2
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d100      	bne.n	80039f4 <main+0x270>
 80039f2:	e0e0      	b.n	8003bb6 <main+0x432>
  {
	  int32_t vBat;
	  // Temperature need output
	  write_ToRTCRam(T_old_RAM_address, t_, 1);
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	2201      	movs	r2, #1
 80039fa:	0019      	movs	r1, r3
 80039fc:	2042      	movs	r0, #66	@ 0x42
 80039fe:	f000 f96b 	bl	8003cd8 <write_ToRTCRam>
	  temperature_new = 1;
 8003a02:	230f      	movs	r3, #15
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]

    if (vbat_output_flag > 15) // output Vbat and Hum after every 10 min; (vbat_output_flag >= 10)
 8003a0a:	003b      	movs	r3, r7
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	d94c      	bls.n	8003aac <main+0x328>
    {
      vbat_output_flag = 0;
 8003a12:	003b      	movs	r3, r7
 8003a14:	2200      	movs	r2, #0
 8003a16:	801a      	strh	r2, [r3, #0]
      write_ToRTCRam(vbat_output_flag_address, vbat_output_flag, 1); // save vbat_output_flag
 8003a18:	003b      	movs	r3, r7
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	0019      	movs	r1, r3
 8003a20:	2046      	movs	r0, #70	@ 0x46
 8003a22:	f000 f959 	bl	8003cd8 <write_ToRTCRam>

      Activate_ADC();
 8003a26:	f7ff fcb9 	bl	800339c <Activate_ADC>
      vBat = get_vbat();
 8003a2a:	f7ff fc81 	bl	8003330 <get_vbat>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	613b      	str	r3, [r7, #16]

      // vBat = vBat / 10.0; // go with 3 digits
      vBat = ((uint32_t)vBat * 6554 + 2) >> 16; // fast_divide_by_10
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4a45      	ldr	r2, [pc, #276]	@ (8003b4c <main+0x3c8>)
 8003a36:	4353      	muls	r3, r2
 8003a38:	3302      	adds	r3, #2
 8003a3a:	0c1b      	lsrs	r3, r3, #16
 8003a3c:	613b      	str	r3, [r7, #16]
      printf("vBat = %d, vbat_old = %d\n", vBat, vbat_old);
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b2c <main+0x3a8>)
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	001a      	movs	r2, r3
 8003a44:	6939      	ldr	r1, [r7, #16]
 8003a46:	4b43      	ldr	r3, [pc, #268]	@ (8003b54 <main+0x3d0>)
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f001 fdfb 	bl	8005644 <printf_>

      if (vBat < UNDERVOLTAGE) // #define UNDERVOLTAGE 220
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2bdb      	cmp	r3, #219	@ 0xdb
 8003a52:	dc09      	bgt.n	8003a68 <main+0x2e4>
      {
        final_message(vBat);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f008 ffd7 	bl	800ca0c <final_message>
        go_down(vBat); // shutdown forever  ****  R E W R I T E !!!   *****
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	0018      	movs	r0, r3
 8003a64:	f000 f9c2 	bl	8003dec <go_down>
      }

      if (!(vBat == vbat_old)) // it's going to output
 8003a68:	4b30      	ldr	r3, [pc, #192]	@ (8003b2c <main+0x3a8>)
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00a      	beq.n	8003a8a <main+0x306>
      {
        write_ToRTCRam(vbat_old_RAM_address, vBat, 1); // write vbat_old = vBat
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2201      	movs	r2, #1
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	2044      	movs	r0, #68	@ 0x44
 8003a7e:	f000 f92b 	bl	8003cd8 <write_ToRTCRam>

        battery_new = 1;
 8003a82:	2317      	movs	r3, #23
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
      }

      if (h_ != H_old)
 8003a8a:	4b26      	ldr	r3, [pc, #152]	@ (8003b24 <main+0x3a0>)
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	1dba      	adds	r2, r7, #6
 8003a90:	8812      	ldrh	r2, [r2, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d00a      	beq.n	8003aac <main+0x328>
      {
    	write_ToRTCRam(H_old_RAM_address, h_, 1);
 8003a96:	1dbb      	adds	r3, r7, #6
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	0019      	movs	r1, r3
 8003a9e:	2040      	movs	r0, #64	@ 0x40
 8003aa0:	f000 f91a 	bl	8003cd8 <write_ToRTCRam>
        humidity_new = 1;
 8003aa4:	2316      	movs	r3, #22
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
      }
    }

    PAPER_ON_H();
 8003aac:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <main+0x384>)
 8003aae:	2280      	movs	r2, #128	@ 0x80
 8003ab0:	0212      	lsls	r2, r2, #8
 8003ab2:	619a      	str	r2, [r3, #24]
    printf("initialized_flag5 = 0x%x\n",initialized_flag);
 8003ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b30 <main+0x3ac>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	001a      	movs	r2, r3
 8003aba:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <main+0x3d4>)
 8003abc:	0011      	movs	r1, r2
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f001 fdc0 	bl	8005644 <printf_>
    if(initialized_flag == 0){
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b30 <main+0x3ac>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d149      	bne.n	8003b60 <main+0x3dc>
    	ESP_Init();
 8003acc:	f008 ff46 	bl	800c95c <ESP_Init>
        initialized_flag = 1; // Flag that ESP is initialized, to do it only once
 8003ad0:	4b17      	ldr	r3, [pc, #92]	@ (8003b30 <main+0x3ac>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
        write(initialized_flag_address, initialized_flag);
 8003ad6:	4b16      	ldr	r3, [pc, #88]	@ (8003b30 <main+0x3ac>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	0019      	movs	r1, r3
 8003adc:	2048      	movs	r0, #72	@ 0x48
 8003ade:	f7ff fa97 	bl	8003010 <write>
        printf("initialized_flag = 0x%x\n",read(initialized_flag_address));
 8003ae2:	2048      	movs	r0, #72	@ 0x48
 8003ae4:	f7ff fa84 	bl	8002ff0 <read>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	001a      	movs	r2, r3
 8003aec:	4b1b      	ldr	r3, [pc, #108]	@ (8003b5c <main+0x3d8>)
 8003aee:	0011      	movs	r1, r2
 8003af0:	0018      	movs	r0, r3
 8003af2:	f001 fda7 	bl	8005644 <printf_>
 8003af6:	e037      	b.n	8003b68 <main+0x3e4>
 8003af8:	200003c8 	.word	0x200003c8
 8003afc:	0800b01d 	.word	0x0800b01d
 8003b00:	0800b0a5 	.word	0x0800b0a5
 8003b04:	0800afb7 	.word	0x0800afb7
 8003b08:	50000400 	.word	0x50000400
 8003b0c:	40013000 	.word	0x40013000
 8003b10:	0800fea8 	.word	0x0800fea8
 8003b14:	0800fba4 	.word	0x0800fba4
 8003b18:	00000bb8 	.word	0x00000bb8
 8003b1c:	0800fbc4 	.word	0x0800fbc4
 8003b20:	0800fbd4 	.word	0x0800fbd4
 8003b24:	20000418 	.word	0x20000418
 8003b28:	2000041a 	.word	0x2000041a
 8003b2c:	2000041c 	.word	0x2000041c
 8003b30:	2000041e 	.word	0x2000041e
 8003b34:	0800fbf0 	.word	0x0800fbf0
 8003b38:	20000408 	.word	0x20000408
 8003b3c:	20000414 	.word	0x20000414
 8003b40:	20000184 	.word	0x20000184
 8003b44:	0800fc20 	.word	0x0800fc20
 8003b48:	20000550 	.word	0x20000550
 8003b4c:	0000199a 	.word	0x0000199a
 8003b50:	0800fc4c 	.word	0x0800fc4c
 8003b54:	0800fc7c 	.word	0x0800fc7c
 8003b58:	0800fc98 	.word	0x0800fc98
 8003b5c:	0800fcb4 	.word	0x0800fcb4
    }else
    {
        EPD_1IN54_V2_Reset();
 8003b60:	f007 fb79 	bl	800b256 <EPD_1IN54_V2_Reset>
        ESP_Init_standby();
 8003b64:	f009 f8ac 	bl	800ccc0 <ESP_Init_standby>
    }

    if(temperature_new){
 8003b68:	230f      	movs	r3, #15
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <main+0x3f8>
    	temperature_out(t_);
 8003b72:	1d3b      	adds	r3, r7, #4
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f008 fe48 	bl	800c80c <temperature_out>
    }
    if(battery_new){
 8003b7c:	2317      	movs	r3, #23
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <main+0x40c>
    	battery_out(vBat);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f008 fdd4 	bl	800c738 <battery_out>
    }
    if(humidity_new){
 8003b90:	2316      	movs	r3, #22
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <main+0x420>
    	humidity_out(h_);
 8003b9a:	1dbb      	adds	r3, r7, #6
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f008 fe92 	bl	800c8c8 <humidity_out>
    }

    EPD_1IN54_V2_DisplayPart(BlackImage);
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <main+0x458>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f007 fe38 	bl	800b81e <EPD_1IN54_V2_DisplayPart>
// EPD_1IN54_V2_Sleep(); // Deep sleep mode ????
    PAPER_ON_L();         // e-Paper OFF
 8003bae:	4b0c      	ldr	r3, [pc, #48]	@ (8003be0 <main+0x45c>)
 8003bb0:	2280      	movs	r2, #128	@ 0x80
 8003bb2:	0612      	lsls	r2, r2, #24
 8003bb4:	619a      	str	r2, [r3, #24]
                          //  hex_dump();
                          //  HAL_Delay(1);
  }

  deepPowerDown(30);                                             // 30 seconds deep power down
 8003bb6:	201e      	movs	r0, #30
 8003bb8:	f7fe fdb2 	bl	8002720 <deepPowerDown>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Never be here
    LED1_ON();
 8003bbc:	4b08      	ldr	r3, [pc, #32]	@ (8003be0 <main+0x45c>)
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 8003bc2:	2064      	movs	r0, #100	@ 0x64
 8003bc4:	f002 f9da 	bl	8005f7c <HAL_Delay>
    LED1_OFF();
 8003bc8:	4b05      	ldr	r3, [pc, #20]	@ (8003be0 <main+0x45c>)
 8003bca:	2280      	movs	r2, #128	@ 0x80
 8003bcc:	0292      	lsls	r2, r2, #10
 8003bce:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 8003bd0:	2064      	movs	r0, #100	@ 0x64
 8003bd2:	f002 f9d3 	bl	8005f7c <HAL_Delay>
    LED1_ON();
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	e7f0      	b.n	8003bbc <main+0x438>
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	2000059c 	.word	0x2000059c
 8003be0:	50000400 	.word	0x50000400

08003be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b099      	sub	sp, #100	@ 0x64
 8003be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bea:	2414      	movs	r4, #20
 8003bec:	193b      	adds	r3, r7, r4
 8003bee:	0018      	movs	r0, r3
 8003bf0:	234c      	movs	r3, #76	@ 0x4c
 8003bf2:	001a      	movs	r2, r3
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	f009 ffaf 	bl	800db58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	2310      	movs	r3, #16
 8003c00:	001a      	movs	r2, r3
 8003c02:	2100      	movs	r1, #0
 8003c04:	f009 ffa8 	bl	800db58 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f003 f875 	bl	8006cfc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8003c12:	0021      	movs	r1, r4
 8003c14:	187b      	adds	r3, r7, r1
 8003c16:	2218      	movs	r2, #24
 8003c18:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2201      	movs	r2, #1
 8003c24:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	2200      	movs	r2, #0
 8003c2a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	2280      	movs	r2, #128	@ 0x80
 8003c30:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	2200      	movs	r2, #0
 8003c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c38:	187b      	adds	r3, r7, r1
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f003 f8ca 	bl	8006dd4 <HAL_RCC_OscConfig>
 8003c40:	1e03      	subs	r3, r0, #0
 8003c42:	d001      	beq.n	8003c48 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8003c44:	f000 f8ee 	bl	8003e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	2207      	movs	r2, #7
 8003c4c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003c4e:	1d3b      	adds	r3, r7, #4
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c60:	1d3b      	adds	r3, r7, #4
 8003c62:	2101      	movs	r1, #1
 8003c64:	0018      	movs	r0, r3
 8003c66:	f003 fcdf 	bl	8007628 <HAL_RCC_ClockConfig>
 8003c6a:	1e03      	subs	r3, r0, #0
 8003c6c:	d001      	beq.n	8003c72 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003c6e:	f000 f8d9 	bl	8003e24 <Error_Handler>
  }
}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b019      	add	sp, #100	@ 0x64
 8003c78:	bd90      	pop	{r4, r7, pc}

08003c7a <read_RTCRam>:

/* USER CODE BEGIN 4 */

// Function to read a uint16_t value from RTC RAM
bool read_RTCRam(uint8_t address, uint16_t *read_data, bool lock)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	0011      	movs	r1, r2
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	1c02      	adds	r2, r0, #0
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	1dbb      	adds	r3, r7, #6
 8003c8c:	1c0a      	adds	r2, r1, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
  // Create a buffer to hold the data to be read
  uint8_t data[sizeof(uint16_t)];

  // Call the driver's readRam function
  if (!readRam(address, (uint8_t *)data, sizeof(data), lock))
 8003c90:	1dfb      	adds	r3, r7, #7
 8003c92:	7818      	ldrb	r0, [r3, #0]
 8003c94:	1dbb      	adds	r3, r7, #6
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	220c      	movs	r2, #12
 8003c9a:	18b9      	adds	r1, r7, r2
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f7fe ff61 	bl	8002b64 <readRam>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4053      	eors	r3, r2
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <read_RTCRam+0x3a>
  {
    // If the read operation fails, return false
    return false;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e00d      	b.n	8003cd0 <read_RTCRam+0x56>
  }

  // Combine the two bytes into a uint16_t value
  *read_data = (uint16_t)data[0] | ((uint16_t)data[1] << 8);
 8003cb4:	210c      	movs	r1, #12
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b21a      	sxth	r2, r3
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	b21b      	sxth	r3, r3
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b21b      	sxth	r3, r3
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	801a      	strh	r2, [r3, #0]

  return true;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <write_ToRTCRam>:

// Function to write a uint16_t value to RTC RAM
bool write_ToRTCRam(uint8_t address, uint16_t write_data, bool lock)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	0004      	movs	r4, r0
 8003ce0:	0008      	movs	r0, r1
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	1dfb      	adds	r3, r7, #7
 8003ce6:	1c22      	adds	r2, r4, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	1c02      	adds	r2, r0, #0
 8003cee:	801a      	strh	r2, [r3, #0]
 8003cf0:	1dbb      	adds	r3, r7, #6
 8003cf2:	1c0a      	adds	r2, r1, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
  // Create a buffer to hold the data to be written
  uint8_t data[sizeof(uint16_t)];

  // Split the uint16_t value into two bytes
  data[0] = (uint8_t)(write_data & 0xFF);        // Lower byte
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	210c      	movs	r1, #12
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	701a      	strb	r2, [r3, #0]
  data[1] = (uint8_t)((write_data >> 8) & 0xFF); // Upper byte
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	705a      	strb	r2, [r3, #1]

  // Call the driver's writeRam function
  return writeRam(address, (uint8_t *)data, sizeof(data), lock);
 8003d10:	1dfb      	adds	r3, r7, #7
 8003d12:	7818      	ldrb	r0, [r3, #0]
 8003d14:	1dbb      	adds	r3, r7, #6
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	1879      	adds	r1, r7, r1
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f7fe ff8c 	bl	8002c38 <writeRam>
 8003d20:	0003      	movs	r3, r0
}
 8003d22:	0018      	movs	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	b005      	add	sp, #20
 8003d28:	bd90      	pop	{r4, r7, pc}
	...

08003d2c <print_error>:

void print_error(const char *func, uint32_t line)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  printf(" *** Error:  %s ,   %d\n", func, line);
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <print_error+0x34>)
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	f001 fc81 	bl	8005644 <printf_>
  HAL_Delay(100);
 8003d42:	2064      	movs	r0, #100	@ 0x64
 8003d44:	f002 f91a 	bl	8005f7c <HAL_Delay>
  timeout_reset(__func__, __LINE__);
 8003d48:	23c5      	movs	r3, #197	@ 0xc5
 8003d4a:	005a      	lsls	r2, r3, #1
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <print_error+0x38>)
 8003d4e:	0011      	movs	r1, r2
 8003d50:	0018      	movs	r0, r3
 8003d52:	f000 f809 	bl	8003d68 <timeout_reset>
}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b002      	add	sp, #8
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	0800fcd0 	.word	0x0800fcd0
 8003d64:	0800febc 	.word	0x0800febc

08003d68 <timeout_reset>:

void timeout_reset(const char *func, uint32_t line)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  printf(" *** timeout_reset:  %s    %d\n", func, line);
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4b07      	ldr	r3, [pc, #28]	@ (8003d94 <timeout_reset+0x2c>)
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f001 fc63 	bl	8005644 <printf_>
  HAL_Delay(10);
 8003d7e:	200a      	movs	r0, #10
 8003d80:	f002 f8fc 	bl	8005f7c <HAL_Delay>
  deepPowerDown(10);
 8003d84:	200a      	movs	r0, #10
 8003d86:	f7fe fccb 	bl	8002720 <deepPowerDown>
}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	0800fce8 	.word	0x0800fce8

08003d98 <stream_sensor_data_forced_mode>:

// Read BME280 data
int8_t stream_sensor_data_forced_mode(struct bme280_dev *dev)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  reslt = bme280_set_sensor_mode(BME280_FORCED_MODE, dev);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	0019      	movs	r1, r3
 8003da4:	2001      	movs	r0, #1
 8003da6:	f006 f832 	bl	8009e0e <bme280_set_sensor_mode>
 8003daa:	0003      	movs	r3, r0
 8003dac:	001a      	movs	r2, r3
 8003dae:	4b0c      	ldr	r3, [pc, #48]	@ (8003de0 <stream_sensor_data_forced_mode+0x48>)
 8003db0:	701a      	strb	r2, [r3, #0]
  /* Wait for the measurement to complete and print data  */

  HAL_Delay(req_delay); // 9 ms !!!
 8003db2:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <stream_sensor_data_forced_mode+0x4c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f002 f8e0 	bl	8005f7c <HAL_Delay>
  reslt = bme280_get_sensor_data(BME280_TEMP | BME280_HUM, &comp_data, dev);
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003de8 <stream_sensor_data_forced_mode+0x50>)
 8003dc0:	0019      	movs	r1, r3
 8003dc2:	2006      	movs	r0, #6
 8003dc4:	f006 f905 	bl	8009fd2 <bme280_get_sensor_data>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	001a      	movs	r2, r3
 8003dcc:	4b04      	ldr	r3, [pc, #16]	@ (8003de0 <stream_sensor_data_forced_mode+0x48>)
 8003dce:	701a      	strb	r2, [r3, #0]
  return reslt;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	@ (8003de0 <stream_sensor_data_forced_mode+0x48>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	b25b      	sxtb	r3, r3
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	20000410 	.word	0x20000410
 8003de4:	20000414 	.word	0x20000414
 8003de8:	20000550 	.word	0x20000550

08003dec <go_down>:
  }
  return true;
}

void go_down(uint16_t vBat)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	0002      	movs	r2, r0
 8003df4:	1dbb      	adds	r3, r7, #6
 8003df6:	801a      	strh	r2, [r3, #0]
  /* S H U T   D O W N */

  printf("Go down\n");
 8003df8:	4b08      	ldr	r3, [pc, #32]	@ (8003e1c <go_down+0x30>)
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f001 fc22 	bl	8005644 <printf_>
  printf("Clear...\r\n");
 8003e00:	4b07      	ldr	r3, [pc, #28]	@ (8003e20 <go_down+0x34>)
 8003e02:	0018      	movs	r0, r3
 8003e04:	f001 fc1e 	bl	8005644 <printf_>
  final_message(vBat);
 8003e08:	1dbb      	adds	r3, r7, #6
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f008 fdfd 	bl	800ca0c <final_message>
  // Code must be inserted here !
  // write RTC_Register Magic2
  // First at main check Magic2, if true  deepPowerDown
  // deepPowerDown(255); // need minutes

}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b002      	add	sp, #8
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	0800fd08 	.word	0x0800fd08
 8003e20:	0800fd14 	.word	0x0800fd14

08003e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e28:	b672      	cpsid	i
}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e2c:	46c0      	nop			@ (mov r8, r8)
 8003e2e:	e7fd      	b.n	8003e2c <Error_Handler+0x8>

08003e30 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	210f      	movs	r1, #15
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	1c02      	adds	r2, r0, #0
 8003e42:	701a      	strb	r2, [r3, #0]
  if (idx < maxlen) {
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d205      	bcs.n	8003e58 <_out_buffer+0x28>
    ((char*)buffer)[idx] = character;
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	187a      	adds	r2, r7, r1
 8003e54:	7812      	ldrb	r2, [r2, #0]
 8003e56:	701a      	strb	r2, [r3, #0]
  }
}
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b004      	add	sp, #16
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	230f      	movs	r3, #15
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	1c02      	adds	r2, r0, #0
 8003e72:	701a      	strb	r2, [r3, #0]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003e74:	46c0      	nop			@ (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	210f      	movs	r1, #15
 8003e8a:	187b      	adds	r3, r7, r1
 8003e8c:	1c02      	adds	r2, r0, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003e90:	000a      	movs	r2, r1
 8003e92:	18bb      	adds	r3, r7, r2
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <_out_char+0x28>
    _putchar(character);
 8003e9a:	18bb      	adds	r3, r7, r2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f001 fc0c 	bl	80056bc <_putchar>
  }
}
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b004      	add	sp, #16
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	e002      	b.n	8003ec2 <_strnlen_s+0x16>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d004      	beq.n	8003ed4 <_strnlen_s+0x28>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	603a      	str	r2, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f3      	bne.n	8003ebc <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	1ad3      	subs	r3, r2, r3
}
 8003eda:	0018      	movs	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b004      	add	sp, #16
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	0002      	movs	r2, r0
 8003eea:	1dfb      	adds	r3, r7, #7
 8003eec:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8003eee:	1dfb      	adds	r3, r7, #7
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b2f      	cmp	r3, #47	@ 0x2f
 8003ef4:	d905      	bls.n	8003f02 <_is_digit+0x20>
 8003ef6:	1dfb      	adds	r3, r7, #7
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b39      	cmp	r3, #57	@ 0x39
 8003efc:	d801      	bhi.n	8003f02 <_is_digit+0x20>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <_is_digit+0x22>
 8003f02:	2300      	movs	r3, #0
 8003f04:	1c1a      	adds	r2, r3, #0
 8003f06:	2301      	movs	r3, #1
 8003f08:	4013      	ands	r3, r2
 8003f0a:	b2db      	uxtb	r3, r3
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003f20:	e00e      	b.n	8003f40 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	0013      	movs	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	189b      	adds	r3, r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	1c59      	adds	r1, r3, #1
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6011      	str	r1, [r2, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	18c3      	adds	r3, r0, r3
 8003f3c:	3b30      	subs	r3, #48	@ 0x30
 8003f3e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff ffcb 	bl	8003ee2 <_is_digit>
 8003f4c:	1e03      	subs	r3, r0, #0
 8003f4e:	d1e8      	bne.n	8003f22 <_atoi+0xe>
  }
  return i;
 8003f50:	68fb      	ldr	r3, [r7, #12]
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b004      	add	sp, #16
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003f5a:	b590      	push	{r4, r7, lr}
 8003f5c:	b087      	sub	sp, #28
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6e:	2202      	movs	r2, #2
 8003f70:	4013      	ands	r3, r2
 8003f72:	d124      	bne.n	8003fbe <_out_rev+0x64>
 8003f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f76:	2201      	movs	r2, #1
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d120      	bne.n	8003fbe <_out_rev+0x64>
    for (size_t i = len; i < width; i++) {
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e00a      	b.n	8003f98 <_out_rev+0x3e>
      out(' ', buffer, idx++, maxlen);
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	1c53      	adds	r3, r2, #1
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	68fc      	ldr	r4, [r7, #12]
 8003f8e:	2020      	movs	r0, #32
 8003f90:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3301      	adds	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d3f0      	bcc.n	8003f82 <_out_rev+0x28>
    }
  }

  // reverse string
  while (len) {
 8003fa0:	e00d      	b.n	8003fbe <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
 8003fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fac:	18d3      	adds	r3, r2, r3
 8003fae:	7818      	ldrb	r0, [r3, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	1c53      	adds	r3, r2, #1
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	68fc      	ldr	r4, [r7, #12]
 8003fbc:	47a0      	blx	r4
  while (len) {
 8003fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1ee      	bne.n	8003fa2 <_out_rev+0x48>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d00e      	beq.n	8003fea <_out_rev+0x90>
    while (idx - start_idx < width) {
 8003fcc:	e007      	b.n	8003fde <_out_rev+0x84>
      out(' ', buffer, idx++, maxlen);
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	1c53      	adds	r3, r2, #1
 8003fd2:	607b      	str	r3, [r7, #4]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	68fc      	ldr	r4, [r7, #12]
 8003fda:	2020      	movs	r0, #32
 8003fdc:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d8f1      	bhi.n	8003fce <_out_rev+0x74>
    }
  }

  return idx;
 8003fea:	687b      	ldr	r3, [r7, #4]
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b007      	add	sp, #28
 8003ff2:	bd90      	pop	{r4, r7, pc}

08003ff4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003ff4:	b590      	push	{r4, r7, lr}
 8003ff6:	b089      	sub	sp, #36	@ 0x24
 8003ff8:	af04      	add	r7, sp, #16
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004004:	2202      	movs	r2, #2
 8004006:	4013      	ands	r3, r2
 8004008:	d134      	bne.n	8004074 <_ntoa_format+0x80>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	2b00      	cmp	r3, #0
 800400e:	d017      	beq.n	8004040 <_ntoa_format+0x4c>
 8004010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004012:	2201      	movs	r2, #1
 8004014:	4013      	ands	r3, r2
 8004016:	d013      	beq.n	8004040 <_ntoa_format+0x4c>
 8004018:	2328      	movs	r3, #40	@ 0x28
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d103      	bne.n	800402a <_ntoa_format+0x36>
 8004022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004024:	220c      	movs	r2, #12
 8004026:	4013      	ands	r3, r2
 8004028:	d00a      	beq.n	8004040 <_ntoa_format+0x4c>
      width--;
 800402a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402c:	3b01      	subs	r3, #1
 800402e:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004030:	e006      	b.n	8004040 <_ntoa_format+0x4c>
      buf[len++] = '0';
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	627a      	str	r2, [r7, #36]	@ 0x24
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	18d3      	adds	r3, r2, r3
 800403c:	2230      	movs	r2, #48	@ 0x30
 800403e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	429a      	cmp	r2, r3
 8004046:	d20a      	bcs.n	800405e <_ntoa_format+0x6a>
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	2b1f      	cmp	r3, #31
 800404c:	d9f1      	bls.n	8004032 <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800404e:	e006      	b.n	800405e <_ntoa_format+0x6a>
      buf[len++] = '0';
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	627a      	str	r2, [r7, #36]	@ 0x24
 8004056:	6a3a      	ldr	r2, [r7, #32]
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	2230      	movs	r2, #48	@ 0x30
 800405c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800405e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004060:	2201      	movs	r2, #1
 8004062:	4013      	ands	r3, r2
 8004064:	d006      	beq.n	8004074 <_ntoa_format+0x80>
 8004066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	429a      	cmp	r2, r3
 800406c:	d202      	bcs.n	8004074 <_ntoa_format+0x80>
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	2b1f      	cmp	r3, #31
 8004072:	d9ed      	bls.n	8004050 <_ntoa_format+0x5c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004076:	2210      	movs	r2, #16
 8004078:	4013      	ands	r3, r2
 800407a:	d056      	beq.n	800412a <_ntoa_format+0x136>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800407c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800407e:	2380      	movs	r3, #128	@ 0x80
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4013      	ands	r3, r2
 8004084:	d116      	bne.n	80040b4 <_ntoa_format+0xc0>
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <_ntoa_format+0xc0>
 800408c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800408e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004090:	429a      	cmp	r2, r3
 8004092:	d003      	beq.n	800409c <_ntoa_format+0xa8>
 8004094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004098:	429a      	cmp	r2, r3
 800409a:	d10b      	bne.n	80040b4 <_ntoa_format+0xc0>
      len--;
 800409c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409e:	3b01      	subs	r3, #1
 80040a0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (len && (base == 16U)) {
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <_ntoa_format+0xc0>
 80040a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d102      	bne.n	80040b4 <_ntoa_format+0xc0>
        len--;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	3b01      	subs	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d10e      	bne.n	80040d8 <_ntoa_format+0xe4>
 80040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040bc:	2220      	movs	r2, #32
 80040be:	4013      	ands	r3, r2
 80040c0:	d10a      	bne.n	80040d8 <_ntoa_format+0xe4>
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	2b1f      	cmp	r3, #31
 80040c6:	d807      	bhi.n	80040d8 <_ntoa_format+0xe4>
      buf[len++] = 'x';
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80040ce:	6a3a      	ldr	r2, [r7, #32]
 80040d0:	18d3      	adds	r3, r2, r3
 80040d2:	2278      	movs	r2, #120	@ 0x78
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	e01e      	b.n	8004116 <_ntoa_format+0x122>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d10e      	bne.n	80040fc <_ntoa_format+0x108>
 80040de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e0:	2220      	movs	r2, #32
 80040e2:	4013      	ands	r3, r2
 80040e4:	d00a      	beq.n	80040fc <_ntoa_format+0x108>
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	2b1f      	cmp	r3, #31
 80040ea:	d807      	bhi.n	80040fc <_ntoa_format+0x108>
      buf[len++] = 'X';
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80040f2:	6a3a      	ldr	r2, [r7, #32]
 80040f4:	18d3      	adds	r3, r2, r3
 80040f6:	2258      	movs	r2, #88	@ 0x58
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e00c      	b.n	8004116 <_ntoa_format+0x122>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d109      	bne.n	8004116 <_ntoa_format+0x122>
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	2b1f      	cmp	r3, #31
 8004106:	d806      	bhi.n	8004116 <_ntoa_format+0x122>
      buf[len++] = 'b';
 8004108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	627a      	str	r2, [r7, #36]	@ 0x24
 800410e:	6a3a      	ldr	r2, [r7, #32]
 8004110:	18d3      	adds	r3, r2, r3
 8004112:	2262      	movs	r2, #98	@ 0x62
 8004114:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	2b1f      	cmp	r3, #31
 800411a:	d806      	bhi.n	800412a <_ntoa_format+0x136>
      buf[len++] = '0';
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	627a      	str	r2, [r7, #36]	@ 0x24
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	18d3      	adds	r3, r2, r3
 8004126:	2230      	movs	r2, #48	@ 0x30
 8004128:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	2b1f      	cmp	r3, #31
 800412e:	d823      	bhi.n	8004178 <_ntoa_format+0x184>
    if (negative) {
 8004130:	2328      	movs	r3, #40	@ 0x28
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <_ntoa_format+0x156>
      buf[len++] = '-';
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004140:	6a3a      	ldr	r2, [r7, #32]
 8004142:	18d3      	adds	r3, r2, r3
 8004144:	222d      	movs	r2, #45	@ 0x2d
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e016      	b.n	8004178 <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_PLUS) {
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	2204      	movs	r2, #4
 800414e:	4013      	ands	r3, r2
 8004150:	d007      	beq.n	8004162 <_ntoa_format+0x16e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	627a      	str	r2, [r7, #36]	@ 0x24
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	18d3      	adds	r3, r2, r3
 800415c:	222b      	movs	r2, #43	@ 0x2b
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e00a      	b.n	8004178 <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_SPACE) {
 8004162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004164:	2208      	movs	r2, #8
 8004166:	4013      	ands	r3, r2
 8004168:	d006      	beq.n	8004178 <_ntoa_format+0x184>
      buf[len++] = ' ';
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	18d3      	adds	r3, r2, r3
 8004174:	2220      	movs	r2, #32
 8004176:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004178:	683c      	ldr	r4, [r7, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004182:	9303      	str	r3, [sp, #12]
 8004184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004186:	9302      	str	r3, [sp, #8]
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	0023      	movs	r3, r4
 8004192:	f7ff fee2 	bl	8003f5a <_out_rev>
 8004196:	0003      	movs	r3, r0
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b005      	add	sp, #20
 800419e:	bd90      	pop	{r4, r7, pc}

080041a0 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b097      	sub	sp, #92	@ 0x5c
 80041a4:	af08      	add	r7, sp, #32
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80041b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80041b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041ba:	2210      	movs	r2, #16
 80041bc:	4393      	bics	r3, r2
 80041be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80041c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80041c2:	2380      	movs	r3, #128	@ 0x80
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4013      	ands	r3, r2
 80041c8:	d002      	beq.n	80041d0 <_ntoa_long+0x30>
 80041ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d033      	beq.n	8004238 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80041d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7fc f839 	bl	800024c <__aeabi_uidivmod>
 80041da:	000b      	movs	r3, r1
 80041dc:	001a      	movs	r2, r3
 80041de:	2133      	movs	r1, #51	@ 0x33
 80041e0:	187b      	adds	r3, r7, r1
 80041e2:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80041e4:	000a      	movs	r2, r1
 80041e6:	18bb      	adds	r3, r7, r2
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b09      	cmp	r3, #9
 80041ec:	d804      	bhi.n	80041f8 <_ntoa_long+0x58>
 80041ee:	18bb      	adds	r3, r7, r2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	3330      	adds	r3, #48	@ 0x30
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	e00d      	b.n	8004214 <_ntoa_long+0x74>
 80041f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041fa:	2220      	movs	r2, #32
 80041fc:	4013      	ands	r3, r2
 80041fe:	d001      	beq.n	8004204 <_ntoa_long+0x64>
 8004200:	2341      	movs	r3, #65	@ 0x41
 8004202:	e000      	b.n	8004206 <_ntoa_long+0x66>
 8004204:	2361      	movs	r3, #97	@ 0x61
 8004206:	2233      	movs	r2, #51	@ 0x33
 8004208:	18ba      	adds	r2, r7, r2
 800420a:	7812      	ldrb	r2, [r2, #0]
 800420c:	189b      	adds	r3, r3, r2
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3b0a      	subs	r3, #10
 8004212:	b2da      	uxtb	r2, r3
 8004214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004216:	1c59      	adds	r1, r3, #1
 8004218:	6379      	str	r1, [r7, #52]	@ 0x34
 800421a:	2110      	movs	r1, #16
 800421c:	1879      	adds	r1, r7, r1
 800421e:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8004220:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004222:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004224:	f7fb ff8c 	bl	8000140 <__udivsi3>
 8004228:	0003      	movs	r3, r0
 800422a:	64bb      	str	r3, [r7, #72]	@ 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800422c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <_ntoa_long+0x98>
 8004232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004234:	2b1f      	cmp	r3, #31
 8004236:	d9cb      	bls.n	80041d0 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004238:	683c      	ldr	r4, [r7, #0]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004242:	9306      	str	r3, [sp, #24]
 8004244:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004246:	9305      	str	r3, [sp, #20]
 8004248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424a:	9304      	str	r3, [sp, #16]
 800424c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	234c      	movs	r3, #76	@ 0x4c
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	9302      	str	r3, [sp, #8]
 8004258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	2310      	movs	r3, #16
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	0023      	movs	r3, r4
 8004264:	f7ff fec6 	bl	8003ff4 <_ntoa_format>
 8004268:	0003      	movs	r3, r0
}
 800426a:	0018      	movs	r0, r3
 800426c:	46bd      	mov	sp, r7
 800426e:	b00f      	add	sp, #60	@ 0x3c
 8004270:	bd90      	pop	{r4, r7, pc}

08004272 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004272:	b5b0      	push	{r4, r5, r7, lr}
 8004274:	b096      	sub	sp, #88	@ 0x58
 8004276:	af08      	add	r7, sp, #32
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 8004284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004286:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004288:	4313      	orrs	r3, r2
 800428a:	d103      	bne.n	8004294 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800428c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800428e:	2210      	movs	r2, #16
 8004290:	4393      	bics	r3, r2
 8004292:	66bb      	str	r3, [r7, #104]	@ 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004294:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004296:	2380      	movs	r3, #128	@ 0x80
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4013      	ands	r3, r2
 800429c:	d003      	beq.n	80042a6 <_ntoa_long_long+0x34>
 800429e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042a2:	4313      	orrs	r3, r2
 80042a4:	d03a      	beq.n	800431c <_ntoa_long_long+0xaa>
    do {
      const char digit = (char)(value % base);
 80042a6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80042a8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80042aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042ae:	f7fc f919 	bl	80004e4 <__aeabi_uldivmod>
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	2433      	movs	r4, #51	@ 0x33
 80042b8:	193b      	adds	r3, r7, r4
 80042ba:	1c02      	adds	r2, r0, #0
 80042bc:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80042be:	0022      	movs	r2, r4
 80042c0:	18bb      	adds	r3, r7, r2
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b09      	cmp	r3, #9
 80042c6:	d804      	bhi.n	80042d2 <_ntoa_long_long+0x60>
 80042c8:	18bb      	adds	r3, r7, r2
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	3330      	adds	r3, #48	@ 0x30
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	e00d      	b.n	80042ee <_ntoa_long_long+0x7c>
 80042d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042d4:	2220      	movs	r2, #32
 80042d6:	4013      	ands	r3, r2
 80042d8:	d001      	beq.n	80042de <_ntoa_long_long+0x6c>
 80042da:	2341      	movs	r3, #65	@ 0x41
 80042dc:	e000      	b.n	80042e0 <_ntoa_long_long+0x6e>
 80042de:	2361      	movs	r3, #97	@ 0x61
 80042e0:	2233      	movs	r2, #51	@ 0x33
 80042e2:	18ba      	adds	r2, r7, r2
 80042e4:	7812      	ldrb	r2, [r2, #0]
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	3b0a      	subs	r3, #10
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f0:	1c59      	adds	r1, r3, #1
 80042f2:	6379      	str	r1, [r7, #52]	@ 0x34
 80042f4:	2110      	movs	r1, #16
 80042f6:	1879      	adds	r1, r7, r1
 80042f8:	54ca      	strb	r2, [r1, r3]
      value /= base;
 80042fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042fe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004300:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004302:	f7fc f8ef 	bl	80004e4 <__aeabi_uldivmod>
 8004306:	0002      	movs	r2, r0
 8004308:	000b      	movs	r3, r1
 800430a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800430c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800430e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004310:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004312:	4313      	orrs	r3, r2
 8004314:	d002      	beq.n	800431c <_ntoa_long_long+0xaa>
 8004316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004318:	2b1f      	cmp	r3, #31
 800431a:	d9c4      	bls.n	80042a6 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800431c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800431e:	683d      	ldr	r5, [r7, #0]
 8004320:	687c      	ldr	r4, [r7, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004328:	9206      	str	r2, [sp, #24]
 800432a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800432c:	9205      	str	r2, [sp, #20]
 800432e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004330:	9204      	str	r2, [sp, #16]
 8004332:	9303      	str	r3, [sp, #12]
 8004334:	2350      	movs	r3, #80	@ 0x50
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	9302      	str	r3, [sp, #8]
 800433c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433e:	9301      	str	r3, [sp, #4]
 8004340:	2310      	movs	r3, #16
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	002b      	movs	r3, r5
 8004348:	0022      	movs	r2, r4
 800434a:	f7ff fe53 	bl	8003ff4 <_ntoa_format>
 800434e:	0003      	movs	r3, r0
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b00e      	add	sp, #56	@ 0x38
 8004356:	bdb0      	pop	{r4, r5, r7, pc}

08004358 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800435a:	b09d      	sub	sp, #116	@ 0x74
 800435c:	af06      	add	r7, sp, #24
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	657b      	str	r3, [r7, #84]	@ 0x54
  double diff = 0.0;
 800436a:	2200      	movs	r2, #0
 800436c:	2300      	movs	r3, #0
 800436e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004370:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8004372:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004374:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004376:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004378:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800437a:	f7fc f867 	bl	800044c <__aeabi_dcmpeq>
 800437e:	1e03      	subs	r3, r0, #0
 8004380:	d112      	bne.n	80043a8 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8004382:	683c      	ldr	r4, [r7, #0]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	2380      	movs	r3, #128	@ 0x80
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	9303      	str	r3, [sp, #12]
 8004392:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004394:	9302      	str	r3, [sp, #8]
 8004396:	2303      	movs	r3, #3
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	4bbf      	ldr	r3, [pc, #764]	@ (8004698 <_ftoa+0x340>)
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	0023      	movs	r3, r4
 80043a0:	f7ff fddb 	bl	8003f5a <_out_rev>
 80043a4:	0003      	movs	r3, r0
 80043a6:	e211      	b.n	80047cc <_ftoa+0x474>
  if (value < -DBL_MAX)
 80043a8:	2201      	movs	r2, #1
 80043aa:	4252      	negs	r2, r2
 80043ac:	4bbb      	ldr	r3, [pc, #748]	@ (800469c <_ftoa+0x344>)
 80043ae:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80043b0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80043b2:	f7fc f851 	bl	8000458 <__aeabi_dcmplt>
 80043b6:	1e03      	subs	r3, r0, #0
 80043b8:	d012      	beq.n	80043e0 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80043ba:	683c      	ldr	r4, [r7, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	2380      	movs	r3, #128	@ 0x80
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	9303      	str	r3, [sp, #12]
 80043ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043cc:	9302      	str	r3, [sp, #8]
 80043ce:	2304      	movs	r3, #4
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	4bb3      	ldr	r3, [pc, #716]	@ (80046a0 <_ftoa+0x348>)
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	0023      	movs	r3, r4
 80043d8:	f7ff fdbf 	bl	8003f5a <_out_rev>
 80043dc:	0003      	movs	r3, r0
 80043de:	e1f5      	b.n	80047cc <_ftoa+0x474>
  if (value > DBL_MAX)
 80043e0:	2201      	movs	r2, #1
 80043e2:	4252      	negs	r2, r2
 80043e4:	4baf      	ldr	r3, [pc, #700]	@ (80046a4 <_ftoa+0x34c>)
 80043e6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80043e8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80043ea:	f7fc f849 	bl	8000480 <__aeabi_dcmpgt>
 80043ee:	1e03      	subs	r3, r0, #0
 80043f0:	d024      	beq.n	800443c <_ftoa+0xe4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80043f2:	2380      	movs	r3, #128	@ 0x80
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2204      	movs	r2, #4
 80043fa:	4013      	ands	r3, r2
 80043fc:	d001      	beq.n	8004402 <_ftoa+0xaa>
 80043fe:	4baa      	ldr	r3, [pc, #680]	@ (80046a8 <_ftoa+0x350>)
 8004400:	e000      	b.n	8004404 <_ftoa+0xac>
 8004402:	4baa      	ldr	r3, [pc, #680]	@ (80046ac <_ftoa+0x354>)
 8004404:	2280      	movs	r2, #128	@ 0x80
 8004406:	18ba      	adds	r2, r7, r2
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	2104      	movs	r1, #4
 800440c:	400a      	ands	r2, r1
 800440e:	d001      	beq.n	8004414 <_ftoa+0xbc>
 8004410:	2204      	movs	r2, #4
 8004412:	e000      	b.n	8004416 <_ftoa+0xbe>
 8004414:	2203      	movs	r2, #3
 8004416:	683e      	ldr	r6, [r7, #0]
 8004418:	687d      	ldr	r5, [r7, #4]
 800441a:	68bc      	ldr	r4, [r7, #8]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	2180      	movs	r1, #128	@ 0x80
 8004420:	1879      	adds	r1, r7, r1
 8004422:	6809      	ldr	r1, [r1, #0]
 8004424:	9103      	str	r1, [sp, #12]
 8004426:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004428:	9102      	str	r1, [sp, #8]
 800442a:	9201      	str	r2, [sp, #4]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	0033      	movs	r3, r6
 8004430:	002a      	movs	r2, r5
 8004432:	0021      	movs	r1, r4
 8004434:	f7ff fd91 	bl	8003f5a <_out_rev>
 8004438:	0003      	movs	r3, r0
 800443a:	e1c7      	b.n	80047cc <_ftoa+0x474>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800443c:	2200      	movs	r2, #0
 800443e:	4b9c      	ldr	r3, [pc, #624]	@ (80046b0 <_ftoa+0x358>)
 8004440:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004442:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004444:	f7fc f81c 	bl	8000480 <__aeabi_dcmpgt>
 8004448:	1e03      	subs	r3, r0, #0
 800444a:	d107      	bne.n	800445c <_ftoa+0x104>
 800444c:	2200      	movs	r2, #0
 800444e:	4b99      	ldr	r3, [pc, #612]	@ (80046b4 <_ftoa+0x35c>)
 8004450:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004452:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004454:	f7fc f800 	bl	8000458 <__aeabi_dcmplt>
 8004458:	1e03      	subs	r3, r0, #0
 800445a:	d015      	beq.n	8004488 <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800445c:	683d      	ldr	r5, [r7, #0]
 800445e:	687c      	ldr	r4, [r7, #4]
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	9304      	str	r3, [sp, #16]
 800446c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800446e:	9303      	str	r3, [sp, #12]
 8004470:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004472:	9302      	str	r3, [sp, #8]
 8004474:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004478:	9200      	str	r2, [sp, #0]
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	002b      	movs	r3, r5
 800447e:	0022      	movs	r2, r4
 8004480:	f000 f9a8 	bl	80047d4 <_etoa>
 8004484:	0003      	movs	r3, r0
 8004486:	e1a1      	b.n	80047cc <_ftoa+0x474>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8004488:	2453      	movs	r4, #83	@ 0x53
 800448a:	193b      	adds	r3, r7, r4
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
  if (value < 0) {
 8004490:	2200      	movs	r2, #0
 8004492:	2300      	movs	r3, #0
 8004494:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004496:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004498:	f7fb ffde 	bl	8000458 <__aeabi_dcmplt>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d00c      	beq.n	80044ba <_ftoa+0x162>
    negative = true;
 80044a0:	193b      	adds	r3, r7, r4
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
    value = 0 - value;
 80044a6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80044a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044aa:	2000      	movs	r0, #0
 80044ac:	2100      	movs	r1, #0
 80044ae:	f7fd fb93 	bl	8001bd8 <__aeabi_dsub>
 80044b2:	0002      	movs	r2, r0
 80044b4:	000b      	movs	r3, r1
 80044b6:	673a      	str	r2, [r7, #112]	@ 0x70
 80044b8:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80044ba:	2380      	movs	r3, #128	@ 0x80
 80044bc:	18fb      	adds	r3, r7, r3
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2380      	movs	r3, #128	@ 0x80
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4013      	ands	r3, r2
 80044c6:	d10c      	bne.n	80044e2 <_ftoa+0x18a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80044c8:	2306      	movs	r3, #6
 80044ca:	67bb      	str	r3, [r7, #120]	@ 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80044cc:	e009      	b.n	80044e2 <_ftoa+0x18a>
    buf[len++] = '0';
 80044ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	657a      	str	r2, [r7, #84]	@ 0x54
 80044d4:	2210      	movs	r2, #16
 80044d6:	18ba      	adds	r2, r7, r2
 80044d8:	2130      	movs	r1, #48	@ 0x30
 80044da:	54d1      	strb	r1, [r2, r3]
    prec--;
 80044dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044de:	3b01      	subs	r3, #1
 80044e0:	67bb      	str	r3, [r7, #120]	@ 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80044e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044e4:	2b1f      	cmp	r3, #31
 80044e6:	d802      	bhi.n	80044ee <_ftoa+0x196>
 80044e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044ea:	2b09      	cmp	r3, #9
 80044ec:	d8ef      	bhi.n	80044ce <_ftoa+0x176>
  }

  int whole = (int)value;
 80044ee:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80044f0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80044f2:	f7fd ff2f 	bl	8002354 <__aeabi_d2iz>
 80044f6:	0003      	movs	r3, r0
 80044f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  double tmp = (value - whole) * pow10[prec];
 80044fa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80044fc:	f7fd ff66 	bl	80023cc <__aeabi_i2d>
 8004500:	0002      	movs	r2, r0
 8004502:	000b      	movs	r3, r1
 8004504:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004506:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004508:	f7fd fb66 	bl	8001bd8 <__aeabi_dsub>
 800450c:	0002      	movs	r2, r0
 800450e:	000b      	movs	r3, r1
 8004510:	0010      	movs	r0, r2
 8004512:	0019      	movs	r1, r3
 8004514:	4a68      	ldr	r2, [pc, #416]	@ (80046b8 <_ftoa+0x360>)
 8004516:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	18d3      	adds	r3, r2, r3
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f7fd f892 	bl	8001648 <__aeabi_dmul>
 8004524:	0002      	movs	r2, r0
 8004526:	000b      	movs	r3, r1
 8004528:	633a      	str	r2, [r7, #48]	@ 0x30
 800452a:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned long frac = (unsigned long)tmp;
 800452c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800452e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004530:	f7fb fff8 	bl	8000524 <__aeabi_d2uiz>
 8004534:	0003      	movs	r3, r0
 8004536:	64bb      	str	r3, [r7, #72]	@ 0x48
  diff = tmp - frac;
 8004538:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800453a:	f7fd ff75 	bl	8002428 <__aeabi_ui2d>
 800453e:	0002      	movs	r2, r0
 8004540:	000b      	movs	r3, r1
 8004542:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004544:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004546:	f7fd fb47 	bl	8001bd8 <__aeabi_dsub>
 800454a:	0002      	movs	r2, r0
 800454c:	000b      	movs	r3, r1
 800454e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004550:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (diff > 0.5) {
 8004552:	2200      	movs	r2, #0
 8004554:	4b59      	ldr	r3, [pc, #356]	@ (80046bc <_ftoa+0x364>)
 8004556:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800455a:	f7fb ff91 	bl	8000480 <__aeabi_dcmpgt>
 800455e:	1e03      	subs	r3, r0, #0
 8004560:	d015      	beq.n	800458e <_ftoa+0x236>
    ++frac;
 8004562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004564:	3301      	adds	r3, #1
 8004566:	64bb      	str	r3, [r7, #72]	@ 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8004568:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800456a:	f7fd ff5d 	bl	8002428 <__aeabi_ui2d>
 800456e:	4a52      	ldr	r2, [pc, #328]	@ (80046b8 <_ftoa+0x360>)
 8004570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	18d3      	adds	r3, r2, r3
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f7fb ff8b 	bl	8000494 <__aeabi_dcmpge>
 800457e:	1e03      	subs	r3, r0, #0
 8004580:	d017      	beq.n	80045b2 <_ftoa+0x25a>
      frac = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	64bb      	str	r3, [r7, #72]	@ 0x48
      ++whole;
 8004586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004588:	3301      	adds	r3, #1
 800458a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800458c:	e011      	b.n	80045b2 <_ftoa+0x25a>
    }
  }
  else if (diff < 0.5) {
 800458e:	2200      	movs	r2, #0
 8004590:	4b4a      	ldr	r3, [pc, #296]	@ (80046bc <_ftoa+0x364>)
 8004592:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004594:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004596:	f7fb ff5f 	bl	8000458 <__aeabi_dcmplt>
 800459a:	1e03      	subs	r3, r0, #0
 800459c:	d109      	bne.n	80045b2 <_ftoa+0x25a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800459e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <_ftoa+0x254>
 80045a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045a6:	2201      	movs	r2, #1
 80045a8:	4013      	ands	r3, r2
 80045aa:	d002      	beq.n	80045b2 <_ftoa+0x25a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80045ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ae:	3301      	adds	r3, #1
 80045b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  if (prec == 0U) {
 80045b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d12f      	bne.n	8004618 <_ftoa+0x2c0>
    diff = value - (double)whole;
 80045b8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80045ba:	f7fd ff07 	bl	80023cc <__aeabi_i2d>
 80045be:	0002      	movs	r2, r0
 80045c0:	000b      	movs	r3, r1
 80045c2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80045c4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80045c6:	f7fd fb07 	bl	8001bd8 <__aeabi_dsub>
 80045ca:	0002      	movs	r2, r0
 80045cc:	000b      	movs	r3, r1
 80045ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80045d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80045d2:	2301      	movs	r3, #1
 80045d4:	1c1c      	adds	r4, r3, #0
 80045d6:	2200      	movs	r2, #0
 80045d8:	4b38      	ldr	r3, [pc, #224]	@ (80046bc <_ftoa+0x364>)
 80045da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80045dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045de:	f7fb ff3b 	bl	8000458 <__aeabi_dcmplt>
 80045e2:	1e03      	subs	r3, r0, #0
 80045e4:	d101      	bne.n	80045ea <_ftoa+0x292>
 80045e6:	2300      	movs	r3, #0
 80045e8:	1c1c      	adds	r4, r3, #0
 80045ea:	b2e3      	uxtb	r3, r4
 80045ec:	2201      	movs	r2, #1
 80045ee:	4053      	eors	r3, r2
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d107      	bne.n	8004606 <_ftoa+0x2ae>
 80045f6:	2200      	movs	r2, #0
 80045f8:	4b30      	ldr	r3, [pc, #192]	@ (80046bc <_ftoa+0x364>)
 80045fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80045fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045fe:	f7fb ff3f 	bl	8000480 <__aeabi_dcmpgt>
 8004602:	1e03      	subs	r3, r0, #0
 8004604:	d046      	beq.n	8004694 <_ftoa+0x33c>
 8004606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004608:	2201      	movs	r2, #1
 800460a:	4013      	ands	r3, r2
 800460c:	d100      	bne.n	8004610 <_ftoa+0x2b8>
 800460e:	e070      	b.n	80046f2 <_ftoa+0x39a>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8004610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004612:	3301      	adds	r3, #1
 8004614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004616:	e06c      	b.n	80046f2 <_ftoa+0x39a>
    }
  }
  else {
    unsigned int count = prec;
 8004618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800461a:	647b      	str	r3, [r7, #68]	@ 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800461c:	e01b      	b.n	8004656 <_ftoa+0x2fe>
      --count;
 800461e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004620:	3b01      	subs	r3, #1
 8004622:	647b      	str	r3, [r7, #68]	@ 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8004624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004626:	210a      	movs	r1, #10
 8004628:	0018      	movs	r0, r3
 800462a:	f7fb fe0f 	bl	800024c <__aeabi_uidivmod>
 800462e:	000b      	movs	r3, r1
 8004630:	b2da      	uxtb	r2, r3
 8004632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004634:	1c59      	adds	r1, r3, #1
 8004636:	6579      	str	r1, [r7, #84]	@ 0x54
 8004638:	3230      	adds	r2, #48	@ 0x30
 800463a:	b2d1      	uxtb	r1, r2
 800463c:	2210      	movs	r2, #16
 800463e:	18ba      	adds	r2, r7, r2
 8004640:	54d1      	strb	r1, [r2, r3]
      if (!(frac /= 10U)) {
 8004642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004644:	210a      	movs	r1, #10
 8004646:	0018      	movs	r0, r3
 8004648:	f7fb fd7a 	bl	8000140 <__udivsi3>
 800464c:	0003      	movs	r3, r0
 800464e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <_ftoa+0x306>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004658:	2b1f      	cmp	r3, #31
 800465a:	d9e0      	bls.n	800461e <_ftoa+0x2c6>
 800465c:	e008      	b.n	8004670 <_ftoa+0x318>
        break;
 800465e:	46c0      	nop			@ (mov r8, r8)
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004660:	e006      	b.n	8004670 <_ftoa+0x318>
      buf[len++] = '0';
 8004662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	657a      	str	r2, [r7, #84]	@ 0x54
 8004668:	2210      	movs	r2, #16
 800466a:	18ba      	adds	r2, r7, r2
 800466c:	2130      	movs	r1, #48	@ 0x30
 800466e:	54d1      	strb	r1, [r2, r3]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004672:	2b1f      	cmp	r3, #31
 8004674:	d804      	bhi.n	8004680 <_ftoa+0x328>
 8004676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004678:	1e5a      	subs	r2, r3, #1
 800467a:	647a      	str	r2, [r7, #68]	@ 0x44
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f0      	bne.n	8004662 <_ftoa+0x30a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004682:	2b1f      	cmp	r3, #31
 8004684:	d835      	bhi.n	80046f2 <_ftoa+0x39a>
      // add decimal
      buf[len++] = '.';
 8004686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	657a      	str	r2, [r7, #84]	@ 0x54
 800468c:	2210      	movs	r2, #16
 800468e:	18ba      	adds	r2, r7, r2
 8004690:	212e      	movs	r1, #46	@ 0x2e
 8004692:	54d1      	strb	r1, [r2, r3]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004694:	e02d      	b.n	80046f2 <_ftoa+0x39a>
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	0800fd20 	.word	0x0800fd20
 800469c:	ffefffff 	.word	0xffefffff
 80046a0:	0800fd24 	.word	0x0800fd24
 80046a4:	7fefffff 	.word	0x7fefffff
 80046a8:	0800fd2c 	.word	0x0800fd2c
 80046ac:	0800fd34 	.word	0x0800fd34
 80046b0:	41cdcd65 	.word	0x41cdcd65
 80046b4:	c1cdcd65 	.word	0xc1cdcd65
 80046b8:	08010068 	.word	0x08010068
 80046bc:	3fe00000 	.word	0x3fe00000
    buf[len++] = (char)(48 + (whole % 10));
 80046c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046c2:	210a      	movs	r1, #10
 80046c4:	0018      	movs	r0, r3
 80046c6:	f7fb feab 	bl	8000420 <__aeabi_idivmod>
 80046ca:	000b      	movs	r3, r1
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d0:	1c59      	adds	r1, r3, #1
 80046d2:	6579      	str	r1, [r7, #84]	@ 0x54
 80046d4:	3230      	adds	r2, #48	@ 0x30
 80046d6:	b2d1      	uxtb	r1, r2
 80046d8:	2210      	movs	r2, #16
 80046da:	18ba      	adds	r2, r7, r2
 80046dc:	54d1      	strb	r1, [r2, r3]
    if (!(whole /= 10)) {
 80046de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e0:	210a      	movs	r1, #10
 80046e2:	0018      	movs	r0, r3
 80046e4:	f7fb fdb6 	bl	8000254 <__divsi3>
 80046e8:	0003      	movs	r3, r0
 80046ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <_ftoa+0x3a2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f4:	2b1f      	cmp	r3, #31
 80046f6:	d9e3      	bls.n	80046c0 <_ftoa+0x368>
 80046f8:	e000      	b.n	80046fc <_ftoa+0x3a4>
      break;
 80046fa:	46c0      	nop			@ (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80046fc:	2180      	movs	r1, #128	@ 0x80
 80046fe:	187b      	adds	r3, r7, r1
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2202      	movs	r2, #2
 8004704:	4013      	ands	r3, r2
 8004706:	d123      	bne.n	8004750 <_ftoa+0x3f8>
 8004708:	187b      	adds	r3, r7, r1
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2201      	movs	r2, #1
 800470e:	4013      	ands	r3, r2
 8004710:	d01e      	beq.n	8004750 <_ftoa+0x3f8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004712:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d014      	beq.n	8004742 <_ftoa+0x3ea>
 8004718:	2353      	movs	r3, #83	@ 0x53
 800471a:	18fb      	adds	r3, r7, r3
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <_ftoa+0x3d4>
 8004722:	187b      	adds	r3, r7, r1
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	220c      	movs	r2, #12
 8004728:	4013      	ands	r3, r2
 800472a:	d00a      	beq.n	8004742 <_ftoa+0x3ea>
      width--;
 800472c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800472e:	3b01      	subs	r3, #1
 8004730:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004732:	e006      	b.n	8004742 <_ftoa+0x3ea>
      buf[len++] = '0';
 8004734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	657a      	str	r2, [r7, #84]	@ 0x54
 800473a:	2210      	movs	r2, #16
 800473c:	18ba      	adds	r2, r7, r2
 800473e:	2130      	movs	r1, #48	@ 0x30
 8004740:	54d1      	strb	r1, [r2, r3]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004742:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004744:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004746:	429a      	cmp	r2, r3
 8004748:	d202      	bcs.n	8004750 <_ftoa+0x3f8>
 800474a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474c:	2b1f      	cmp	r3, #31
 800474e:	d9f1      	bls.n	8004734 <_ftoa+0x3dc>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004752:	2b1f      	cmp	r3, #31
 8004754:	d827      	bhi.n	80047a6 <_ftoa+0x44e>
    if (negative) {
 8004756:	2353      	movs	r3, #83	@ 0x53
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <_ftoa+0x418>
      buf[len++] = '-';
 8004760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	657a      	str	r2, [r7, #84]	@ 0x54
 8004766:	2210      	movs	r2, #16
 8004768:	18ba      	adds	r2, r7, r2
 800476a:	212d      	movs	r1, #45	@ 0x2d
 800476c:	54d1      	strb	r1, [r2, r3]
 800476e:	e01a      	b.n	80047a6 <_ftoa+0x44e>
    }
    else if (flags & FLAGS_PLUS) {
 8004770:	2380      	movs	r3, #128	@ 0x80
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2204      	movs	r2, #4
 8004778:	4013      	ands	r3, r2
 800477a:	d007      	beq.n	800478c <_ftoa+0x434>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800477c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	657a      	str	r2, [r7, #84]	@ 0x54
 8004782:	2210      	movs	r2, #16
 8004784:	18ba      	adds	r2, r7, r2
 8004786:	212b      	movs	r1, #43	@ 0x2b
 8004788:	54d1      	strb	r1, [r2, r3]
 800478a:	e00c      	b.n	80047a6 <_ftoa+0x44e>
    }
    else if (flags & FLAGS_SPACE) {
 800478c:	2380      	movs	r3, #128	@ 0x80
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2208      	movs	r2, #8
 8004794:	4013      	ands	r3, r2
 8004796:	d006      	beq.n	80047a6 <_ftoa+0x44e>
      buf[len++] = ' ';
 8004798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	657a      	str	r2, [r7, #84]	@ 0x54
 800479e:	2210      	movs	r2, #16
 80047a0:	18ba      	adds	r2, r7, r2
 80047a2:	2120      	movs	r1, #32
 80047a4:	54d1      	strb	r1, [r2, r3]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80047a6:	683c      	ldr	r4, [r7, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	2380      	movs	r3, #128	@ 0x80
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	9303      	str	r3, [sp, #12]
 80047b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047b8:	9302      	str	r3, [sp, #8]
 80047ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	2310      	movs	r3, #16
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	0023      	movs	r3, r4
 80047c6:	f7ff fbc8 	bl	8003f5a <_out_rev>
 80047ca:	0003      	movs	r3, r0
}
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b017      	add	sp, #92	@ 0x5c
 80047d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047d4 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80047d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d6:	b0a7      	sub	sp, #156	@ 0x9c
 80047d8:	af06      	add	r7, sp, #24
 80047da:	6478      	str	r0, [r7, #68]	@ 0x44
 80047dc:	6439      	str	r1, [r7, #64]	@ 0x40
 80047de:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80047e2:	2698      	movs	r6, #152	@ 0x98
 80047e4:	19bb      	adds	r3, r7, r6
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	19b9      	adds	r1, r7, r6
 80047ec:	6808      	ldr	r0, [r1, #0]
 80047ee:	6849      	ldr	r1, [r1, #4]
 80047f0:	f7fb fe2c 	bl	800044c <__aeabi_dcmpeq>
 80047f4:	1e03      	subs	r3, r0, #0
 80047f6:	d013      	beq.n	8004820 <_etoa+0x4c>
 80047f8:	2201      	movs	r2, #1
 80047fa:	4252      	negs	r2, r2
 80047fc:	4bda      	ldr	r3, [pc, #872]	@ (8004b68 <_etoa+0x394>)
 80047fe:	19b9      	adds	r1, r7, r6
 8004800:	6808      	ldr	r0, [r1, #0]
 8004802:	6849      	ldr	r1, [r1, #4]
 8004804:	f7fb fe3c 	bl	8000480 <__aeabi_dcmpgt>
 8004808:	1e03      	subs	r3, r0, #0
 800480a:	d109      	bne.n	8004820 <_etoa+0x4c>
 800480c:	2201      	movs	r2, #1
 800480e:	4252      	negs	r2, r2
 8004810:	4bd6      	ldr	r3, [pc, #856]	@ (8004b6c <_etoa+0x398>)
 8004812:	19b9      	adds	r1, r7, r6
 8004814:	6808      	ldr	r0, [r1, #0]
 8004816:	6849      	ldr	r1, [r1, #4]
 8004818:	f7fb fe1e 	bl	8000458 <__aeabi_dcmplt>
 800481c:	1e03      	subs	r3, r0, #0
 800481e:	d01b      	beq.n	8004858 <_etoa+0x84>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004820:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8004822:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8004824:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004826:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004828:	23a8      	movs	r3, #168	@ 0xa8
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	9304      	str	r3, [sp, #16]
 8004830:	23a4      	movs	r3, #164	@ 0xa4
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	9303      	str	r3, [sp, #12]
 8004838:	23a0      	movs	r3, #160	@ 0xa0
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	9302      	str	r3, [sp, #8]
 8004840:	2398      	movs	r3, #152	@ 0x98
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	9200      	str	r2, [sp, #0]
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	002b      	movs	r3, r5
 800484e:	0022      	movs	r2, r4
 8004850:	f7ff fd82 	bl	8004358 <_ftoa>
 8004854:	0003      	movs	r3, r0
 8004856:	e272      	b.n	8004d3e <_etoa+0x56a>
  }

  // determine the sign
  const bool negative = value < 0;
 8004858:	233b      	movs	r3, #59	@ 0x3b
 800485a:	2238      	movs	r2, #56	@ 0x38
 800485c:	189b      	adds	r3, r3, r2
 800485e:	19de      	adds	r6, r3, r7
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	2200      	movs	r2, #0
 8004866:	2300      	movs	r3, #0
 8004868:	2198      	movs	r1, #152	@ 0x98
 800486a:	1879      	adds	r1, r7, r1
 800486c:	6808      	ldr	r0, [r1, #0]
 800486e:	6849      	ldr	r1, [r1, #4]
 8004870:	f7fb fdf2 	bl	8000458 <__aeabi_dcmplt>
 8004874:	1e03      	subs	r3, r0, #0
 8004876:	d101      	bne.n	800487c <_etoa+0xa8>
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	7033      	strb	r3, [r6, #0]
  if (negative) {
 8004880:	233b      	movs	r3, #59	@ 0x3b
 8004882:	2238      	movs	r2, #56	@ 0x38
 8004884:	189b      	adds	r3, r3, r2
 8004886:	19db      	adds	r3, r3, r7
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00f      	beq.n	80048ae <_etoa+0xda>
    value = -value;
 800488e:	2198      	movs	r1, #152	@ 0x98
 8004890:	187b      	adds	r3, r7, r1
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	239c      	movs	r3, #156	@ 0x9c
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	2380      	movs	r3, #128	@ 0x80
 800489e:	061b      	lsls	r3, r3, #24
 80048a0:	4053      	eors	r3, r2
 80048a2:	607b      	str	r3, [r7, #4]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	1879      	adds	r1, r7, r1
 80048aa:	600a      	str	r2, [r1, #0]
 80048ac:	604b      	str	r3, [r1, #4]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80048ae:	23a8      	movs	r3, #168	@ 0xa8
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	2380      	movs	r3, #128	@ 0x80
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4013      	ands	r3, r2
 80048ba:	d103      	bne.n	80048c4 <_etoa+0xf0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80048bc:	2306      	movs	r3, #6
 80048be:	22a0      	movs	r2, #160	@ 0xa0
 80048c0:	18ba      	adds	r2, r7, r2
 80048c2:	6013      	str	r3, [r2, #0]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80048c4:	2698      	movs	r6, #152	@ 0x98
 80048c6:	19bb      	adds	r3, r7, r6
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80048ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80048d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d4:	0d1b      	lsrs	r3, r3, #20
 80048d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	055b      	lsls	r3, r3, #21
 80048e0:	0d5b      	lsrs	r3, r3, #21
 80048e2:	4aa3      	ldr	r2, [pc, #652]	@ (8004b70 <_etoa+0x39c>)
 80048e4:	4694      	mov	ip, r2
 80048e6:	4463      	add	r3, ip
 80048e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80048ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ee:	2100      	movs	r1, #0
 80048f0:	0010      	movs	r0, r2
 80048f2:	4388      	bics	r0, r1
 80048f4:	0004      	movs	r4, r0
 80048f6:	031b      	lsls	r3, r3, #12
 80048f8:	0b1d      	lsrs	r5, r3, #12
 80048fa:	2300      	movs	r3, #0
 80048fc:	4323      	orrs	r3, r4
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	4b9c      	ldr	r3, [pc, #624]	@ (8004b74 <_etoa+0x3a0>)
 8004902:	432b      	orrs	r3, r5
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800490a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800490c:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800490e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004910:	f7fd fd5c 	bl	80023cc <__aeabi_i2d>
 8004914:	4a98      	ldr	r2, [pc, #608]	@ (8004b78 <_etoa+0x3a4>)
 8004916:	4b99      	ldr	r3, [pc, #612]	@ (8004b7c <_etoa+0x3a8>)
 8004918:	f7fc fe96 	bl	8001648 <__aeabi_dmul>
 800491c:	0002      	movs	r2, r0
 800491e:	000b      	movs	r3, r1
 8004920:	0010      	movs	r0, r2
 8004922:	0019      	movs	r1, r3
 8004924:	4a96      	ldr	r2, [pc, #600]	@ (8004b80 <_etoa+0x3ac>)
 8004926:	4b97      	ldr	r3, [pc, #604]	@ (8004b84 <_etoa+0x3b0>)
 8004928:	f7fb fee6 	bl	80006f8 <__aeabi_dadd>
 800492c:	0002      	movs	r2, r0
 800492e:	000b      	movs	r3, r1
 8004930:	0014      	movs	r4, r2
 8004932:	001d      	movs	r5, r3
 8004934:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004936:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004938:	2200      	movs	r2, #0
 800493a:	4b93      	ldr	r3, [pc, #588]	@ (8004b88 <_etoa+0x3b4>)
 800493c:	f7fd f94c 	bl	8001bd8 <__aeabi_dsub>
 8004940:	0002      	movs	r2, r0
 8004942:	000b      	movs	r3, r1
 8004944:	0010      	movs	r0, r2
 8004946:	0019      	movs	r1, r3
 8004948:	4a90      	ldr	r2, [pc, #576]	@ (8004b8c <_etoa+0x3b8>)
 800494a:	4b91      	ldr	r3, [pc, #580]	@ (8004b90 <_etoa+0x3bc>)
 800494c:	f7fc fe7c 	bl	8001648 <__aeabi_dmul>
 8004950:	0002      	movs	r2, r0
 8004952:	000b      	movs	r3, r1
 8004954:	0020      	movs	r0, r4
 8004956:	0029      	movs	r1, r5
 8004958:	f7fb fece 	bl	80006f8 <__aeabi_dadd>
 800495c:	0002      	movs	r2, r0
 800495e:	000b      	movs	r3, r1
 8004960:	0010      	movs	r0, r2
 8004962:	0019      	movs	r1, r3
 8004964:	f7fd fcf6 	bl	8002354 <__aeabi_d2iz>
 8004968:	0003      	movs	r3, r0
 800496a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800496c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800496e:	f7fd fd2d 	bl	80023cc <__aeabi_i2d>
 8004972:	4a88      	ldr	r2, [pc, #544]	@ (8004b94 <_etoa+0x3c0>)
 8004974:	4b88      	ldr	r3, [pc, #544]	@ (8004b98 <_etoa+0x3c4>)
 8004976:	f7fc fe67 	bl	8001648 <__aeabi_dmul>
 800497a:	0002      	movs	r2, r0
 800497c:	000b      	movs	r3, r1
 800497e:	0010      	movs	r0, r2
 8004980:	0019      	movs	r1, r3
 8004982:	2200      	movs	r2, #0
 8004984:	4b85      	ldr	r3, [pc, #532]	@ (8004b9c <_etoa+0x3c8>)
 8004986:	f7fb feb7 	bl	80006f8 <__aeabi_dadd>
 800498a:	0002      	movs	r2, r0
 800498c:	000b      	movs	r3, r1
 800498e:	0010      	movs	r0, r2
 8004990:	0019      	movs	r1, r3
 8004992:	f7fd fcdf 	bl	8002354 <__aeabi_d2iz>
 8004996:	0003      	movs	r3, r0
 8004998:	66fb      	str	r3, [r7, #108]	@ 0x6c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800499a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800499c:	f7fd fd16 	bl	80023cc <__aeabi_i2d>
 80049a0:	4a7f      	ldr	r2, [pc, #508]	@ (8004ba0 <_etoa+0x3cc>)
 80049a2:	4b80      	ldr	r3, [pc, #512]	@ (8004ba4 <_etoa+0x3d0>)
 80049a4:	f7fc fe50 	bl	8001648 <__aeabi_dmul>
 80049a8:	0002      	movs	r2, r0
 80049aa:	000b      	movs	r3, r1
 80049ac:	0014      	movs	r4, r2
 80049ae:	001d      	movs	r5, r3
 80049b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80049b2:	f7fd fd0b 	bl	80023cc <__aeabi_i2d>
 80049b6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ba8 <_etoa+0x3d4>)
 80049b8:	4b7c      	ldr	r3, [pc, #496]	@ (8004bac <_etoa+0x3d8>)
 80049ba:	f7fc fe45 	bl	8001648 <__aeabi_dmul>
 80049be:	0002      	movs	r2, r0
 80049c0:	000b      	movs	r3, r1
 80049c2:	0020      	movs	r0, r4
 80049c4:	0029      	movs	r1, r5
 80049c6:	f7fd f907 	bl	8001bd8 <__aeabi_dsub>
 80049ca:	0002      	movs	r2, r0
 80049cc:	000b      	movs	r3, r1
 80049ce:	663a      	str	r2, [r7, #96]	@ 0x60
 80049d0:	667b      	str	r3, [r7, #100]	@ 0x64
  const double z2 = z * z;
 80049d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80049d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049d6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80049d8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80049da:	f7fc fe35 	bl	8001648 <__aeabi_dmul>
 80049de:	0002      	movs	r2, r0
 80049e0:	000b      	movs	r3, r1
 80049e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80049e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049e8:	4a71      	ldr	r2, [pc, #452]	@ (8004bb0 <_etoa+0x3dc>)
 80049ea:	4694      	mov	ip, r2
 80049ec:	4463      	add	r3, ip
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	17db      	asrs	r3, r3, #31
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	051b      	lsls	r3, r3, #20
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	697c      	ldr	r4, [r7, #20]
 8004a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a04:	64fc      	str	r4, [r7, #76]	@ 0x4c
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004a06:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8004a08:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8004a0a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004a0c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004a0e:	0002      	movs	r2, r0
 8004a10:	000b      	movs	r3, r1
 8004a12:	f7fb fe71 	bl	80006f8 <__aeabi_dadd>
 8004a16:	0002      	movs	r2, r0
 8004a18:	000b      	movs	r3, r1
 8004a1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a22:	2000      	movs	r0, #0
 8004a24:	2180      	movs	r1, #128	@ 0x80
 8004a26:	05c9      	lsls	r1, r1, #23
 8004a28:	f7fd f8d6 	bl	8001bd8 <__aeabi_dsub>
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	000b      	movs	r3, r1
 8004a30:	623a      	str	r2, [r7, #32]
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a34:	2200      	movs	r2, #0
 8004a36:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb4 <_etoa+0x3e0>)
 8004a38:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a3a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a3c:	f7fc f9c0 	bl	8000dc0 <__aeabi_ddiv>
 8004a40:	0002      	movs	r2, r0
 8004a42:	000b      	movs	r3, r1
 8004a44:	0010      	movs	r0, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb8 <_etoa+0x3e4>)
 8004a4c:	f7fb fe54 	bl	80006f8 <__aeabi_dadd>
 8004a50:	0002      	movs	r2, r0
 8004a52:	000b      	movs	r3, r1
 8004a54:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a56:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a58:	f7fc f9b2 	bl	8000dc0 <__aeabi_ddiv>
 8004a5c:	0002      	movs	r2, r0
 8004a5e:	000b      	movs	r3, r1
 8004a60:	0010      	movs	r0, r2
 8004a62:	0019      	movs	r1, r3
 8004a64:	2200      	movs	r2, #0
 8004a66:	4b55      	ldr	r3, [pc, #340]	@ (8004bbc <_etoa+0x3e8>)
 8004a68:	f7fb fe46 	bl	80006f8 <__aeabi_dadd>
 8004a6c:	0002      	movs	r2, r0
 8004a6e:	000b      	movs	r3, r1
 8004a70:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a72:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8004a74:	f7fc f9a4 	bl	8000dc0 <__aeabi_ddiv>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	000b      	movs	r3, r1
 8004a7c:	6a38      	ldr	r0, [r7, #32]
 8004a7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a80:	f7fb fe3a 	bl	80006f8 <__aeabi_dadd>
 8004a84:	0002      	movs	r2, r0
 8004a86:	000b      	movs	r3, r1
 8004a88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a8c:	f7fc f998 	bl	8000dc0 <__aeabi_ddiv>
 8004a90:	0002      	movs	r2, r0
 8004a92:	000b      	movs	r3, r1
 8004a94:	0010      	movs	r0, r2
 8004a96:	0019      	movs	r1, r3
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4b36      	ldr	r3, [pc, #216]	@ (8004b74 <_etoa+0x3a0>)
 8004a9c:	f7fb fe2c 	bl	80006f8 <__aeabi_dadd>
 8004aa0:	0002      	movs	r2, r0
 8004aa2:	000b      	movs	r3, r1
 8004aa4:	0020      	movs	r0, r4
 8004aa6:	0029      	movs	r1, r5
 8004aa8:	f7fc fdce 	bl	8001648 <__aeabi_dmul>
 8004aac:	0002      	movs	r2, r0
 8004aae:	000b      	movs	r3, r1
 8004ab0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  // correct for rounding errors
  if (value < conv.F) {
 8004ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ab8:	19b9      	adds	r1, r7, r6
 8004aba:	6808      	ldr	r0, [r1, #0]
 8004abc:	6849      	ldr	r1, [r1, #4]
 8004abe:	f7fb fccb 	bl	8000458 <__aeabi_dcmplt>
 8004ac2:	1e03      	subs	r3, r0, #0
 8004ac4:	d00c      	beq.n	8004ae0 <_etoa+0x30c>
    expval--;
 8004ac6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    conv.F /= 10;
 8004acc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004ace:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	4b39      	ldr	r3, [pc, #228]	@ (8004bb8 <_etoa+0x3e4>)
 8004ad4:	f7fc f974 	bl	8000dc0 <__aeabi_ddiv>
 8004ad8:	0002      	movs	r2, r0
 8004ada:	000b      	movs	r3, r1
 8004adc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004ae0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ae2:	2b63      	cmp	r3, #99	@ 0x63
 8004ae4:	dc04      	bgt.n	8004af0 <_etoa+0x31c>
 8004ae6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ae8:	3363      	adds	r3, #99	@ 0x63
 8004aea:	db01      	blt.n	8004af0 <_etoa+0x31c>
 8004aec:	2304      	movs	r3, #4
 8004aee:	e000      	b.n	8004af2 <_etoa+0x31e>
 8004af0:	2305      	movs	r3, #5
 8004af2:	67bb      	str	r3, [r7, #120]	@ 0x78

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004af4:	23a8      	movs	r3, #168	@ 0xa8
 8004af6:	18fb      	adds	r3, r7, r3
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	2380      	movs	r3, #128	@ 0x80
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	4013      	ands	r3, r2
 8004b00:	d100      	bne.n	8004b04 <_etoa+0x330>
 8004b02:	e074      	b.n	8004bee <_etoa+0x41a>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004b04:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc0 <_etoa+0x3ec>)
 8004b06:	4b2f      	ldr	r3, [pc, #188]	@ (8004bc4 <_etoa+0x3f0>)
 8004b08:	2498      	movs	r4, #152	@ 0x98
 8004b0a:	1939      	adds	r1, r7, r4
 8004b0c:	6808      	ldr	r0, [r1, #0]
 8004b0e:	6849      	ldr	r1, [r1, #4]
 8004b10:	f7fb fcc0 	bl	8000494 <__aeabi_dcmpge>
 8004b14:	1e03      	subs	r3, r0, #0
 8004b16:	d059      	beq.n	8004bcc <_etoa+0x3f8>
 8004b18:	2200      	movs	r2, #0
 8004b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc8 <_etoa+0x3f4>)
 8004b1c:	1939      	adds	r1, r7, r4
 8004b1e:	6808      	ldr	r0, [r1, #0]
 8004b20:	6849      	ldr	r1, [r1, #4]
 8004b22:	f7fb fc99 	bl	8000458 <__aeabi_dcmplt>
 8004b26:	1e03      	subs	r3, r0, #0
 8004b28:	d050      	beq.n	8004bcc <_etoa+0x3f8>
      if ((int)prec > expval) {
 8004b2a:	21a0      	movs	r1, #160	@ 0xa0
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b32:	429a      	cmp	r2, r3
 8004b34:	da07      	bge.n	8004b46 <_etoa+0x372>
        prec = (unsigned)((int)prec - expval - 1);
 8004b36:	187b      	adds	r3, r7, r1
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	187a      	adds	r2, r7, r1
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	e003      	b.n	8004b4e <_etoa+0x37a>
      }
      else {
        prec = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	22a0      	movs	r2, #160	@ 0xa0
 8004b4a:	18ba      	adds	r2, r7, r2
 8004b4c:	6013      	str	r3, [r2, #0]
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004b4e:	21a8      	movs	r1, #168	@ 0xa8
 8004b50:	187b      	adds	r3, r7, r1
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2280      	movs	r2, #128	@ 0x80
 8004b56:	00d2      	lsls	r2, r2, #3
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	187a      	adds	r2, r7, r1
 8004b5c:	6013      	str	r3, [r2, #0]
      // no characters in exponent
      minwidth = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	67bb      	str	r3, [r7, #120]	@ 0x78
      expval   = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b66:	e042      	b.n	8004bee <_etoa+0x41a>
 8004b68:	7fefffff 	.word	0x7fefffff
 8004b6c:	ffefffff 	.word	0xffefffff
 8004b70:	fffffc01 	.word	0xfffffc01
 8004b74:	3ff00000 	.word	0x3ff00000
 8004b78:	509f79fb 	.word	0x509f79fb
 8004b7c:	3fd34413 	.word	0x3fd34413
 8004b80:	8b60c8b3 	.word	0x8b60c8b3
 8004b84:	3fc68a28 	.word	0x3fc68a28
 8004b88:	3ff80000 	.word	0x3ff80000
 8004b8c:	636f4361 	.word	0x636f4361
 8004b90:	3fd287a7 	.word	0x3fd287a7
 8004b94:	0979a371 	.word	0x0979a371
 8004b98:	400a934f 	.word	0x400a934f
 8004b9c:	3fe00000 	.word	0x3fe00000
 8004ba0:	bbb55516 	.word	0xbbb55516
 8004ba4:	40026bb1 	.word	0x40026bb1
 8004ba8:	fefa39ef 	.word	0xfefa39ef
 8004bac:	3fe62e42 	.word	0x3fe62e42
 8004bb0:	000003ff 	.word	0x000003ff
 8004bb4:	402c0000 	.word	0x402c0000
 8004bb8:	40240000 	.word	0x40240000
 8004bbc:	40180000 	.word	0x40180000
 8004bc0:	eb1c432d 	.word	0xeb1c432d
 8004bc4:	3f1a36e2 	.word	0x3f1a36e2
 8004bc8:	412e8480 	.word	0x412e8480
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004bcc:	21a0      	movs	r1, #160	@ 0xa0
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00b      	beq.n	8004bee <_etoa+0x41a>
 8004bd6:	23a8      	movs	r3, #168	@ 0xa8
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	2380      	movs	r3, #128	@ 0x80
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4013      	ands	r3, r2
 8004be2:	d004      	beq.n	8004bee <_etoa+0x41a>
        --prec;
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	187a      	adds	r2, r7, r1
 8004bec:	6013      	str	r3, [r2, #0]
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004bee:	22a4      	movs	r2, #164	@ 0xa4
 8004bf0:	18bb      	adds	r3, r7, r2
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (width > minwidth) {
 8004bf6:	18bb      	adds	r3, r7, r2
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d904      	bls.n	8004c0a <_etoa+0x436>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004c00:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c08:	e001      	b.n	8004c0e <_etoa+0x43a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	677b      	str	r3, [r7, #116]	@ 0x74
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004c0e:	23a8      	movs	r3, #168	@ 0xa8
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2202      	movs	r2, #2
 8004c16:	4013      	ands	r3, r2
 8004c18:	d004      	beq.n	8004c24 <_etoa+0x450>
 8004c1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <_etoa+0x450>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // rescale the float value
  if (expval) {
 8004c24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00c      	beq.n	8004c44 <_etoa+0x470>
    value /= conv.F;
 8004c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c2e:	2498      	movs	r4, #152	@ 0x98
 8004c30:	1939      	adds	r1, r7, r4
 8004c32:	6808      	ldr	r0, [r1, #0]
 8004c34:	6849      	ldr	r1, [r1, #4]
 8004c36:	f7fc f8c3 	bl	8000dc0 <__aeabi_ddiv>
 8004c3a:	0002      	movs	r2, r0
 8004c3c:	000b      	movs	r3, r1
 8004c3e:	1939      	adds	r1, r7, r4
 8004c40:	600a      	str	r2, [r1, #0]
 8004c42:	604b      	str	r3, [r1, #4]
  }

  // output the floating part
  const size_t start_idx = idx;
 8004c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c46:	657b      	str	r3, [r7, #84]	@ 0x54
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004c48:	233b      	movs	r3, #59	@ 0x3b
 8004c4a:	2238      	movs	r2, #56	@ 0x38
 8004c4c:	189b      	adds	r3, r3, r2
 8004c4e:	19db      	adds	r3, r3, r7
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00b      	beq.n	8004c6e <_etoa+0x49a>
 8004c56:	2398      	movs	r3, #152	@ 0x98
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c5e:	239c      	movs	r3, #156	@ 0x9c
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2280      	movs	r2, #128	@ 0x80
 8004c66:	0612      	lsls	r2, r2, #24
 8004c68:	405a      	eors	r2, r3
 8004c6a:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c6c:	e005      	b.n	8004c7a <_etoa+0x4a6>
 8004c6e:	2398      	movs	r3, #152	@ 0x98
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	685c      	ldr	r4, [r3, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c78:	637c      	str	r4, [r7, #52]	@ 0x34
 8004c7a:	23a8      	movs	r3, #168	@ 0xa8
 8004c7c:	18fa      	adds	r2, r7, r3
 8004c7e:	6813      	ldr	r3, [r2, #0]
 8004c80:	4a31      	ldr	r2, [pc, #196]	@ (8004d48 <_etoa+0x574>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8004c86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c8a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004c8c:	9304      	str	r3, [sp, #16]
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c90:	9303      	str	r3, [sp, #12]
 8004c92:	25a0      	movs	r5, #160	@ 0xa0
 8004c94:	197d      	adds	r5, r7, r5
 8004c96:	682b      	ldr	r3, [r5, #0]
 8004c98:	9302      	str	r3, [sp, #8]
 8004c9a:	6b3d      	ldr	r5, [r7, #48]	@ 0x30
 8004c9c:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 8004c9e:	9500      	str	r5, [sp, #0]
 8004ca0:	9601      	str	r6, [sp, #4]
 8004ca2:	0023      	movs	r3, r4
 8004ca4:	f7ff fb58 	bl	8004358 <_ftoa>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // output the exponent part
  if (minwidth) {
 8004cac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d044      	beq.n	8004d3c <_etoa+0x568>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004cb2:	23a8      	movs	r3, #168	@ 0xa8
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	4013      	ands	r3, r2
 8004cbc:	d001      	beq.n	8004cc2 <_etoa+0x4ee>
 8004cbe:	2045      	movs	r0, #69	@ 0x45
 8004cc0:	e000      	b.n	8004cc4 <_etoa+0x4f0>
 8004cc2:	2065      	movs	r0, #101	@ 0x65
 8004cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cc6:	1c53      	adds	r3, r2, #1
 8004cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ccc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cce:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004cd0:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004cd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cd4:	17da      	asrs	r2, r3, #31
 8004cd6:	189b      	adds	r3, r3, r2
 8004cd8:	4053      	eors	r3, r2
 8004cda:	469c      	mov	ip, r3
 8004cdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004cde:	0fdb      	lsrs	r3, r3, #31
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004ce4:	3a01      	subs	r2, #1
 8004ce6:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8004ce8:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8004cea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004cee:	2605      	movs	r6, #5
 8004cf0:	9605      	str	r6, [sp, #20]
 8004cf2:	9204      	str	r2, [sp, #16]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	9203      	str	r2, [sp, #12]
 8004cf8:	220a      	movs	r2, #10
 8004cfa:	9202      	str	r2, [sp, #8]
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	4663      	mov	r3, ip
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	002b      	movs	r3, r5
 8004d04:	0022      	movs	r2, r4
 8004d06:	f7ff fa4b 	bl	80041a0 <_ntoa_long>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004d0e:	23a8      	movs	r3, #168	@ 0xa8
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2202      	movs	r2, #2
 8004d16:	4013      	ands	r3, r2
 8004d18:	d010      	beq.n	8004d3c <_etoa+0x568>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004d1a:	e007      	b.n	8004d2c <_etoa+0x558>
 8004d1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d1e:	1c53      	adds	r3, r2, #1
 8004d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d26:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8004d28:	2020      	movs	r0, #32
 8004d2a:	47a0      	blx	r4
 8004d2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	22a4      	movs	r2, #164	@ 0xa4
 8004d34:	18ba      	adds	r2, r7, r2
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d8ef      	bhi.n	8004d1c <_etoa+0x548>
    }
  }
  return idx;
 8004d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b021      	add	sp, #132	@ 0x84
 8004d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	fffff7ff 	.word	0xfffff7ff

08004d4c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4e:	46c6      	mov	lr, r8
 8004d50:	b500      	push	{lr}
 8004d52:	b0a6      	sub	sp, #152	@ 0x98
 8004d54:	af0a      	add	r7, sp, #40	@ 0x28
 8004d56:	6278      	str	r0, [r7, #36]	@ 0x24
 8004d58:	6239      	str	r1, [r7, #32]
 8004d5a:	61fa      	str	r2, [r7, #28]
 8004d5c:	61bb      	str	r3, [r7, #24]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	65fb      	str	r3, [r7, #92]	@ 0x5c

  if (!buffer) {
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <_vsnprintf+0x20>
 8004d68:	f000 fc51 	bl	800560e <_vsnprintf+0x8c2>
    // use null output function
    out = _out_null;
 8004d6c:	4bad      	ldr	r3, [pc, #692]	@ (8005024 <_vsnprintf+0x2d8>)
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  while (*format)
 8004d70:	f000 fc4d 	bl	800560e <_vsnprintf+0x8c2>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b25      	cmp	r3, #37	@ 0x25
 8004d7a:	d00d      	beq.n	8004d98 <_vsnprintf+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	7818      	ldrb	r0, [r3, #0]
 8004d80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004d82:	1c53      	adds	r3, r2, #1
 8004d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	6a39      	ldr	r1, [r7, #32]
 8004d8a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004d8c:	47a0      	blx	r4
      format++;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	3301      	adds	r3, #1
 8004d92:	61bb      	str	r3, [r7, #24]
      continue;
 8004d94:	f000 fc3b 	bl	800560e <_vsnprintf+0x8c2>
    }
    else {
      // yes, evaluate it
      format++;
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	61bb      	str	r3, [r7, #24]
    }

    // evaluate flags
    flags = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    do {
      switch (*format) {
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	3b20      	subs	r3, #32
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d836      	bhi.n	8004e1a <_vsnprintf+0xce>
 8004dac:	009a      	lsls	r2, r3, #2
 8004dae:	4b9e      	ldr	r3, [pc, #632]	@ (8005028 <_vsnprintf+0x2dc>)
 8004db0:	18d3      	adds	r3, r2, r3
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004db8:	2201      	movs	r2, #1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004dc8:	e02a      	b.n	8004e20 <_vsnprintf+0xd4>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dcc:	2202      	movs	r2, #2
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	2301      	movs	r3, #1
 8004dda:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ddc:	e020      	b.n	8004e20 <_vsnprintf+0xd4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004dde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004de0:	2204      	movs	r2, #4
 8004de2:	4313      	orrs	r3, r2
 8004de4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	3301      	adds	r3, #1
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	2301      	movs	r3, #1
 8004dee:	663b      	str	r3, [r7, #96]	@ 0x60
 8004df0:	e016      	b.n	8004e20 <_vsnprintf+0xd4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004df4:	2208      	movs	r2, #8
 8004df6:	4313      	orrs	r3, r2
 8004df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	2301      	movs	r3, #1
 8004e02:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e04:	e00c      	b.n	8004e20 <_vsnprintf+0xd4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e08:	2210      	movs	r2, #16
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	3301      	adds	r3, #1
 8004e12:	61bb      	str	r3, [r7, #24]
 8004e14:	2301      	movs	r3, #1
 8004e16:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e18:	e002      	b.n	8004e20 <_vsnprintf+0xd4>
        default :                                   n = 0U; break;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e1e:	46c0      	nop			@ (mov r8, r8)
      }
    } while (n);
 8004e20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1bd      	bne.n	8004da2 <_vsnprintf+0x56>

    // evaluate width field
    width = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (_is_digit(*format)) {
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7ff f857 	bl	8003ee2 <_is_digit>
 8004e34:	1e03      	subs	r3, r0, #0
 8004e36:	d007      	beq.n	8004e48 <_vsnprintf+0xfc>
      width = _atoi(&format);
 8004e38:	2318      	movs	r3, #24
 8004e3a:	18fb      	adds	r3, r7, r3
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f7ff f869 	bl	8003f14 <_atoi>
 8004e42:	0003      	movs	r3, r0
 8004e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e46:	e01c      	b.n	8004e82 <_vsnprintf+0x136>
    }
    else if (*format == '*') {
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e4e:	d118      	bne.n	8004e82 <_vsnprintf+0x136>
      const int w = va_arg(va, int);
 8004e50:	2388      	movs	r3, #136	@ 0x88
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	1d1a      	adds	r2, r3, #4
 8004e58:	2188      	movs	r1, #136	@ 0x88
 8004e5a:	1879      	adds	r1, r7, r1
 8004e5c:	600a      	str	r2, [r1, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	64bb      	str	r3, [r7, #72]	@ 0x48
      if (w < 0) {
 8004e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	da07      	bge.n	8004e78 <_vsnprintf+0x12c>
        flags |= FLAGS_LEFT;    // reverse padding
 8004e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        width = (unsigned int)-w;
 8004e70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e72:	425b      	negs	r3, r3
 8004e74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e76:	e001      	b.n	8004e7c <_vsnprintf+0x130>
      }
      else {
        width = (unsigned int)w;
 8004e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e7a:	66bb      	str	r3, [r7, #104]	@ 0x68
      }
      format++;
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]
    }

    // evaluate precision field
    precision = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	667b      	str	r3, [r7, #100]	@ 0x64
    if (*format == '.') {
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e8c:	d12b      	bne.n	8004ee6 <_vsnprintf+0x19a>
      flags |= FLAGS_PRECISION;
 8004e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e90:	2280      	movs	r2, #128	@ 0x80
 8004e92:	00d2      	lsls	r2, r2, #3
 8004e94:	4313      	orrs	r3, r2
 8004e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
      format++;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	61bb      	str	r3, [r7, #24]
      if (_is_digit(*format)) {
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f7ff f81d 	bl	8003ee2 <_is_digit>
 8004ea8:	1e03      	subs	r3, r0, #0
 8004eaa:	d007      	beq.n	8004ebc <_vsnprintf+0x170>
        precision = _atoi(&format);
 8004eac:	2318      	movs	r3, #24
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f7ff f82f 	bl	8003f14 <_atoi>
 8004eb6:	0003      	movs	r3, r0
 8004eb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8004eba:	e014      	b.n	8004ee6 <_vsnprintf+0x19a>
      }
      else if (*format == '*') {
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ec2:	d110      	bne.n	8004ee6 <_vsnprintf+0x19a>
        const int prec = (int)va_arg(va, int);
 8004ec4:	2388      	movs	r3, #136	@ 0x88
 8004ec6:	18fb      	adds	r3, r7, r3
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	1d1a      	adds	r2, r3, #4
 8004ecc:	2188      	movs	r1, #136	@ 0x88
 8004ece:	1879      	adds	r1, r7, r1
 8004ed0:	600a      	str	r2, [r1, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	647b      	str	r3, [r7, #68]	@ 0x44
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004ed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	da00      	bge.n	8004ede <_vsnprintf+0x192>
 8004edc:	2300      	movs	r3, #0
 8004ede:	667b      	str	r3, [r7, #100]	@ 0x64
        format++;
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	61bb      	str	r3, [r7, #24]
      }
    }

    // evaluate length field
    switch (*format) {
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	3b68      	subs	r3, #104	@ 0x68
 8004eec:	2b12      	cmp	r3, #18
 8004eee:	d847      	bhi.n	8004f80 <_vsnprintf+0x234>
 8004ef0:	009a      	lsls	r2, r3, #2
 8004ef2:	4b4e      	ldr	r3, [pc, #312]	@ (800502c <_vsnprintf+0x2e0>)
 8004ef4:	18d3      	adds	r3, r2, r3
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	469f      	mov	pc, r3
      case 'l' :
        flags |= FLAGS_LONG;
 8004efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004efc:	2280      	movs	r2, #128	@ 0x80
 8004efe:	0052      	lsls	r2, r2, #1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61bb      	str	r3, [r7, #24]
        if (*format == 'l') {
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b6c      	cmp	r3, #108	@ 0x6c
 8004f10:	d138      	bne.n	8004f84 <_vsnprintf+0x238>
          flags |= FLAGS_LONG_LONG;
 8004f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f14:	2280      	movs	r2, #128	@ 0x80
 8004f16:	0092      	lsls	r2, r2, #2
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	61bb      	str	r3, [r7, #24]
        }
        break;
 8004f22:	e02f      	b.n	8004f84 <_vsnprintf+0x238>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004f24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f26:	2280      	movs	r2, #128	@ 0x80
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	61bb      	str	r3, [r7, #24]
        if (*format == 'h') {
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b68      	cmp	r3, #104	@ 0x68
 8004f38:	d126      	bne.n	8004f88 <_vsnprintf+0x23c>
          flags |= FLAGS_CHAR;
 8004f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f3c:	2240      	movs	r2, #64	@ 0x40
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	66fb      	str	r3, [r7, #108]	@ 0x6c
          format++;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	3301      	adds	r3, #1
 8004f46:	61bb      	str	r3, [r7, #24]
        }
        break;
 8004f48:	e01e      	b.n	8004f88 <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f4c:	2280      	movs	r2, #128	@ 0x80
 8004f4e:	0052      	lsls	r2, r2, #1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	3301      	adds	r3, #1
 8004f58:	61bb      	str	r3, [r7, #24]
        break;
 8004f5a:	e016      	b.n	8004f8a <_vsnprintf+0x23e>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f5e:	2280      	movs	r2, #128	@ 0x80
 8004f60:	0092      	lsls	r2, r2, #2
 8004f62:	4313      	orrs	r3, r2
 8004f64:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	61bb      	str	r3, [r7, #24]
        break;
 8004f6c:	e00d      	b.n	8004f8a <_vsnprintf+0x23e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f70:	2280      	movs	r2, #128	@ 0x80
 8004f72:	0052      	lsls	r2, r2, #1
 8004f74:	4313      	orrs	r3, r2
 8004f76:	66fb      	str	r3, [r7, #108]	@ 0x6c
        format++;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	61bb      	str	r3, [r7, #24]
        break;
 8004f7e:	e004      	b.n	8004f8a <_vsnprintf+0x23e>
      default :
        break;
 8004f80:	46c0      	nop			@ (mov r8, r8)
 8004f82:	e002      	b.n	8004f8a <_vsnprintf+0x23e>
        break;
 8004f84:	46c0      	nop			@ (mov r8, r8)
 8004f86:	e000      	b.n	8004f8a <_vsnprintf+0x23e>
        break;
 8004f88:	46c0      	nop			@ (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b67      	cmp	r3, #103	@ 0x67
 8004f90:	dc28      	bgt.n	8004fe4 <_vsnprintf+0x298>
 8004f92:	2b25      	cmp	r3, #37	@ 0x25
 8004f94:	da1d      	bge.n	8004fd2 <_vsnprintf+0x286>
 8004f96:	e32d      	b.n	80055f4 <_vsnprintf+0x8a8>
 8004f98:	3b69      	subs	r3, #105	@ 0x69
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	0013      	movs	r3, r2
 8004fa0:	4a23      	ldr	r2, [pc, #140]	@ (8005030 <_vsnprintf+0x2e4>)
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	1e51      	subs	r1, r2, #1
 8004fa6:	418a      	sbcs	r2, r1
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	2a00      	cmp	r2, #0
 8004fac:	d120      	bne.n	8004ff0 <_vsnprintf+0x2a4>
 8004fae:	2280      	movs	r2, #128	@ 0x80
 8004fb0:	401a      	ands	r2, r3
 8004fb2:	1e51      	subs	r1, r2, #1
 8004fb4:	418a      	sbcs	r2, r1
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	2a00      	cmp	r2, #0
 8004fba:	d000      	beq.n	8004fbe <_vsnprintf+0x272>
 8004fbc:	e2b5      	b.n	800552a <_vsnprintf+0x7de>
 8004fbe:	2280      	movs	r2, #128	@ 0x80
 8004fc0:	00d2      	lsls	r2, r2, #3
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	1e5a      	subs	r2, r3, #1
 8004fc6:	4193      	sbcs	r3, r2
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d000      	beq.n	8004fd0 <_vsnprintf+0x284>
 8004fce:	e246      	b.n	800545e <_vsnprintf+0x712>
 8004fd0:	e310      	b.n	80055f4 <_vsnprintf+0x8a8>
 8004fd2:	3b25      	subs	r3, #37	@ 0x25
 8004fd4:	2b42      	cmp	r3, #66	@ 0x42
 8004fd6:	d900      	bls.n	8004fda <_vsnprintf+0x28e>
 8004fd8:	e30c      	b.n	80055f4 <_vsnprintf+0x8a8>
 8004fda:	009a      	lsls	r2, r3, #2
 8004fdc:	4b15      	ldr	r3, [pc, #84]	@ (8005034 <_vsnprintf+0x2e8>)
 8004fde:	18d3      	adds	r3, r2, r3
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	469f      	mov	pc, r3
 8004fe4:	2b78      	cmp	r3, #120	@ 0x78
 8004fe6:	dd00      	ble.n	8004fea <_vsnprintf+0x29e>
 8004fe8:	e304      	b.n	80055f4 <_vsnprintf+0x8a8>
 8004fea:	2b69      	cmp	r3, #105	@ 0x69
 8004fec:	dad4      	bge.n	8004f98 <_vsnprintf+0x24c>
 8004fee:	e301      	b.n	80055f4 <_vsnprintf+0x8a8>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b78      	cmp	r3, #120	@ 0x78
 8004ff6:	d003      	beq.n	8005000 <_vsnprintf+0x2b4>
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b58      	cmp	r3, #88	@ 0x58
 8004ffe:	d102      	bne.n	8005006 <_vsnprintf+0x2ba>
          base = 16U;
 8005000:	2310      	movs	r3, #16
 8005002:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005004:	e01e      	b.n	8005044 <_vsnprintf+0x2f8>
        }
        else if (*format == 'o') {
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b6f      	cmp	r3, #111	@ 0x6f
 800500c:	d102      	bne.n	8005014 <_vsnprintf+0x2c8>
          base =  8U;
 800500e:	2308      	movs	r3, #8
 8005010:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005012:	e017      	b.n	8005044 <_vsnprintf+0x2f8>
        }
        else if (*format == 'b') {
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b62      	cmp	r3, #98	@ 0x62
 800501a:	d10d      	bne.n	8005038 <_vsnprintf+0x2ec>
          base =  2U;
 800501c:	2302      	movs	r3, #2
 800501e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005020:	e010      	b.n	8005044 <_vsnprintf+0x2f8>
 8005022:	46c0      	nop			@ (mov r8, r8)
 8005024:	08003e61 	.word	0x08003e61
 8005028:	0800fec8 	.word	0x0800fec8
 800502c:	0800ff0c 	.word	0x0800ff0c
 8005030:	00009041 	.word	0x00009041
 8005034:	0800ff58 	.word	0x0800ff58
        }
        else {
          base = 10U;
 8005038:	230a      	movs	r3, #10
 800503a:	65bb      	str	r3, [r7, #88]	@ 0x58
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800503c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800503e:	2210      	movs	r2, #16
 8005040:	4393      	bics	r3, r2
 8005042:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }
        // uppercase
        if (*format == 'X') {
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b58      	cmp	r3, #88	@ 0x58
 800504a:	d103      	bne.n	8005054 <_vsnprintf+0x308>
          flags |= FLAGS_UPPERCASE;
 800504c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800504e:	2220      	movs	r2, #32
 8005050:	4313      	orrs	r3, r2
 8005052:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b69      	cmp	r3, #105	@ 0x69
 800505a:	d007      	beq.n	800506c <_vsnprintf+0x320>
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b64      	cmp	r3, #100	@ 0x64
 8005062:	d003      	beq.n	800506c <_vsnprintf+0x320>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005066:	220c      	movs	r2, #12
 8005068:	4393      	bics	r3, r2
 800506a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800506c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800506e:	2380      	movs	r3, #128	@ 0x80
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4013      	ands	r3, r2
 8005074:	d003      	beq.n	800507e <_vsnprintf+0x332>
          flags &= ~FLAGS_ZEROPAD;
 8005076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005078:	2201      	movs	r2, #1
 800507a:	4393      	bics	r3, r2
 800507c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b69      	cmp	r3, #105	@ 0x69
 8005084:	d004      	beq.n	8005090 <_vsnprintf+0x344>
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b64      	cmp	r3, #100	@ 0x64
 800508c:	d000      	beq.n	8005090 <_vsnprintf+0x344>
 800508e:	e0af      	b.n	80051f0 <_vsnprintf+0x4a4>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8005090:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005092:	2380      	movs	r3, #128	@ 0x80
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4013      	ands	r3, r2
 8005098:	d03d      	beq.n	8005116 <_vsnprintf+0x3ca>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800509a:	2388      	movs	r3, #136	@ 0x88
 800509c:	18fb      	adds	r3, r7, r3
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3307      	adds	r3, #7
 80050a2:	2207      	movs	r2, #7
 80050a4:	4393      	bics	r3, r2
 80050a6:	001a      	movs	r2, r3
 80050a8:	3208      	adds	r2, #8
 80050aa:	2188      	movs	r1, #136	@ 0x88
 80050ac:	1879      	adds	r1, r7, r1
 80050ae:	600a      	str	r2, [r1, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80050b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80050b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da05      	bge.n	80050cc <_vsnprintf+0x380>
 80050c0:	2000      	movs	r0, #0
 80050c2:	2100      	movs	r1, #0
 80050c4:	1a80      	subs	r0, r0, r2
 80050c6:	4199      	sbcs	r1, r3
 80050c8:	0002      	movs	r2, r0
 80050ca:	000b      	movs	r3, r1
 80050cc:	0010      	movs	r0, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d2:	0fdb      	lsrs	r3, r3, #31
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	469c      	mov	ip, r3
 80050e2:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 80050e4:	6a3d      	ldr	r5, [r7, #32]
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	4698      	mov	r8, r3
 80050ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050ec:	9308      	str	r3, [sp, #32]
 80050ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050f0:	9307      	str	r3, [sp, #28]
 80050f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050f4:	9306      	str	r3, [sp, #24]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	697c      	ldr	r4, [r7, #20]
 80050fa:	9304      	str	r3, [sp, #16]
 80050fc:	9405      	str	r4, [sp, #20]
 80050fe:	9202      	str	r2, [sp, #8]
 8005100:	9000      	str	r0, [sp, #0]
 8005102:	9101      	str	r1, [sp, #4]
 8005104:	4663      	mov	r3, ip
 8005106:	0032      	movs	r2, r6
 8005108:	0029      	movs	r1, r5
 800510a:	4640      	mov	r0, r8
 800510c:	f7ff f8b1 	bl	8004272 <_ntoa_long_long>
 8005110:	0003      	movs	r3, r0
 8005112:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8005114:	e0fa      	b.n	800530c <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005116:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005118:	2380      	movs	r3, #128	@ 0x80
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4013      	ands	r3, r2
 800511e:	d025      	beq.n	800516c <_vsnprintf+0x420>
            const long value = va_arg(va, long);
 8005120:	2388      	movs	r3, #136	@ 0x88
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	1d1a      	adds	r2, r3, #4
 8005128:	2188      	movs	r1, #136	@ 0x88
 800512a:	1879      	adds	r1, r7, r1
 800512c:	600a      	str	r2, [r1, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	637b      	str	r3, [r7, #52]	@ 0x34
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005134:	17da      	asrs	r2, r3, #31
 8005136:	189b      	adds	r3, r3, r2
 8005138:	4053      	eors	r3, r2
 800513a:	001e      	movs	r6, r3
 800513c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513e:	0fdb      	lsrs	r3, r3, #31
 8005140:	b2da      	uxtb	r2, r3
 8005142:	69fd      	ldr	r5, [r7, #28]
 8005144:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8005146:	6a39      	ldr	r1, [r7, #32]
 8005148:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800514a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005150:	9304      	str	r3, [sp, #16]
 8005152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005154:	9303      	str	r3, [sp, #12]
 8005156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005158:	9302      	str	r3, [sp, #8]
 800515a:	9201      	str	r2, [sp, #4]
 800515c:	9600      	str	r6, [sp, #0]
 800515e:	002b      	movs	r3, r5
 8005160:	0022      	movs	r2, r4
 8005162:	f7ff f81d 	bl	80041a0 <_ntoa_long>
 8005166:	0003      	movs	r3, r0
 8005168:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 800516a:	e0cf      	b.n	800530c <_vsnprintf+0x5c0>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800516c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800516e:	2240      	movs	r2, #64	@ 0x40
 8005170:	4013      	ands	r3, r2
 8005172:	d009      	beq.n	8005188 <_vsnprintf+0x43c>
 8005174:	2388      	movs	r3, #136	@ 0x88
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	2188      	movs	r1, #136	@ 0x88
 800517e:	1879      	adds	r1, r7, r1
 8005180:	600a      	str	r2, [r1, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e015      	b.n	80051b4 <_vsnprintf+0x468>
 8005188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800518a:	2280      	movs	r2, #128	@ 0x80
 800518c:	4013      	ands	r3, r2
 800518e:	d009      	beq.n	80051a4 <_vsnprintf+0x458>
 8005190:	2388      	movs	r3, #136	@ 0x88
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	1d1a      	adds	r2, r3, #4
 8005198:	2188      	movs	r1, #136	@ 0x88
 800519a:	1879      	adds	r1, r7, r1
 800519c:	600a      	str	r2, [r1, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	b21b      	sxth	r3, r3
 80051a2:	e007      	b.n	80051b4 <_vsnprintf+0x468>
 80051a4:	2388      	movs	r3, #136	@ 0x88
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	1d1a      	adds	r2, r3, #4
 80051ac:	2188      	movs	r1, #136	@ 0x88
 80051ae:	1879      	adds	r1, r7, r1
 80051b0:	600a      	str	r2, [r1, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	63bb      	str	r3, [r7, #56]	@ 0x38
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80051b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b8:	17da      	asrs	r2, r3, #31
 80051ba:	189b      	adds	r3, r3, r2
 80051bc:	4053      	eors	r3, r2
 80051be:	001e      	movs	r6, r3
 80051c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c2:	0fdb      	lsrs	r3, r3, #31
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	69fd      	ldr	r5, [r7, #28]
 80051c8:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 80051ca:	6a39      	ldr	r1, [r7, #32]
 80051cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d0:	9305      	str	r3, [sp, #20]
 80051d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051d4:	9304      	str	r3, [sp, #16]
 80051d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051d8:	9303      	str	r3, [sp, #12]
 80051da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051dc:	9302      	str	r3, [sp, #8]
 80051de:	9201      	str	r2, [sp, #4]
 80051e0:	9600      	str	r6, [sp, #0]
 80051e2:	002b      	movs	r3, r5
 80051e4:	0022      	movs	r2, r4
 80051e6:	f7fe ffdb 	bl	80041a0 <_ntoa_long>
 80051ea:	0003      	movs	r3, r0
 80051ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
          if (flags & FLAGS_LONG_LONG) {
 80051ee:	e08d      	b.n	800530c <_vsnprintf+0x5c0>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80051f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051f2:	2380      	movs	r3, #128	@ 0x80
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4013      	ands	r3, r2
 80051f8:	d02b      	beq.n	8005252 <_vsnprintf+0x506>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80051fa:	2388      	movs	r3, #136	@ 0x88
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3307      	adds	r3, #7
 8005202:	2207      	movs	r2, #7
 8005204:	4393      	bics	r3, r2
 8005206:	001a      	movs	r2, r3
 8005208:	3208      	adds	r2, #8
 800520a:	2188      	movs	r1, #136	@ 0x88
 800520c:	1879      	adds	r1, r7, r1
 800520e:	600a      	str	r2, [r1, #0]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	69fe      	ldr	r6, [r7, #28]
 800521e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005220:	6a3d      	ldr	r5, [r7, #32]
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	469c      	mov	ip, r3
 8005226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005228:	9308      	str	r3, [sp, #32]
 800522a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800522c:	9307      	str	r3, [sp, #28]
 800522e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005230:	9306      	str	r3, [sp, #24]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	68fc      	ldr	r4, [r7, #12]
 8005236:	9304      	str	r3, [sp, #16]
 8005238:	9405      	str	r4, [sp, #20]
 800523a:	2300      	movs	r3, #0
 800523c:	9302      	str	r3, [sp, #8]
 800523e:	9000      	str	r0, [sp, #0]
 8005240:	9101      	str	r1, [sp, #4]
 8005242:	0033      	movs	r3, r6
 8005244:	0029      	movs	r1, r5
 8005246:	4660      	mov	r0, ip
 8005248:	f7ff f813 	bl	8004272 <_ntoa_long_long>
 800524c:	0003      	movs	r3, r0
 800524e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005250:	e05c      	b.n	800530c <_vsnprintf+0x5c0>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005252:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005254:	2380      	movs	r3, #128	@ 0x80
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	4013      	ands	r3, r2
 800525a:	d01d      	beq.n	8005298 <_vsnprintf+0x54c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800525c:	2388      	movs	r3, #136	@ 0x88
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	1d1a      	adds	r2, r3, #4
 8005264:	2188      	movs	r1, #136	@ 0x88
 8005266:	1879      	adds	r1, r7, r1
 8005268:	600a      	str	r2, [r1, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69fd      	ldr	r5, [r7, #28]
 800526e:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8005270:	6a39      	ldr	r1, [r7, #32]
 8005272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005274:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005276:	9205      	str	r2, [sp, #20]
 8005278:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800527a:	9204      	str	r2, [sp, #16]
 800527c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800527e:	9203      	str	r2, [sp, #12]
 8005280:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005282:	9202      	str	r2, [sp, #8]
 8005284:	2200      	movs	r2, #0
 8005286:	9201      	str	r2, [sp, #4]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	002b      	movs	r3, r5
 800528c:	0022      	movs	r2, r4
 800528e:	f7fe ff87 	bl	80041a0 <_ntoa_long>
 8005292:	0003      	movs	r3, r0
 8005294:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005296:	e039      	b.n	800530c <_vsnprintf+0x5c0>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8005298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800529a:	2240      	movs	r2, #64	@ 0x40
 800529c:	4013      	ands	r3, r2
 800529e:	d009      	beq.n	80052b4 <_vsnprintf+0x568>
 80052a0:	2388      	movs	r3, #136	@ 0x88
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	1d1a      	adds	r2, r3, #4
 80052a8:	2188      	movs	r1, #136	@ 0x88
 80052aa:	1879      	adds	r1, r7, r1
 80052ac:	600a      	str	r2, [r1, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	e015      	b.n	80052e0 <_vsnprintf+0x594>
 80052b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b6:	2280      	movs	r2, #128	@ 0x80
 80052b8:	4013      	ands	r3, r2
 80052ba:	d009      	beq.n	80052d0 <_vsnprintf+0x584>
 80052bc:	2388      	movs	r3, #136	@ 0x88
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	1d1a      	adds	r2, r3, #4
 80052c4:	2188      	movs	r1, #136	@ 0x88
 80052c6:	1879      	adds	r1, r7, r1
 80052c8:	600a      	str	r2, [r1, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	e007      	b.n	80052e0 <_vsnprintf+0x594>
 80052d0:	2388      	movs	r3, #136	@ 0x88
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	1d1a      	adds	r2, r3, #4
 80052d8:	2188      	movs	r1, #136	@ 0x88
 80052da:	1879      	adds	r1, r7, r1
 80052dc:	600a      	str	r2, [r1, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80052e2:	69fc      	ldr	r4, [r7, #28]
 80052e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80052e6:	6a39      	ldr	r1, [r7, #32]
 80052e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ec:	9305      	str	r3, [sp, #20]
 80052ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052f4:	9303      	str	r3, [sp, #12]
 80052f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052f8:	9302      	str	r3, [sp, #8]
 80052fa:	2300      	movs	r3, #0
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	0023      	movs	r3, r4
 8005304:	f7fe ff4c 	bl	80041a0 <_ntoa_long>
 8005308:	0003      	movs	r3, r0
 800530a:	65fb      	str	r3, [r7, #92]	@ 0x5c
          }
        }
        format++;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	3301      	adds	r3, #1
 8005310:	61bb      	str	r3, [r7, #24]
        break;
 8005312:	e17c      	b.n	800560e <_vsnprintf+0x8c2>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b46      	cmp	r3, #70	@ 0x46
 800531a:	d103      	bne.n	8005324 <_vsnprintf+0x5d8>
 800531c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800531e:	2220      	movs	r2, #32
 8005320:	4313      	orrs	r3, r2
 8005322:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005324:	2388      	movs	r3, #136	@ 0x88
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3307      	adds	r3, #7
 800532c:	2207      	movs	r2, #7
 800532e:	4393      	bics	r3, r2
 8005330:	001a      	movs	r2, r3
 8005332:	3208      	adds	r2, #8
 8005334:	2188      	movs	r1, #136	@ 0x88
 8005336:	1879      	adds	r1, r7, r1
 8005338:	600a      	str	r2, [r1, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	69fe      	ldr	r6, [r7, #28]
 8005340:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 8005342:	6a3c      	ldr	r4, [r7, #32]
 8005344:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005346:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005348:	9104      	str	r1, [sp, #16]
 800534a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800534c:	9103      	str	r1, [sp, #12]
 800534e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005350:	9102      	str	r1, [sp, #8]
 8005352:	9200      	str	r2, [sp, #0]
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	0033      	movs	r3, r6
 8005358:	002a      	movs	r2, r5
 800535a:	0021      	movs	r1, r4
 800535c:	f7fe fffc 	bl	8004358 <_ftoa>
 8005360:	0003      	movs	r3, r0
 8005362:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	3301      	adds	r3, #1
 8005368:	61bb      	str	r3, [r7, #24]
        break;
 800536a:	e150      	b.n	800560e <_vsnprintf+0x8c2>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b67      	cmp	r3, #103	@ 0x67
 8005372:	d003      	beq.n	800537c <_vsnprintf+0x630>
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b47      	cmp	r3, #71	@ 0x47
 800537a:	d104      	bne.n	8005386 <_vsnprintf+0x63a>
 800537c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800537e:	2280      	movs	r2, #128	@ 0x80
 8005380:	0112      	lsls	r2, r2, #4
 8005382:	4313      	orrs	r3, r2
 8005384:	66fb      	str	r3, [r7, #108]	@ 0x6c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b45      	cmp	r3, #69	@ 0x45
 800538c:	d003      	beq.n	8005396 <_vsnprintf+0x64a>
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b47      	cmp	r3, #71	@ 0x47
 8005394:	d103      	bne.n	800539e <_vsnprintf+0x652>
 8005396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005398:	2220      	movs	r2, #32
 800539a:	4313      	orrs	r3, r2
 800539c:	66fb      	str	r3, [r7, #108]	@ 0x6c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800539e:	2388      	movs	r3, #136	@ 0x88
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3307      	adds	r3, #7
 80053a6:	2207      	movs	r2, #7
 80053a8:	4393      	bics	r3, r2
 80053aa:	001a      	movs	r2, r3
 80053ac:	3208      	adds	r2, #8
 80053ae:	2188      	movs	r1, #136	@ 0x88
 80053b0:	1879      	adds	r1, r7, r1
 80053b2:	600a      	str	r2, [r1, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	69fe      	ldr	r6, [r7, #28]
 80053ba:	6dfd      	ldr	r5, [r7, #92]	@ 0x5c
 80053bc:	6a3c      	ldr	r4, [r7, #32]
 80053be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053c0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80053c2:	9104      	str	r1, [sp, #16]
 80053c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80053c6:	9103      	str	r1, [sp, #12]
 80053c8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80053ca:	9102      	str	r1, [sp, #8]
 80053cc:	9200      	str	r2, [sp, #0]
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	0033      	movs	r3, r6
 80053d2:	002a      	movs	r2, r5
 80053d4:	0021      	movs	r1, r4
 80053d6:	f7ff f9fd 	bl	80047d4 <_etoa>
 80053da:	0003      	movs	r3, r0
 80053dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
        format++;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	3301      	adds	r3, #1
 80053e2:	61bb      	str	r3, [r7, #24]
        break;
 80053e4:	e113      	b.n	800560e <_vsnprintf+0x8c2>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80053e6:	2301      	movs	r3, #1
 80053e8:	657b      	str	r3, [r7, #84]	@ 0x54
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80053ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ec:	2202      	movs	r2, #2
 80053ee:	4013      	ands	r3, r2
 80053f0:	d10e      	bne.n	8005410 <_vsnprintf+0x6c4>
          while (l++ < width) {
 80053f2:	e007      	b.n	8005404 <_vsnprintf+0x6b8>
            out(' ', buffer, idx++, maxlen);
 80053f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80053f6:	1c53      	adds	r3, r2, #1
 80053f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	6a39      	ldr	r1, [r7, #32]
 80053fe:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005400:	2020      	movs	r0, #32
 8005402:	47a0      	blx	r4
          while (l++ < width) {
 8005404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	657a      	str	r2, [r7, #84]	@ 0x54
 800540a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800540c:	429a      	cmp	r2, r3
 800540e:	d8f1      	bhi.n	80053f4 <_vsnprintf+0x6a8>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005410:	2388      	movs	r3, #136	@ 0x88
 8005412:	18fb      	adds	r3, r7, r3
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	2188      	movs	r1, #136	@ 0x88
 800541a:	1879      	adds	r1, r7, r1
 800541c:	600a      	str	r2, [r1, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	b2d8      	uxtb	r0, r3
 8005422:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005424:	1c53      	adds	r3, r2, #1
 8005426:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	6a39      	ldr	r1, [r7, #32]
 800542c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800542e:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8005430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005432:	2202      	movs	r2, #2
 8005434:	4013      	ands	r3, r2
 8005436:	d00e      	beq.n	8005456 <_vsnprintf+0x70a>
          while (l++ < width) {
 8005438:	e007      	b.n	800544a <_vsnprintf+0x6fe>
            out(' ', buffer, idx++, maxlen);
 800543a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800543c:	1c53      	adds	r3, r2, #1
 800543e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	6a39      	ldr	r1, [r7, #32]
 8005444:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005446:	2020      	movs	r0, #32
 8005448:	47a0      	blx	r4
          while (l++ < width) {
 800544a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	657a      	str	r2, [r7, #84]	@ 0x54
 8005450:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005452:	429a      	cmp	r2, r3
 8005454:	d8f1      	bhi.n	800543a <_vsnprintf+0x6ee>
          }
        }
        format++;
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	3301      	adds	r3, #1
 800545a:	61bb      	str	r3, [r7, #24]
        break;
 800545c:	e0d7      	b.n	800560e <_vsnprintf+0x8c2>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800545e:	2388      	movs	r3, #136	@ 0x88
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	1d1a      	adds	r2, r3, #4
 8005466:	2188      	movs	r1, #136	@ 0x88
 8005468:	1879      	adds	r1, r7, r1
 800546a:	600a      	str	r2, [r1, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	653b      	str	r3, [r7, #80]	@ 0x50
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8005470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <_vsnprintf+0x72e>
 8005476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005478:	e001      	b.n	800547e <_vsnprintf+0x732>
 800547a:	2301      	movs	r3, #1
 800547c:	425b      	negs	r3, r3
 800547e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005480:	0019      	movs	r1, r3
 8005482:	0010      	movs	r0, r2
 8005484:	f7fe fd12 	bl	8003eac <_strnlen_s>
 8005488:	0003      	movs	r3, r0
 800548a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800548c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800548e:	2380      	movs	r3, #128	@ 0x80
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4013      	ands	r3, r2
 8005494:	d005      	beq.n	80054a2 <_vsnprintf+0x756>
          l = (l < precision ? l : precision);
 8005496:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800549a:	4293      	cmp	r3, r2
 800549c:	d900      	bls.n	80054a0 <_vsnprintf+0x754>
 800549e:	0013      	movs	r3, r2
 80054a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
        if (!(flags & FLAGS_LEFT)) {
 80054a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a4:	2202      	movs	r2, #2
 80054a6:	4013      	ands	r3, r2
 80054a8:	d11a      	bne.n	80054e0 <_vsnprintf+0x794>
          while (l++ < width) {
 80054aa:	e007      	b.n	80054bc <_vsnprintf+0x770>
            out(' ', buffer, idx++, maxlen);
 80054ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054ae:	1c53      	adds	r3, r2, #1
 80054b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	6a39      	ldr	r1, [r7, #32]
 80054b6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80054b8:	2020      	movs	r0, #32
 80054ba:	47a0      	blx	r4
          while (l++ < width) {
 80054bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054c2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d8f1      	bhi.n	80054ac <_vsnprintf+0x760>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80054c8:	e00a      	b.n	80054e0 <_vsnprintf+0x794>
          out(*(p++), buffer, idx++, maxlen);
 80054ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	653a      	str	r2, [r7, #80]	@ 0x50
 80054d0:	7818      	ldrb	r0, [r3, #0]
 80054d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054d4:	1c53      	adds	r3, r2, #1
 80054d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	6a39      	ldr	r1, [r7, #32]
 80054dc:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80054de:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80054e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <_vsnprintf+0x7b0>
 80054e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054ea:	2380      	movs	r3, #128	@ 0x80
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4013      	ands	r3, r2
 80054f0:	d0eb      	beq.n	80054ca <_vsnprintf+0x77e>
 80054f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054f4:	1e5a      	subs	r2, r3, #1
 80054f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e6      	bne.n	80054ca <_vsnprintf+0x77e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80054fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054fe:	2202      	movs	r2, #2
 8005500:	4013      	ands	r3, r2
 8005502:	d00e      	beq.n	8005522 <_vsnprintf+0x7d6>
          while (l++ < width) {
 8005504:	e007      	b.n	8005516 <_vsnprintf+0x7ca>
            out(' ', buffer, idx++, maxlen);
 8005506:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005508:	1c53      	adds	r3, r2, #1
 800550a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	6a39      	ldr	r1, [r7, #32]
 8005510:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005512:	2020      	movs	r0, #32
 8005514:	47a0      	blx	r4
          while (l++ < width) {
 8005516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800551c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800551e:	429a      	cmp	r2, r3
 8005520:	d8f1      	bhi.n	8005506 <_vsnprintf+0x7ba>
          }
        }
        format++;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	3301      	adds	r3, #1
 8005526:	61bb      	str	r3, [r7, #24]
        break;
 8005528:	e071      	b.n	800560e <_vsnprintf+0x8c2>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800552a:	2308      	movs	r3, #8
 800552c:	66bb      	str	r3, [r7, #104]	@ 0x68
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800552e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005530:	2221      	movs	r2, #33	@ 0x21
 8005532:	4313      	orrs	r3, r2
 8005534:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005536:	212b      	movs	r1, #43	@ 0x2b
 8005538:	2318      	movs	r3, #24
 800553a:	18cb      	adds	r3, r1, r3
 800553c:	19db      	adds	r3, r3, r7
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
        if (is_ll) {
 8005542:	2318      	movs	r3, #24
 8005544:	18cb      	adds	r3, r1, r3
 8005546:	19db      	adds	r3, r3, r7
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d025      	beq.n	800559a <_vsnprintf+0x84e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800554e:	2388      	movs	r3, #136	@ 0x88
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	1d1a      	adds	r2, r3, #4
 8005556:	2188      	movs	r1, #136	@ 0x88
 8005558:	1879      	adds	r1, r7, r1
 800555a:	600a      	str	r2, [r1, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	2300      	movs	r3, #0
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	69fd      	ldr	r5, [r7, #28]
 8005566:	6dfc      	ldr	r4, [r7, #92]	@ 0x5c
 8005568:	6a39      	ldr	r1, [r7, #32]
 800556a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800556c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800556e:	9308      	str	r3, [sp, #32]
 8005570:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005572:	9307      	str	r3, [sp, #28]
 8005574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005576:	9306      	str	r3, [sp, #24]
 8005578:	2210      	movs	r2, #16
 800557a:	2300      	movs	r3, #0
 800557c:	9204      	str	r2, [sp, #16]
 800557e:	9305      	str	r3, [sp, #20]
 8005580:	2300      	movs	r3, #0
 8005582:	9302      	str	r3, [sp, #8]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	9200      	str	r2, [sp, #0]
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	002b      	movs	r3, r5
 800558e:	0022      	movs	r2, r4
 8005590:	f7fe fe6f 	bl	8004272 <_ntoa_long_long>
 8005594:	0003      	movs	r3, r0
 8005596:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005598:	e01c      	b.n	80055d4 <_vsnprintf+0x888>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800559a:	2388      	movs	r3, #136	@ 0x88
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	1d1a      	adds	r2, r3, #4
 80055a2:	2188      	movs	r1, #136	@ 0x88
 80055a4:	1879      	adds	r1, r7, r1
 80055a6:	600a      	str	r2, [r1, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	001d      	movs	r5, r3
 80055ac:	69fc      	ldr	r4, [r7, #28]
 80055ae:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055b0:	6a39      	ldr	r1, [r7, #32]
 80055b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b6:	9305      	str	r3, [sp, #20]
 80055b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055ba:	9304      	str	r3, [sp, #16]
 80055bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055be:	9303      	str	r3, [sp, #12]
 80055c0:	2310      	movs	r3, #16
 80055c2:	9302      	str	r3, [sp, #8]
 80055c4:	2300      	movs	r3, #0
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	9500      	str	r5, [sp, #0]
 80055ca:	0023      	movs	r3, r4
 80055cc:	f7fe fde8 	bl	80041a0 <_ntoa_long>
 80055d0:	0003      	movs	r3, r0
 80055d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	3301      	adds	r3, #1
 80055d8:	61bb      	str	r3, [r7, #24]
        break;
 80055da:	e018      	b.n	800560e <_vsnprintf+0x8c2>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80055dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055de:	1c53      	adds	r3, r2, #1
 80055e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	6a39      	ldr	r1, [r7, #32]
 80055e6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80055e8:	2025      	movs	r0, #37	@ 0x25
 80055ea:	47a0      	blx	r4
        format++;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	3301      	adds	r3, #1
 80055f0:	61bb      	str	r3, [r7, #24]
        break;
 80055f2:	e00c      	b.n	800560e <_vsnprintf+0x8c2>

      default :
        out(*format, buffer, idx++, maxlen);
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	7818      	ldrb	r0, [r3, #0]
 80055f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80055fa:	1c53      	adds	r3, r2, #1
 80055fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	6a39      	ldr	r1, [r7, #32]
 8005602:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005604:	47a0      	blx	r4
        format++;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3301      	adds	r3, #1
 800560a:	61bb      	str	r3, [r7, #24]
        break;
 800560c:	46c0      	nop			@ (mov r8, r8)
  while (*format)
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <_vsnprintf+0x8ce>
 8005616:	f7ff fbad 	bl	8004d74 <_vsnprintf+0x28>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800561a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <_vsnprintf+0x8dc>
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	1e5a      	subs	r2, r3, #1
 8005626:	e000      	b.n	800562a <_vsnprintf+0x8de>
 8005628:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	6a39      	ldr	r1, [r7, #32]
 800562e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005630:	2000      	movs	r0, #0
 8005632:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8005634:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8005636:	0018      	movs	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	b01c      	add	sp, #112	@ 0x70
 800563c:	bc80      	pop	{r7}
 800563e:	46b8      	mov	r8, r7
 8005640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005642:	46c0      	nop			@ (mov r8, r8)

08005644 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8005644:	b40f      	push	{r0, r1, r2, r3}
 8005646:	b590      	push	{r4, r7, lr}
 8005648:	b087      	sub	sp, #28
 800564a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800564c:	2324      	movs	r3, #36	@ 0x24
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8005652:	6a3c      	ldr	r4, [r7, #32]
 8005654:	2301      	movs	r3, #1
 8005656:	425a      	negs	r2, r3
 8005658:	1d39      	adds	r1, r7, #4
 800565a:	4808      	ldr	r0, [pc, #32]	@ (800567c <printf_+0x38>)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	0023      	movs	r3, r4
 8005662:	f7ff fb73 	bl	8004d4c <_vsnprintf>
 8005666:	0003      	movs	r3, r0
 8005668:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 800566a:	68fb      	ldr	r3, [r7, #12]
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b005      	add	sp, #20
 8005672:	bc90      	pop	{r4, r7}
 8005674:	bc08      	pop	{r3}
 8005676:	b004      	add	sp, #16
 8005678:	4718      	bx	r3
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	08003e7d 	.word	0x08003e7d

08005680 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8005680:	b40e      	push	{r1, r2, r3}
 8005682:	b590      	push	{r4, r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af02      	add	r7, sp, #8
 8005688:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800568a:	2320      	movs	r3, #32
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8005690:	69fc      	ldr	r4, [r7, #28]
 8005692:	2301      	movs	r3, #1
 8005694:	425a      	negs	r2, r3
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	4807      	ldr	r0, [pc, #28]	@ (80056b8 <sprintf_+0x38>)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	0023      	movs	r3, r4
 80056a0:	f7ff fb54 	bl	8004d4c <_vsnprintf>
 80056a4:	0003      	movs	r3, r0
 80056a6:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 80056a8:	68fb      	ldr	r3, [r7, #12]
}
 80056aa:	0018      	movs	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b004      	add	sp, #16
 80056b0:	bc90      	pop	{r4, r7}
 80056b2:	bc08      	pop	{r3}
 80056b4:	b003      	add	sp, #12
 80056b6:	4718      	bx	r3
 80056b8:	08003e31 	.word	0x08003e31

080056bc <_putchar>:
  va_end(va);
  return ret;
}


void _putchar(char character) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	0002      	movs	r2, r0
 80056c4:	1dfb      	adds	r3, r7, #7
 80056c6:	701a      	strb	r2, [r3, #0]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	while( !( USART2->ISR & USART_ISR_TXE_TXFNF ) ) {};
 80056c8:	46c0      	nop			@ (mov r8, r8)
 80056ca:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <_putchar+0x28>)
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	2280      	movs	r2, #128	@ 0x80
 80056d0:	4013      	ands	r3, r2
 80056d2:	d0fa      	beq.n	80056ca <_putchar+0xe>
      USART2->TDR = character;
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <_putchar+0x28>)
 80056d6:	1dfa      	adds	r2, r7, #7
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	629a      	str	r2, [r3, #40]	@ 0x28
		
}
 80056dc:	46c0      	nop			@ (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	b002      	add	sp, #8
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40004400 	.word	0x40004400

080056e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	0002      	movs	r2, r0
 80056f0:	1dfb      	adds	r3, r7, #7
 80056f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80056f4:	1dfb      	adds	r3, r7, #7
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80056fa:	d809      	bhi.n	8005710 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056fc:	1dfb      	adds	r3, r7, #7
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	001a      	movs	r2, r3
 8005702:	231f      	movs	r3, #31
 8005704:	401a      	ands	r2, r3
 8005706:	4b04      	ldr	r3, [pc, #16]	@ (8005718 <__NVIC_EnableIRQ+0x30>)
 8005708:	2101      	movs	r1, #1
 800570a:	4091      	lsls	r1, r2
 800570c:	000a      	movs	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005710:	46c0      	nop			@ (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}
 8005718:	e000e100 	.word	0xe000e100

0800571c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800571c:	b590      	push	{r4, r7, lr}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	0002      	movs	r2, r0
 8005724:	6039      	str	r1, [r7, #0]
 8005726:	1dfb      	adds	r3, r7, #7
 8005728:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800572a:	1dfb      	adds	r3, r7, #7
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005730:	d828      	bhi.n	8005784 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005732:	4a2f      	ldr	r2, [pc, #188]	@ (80057f0 <__NVIC_SetPriority+0xd4>)
 8005734:	1dfb      	adds	r3, r7, #7
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b25b      	sxtb	r3, r3
 800573a:	089b      	lsrs	r3, r3, #2
 800573c:	33c0      	adds	r3, #192	@ 0xc0
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	589b      	ldr	r3, [r3, r2]
 8005742:	1dfa      	adds	r2, r7, #7
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	0011      	movs	r1, r2
 8005748:	2203      	movs	r2, #3
 800574a:	400a      	ands	r2, r1
 800574c:	00d2      	lsls	r2, r2, #3
 800574e:	21ff      	movs	r1, #255	@ 0xff
 8005750:	4091      	lsls	r1, r2
 8005752:	000a      	movs	r2, r1
 8005754:	43d2      	mvns	r2, r2
 8005756:	401a      	ands	r2, r3
 8005758:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	019b      	lsls	r3, r3, #6
 800575e:	22ff      	movs	r2, #255	@ 0xff
 8005760:	401a      	ands	r2, r3
 8005762:	1dfb      	adds	r3, r7, #7
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	0018      	movs	r0, r3
 8005768:	2303      	movs	r3, #3
 800576a:	4003      	ands	r3, r0
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005770:	481f      	ldr	r0, [pc, #124]	@ (80057f0 <__NVIC_SetPriority+0xd4>)
 8005772:	1dfb      	adds	r3, r7, #7
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	b25b      	sxtb	r3, r3
 8005778:	089b      	lsrs	r3, r3, #2
 800577a:	430a      	orrs	r2, r1
 800577c:	33c0      	adds	r3, #192	@ 0xc0
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005782:	e031      	b.n	80057e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005784:	4a1b      	ldr	r2, [pc, #108]	@ (80057f4 <__NVIC_SetPriority+0xd8>)
 8005786:	1dfb      	adds	r3, r7, #7
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	0019      	movs	r1, r3
 800578c:	230f      	movs	r3, #15
 800578e:	400b      	ands	r3, r1
 8005790:	3b08      	subs	r3, #8
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	3306      	adds	r3, #6
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	18d3      	adds	r3, r2, r3
 800579a:	3304      	adds	r3, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	1dfa      	adds	r2, r7, #7
 80057a0:	7812      	ldrb	r2, [r2, #0]
 80057a2:	0011      	movs	r1, r2
 80057a4:	2203      	movs	r2, #3
 80057a6:	400a      	ands	r2, r1
 80057a8:	00d2      	lsls	r2, r2, #3
 80057aa:	21ff      	movs	r1, #255	@ 0xff
 80057ac:	4091      	lsls	r1, r2
 80057ae:	000a      	movs	r2, r1
 80057b0:	43d2      	mvns	r2, r2
 80057b2:	401a      	ands	r2, r3
 80057b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	22ff      	movs	r2, #255	@ 0xff
 80057bc:	401a      	ands	r2, r3
 80057be:	1dfb      	adds	r3, r7, #7
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	0018      	movs	r0, r3
 80057c4:	2303      	movs	r3, #3
 80057c6:	4003      	ands	r3, r0
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057cc:	4809      	ldr	r0, [pc, #36]	@ (80057f4 <__NVIC_SetPriority+0xd8>)
 80057ce:	1dfb      	adds	r3, r7, #7
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	001c      	movs	r4, r3
 80057d4:	230f      	movs	r3, #15
 80057d6:	4023      	ands	r3, r4
 80057d8:	3b08      	subs	r3, #8
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	430a      	orrs	r2, r1
 80057de:	3306      	adds	r3, #6
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	18c3      	adds	r3, r0, r3
 80057e4:	3304      	adds	r3, #4
 80057e6:	601a      	str	r2, [r3, #0]
}
 80057e8:	46c0      	nop			@ (mov r8, r8)
 80057ea:	46bd      	mov	sp, r7
 80057ec:	b003      	add	sp, #12
 80057ee:	bd90      	pop	{r4, r7, pc}
 80057f0:	e000e100 	.word	0xe000e100
 80057f4:	e000ed00 	.word	0xe000ed00

080057f8 <LL_EXTI_EnableIT_0_31>:
  *         (*) value not defined in all devices.
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005800:	4a05      	ldr	r2, [pc, #20]	@ (8005818 <LL_EXTI_EnableIT_0_31+0x20>)
 8005802:	2380      	movs	r3, #128	@ 0x80
 8005804:	58d2      	ldr	r2, [r2, r3]
 8005806:	4904      	ldr	r1, [pc, #16]	@ (8005818 <LL_EXTI_EnableIT_0_31+0x20>)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4313      	orrs	r3, r2
 800580c:	2280      	movs	r2, #128	@ 0x80
 800580e:	508b      	str	r3, [r1, r2]
}
 8005810:	46c0      	nop			@ (mov r8, r8)
 8005812:	46bd      	mov	sp, r7
 8005814:	b002      	add	sp, #8
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021800 	.word	0x40021800

0800581c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005824:	4b04      	ldr	r3, [pc, #16]	@ (8005838 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005826:	6819      	ldr	r1, [r3, #0]
 8005828:	4b03      	ldr	r3, [pc, #12]	@ (8005838 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	430a      	orrs	r2, r1
 800582e:	601a      	str	r2, [r3, #0]
}
 8005830:	46c0      	nop			@ (mov r8, r8)
 8005832:	46bd      	mov	sp, r7
 8005834:	b002      	add	sp, #8
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40021800 	.word	0x40021800

0800583c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005840:	4b22      	ldr	r3, [pc, #136]	@ (80058cc <MX_RTC_Init+0x90>)
 8005842:	4a23      	ldr	r2, [pc, #140]	@ (80058d0 <MX_RTC_Init+0x94>)
 8005844:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005846:	4b21      	ldr	r3, [pc, #132]	@ (80058cc <MX_RTC_Init+0x90>)
 8005848:	2200      	movs	r2, #0
 800584a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800584c:	4b1f      	ldr	r3, [pc, #124]	@ (80058cc <MX_RTC_Init+0x90>)
 800584e:	227f      	movs	r2, #127	@ 0x7f
 8005850:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005852:	4b1e      	ldr	r3, [pc, #120]	@ (80058cc <MX_RTC_Init+0x90>)
 8005854:	22ff      	movs	r2, #255	@ 0xff
 8005856:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005858:	4b1c      	ldr	r3, [pc, #112]	@ (80058cc <MX_RTC_Init+0x90>)
 800585a:	2200      	movs	r2, #0
 800585c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800585e:	4b1b      	ldr	r3, [pc, #108]	@ (80058cc <MX_RTC_Init+0x90>)
 8005860:	2200      	movs	r2, #0
 8005862:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005864:	4b19      	ldr	r3, [pc, #100]	@ (80058cc <MX_RTC_Init+0x90>)
 8005866:	2200      	movs	r2, #0
 8005868:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800586a:	4b18      	ldr	r3, [pc, #96]	@ (80058cc <MX_RTC_Init+0x90>)
 800586c:	2280      	movs	r2, #128	@ 0x80
 800586e:	05d2      	lsls	r2, r2, #23
 8005870:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8005872:	4b16      	ldr	r3, [pc, #88]	@ (80058cc <MX_RTC_Init+0x90>)
 8005874:	2200      	movs	r2, #0
 8005876:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8005878:	4b14      	ldr	r3, [pc, #80]	@ (80058cc <MX_RTC_Init+0x90>)
 800587a:	2200      	movs	r2, #0
 800587c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800587e:	4b13      	ldr	r3, [pc, #76]	@ (80058cc <MX_RTC_Init+0x90>)
 8005880:	0018      	movs	r0, r3
 8005882:	f003 f917 	bl	8008ab4 <HAL_RTC_Init>
 8005886:	1e03      	subs	r3, r0, #0
 8005888:	d001      	beq.n	800588e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800588a:	f7fe facb 	bl	8003e24 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 800588e:	480f      	ldr	r0, [pc, #60]	@ (80058cc <MX_RTC_Init+0x90>)
 8005890:	2300      	movs	r3, #0
 8005892:	2204      	movs	r2, #4
 8005894:	213c      	movs	r1, #60	@ 0x3c
 8005896:	f003 fa05 	bl	8008ca4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800589a:	1e03      	subs	r3, r0, #0
 800589c:	d001      	beq.n	80058a2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800589e:	f7fe fac1 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // Configure EXTI line 20 for RTC wakeup interrupt
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_20);
 80058a2:	2380      	movs	r3, #128	@ 0x80
 80058a4:	035b      	lsls	r3, r3, #13
 80058a6:	0018      	movs	r0, r3
 80058a8:	f7ff ffa6 	bl	80057f8 <LL_EXTI_EnableIT_0_31>
  LL_EXTI_EnableRisingTrig_0_31(LL_EXTI_LINE_20);
 80058ac:	2380      	movs	r3, #128	@ 0x80
 80058ae:	035b      	lsls	r3, r3, #13
 80058b0:	0018      	movs	r0, r3
 80058b2:	f7ff ffb3 	bl	800581c <LL_EXTI_EnableRisingTrig_0_31>

  // Enable RTC wakeup interrupt in NVIC
      NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80058b6:	2002      	movs	r0, #2
 80058b8:	f7ff ff16 	bl	80056e8 <__NVIC_EnableIRQ>
      NVIC_SetPriority(RTC_TAMP_IRQn, 0);
 80058bc:	2100      	movs	r1, #0
 80058be:	2002      	movs	r0, #2
 80058c0:	f7ff ff2c 	bl	800571c <__NVIC_SetPriority>

  /* USER CODE END RTC_Init 2 */

}
 80058c4:	46c0      	nop			@ (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			@ (mov r8, r8)
 80058cc:	20000420 	.word	0x20000420
 80058d0:	40002800 	.word	0x40002800

080058d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b095      	sub	sp, #84	@ 0x54
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80058dc:	240c      	movs	r4, #12
 80058de:	193b      	adds	r3, r7, r4
 80058e0:	0018      	movs	r0, r3
 80058e2:	2344      	movs	r3, #68	@ 0x44
 80058e4:	001a      	movs	r2, r3
 80058e6:	2100      	movs	r1, #0
 80058e8:	f008 f936 	bl	800db58 <memset>
  if(rtcHandle->Instance==RTC)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1a      	ldr	r2, [pc, #104]	@ (800595c <HAL_RTC_MspInit+0x88>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d12e      	bne.n	8005954 <HAL_RTC_MspInit+0x80>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80058f6:	193b      	adds	r3, r7, r4
 80058f8:	2280      	movs	r2, #128	@ 0x80
 80058fa:	0212      	lsls	r2, r2, #8
 80058fc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80058fe:	193b      	adds	r3, r7, r4
 8005900:	2280      	movs	r2, #128	@ 0x80
 8005902:	0092      	lsls	r2, r2, #2
 8005904:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005906:	193b      	adds	r3, r7, r4
 8005908:	0018      	movs	r0, r3
 800590a:	f002 f8a3 	bl	8007a54 <HAL_RCCEx_PeriphCLKConfig>
 800590e:	1e03      	subs	r3, r0, #0
 8005910:	d001      	beq.n	8005916 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005912:	f7fe fa87 	bl	8003e24 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005916:	4a12      	ldr	r2, [pc, #72]	@ (8005960 <HAL_RTC_MspInit+0x8c>)
 8005918:	2390      	movs	r3, #144	@ 0x90
 800591a:	58d3      	ldr	r3, [r2, r3]
 800591c:	4910      	ldr	r1, [pc, #64]	@ (8005960 <HAL_RTC_MspInit+0x8c>)
 800591e:	2280      	movs	r2, #128	@ 0x80
 8005920:	0212      	lsls	r2, r2, #8
 8005922:	4313      	orrs	r3, r2
 8005924:	2290      	movs	r2, #144	@ 0x90
 8005926:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005928:	4b0d      	ldr	r3, [pc, #52]	@ (8005960 <HAL_RTC_MspInit+0x8c>)
 800592a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800592c:	4b0c      	ldr	r3, [pc, #48]	@ (8005960 <HAL_RTC_MspInit+0x8c>)
 800592e:	2180      	movs	r1, #128	@ 0x80
 8005930:	00c9      	lsls	r1, r1, #3
 8005932:	430a      	orrs	r2, r1
 8005934:	659a      	str	r2, [r3, #88]	@ 0x58
 8005936:	4b0a      	ldr	r3, [pc, #40]	@ (8005960 <HAL_RTC_MspInit+0x8c>)
 8005938:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800593a:	2380      	movs	r3, #128	@ 0x80
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4013      	ands	r3, r2
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	68bb      	ldr	r3, [r7, #8]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8005944:	2200      	movs	r2, #0
 8005946:	2100      	movs	r1, #0
 8005948:	2002      	movs	r0, #2
 800594a:	f001 f813 	bl	8006974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800594e:	2002      	movs	r0, #2
 8005950:	f001 f825 	bl	800699e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005954:	46c0      	nop			@ (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b015      	add	sp, #84	@ 0x54
 800595a:	bd90      	pop	{r4, r7, pc}
 800595c:	40002800 	.word	0x40002800
 8005960:	40021000 	.word	0x40021000

08005964 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005968:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <MX_SPI1_Init+0x74>)
 800596a:	4a1c      	ldr	r2, [pc, #112]	@ (80059dc <MX_SPI1_Init+0x78>)
 800596c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800596e:	4b1a      	ldr	r3, [pc, #104]	@ (80059d8 <MX_SPI1_Init+0x74>)
 8005970:	2282      	movs	r2, #130	@ 0x82
 8005972:	0052      	lsls	r2, r2, #1
 8005974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005976:	4b18      	ldr	r3, [pc, #96]	@ (80059d8 <MX_SPI1_Init+0x74>)
 8005978:	2200      	movs	r2, #0
 800597a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800597c:	4b16      	ldr	r3, [pc, #88]	@ (80059d8 <MX_SPI1_Init+0x74>)
 800597e:	22e0      	movs	r2, #224	@ 0xe0
 8005980:	00d2      	lsls	r2, r2, #3
 8005982:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005984:	4b14      	ldr	r3, [pc, #80]	@ (80059d8 <MX_SPI1_Init+0x74>)
 8005986:	2200      	movs	r2, #0
 8005988:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800598a:	4b13      	ldr	r3, [pc, #76]	@ (80059d8 <MX_SPI1_Init+0x74>)
 800598c:	2200      	movs	r2, #0
 800598e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005990:	4b11      	ldr	r3, [pc, #68]	@ (80059d8 <MX_SPI1_Init+0x74>)
 8005992:	2280      	movs	r2, #128	@ 0x80
 8005994:	0092      	lsls	r2, r2, #2
 8005996:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005998:	4b0f      	ldr	r3, [pc, #60]	@ (80059d8 <MX_SPI1_Init+0x74>)
 800599a:	2210      	movs	r2, #16
 800599c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800599e:	4b0e      	ldr	r3, [pc, #56]	@ (80059d8 <MX_SPI1_Init+0x74>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80059a4:	4b0c      	ldr	r3, [pc, #48]	@ (80059d8 <MX_SPI1_Init+0x74>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059aa:	4b0b      	ldr	r3, [pc, #44]	@ (80059d8 <MX_SPI1_Init+0x74>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80059b0:	4b09      	ldr	r3, [pc, #36]	@ (80059d8 <MX_SPI1_Init+0x74>)
 80059b2:	2207      	movs	r2, #7
 80059b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80059b6:	4b08      	ldr	r3, [pc, #32]	@ (80059d8 <MX_SPI1_Init+0x74>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80059bc:	4b06      	ldr	r3, [pc, #24]	@ (80059d8 <MX_SPI1_Init+0x74>)
 80059be:	2208      	movs	r2, #8
 80059c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80059c2:	4b05      	ldr	r3, [pc, #20]	@ (80059d8 <MX_SPI1_Init+0x74>)
 80059c4:	0018      	movs	r0, r3
 80059c6:	f003 fa31 	bl	8008e2c <HAL_SPI_Init>
 80059ca:	1e03      	subs	r3, r0, #0
 80059cc:	d001      	beq.n	80059d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80059ce:	f7fe fa29 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80059d2:	46c0      	nop			@ (mov r8, r8)
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	20000450 	.word	0x20000450
 80059dc:	40013000 	.word	0x40013000

080059e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b08b      	sub	sp, #44	@ 0x2c
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e8:	2414      	movs	r4, #20
 80059ea:	193b      	adds	r3, r7, r4
 80059ec:	0018      	movs	r0, r3
 80059ee:	2314      	movs	r3, #20
 80059f0:	001a      	movs	r2, r3
 80059f2:	2100      	movs	r1, #0
 80059f4:	f008 f8b0 	bl	800db58 <memset>
  if(spiHandle->Instance==SPI1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a6c <HAL_SPI_MspInit+0x8c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d130      	bne.n	8005a64 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a02:	4b1b      	ldr	r3, [pc, #108]	@ (8005a70 <HAL_SPI_MspInit+0x90>)
 8005a04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a06:	4b1a      	ldr	r3, [pc, #104]	@ (8005a70 <HAL_SPI_MspInit+0x90>)
 8005a08:	2180      	movs	r1, #128	@ 0x80
 8005a0a:	0149      	lsls	r1, r1, #5
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005a10:	4b17      	ldr	r3, [pc, #92]	@ (8005a70 <HAL_SPI_MspInit+0x90>)
 8005a12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a14:	2380      	movs	r3, #128	@ 0x80
 8005a16:	015b      	lsls	r3, r3, #5
 8005a18:	4013      	ands	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
 8005a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a1e:	4b14      	ldr	r3, [pc, #80]	@ (8005a70 <HAL_SPI_MspInit+0x90>)
 8005a20:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a22:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <HAL_SPI_MspInit+0x90>)
 8005a24:	2101      	movs	r1, #1
 8005a26:	430a      	orrs	r2, r1
 8005a28:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005a2a:	4b11      	ldr	r3, [pc, #68]	@ (8005a70 <HAL_SPI_MspInit+0x90>)
 8005a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a2e:	2201      	movs	r2, #1
 8005a30:	4013      	ands	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005a36:	0021      	movs	r1, r4
 8005a38:	187b      	adds	r3, r7, r1
 8005a3a:	22e0      	movs	r2, #224	@ 0xe0
 8005a3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a3e:	187b      	adds	r3, r7, r1
 8005a40:	2202      	movs	r2, #2
 8005a42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a44:	187b      	adds	r3, r7, r1
 8005a46:	2200      	movs	r2, #0
 8005a48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a4a:	187b      	adds	r3, r7, r1
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005a50:	187b      	adds	r3, r7, r1
 8005a52:	2205      	movs	r2, #5
 8005a54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a56:	187a      	adds	r2, r7, r1
 8005a58:	23a0      	movs	r3, #160	@ 0xa0
 8005a5a:	05db      	lsls	r3, r3, #23
 8005a5c:	0011      	movs	r1, r2
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f000 ffba 	bl	80069d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005a64:	46c0      	nop			@ (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b00b      	add	sp, #44	@ 0x2c
 8005a6a:	bd90      	pop	{r4, r7, pc}
 8005a6c:	40013000 	.word	0x40013000
 8005a70:	40021000 	.word	0x40021000

08005a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab8 <HAL_MspInit+0x44>)
 8005a7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab8 <HAL_MspInit+0x44>)
 8005a80:	2180      	movs	r1, #128	@ 0x80
 8005a82:	0549      	lsls	r1, r1, #21
 8005a84:	430a      	orrs	r2, r1
 8005a86:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a88:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab8 <HAL_MspInit+0x44>)
 8005a8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a8c:	2380      	movs	r3, #128	@ 0x80
 8005a8e:	055b      	lsls	r3, r3, #21
 8005a90:	4013      	ands	r3, r2
 8005a92:	607b      	str	r3, [r7, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a96:	4b08      	ldr	r3, [pc, #32]	@ (8005ab8 <HAL_MspInit+0x44>)
 8005a98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a9a:	4b07      	ldr	r3, [pc, #28]	@ (8005ab8 <HAL_MspInit+0x44>)
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	661a      	str	r2, [r3, #96]	@ 0x60
 8005aa2:	4b05      	ldr	r3, [pc, #20]	@ (8005ab8 <HAL_MspInit+0x44>)
 8005aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005aae:	46c0      	nop			@ (mov r8, r8)
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b002      	add	sp, #8
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	40021000 	.word	0x40021000

08005abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ac0:	46c0      	nop			@ (mov r8, r8)
 8005ac2:	e7fd      	b.n	8005ac0 <NMI_Handler+0x4>

08005ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ac8:	46c0      	nop			@ (mov r8, r8)
 8005aca:	e7fd      	b.n	8005ac8 <HardFault_Handler+0x4>

08005acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ad0:	46c0      	nop			@ (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ae4:	f000 fa30 	bl	8005f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ae8:	46c0      	nop			@ (mov r8, r8)
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts (combined EXTI lines 20 & 21).
  */
void RTC_TAMP_IRQHandler(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005af4:	4b03      	ldr	r3, [pc, #12]	@ (8005b04 <RTC_TAMP_IRQHandler+0x14>)
 8005af6:	0018      	movs	r0, r3
 8005af8:	f003 f976 	bl	8008de8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8005afc:	46c0      	nop			@ (mov r8, r8)
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			@ (mov r8, r8)
 8005b04:	20000420 	.word	0x20000420

08005b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  return 1;
 8005b0c:	2301      	movs	r3, #1
}
 8005b0e:	0018      	movs	r0, r3
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <_kill>:

int _kill(int pid, int sig)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005b1e:	f008 f89d 	bl	800dc5c <__errno>
 8005b22:	0003      	movs	r3, r0
 8005b24:	2216      	movs	r2, #22
 8005b26:	601a      	str	r2, [r3, #0]
  return -1;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	425b      	negs	r3, r3
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b002      	add	sp, #8
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <_exit>:

void _exit (int status)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	425a      	negs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	0011      	movs	r1, r2
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7ff ffe5 	bl	8005b14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	e7fd      	b.n	8005b4a <_exit+0x16>

08005b4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	e00a      	b.n	8005b76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005b60:	e000      	b.n	8005b64 <_read+0x16>
 8005b62:	bf00      	nop
 8005b64:	0001      	movs	r1, r0
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	60ba      	str	r2, [r7, #8]
 8005b6c:	b2ca      	uxtb	r2, r1
 8005b6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3301      	adds	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	dbf0      	blt.n	8005b60 <_read+0x12>
  }

  return len;
 8005b7e:	687b      	ldr	r3, [r7, #4]
}
 8005b80:	0018      	movs	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	b006      	add	sp, #24
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	e009      	b.n	8005bae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	60ba      	str	r2, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	e000      	b.n	8005ba8 <_write+0x20>
 8005ba6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	3301      	adds	r3, #1
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	dbf1      	blt.n	8005b9a <_write+0x12>
  }
  return len;
 8005bb6:	687b      	ldr	r3, [r7, #4]
}
 8005bb8:	0018      	movs	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b006      	add	sp, #24
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <_close>:

int _close(int file)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	425b      	negs	r3, r3
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b002      	add	sp, #8
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2280      	movs	r2, #128	@ 0x80
 8005be2:	0192      	lsls	r2, r2, #6
 8005be4:	605a      	str	r2, [r3, #4]
  return 0;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	0018      	movs	r0, r3
 8005bea:	46bd      	mov	sp, r7
 8005bec:	b002      	add	sp, #8
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <_isatty>:

int _isatty(int file)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005bf8:	2301      	movs	r3, #1
}
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	b002      	add	sp, #8
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	0018      	movs	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b004      	add	sp, #16
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c20:	4a14      	ldr	r2, [pc, #80]	@ (8005c74 <_sbrk+0x5c>)
 8005c22:	4b15      	ldr	r3, [pc, #84]	@ (8005c78 <_sbrk+0x60>)
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c2c:	4b13      	ldr	r3, [pc, #76]	@ (8005c7c <_sbrk+0x64>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c34:	4b11      	ldr	r3, [pc, #68]	@ (8005c7c <_sbrk+0x64>)
 8005c36:	4a12      	ldr	r2, [pc, #72]	@ (8005c80 <_sbrk+0x68>)
 8005c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c3a:	4b10      	ldr	r3, [pc, #64]	@ (8005c7c <_sbrk+0x64>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	18d3      	adds	r3, r2, r3
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d207      	bcs.n	8005c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c48:	f008 f808 	bl	800dc5c <__errno>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	220c      	movs	r2, #12
 8005c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c52:	2301      	movs	r3, #1
 8005c54:	425b      	negs	r3, r3
 8005c56:	e009      	b.n	8005c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c58:	4b08      	ldr	r3, [pc, #32]	@ (8005c7c <_sbrk+0x64>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c5e:	4b07      	ldr	r3, [pc, #28]	@ (8005c7c <_sbrk+0x64>)
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	18d2      	adds	r2, r2, r3
 8005c66:	4b05      	ldr	r3, [pc, #20]	@ (8005c7c <_sbrk+0x64>)
 8005c68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
}
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b006      	add	sp, #24
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20008000 	.word	0x20008000
 8005c78:	00000400 	.word	0x00000400
 8005c7c:	200004b4 	.word	0x200004b4
 8005c80:	200006f8 	.word	0x200006f8

08005c84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c88:	4b11      	ldr	r3, [pc, #68]	@ (8005cd0 <SystemInit+0x4c>)
 8005c8a:	2280      	movs	r2, #128	@ 0x80
 8005c8c:	0512      	lsls	r2, r2, #20
 8005c8e:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  if (((FLASH->SECR & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)           \
 8005c90:	4a10      	ldr	r2, [pc, #64]	@ (8005cd4 <SystemInit+0x50>)
 8005c92:	2380      	movs	r3, #128	@ 0x80
 8005c94:	58d2      	ldr	r2, [r2, r3]
 8005c96:	2380      	movs	r3, #128	@ 0x80
 8005c98:	025b      	lsls	r3, r3, #9
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	2380      	movs	r3, #128	@ 0x80
 8005c9e:	025b      	lsls	r3, r3, #9
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d112      	bne.n	8005cca <SystemInit+0x46>
      && (((FLASH->OPTR & FLASH_OPTR_RDP) != 0xCCU)                            \
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd4 <SystemInit+0x50>)
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	22ff      	movs	r2, #255	@ 0xff
 8005caa:	4013      	ands	r3, r2
 8005cac:	2bcc      	cmp	r3, #204	@ 0xcc
 8005cae:	d00c      	beq.n	8005cca <SystemInit+0x46>
          && ((FLASH->OPTR & FLASH_OPTR_RDP) != 0xAAU)))
 8005cb0:	4b08      	ldr	r3, [pc, #32]	@ (8005cd4 <SystemInit+0x50>)
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	22ff      	movs	r2, #255	@ 0xff
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2baa      	cmp	r3, #170	@ 0xaa
 8005cba:	d006      	beq.n	8005cca <SystemInit+0x46>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8005cbc:	4b05      	ldr	r3, [pc, #20]	@ (8005cd4 <SystemInit+0x50>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4b04      	ldr	r3, [pc, #16]	@ (8005cd4 <SystemInit+0x50>)
 8005cc2:	2180      	movs	r1, #128	@ 0x80
 8005cc4:	02c9      	lsls	r1, r1, #11
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8005cca:	46c0      	nop			@ (mov r8, r8)
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	e000ed00 	.word	0xe000ed00
 8005cd4:	40022000 	.word	0x40022000

08005cd8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005cdc:	4b22      	ldr	r3, [pc, #136]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005cde:	4a23      	ldr	r2, [pc, #140]	@ (8005d6c <MX_USART2_UART_Init+0x94>)
 8005ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8005ce2:	4b21      	ldr	r3, [pc, #132]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005ce4:	4a22      	ldr	r2, [pc, #136]	@ (8005d70 <MX_USART2_UART_Init+0x98>)
 8005ce6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005cee:	4b1e      	ldr	r3, [pc, #120]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005cfc:	220c      	movs	r2, #12
 8005cfe:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d00:	4b19      	ldr	r3, [pc, #100]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d06:	4b18      	ldr	r3, [pc, #96]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d0c:	4b16      	ldr	r3, [pc, #88]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d12:	4b15      	ldr	r3, [pc, #84]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d18:	4b13      	ldr	r3, [pc, #76]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005d1e:	4b12      	ldr	r3, [pc, #72]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005d20:	0018      	movs	r0, r3
 8005d22:	f003 f931 	bl	8008f88 <HAL_UART_Init>
 8005d26:	1e03      	subs	r3, r0, #0
 8005d28:	d001      	beq.n	8005d2e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8005d2a:	f7fe f87b 	bl	8003e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005d30:	2100      	movs	r1, #0
 8005d32:	0018      	movs	r0, r3
 8005d34:	f003 fdbe 	bl	80098b4 <HAL_UARTEx_SetTxFifoThreshold>
 8005d38:	1e03      	subs	r3, r0, #0
 8005d3a:	d001      	beq.n	8005d40 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8005d3c:	f7fe f872 	bl	8003e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d40:	4b09      	ldr	r3, [pc, #36]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005d42:	2100      	movs	r1, #0
 8005d44:	0018      	movs	r0, r3
 8005d46:	f003 fdf5 	bl	8009934 <HAL_UARTEx_SetRxFifoThreshold>
 8005d4a:	1e03      	subs	r3, r0, #0
 8005d4c:	d001      	beq.n	8005d52 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8005d4e:	f7fe f869 	bl	8003e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005d52:	4b05      	ldr	r3, [pc, #20]	@ (8005d68 <MX_USART2_UART_Init+0x90>)
 8005d54:	0018      	movs	r0, r3
 8005d56:	f003 fd73 	bl	8009840 <HAL_UARTEx_DisableFifoMode>
 8005d5a:	1e03      	subs	r3, r0, #0
 8005d5c:	d001      	beq.n	8005d62 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8005d5e:	f7fe f861 	bl	8003e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005d62:	46c0      	nop			@ (mov r8, r8)
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	200004b8 	.word	0x200004b8
 8005d6c:	40004400 	.word	0x40004400
 8005d70:	000f4240 	.word	0x000f4240

08005d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b09b      	sub	sp, #108	@ 0x6c
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d7c:	2354      	movs	r3, #84	@ 0x54
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	0018      	movs	r0, r3
 8005d82:	2314      	movs	r3, #20
 8005d84:	001a      	movs	r2, r3
 8005d86:	2100      	movs	r1, #0
 8005d88:	f007 fee6 	bl	800db58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d8c:	2410      	movs	r4, #16
 8005d8e:	193b      	adds	r3, r7, r4
 8005d90:	0018      	movs	r0, r3
 8005d92:	2344      	movs	r3, #68	@ 0x44
 8005d94:	001a      	movs	r2, r3
 8005d96:	2100      	movs	r1, #0
 8005d98:	f007 fede 	bl	800db58 <memset>
  if(uartHandle->Instance==USART2)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a22      	ldr	r2, [pc, #136]	@ (8005e2c <HAL_UART_MspInit+0xb8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d13e      	bne.n	8005e24 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005da6:	193b      	adds	r3, r7, r4
 8005da8:	2202      	movs	r2, #2
 8005daa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005dac:	193b      	adds	r3, r7, r4
 8005dae:	2200      	movs	r2, #0
 8005db0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005db2:	193b      	adds	r3, r7, r4
 8005db4:	0018      	movs	r0, r3
 8005db6:	f001 fe4d 	bl	8007a54 <HAL_RCCEx_PeriphCLKConfig>
 8005dba:	1e03      	subs	r3, r0, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005dbe:	f7fe f831 	bl	8003e24 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e30 <HAL_UART_MspInit+0xbc>)
 8005dc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e30 <HAL_UART_MspInit+0xbc>)
 8005dc8:	2180      	movs	r1, #128	@ 0x80
 8005dca:	0289      	lsls	r1, r1, #10
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	659a      	str	r2, [r3, #88]	@ 0x58
 8005dd0:	4b17      	ldr	r3, [pc, #92]	@ (8005e30 <HAL_UART_MspInit+0xbc>)
 8005dd2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005dd4:	2380      	movs	r3, #128	@ 0x80
 8005dd6:	029b      	lsls	r3, r3, #10
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dde:	4b14      	ldr	r3, [pc, #80]	@ (8005e30 <HAL_UART_MspInit+0xbc>)
 8005de0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005de2:	4b13      	ldr	r3, [pc, #76]	@ (8005e30 <HAL_UART_MspInit+0xbc>)
 8005de4:	2101      	movs	r1, #1
 8005de6:	430a      	orrs	r2, r1
 8005de8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005dea:	4b11      	ldr	r3, [pc, #68]	@ (8005e30 <HAL_UART_MspInit+0xbc>)
 8005dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dee:	2201      	movs	r2, #1
 8005df0:	4013      	ands	r3, r2
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005df6:	2154      	movs	r1, #84	@ 0x54
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	220c      	movs	r2, #12
 8005dfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dfe:	187b      	adds	r3, r7, r1
 8005e00:	2202      	movs	r2, #2
 8005e02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e04:	187b      	adds	r3, r7, r1
 8005e06:	2200      	movs	r2, #0
 8005e08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e0a:	187b      	adds	r3, r7, r1
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e10:	187b      	adds	r3, r7, r1
 8005e12:	2207      	movs	r2, #7
 8005e14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e16:	187a      	adds	r2, r7, r1
 8005e18:	23a0      	movs	r3, #160	@ 0xa0
 8005e1a:	05db      	lsls	r3, r3, #23
 8005e1c:	0011      	movs	r1, r2
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f000 fdda 	bl	80069d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005e24:	46c0      	nop			@ (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b01b      	add	sp, #108	@ 0x6c
 8005e2a:	bd90      	pop	{r4, r7, pc}
 8005e2c:	40004400 	.word	0x40004400
 8005e30:	40021000 	.word	0x40021000

08005e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005e34:	480d      	ldr	r0, [pc, #52]	@ (8005e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005e36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005e38:	f7ff ff24 	bl	8005c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e3c:	480c      	ldr	r0, [pc, #48]	@ (8005e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8005e3e:	490d      	ldr	r1, [pc, #52]	@ (8005e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e40:	4a0d      	ldr	r2, [pc, #52]	@ (8005e78 <LoopForever+0xe>)
  movs r3, #0
 8005e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e44:	e002      	b.n	8005e4c <LoopCopyDataInit>

08005e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e4a:	3304      	adds	r3, #4

08005e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e50:	d3f9      	bcc.n	8005e46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e52:	4a0a      	ldr	r2, [pc, #40]	@ (8005e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005e54:	4c0a      	ldr	r4, [pc, #40]	@ (8005e80 <LoopForever+0x16>)
  movs r3, #0
 8005e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e58:	e001      	b.n	8005e5e <LoopFillZerobss>

08005e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e5c:	3204      	adds	r2, #4

08005e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e60:	d3fb      	bcc.n	8005e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005e62:	f007 ff01 	bl	800dc68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005e66:	f7fd fc8d 	bl	8003784 <main>

08005e6a <LoopForever>:

LoopForever:
  b LoopForever
 8005e6a:	e7fe      	b.n	8005e6a <LoopForever>
  ldr   r0, =_estack
 8005e6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e74:	20000340 	.word	0x20000340
  ldr r2, =_sidata
 8005e78:	0801b7d8 	.word	0x0801b7d8
  ldr r2, =_sbss
 8005e7c:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8005e80:	200006f4 	.word	0x200006f4

08005e84 <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e84:	e7fe      	b.n	8005e84 <ADC_COMP1_2_IRQHandler>

08005e86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e8c:	1dfb      	adds	r3, r7, #7
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e92:	2003      	movs	r0, #3
 8005e94:	f000 f80e 	bl	8005eb4 <HAL_InitTick>
 8005e98:	1e03      	subs	r3, r0, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005e9c:	1dfb      	adds	r3, r7, #7
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e001      	b.n	8005ea8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ea4:	f7ff fde6 	bl	8005a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ea8:	1dfb      	adds	r3, r7, #7
 8005eaa:	781b      	ldrb	r3, [r3, #0]
}
 8005eac:	0018      	movs	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b002      	add	sp, #8
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005ebc:	230f      	movs	r3, #15
 8005ebe:	18fb      	adds	r3, r7, r3
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8005ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f3c <HAL_InitTick+0x88>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d02b      	beq.n	8005f24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8005f40 <HAL_InitTick+0x8c>)
 8005ece:	681c      	ldr	r4, [r3, #0]
 8005ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f3c <HAL_InitTick+0x88>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	0019      	movs	r1, r3
 8005ed6:	23fa      	movs	r3, #250	@ 0xfa
 8005ed8:	0098      	lsls	r0, r3, #2
 8005eda:	f7fa f931 	bl	8000140 <__udivsi3>
 8005ede:	0003      	movs	r3, r0
 8005ee0:	0019      	movs	r1, r3
 8005ee2:	0020      	movs	r0, r4
 8005ee4:	f7fa f92c 	bl	8000140 <__udivsi3>
 8005ee8:	0003      	movs	r3, r0
 8005eea:	0018      	movs	r0, r3
 8005eec:	f000 fd67 	bl	80069be <HAL_SYSTICK_Config>
 8005ef0:	1e03      	subs	r3, r0, #0
 8005ef2:	d112      	bne.n	8005f1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d80a      	bhi.n	8005f10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	2301      	movs	r3, #1
 8005efe:	425b      	negs	r3, r3
 8005f00:	2200      	movs	r2, #0
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 fd36 	bl	8006974 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f08:	4b0e      	ldr	r3, [pc, #56]	@ (8005f44 <HAL_InitTick+0x90>)
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	e00d      	b.n	8005f2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005f10:	230f      	movs	r3, #15
 8005f12:	18fb      	adds	r3, r7, r3
 8005f14:	2201      	movs	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e008      	b.n	8005f2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f1a:	230f      	movs	r3, #15
 8005f1c:	18fb      	adds	r3, r7, r3
 8005f1e:	2201      	movs	r2, #1
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	e003      	b.n	8005f2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f24:	230f      	movs	r3, #15
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	2201      	movs	r2, #1
 8005f2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005f2c:	230f      	movs	r3, #15
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	781b      	ldrb	r3, [r3, #0]
}
 8005f32:	0018      	movs	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b005      	add	sp, #20
 8005f38:	bd90      	pop	{r4, r7, pc}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	20000004 	.word	0x20000004
 8005f44:	20000008 	.word	0x20000008

08005f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f4c:	4b04      	ldr	r3, [pc, #16]	@ (8005f60 <HAL_IncTick+0x18>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	4b04      	ldr	r3, [pc, #16]	@ (8005f64 <HAL_IncTick+0x1c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	18d2      	adds	r2, r2, r3
 8005f56:	4b02      	ldr	r3, [pc, #8]	@ (8005f60 <HAL_IncTick+0x18>)
 8005f58:	601a      	str	r2, [r3, #0]
}
 8005f5a:	46c0      	nop			@ (mov r8, r8)
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	2000054c 	.word	0x2000054c
 8005f64:	2000000c 	.word	0x2000000c

08005f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f6c:	4b02      	ldr	r3, [pc, #8]	@ (8005f78 <HAL_GetTick+0x10>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
}
 8005f70:	0018      	movs	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	2000054c 	.word	0x2000054c

08005f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f84:	f7ff fff0 	bl	8005f68 <HAL_GetTick>
 8005f88:	0003      	movs	r3, r0
 8005f8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3301      	adds	r3, #1
 8005f94:	d004      	beq.n	8005fa0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f96:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <HAL_Delay+0x40>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	18d3      	adds	r3, r2, r3
 8005f9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005fa0:	46c0      	nop			@ (mov r8, r8)
 8005fa2:	f7ff ffe1 	bl	8005f68 <HAL_GetTick>
 8005fa6:	0002      	movs	r2, r0
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d8f7      	bhi.n	8005fa2 <HAL_Delay+0x26>
  {
  }
}
 8005fb2:	46c0      	nop			@ (mov r8, r8)
 8005fb4:	46c0      	nop			@ (mov r8, r8)
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b004      	add	sp, #16
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	2000000c 	.word	0x2000000c

08005fc0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005fc4:	4b04      	ldr	r3, [pc, #16]	@ (8005fd8 <HAL_SuspendTick+0x18>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	4b03      	ldr	r3, [pc, #12]	@ (8005fd8 <HAL_SuspendTick+0x18>)
 8005fca:	2102      	movs	r1, #2
 8005fcc:	438a      	bics	r2, r1
 8005fce:	601a      	str	r2, [r3, #0]
}
 8005fd0:	46c0      	nop			@ (mov r8, r8)
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	46c0      	nop			@ (mov r8, r8)
 8005fd8:	e000e010 	.word	0xe000e010

08005fdc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005fe0:	4b04      	ldr	r3, [pc, #16]	@ (8005ff4 <HAL_ResumeTick+0x18>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	4b03      	ldr	r3, [pc, #12]	@ (8005ff4 <HAL_ResumeTick+0x18>)
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
}
 8005fec:	46c0      	nop			@ (mov r8, r8)
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			@ (mov r8, r8)
 8005ff4:	e000e010 	.word	0xe000e010

08005ff8 <LL_ADC_SetCommonPathInternalCh>:
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a05      	ldr	r2, [pc, #20]	@ (800601c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8006008:	401a      	ands	r2, r3
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	601a      	str	r2, [r3, #0]
}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	46bd      	mov	sp, r7
 8006016:	b002      	add	sp, #8
 8006018:	bd80      	pop	{r7, pc}
 800601a:	46c0      	nop			@ (mov r8, r8)
 800601c:	fe3fffff 	.word	0xfe3fffff

08006020 <LL_ADC_GetCommonPathInternalCh>:
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	23e0      	movs	r3, #224	@ 0xe0
 800602e:	045b      	lsls	r3, r3, #17
 8006030:	4013      	ands	r3, r2
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b002      	add	sp, #8
 8006038:	bd80      	pop	{r7, pc}

0800603a <LL_ADC_SetSamplingTimeCommonChannels>:
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	2104      	movs	r1, #4
 800604e:	400a      	ands	r2, r1
 8006050:	2107      	movs	r1, #7
 8006052:	4091      	lsls	r1, r2
 8006054:	000a      	movs	r2, r1
 8006056:	43d2      	mvns	r2, r2
 8006058:	401a      	ands	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2104      	movs	r1, #4
 800605e:	400b      	ands	r3, r1
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4099      	lsls	r1, r3
 8006064:	000b      	movs	r3, r1
 8006066:	431a      	orrs	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	615a      	str	r2, [r3, #20]
}
 800606c:	46c0      	nop			@ (mov r8, r8)
 800606e:	46bd      	mov	sp, r7
 8006070:	b004      	add	sp, #16
 8006072:	bd80      	pop	{r7, pc}

08006074 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	2104      	movs	r1, #4
 8006086:	400a      	ands	r2, r1
 8006088:	2107      	movs	r1, #7
 800608a:	4091      	lsls	r1, r2
 800608c:	000a      	movs	r2, r1
 800608e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2104      	movs	r1, #4
 8006094:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006096:	40da      	lsrs	r2, r3
 8006098:	0013      	movs	r3, r2
}
 800609a:	0018      	movs	r0, r3
 800609c:	46bd      	mov	sp, r7
 800609e:	b002      	add	sp, #8
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <LL_ADC_REG_SetSequencerRanks>:
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b084      	sub	sp, #16
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	60b9      	str	r1, [r7, #8]
 80060ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	211f      	movs	r1, #31
 80060b6:	400a      	ands	r2, r1
 80060b8:	210f      	movs	r1, #15
 80060ba:	4091      	lsls	r1, r2
 80060bc:	000a      	movs	r2, r1
 80060be:	43d2      	mvns	r2, r2
 80060c0:	401a      	ands	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	0e9b      	lsrs	r3, r3, #26
 80060c6:	210f      	movs	r1, #15
 80060c8:	4019      	ands	r1, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	201f      	movs	r0, #31
 80060ce:	4003      	ands	r3, r0
 80060d0:	4099      	lsls	r1, r3
 80060d2:	000b      	movs	r3, r1
 80060d4:	431a      	orrs	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80060da:	46c0      	nop			@ (mov r8, r8)
 80060dc:	46bd      	mov	sp, r7
 80060de:	b004      	add	sp, #16
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <LL_ADC_REG_SetSequencerChAdd>:
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b082      	sub	sp, #8
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	025b      	lsls	r3, r3, #9
 80060f4:	0a5b      	lsrs	r3, r3, #9
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80060fc:	46c0      	nop			@ (mov r8, r8)
 80060fe:	46bd      	mov	sp, r7
 8006100:	b002      	add	sp, #8
 8006102:	bd80      	pop	{r7, pc}

08006104 <LL_ADC_REG_SetSequencerChRem>:
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	0252      	lsls	r2, r2, #9
 8006116:	0a52      	lsrs	r2, r2, #9
 8006118:	43d2      	mvns	r2, r2
 800611a:	401a      	ands	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006120:	46c0      	nop			@ (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b002      	add	sp, #8
 8006126:	bd80      	pop	{r7, pc}

08006128 <LL_ADC_SetChannelSamplingTime>:
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	0212      	lsls	r2, r2, #8
 800613c:	43d2      	mvns	r2, r2
 800613e:	401a      	ands	r2, r3
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	021b      	lsls	r3, r3, #8
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	400b      	ands	r3, r1
 8006148:	4904      	ldr	r1, [pc, #16]	@ (800615c <LL_ADC_SetChannelSamplingTime+0x34>)
 800614a:	400b      	ands	r3, r1
 800614c:	431a      	orrs	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	615a      	str	r2, [r3, #20]
}
 8006152:	46c0      	nop			@ (mov r8, r8)
 8006154:	46bd      	mov	sp, r7
 8006156:	b004      	add	sp, #16
 8006158:	bd80      	pop	{r7, pc}
 800615a:	46c0      	nop			@ (mov r8, r8)
 800615c:	7fffff00 	.word	0x7fffff00

08006160 <LL_ADC_EnableInternalRegulator>:
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4a05      	ldr	r2, [pc, #20]	@ (8006184 <LL_ADC_EnableInternalRegulator+0x24>)
 800616e:	4013      	ands	r3, r2
 8006170:	2280      	movs	r2, #128	@ 0x80
 8006172:	0552      	lsls	r2, r2, #21
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	609a      	str	r2, [r3, #8]
}
 800617a:	46c0      	nop			@ (mov r8, r8)
 800617c:	46bd      	mov	sp, r7
 800617e:	b002      	add	sp, #8
 8006180:	bd80      	pop	{r7, pc}
 8006182:	46c0      	nop			@ (mov r8, r8)
 8006184:	6fffffe8 	.word	0x6fffffe8

08006188 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	2380      	movs	r3, #128	@ 0x80
 8006196:	055b      	lsls	r3, r3, #21
 8006198:	401a      	ands	r2, r3
 800619a:	2380      	movs	r3, #128	@ 0x80
 800619c:	055b      	lsls	r3, r3, #21
 800619e:	429a      	cmp	r2, r3
 80061a0:	d101      	bne.n	80061a6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	0018      	movs	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b002      	add	sp, #8
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <LL_ADC_IsEnabled>:
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2201      	movs	r2, #1
 80061be:	4013      	ands	r3, r2
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <LL_ADC_IsEnabled+0x18>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <LL_ADC_IsEnabled+0x1a>
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	0018      	movs	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	b002      	add	sp, #8
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2204      	movs	r2, #4
 80061e0:	4013      	ands	r3, r2
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d101      	bne.n	80061ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	0018      	movs	r0, r3
 80061ee:	46bd      	mov	sp, r7
 80061f0:	b002      	add	sp, #8
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061fc:	231f      	movs	r3, #31
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	2200      	movs	r2, #0
 8006202:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006204:	2300      	movs	r3, #0
 8006206:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e17f      	b.n	800651a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	0018      	movs	r0, r3
 8006226:	f7fd f84d 	bl	80032c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2254      	movs	r2, #84	@ 0x54
 8006234:	2100      	movs	r1, #0
 8006236:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	0018      	movs	r0, r3
 800623e:	f7ff ffa3 	bl	8006188 <LL_ADC_IsInternalRegulatorEnabled>
 8006242:	1e03      	subs	r3, r0, #0
 8006244:	d115      	bne.n	8006272 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	0018      	movs	r0, r3
 800624c:	f7ff ff88 	bl	8006160 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006250:	4bb4      	ldr	r3, [pc, #720]	@ (8006524 <HAL_ADC_Init+0x330>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	49b4      	ldr	r1, [pc, #720]	@ (8006528 <HAL_ADC_Init+0x334>)
 8006256:	0018      	movs	r0, r3
 8006258:	f7f9 ff72 	bl	8000140 <__udivsi3>
 800625c:	0003      	movs	r3, r0
 800625e:	3301      	adds	r3, #1
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006264:	e002      	b.n	800626c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b01      	subs	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1f9      	bne.n	8006266 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	0018      	movs	r0, r3
 8006278:	f7ff ff86 	bl	8006188 <LL_ADC_IsInternalRegulatorEnabled>
 800627c:	1e03      	subs	r3, r0, #0
 800627e:	d10f      	bne.n	80062a0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006284:	2210      	movs	r2, #16
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006290:	2201      	movs	r2, #1
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006298:	231f      	movs	r3, #31
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	2201      	movs	r2, #1
 800629e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f7ff ff94 	bl	80061d2 <LL_ADC_REG_IsConversionOngoing>
 80062aa:	0003      	movs	r3, r0
 80062ac:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b2:	2210      	movs	r2, #16
 80062b4:	4013      	ands	r3, r2
 80062b6:	d000      	beq.n	80062ba <HAL_ADC_Init+0xc6>
 80062b8:	e122      	b.n	8006500 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d000      	beq.n	80062c2 <HAL_ADC_Init+0xce>
 80062c0:	e11e      	b.n	8006500 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c6:	4a99      	ldr	r2, [pc, #612]	@ (800652c <HAL_ADC_Init+0x338>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	2202      	movs	r2, #2
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	0018      	movs	r0, r3
 80062d8:	f7ff ff6a 	bl	80061b0 <LL_ADC_IsEnabled>
 80062dc:	1e03      	subs	r3, r0, #0
 80062de:	d000      	beq.n	80062e2 <HAL_ADC_Init+0xee>
 80062e0:	e0ad      	b.n	800643e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	7e1b      	ldrb	r3, [r3, #24]
 80062ea:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80062ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	7e5b      	ldrb	r3, [r3, #25]
 80062f2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80062f4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	7e9b      	ldrb	r3, [r3, #26]
 80062fa:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80062fc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_ADC_Init+0x118>
 8006306:	2380      	movs	r3, #128	@ 0x80
 8006308:	015b      	lsls	r3, r3, #5
 800630a:	e000      	b.n	800630e <HAL_ADC_Init+0x11a>
 800630c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800630e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006314:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	da04      	bge.n	8006328 <HAL_ADC_Init+0x134>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	085b      	lsrs	r3, r3, #1
 8006326:	e001      	b.n	800632c <HAL_ADC_Init+0x138>
 8006328:	2380      	movs	r3, #128	@ 0x80
 800632a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800632c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	212c      	movs	r1, #44	@ 0x2c
 8006332:	5c5b      	ldrb	r3, [r3, r1]
 8006334:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006336:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	4313      	orrs	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	5c9b      	ldrb	r3, [r3, r2]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d115      	bne.n	8006374 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7e9b      	ldrb	r3, [r3, #26]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d105      	bne.n	800635c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	2280      	movs	r2, #128	@ 0x80
 8006354:	0252      	lsls	r2, r2, #9
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	e00b      	b.n	8006374 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006360:	2220      	movs	r2, #32
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800636c:	2201      	movs	r2, #1
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006380:	23e0      	movs	r3, #224	@ 0xe0
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800638a:	4313      	orrs	r3, r2
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	4313      	orrs	r3, r2
 8006390:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	4a65      	ldr	r2, [pc, #404]	@ (8006530 <HAL_ADC_Init+0x33c>)
 800639a:	4013      	ands	r3, r2
 800639c:	0019      	movs	r1, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	0f9b      	lsrs	r3, r3, #30
 80063ae:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80063b4:	4313      	orrs	r3, r2
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	223c      	movs	r2, #60	@ 0x3c
 80063c0:	5c9b      	ldrb	r3, [r3, r2]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d111      	bne.n	80063ea <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	0f9b      	lsrs	r3, r3, #30
 80063cc:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80063d2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80063d8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80063de:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	2201      	movs	r2, #1
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	4a50      	ldr	r2, [pc, #320]	@ (8006534 <HAL_ADC_Init+0x340>)
 80063f2:	4013      	ands	r3, r2
 80063f4:	0019      	movs	r1, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	23c0      	movs	r3, #192	@ 0xc0
 8006406:	061b      	lsls	r3, r3, #24
 8006408:	429a      	cmp	r2, r3
 800640a:	d018      	beq.n	800643e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006410:	2380      	movs	r3, #128	@ 0x80
 8006412:	05db      	lsls	r3, r3, #23
 8006414:	429a      	cmp	r2, r3
 8006416:	d012      	beq.n	800643e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800641c:	2380      	movs	r3, #128	@ 0x80
 800641e:	061b      	lsls	r3, r3, #24
 8006420:	429a      	cmp	r2, r3
 8006422:	d00c      	beq.n	800643e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006424:	4b44      	ldr	r3, [pc, #272]	@ (8006538 <HAL_ADC_Init+0x344>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a44      	ldr	r2, [pc, #272]	@ (800653c <HAL_ADC_Init+0x348>)
 800642a:	4013      	ands	r3, r2
 800642c:	0019      	movs	r1, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	23f0      	movs	r3, #240	@ 0xf0
 8006434:	039b      	lsls	r3, r3, #14
 8006436:	401a      	ands	r2, r3
 8006438:	4b3f      	ldr	r3, [pc, #252]	@ (8006538 <HAL_ADC_Init+0x344>)
 800643a:	430a      	orrs	r2, r1
 800643c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006446:	001a      	movs	r2, r3
 8006448:	2100      	movs	r1, #0
 800644a:	f7ff fdf6 	bl	800603a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006456:	493a      	ldr	r1, [pc, #232]	@ (8006540 <HAL_ADC_Init+0x34c>)
 8006458:	001a      	movs	r2, r3
 800645a:	f7ff fdee 	bl	800603a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2110      	movs	r1, #16
 8006472:	4249      	negs	r1, r1
 8006474:	430a      	orrs	r2, r1
 8006476:	629a      	str	r2, [r3, #40]	@ 0x28
 8006478:	e018      	b.n	80064ac <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	2380      	movs	r3, #128	@ 0x80
 8006480:	039b      	lsls	r3, r3, #14
 8006482:	429a      	cmp	r2, r3
 8006484:	d112      	bne.n	80064ac <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	3b01      	subs	r3, #1
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	221c      	movs	r2, #28
 8006496:	4013      	ands	r3, r2
 8006498:	2210      	movs	r2, #16
 800649a:	4252      	negs	r2, r2
 800649c:	409a      	lsls	r2, r3
 800649e:	0011      	movs	r1, r2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2100      	movs	r1, #0
 80064b2:	0018      	movs	r0, r3
 80064b4:	f7ff fdde 	bl	8006074 <LL_ADC_GetSamplingTimeCommonChannels>
 80064b8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80064be:	429a      	cmp	r2, r3
 80064c0:	d10b      	bne.n	80064da <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064cc:	2203      	movs	r2, #3
 80064ce:	4393      	bics	r3, r2
 80064d0:	2201      	movs	r2, #1
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80064d8:	e01c      	b.n	8006514 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064de:	2212      	movs	r2, #18
 80064e0:	4393      	bics	r3, r2
 80064e2:	2210      	movs	r2, #16
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ee:	2201      	movs	r2, #1
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80064f6:	231f      	movs	r3, #31
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	2201      	movs	r2, #1
 80064fc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80064fe:	e009      	b.n	8006514 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006504:	2210      	movs	r2, #16
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800650c:	231f      	movs	r3, #31
 800650e:	18fb      	adds	r3, r7, r3
 8006510:	2201      	movs	r2, #1
 8006512:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006514:	231f      	movs	r3, #31
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	781b      	ldrb	r3, [r3, #0]
}
 800651a:	0018      	movs	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	b008      	add	sp, #32
 8006520:	bd80      	pop	{r7, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	20000004 	.word	0x20000004
 8006528:	00030d40 	.word	0x00030d40
 800652c:	fffffefd 	.word	0xfffffefd
 8006530:	ffde0201 	.word	0xffde0201
 8006534:	1ffffc02 	.word	0x1ffffc02
 8006538:	40012708 	.word	0x40012708
 800653c:	ffc3ffff 	.word	0xffc3ffff
 8006540:	7fffff04 	.word	0x7fffff04

08006544 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b08b      	sub	sp, #44	@ 0x2c
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800654e:	2327      	movs	r3, #39	@ 0x27
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	2200      	movs	r2, #0
 8006554:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2254      	movs	r2, #84	@ 0x54
 800655e:	5c9b      	ldrb	r3, [r3, r2]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_ADC_ConfigChannel+0x24>
 8006564:	2302      	movs	r3, #2
 8006566:	e141      	b.n	80067ec <HAL_ADC_ConfigChannel+0x2a8>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2254      	movs	r2, #84	@ 0x54
 800656c:	2101      	movs	r1, #1
 800656e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	0018      	movs	r0, r3
 8006576:	f7ff fe2c 	bl	80061d2 <LL_ADC_REG_IsConversionOngoing>
 800657a:	1e03      	subs	r3, r0, #0
 800657c:	d000      	beq.n	8006580 <HAL_ADC_ConfigChannel+0x3c>
 800657e:	e124      	b.n	80067ca <HAL_ADC_ConfigChannel+0x286>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d100      	bne.n	800658a <HAL_ADC_ConfigChannel+0x46>
 8006588:	e0d8      	b.n	800673c <HAL_ADC_ConfigChannel+0x1f8>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	2380      	movs	r3, #128	@ 0x80
 8006590:	061b      	lsls	r3, r3, #24
 8006592:	429a      	cmp	r2, r3
 8006594:	d004      	beq.n	80065a0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800659a:	4a96      	ldr	r2, [pc, #600]	@ (80067f4 <HAL_ADC_ConfigChannel+0x2b0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d108      	bne.n	80065b2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	0019      	movs	r1, r3
 80065aa:	0010      	movs	r0, r2
 80065ac:	f7ff fd99 	bl	80060e2 <LL_ADC_REG_SetSequencerChAdd>
 80065b0:	e060      	b.n	8006674 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	211f      	movs	r1, #31
 80065bc:	400b      	ands	r3, r1
 80065be:	210f      	movs	r1, #15
 80065c0:	4099      	lsls	r1, r3
 80065c2:	000b      	movs	r3, r1
 80065c4:	43db      	mvns	r3, r3
 80065c6:	4013      	ands	r3, r2
 80065c8:	001c      	movs	r4, r3
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	025b      	lsls	r3, r3, #9
 80065d0:	0a5b      	lsrs	r3, r3, #9
 80065d2:	d105      	bne.n	80065e0 <HAL_ADC_ConfigChannel+0x9c>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	0e9b      	lsrs	r3, r3, #26
 80065da:	221f      	movs	r2, #31
 80065dc:	401a      	ands	r2, r3
 80065de:	e02e      	b.n	800663e <HAL_ADC_ConfigChannel+0xfa>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80065e6:	231f      	movs	r3, #31
 80065e8:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	61bb      	str	r3, [r7, #24]
 80065f4:	e00e      	b.n	8006614 <HAL_ADC_ConfigChannel+0xd0>
    result <<= 1U;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2201      	movs	r2, #1
 8006600:	4013      	ands	r3, r2
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]
    s--;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	3b01      	subs	r3, #1
 800660c:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	085b      	lsrs	r3, r3, #1
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1ed      	bne.n	80065f6 <HAL_ADC_ConfigChannel+0xb2>
  result <<= s;                        /* shift when v's highest bits are zero */
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	409a      	lsls	r2, r3
 8006620:	0013      	movs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
  return result;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_ADC_ConfigChannel+0xee>
    return 32U;
 800662e:	2320      	movs	r3, #32
 8006630:	e004      	b.n	800663c <HAL_ADC_ConfigChannel+0xf8>
  return __builtin_clz(value);
 8006632:	69f8      	ldr	r0, [r7, #28]
 8006634:	f7f9 ff38 	bl	80004a8 <__clzsi2>
 8006638:	0003      	movs	r3, r0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	001a      	movs	r2, r3
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	211f      	movs	r1, #31
 8006644:	400b      	ands	r3, r1
 8006646:	409a      	lsls	r2, r3
 8006648:	0013      	movs	r3, r2
 800664a:	0022      	movs	r2, r4
 800664c:	431a      	orrs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	089b      	lsrs	r3, r3, #2
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	429a      	cmp	r2, r3
 8006660:	d808      	bhi.n	8006674 <HAL_ADC_ConfigChannel+0x130>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6859      	ldr	r1, [r3, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	001a      	movs	r2, r3
 8006670:	f7ff fd17 	bl	80060a2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	6819      	ldr	r1, [r3, #0]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	001a      	movs	r2, r3
 8006682:	f7ff fd51 	bl	8006128 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	db00      	blt.n	8006690 <HAL_ADC_ConfigChannel+0x14c>
 800668e:	e0a6      	b.n	80067de <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006690:	4b59      	ldr	r3, [pc, #356]	@ (80067f8 <HAL_ADC_ConfigChannel+0x2b4>)
 8006692:	0018      	movs	r0, r3
 8006694:	f7ff fcc4 	bl	8006020 <LL_ADC_GetCommonPathInternalCh>
 8006698:	0003      	movs	r3, r0
 800669a:	623b      	str	r3, [r7, #32]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a56      	ldr	r2, [pc, #344]	@ (80067fc <HAL_ADC_ConfigChannel+0x2b8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d122      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x1a8>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80066a6:	6a3a      	ldr	r2, [r7, #32]
 80066a8:	2380      	movs	r3, #128	@ 0x80
 80066aa:	041b      	lsls	r3, r3, #16
 80066ac:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80066ae:	d11d      	bne.n	80066ec <HAL_ADC_ConfigChannel+0x1a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	2280      	movs	r2, #128	@ 0x80
 80066b4:	0412      	lsls	r2, r2, #16
 80066b6:	4313      	orrs	r3, r2
 80066b8:	4a4f      	ldr	r2, [pc, #316]	@ (80067f8 <HAL_ADC_ConfigChannel+0x2b4>)
 80066ba:	0019      	movs	r1, r3
 80066bc:	0010      	movs	r0, r2
 80066be:	f7ff fc9b 	bl	8005ff8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006800 <HAL_ADC_ConfigChannel+0x2bc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	494f      	ldr	r1, [pc, #316]	@ (8006804 <HAL_ADC_ConfigChannel+0x2c0>)
 80066c8:	0018      	movs	r0, r3
 80066ca:	f7f9 fd39 	bl	8000140 <__udivsi3>
 80066ce:	0003      	movs	r3, r0
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	0013      	movs	r3, r2
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	189b      	adds	r3, r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80066dc:	e002      	b.n	80066e4 <HAL_ADC_ConfigChannel+0x1a0>
          {
            wait_loop_index--;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f9      	bne.n	80066de <HAL_ADC_ConfigChannel+0x19a>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80066ea:	e078      	b.n	80067de <HAL_ADC_ConfigChannel+0x29a>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a45      	ldr	r2, [pc, #276]	@ (8006808 <HAL_ADC_ConfigChannel+0x2c4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d10e      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x1d0>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80066f6:	6a3a      	ldr	r2, [r7, #32]
 80066f8:	2380      	movs	r3, #128	@ 0x80
 80066fa:	045b      	lsls	r3, r3, #17
 80066fc:	4013      	ands	r3, r2
 80066fe:	d109      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x1d0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	2280      	movs	r2, #128	@ 0x80
 8006704:	0452      	lsls	r2, r2, #17
 8006706:	4313      	orrs	r3, r2
 8006708:	4a3b      	ldr	r2, [pc, #236]	@ (80067f8 <HAL_ADC_ConfigChannel+0x2b4>)
 800670a:	0019      	movs	r1, r3
 800670c:	0010      	movs	r0, r2
 800670e:	f7ff fc73 	bl	8005ff8 <LL_ADC_SetCommonPathInternalCh>
 8006712:	e064      	b.n	80067de <HAL_ADC_ConfigChannel+0x29a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a3c      	ldr	r2, [pc, #240]	@ (800680c <HAL_ADC_ConfigChannel+0x2c8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d15f      	bne.n	80067de <HAL_ADC_ConfigChannel+0x29a>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800671e:	6a3a      	ldr	r2, [r7, #32]
 8006720:	2380      	movs	r3, #128	@ 0x80
 8006722:	03db      	lsls	r3, r3, #15
 8006724:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006726:	d15a      	bne.n	80067de <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	2280      	movs	r2, #128	@ 0x80
 800672c:	03d2      	lsls	r2, r2, #15
 800672e:	4313      	orrs	r3, r2
 8006730:	4a31      	ldr	r2, [pc, #196]	@ (80067f8 <HAL_ADC_ConfigChannel+0x2b4>)
 8006732:	0019      	movs	r1, r3
 8006734:	0010      	movs	r0, r2
 8006736:	f7ff fc5f 	bl	8005ff8 <LL_ADC_SetCommonPathInternalCh>
 800673a:	e050      	b.n	80067de <HAL_ADC_ConfigChannel+0x29a>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691a      	ldr	r2, [r3, #16]
 8006740:	2380      	movs	r3, #128	@ 0x80
 8006742:	061b      	lsls	r3, r3, #24
 8006744:	429a      	cmp	r2, r3
 8006746:	d004      	beq.n	8006752 <HAL_ADC_ConfigChannel+0x20e>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800674c:	4a29      	ldr	r2, [pc, #164]	@ (80067f4 <HAL_ADC_ConfigChannel+0x2b0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d107      	bne.n	8006762 <HAL_ADC_ConfigChannel+0x21e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	0019      	movs	r1, r3
 800675c:	0010      	movs	r0, r2
 800675e:	f7ff fcd1 	bl	8006104 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	da39      	bge.n	80067de <HAL_ADC_ConfigChannel+0x29a>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800676a:	4b23      	ldr	r3, [pc, #140]	@ (80067f8 <HAL_ADC_ConfigChannel+0x2b4>)
 800676c:	0018      	movs	r0, r3
 800676e:	f7ff fc57 	bl	8006020 <LL_ADC_GetCommonPathInternalCh>
 8006772:	0003      	movs	r3, r0
 8006774:	623b      	str	r3, [r7, #32]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a20      	ldr	r2, [pc, #128]	@ (80067fc <HAL_ADC_ConfigChannel+0x2b8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d108      	bne.n	8006792 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	4a23      	ldr	r2, [pc, #140]	@ (8006810 <HAL_ADC_ConfigChannel+0x2cc>)
 8006784:	4013      	ands	r3, r2
 8006786:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <HAL_ADC_ConfigChannel+0x2b4>)
 8006788:	0019      	movs	r1, r3
 800678a:	0010      	movs	r0, r2
 800678c:	f7ff fc34 	bl	8005ff8 <LL_ADC_SetCommonPathInternalCh>
 8006790:	e025      	b.n	80067de <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1c      	ldr	r2, [pc, #112]	@ (8006808 <HAL_ADC_ConfigChannel+0x2c4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d108      	bne.n	80067ae <HAL_ADC_ConfigChannel+0x26a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	4a1d      	ldr	r2, [pc, #116]	@ (8006814 <HAL_ADC_ConfigChannel+0x2d0>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	4a15      	ldr	r2, [pc, #84]	@ (80067f8 <HAL_ADC_ConfigChannel+0x2b4>)
 80067a4:	0019      	movs	r1, r3
 80067a6:	0010      	movs	r0, r2
 80067a8:	f7ff fc26 	bl	8005ff8 <LL_ADC_SetCommonPathInternalCh>
 80067ac:	e017      	b.n	80067de <HAL_ADC_ConfigChannel+0x29a>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a16      	ldr	r2, [pc, #88]	@ (800680c <HAL_ADC_ConfigChannel+0x2c8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d112      	bne.n	80067de <HAL_ADC_ConfigChannel+0x29a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	4a17      	ldr	r2, [pc, #92]	@ (8006818 <HAL_ADC_ConfigChannel+0x2d4>)
 80067bc:	4013      	ands	r3, r2
 80067be:	4a0e      	ldr	r2, [pc, #56]	@ (80067f8 <HAL_ADC_ConfigChannel+0x2b4>)
 80067c0:	0019      	movs	r1, r3
 80067c2:	0010      	movs	r0, r2
 80067c4:	f7ff fc18 	bl	8005ff8 <LL_ADC_SetCommonPathInternalCh>
 80067c8:	e009      	b.n	80067de <HAL_ADC_ConfigChannel+0x29a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ce:	2220      	movs	r2, #32
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80067d6:	2327      	movs	r3, #39	@ 0x27
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	2201      	movs	r2, #1
 80067dc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2254      	movs	r2, #84	@ 0x54
 80067e2:	2100      	movs	r1, #0
 80067e4:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80067e6:	2327      	movs	r3, #39	@ 0x27
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	781b      	ldrb	r3, [r3, #0]
}
 80067ec:	0018      	movs	r0, r3
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b00b      	add	sp, #44	@ 0x2c
 80067f2:	bd90      	pop	{r4, r7, pc}
 80067f4:	80000004 	.word	0x80000004
 80067f8:	40012708 	.word	0x40012708
 80067fc:	ac000800 	.word	0xac000800
 8006800:	20000004 	.word	0x20000004
 8006804:	00030d40 	.word	0x00030d40
 8006808:	b4002000 	.word	0xb4002000
 800680c:	b0001000 	.word	0xb0001000
 8006810:	ff7fffff 	.word	0xff7fffff
 8006814:	feffffff 	.word	0xfeffffff
 8006818:	ffbfffff 	.word	0xffbfffff

0800681c <__NVIC_EnableIRQ>:
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	0002      	movs	r2, r0
 8006824:	1dfb      	adds	r3, r7, #7
 8006826:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006828:	1dfb      	adds	r3, r7, #7
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b7f      	cmp	r3, #127	@ 0x7f
 800682e:	d809      	bhi.n	8006844 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006830:	1dfb      	adds	r3, r7, #7
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	001a      	movs	r2, r3
 8006836:	231f      	movs	r3, #31
 8006838:	401a      	ands	r2, r3
 800683a:	4b04      	ldr	r3, [pc, #16]	@ (800684c <__NVIC_EnableIRQ+0x30>)
 800683c:	2101      	movs	r1, #1
 800683e:	4091      	lsls	r1, r2
 8006840:	000a      	movs	r2, r1
 8006842:	601a      	str	r2, [r3, #0]
}
 8006844:	46c0      	nop			@ (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b002      	add	sp, #8
 800684a:	bd80      	pop	{r7, pc}
 800684c:	e000e100 	.word	0xe000e100

08006850 <__NVIC_SetPriority>:
{
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	0002      	movs	r2, r0
 8006858:	6039      	str	r1, [r7, #0]
 800685a:	1dfb      	adds	r3, r7, #7
 800685c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800685e:	1dfb      	adds	r3, r7, #7
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b7f      	cmp	r3, #127	@ 0x7f
 8006864:	d828      	bhi.n	80068b8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006866:	4a2f      	ldr	r2, [pc, #188]	@ (8006924 <__NVIC_SetPriority+0xd4>)
 8006868:	1dfb      	adds	r3, r7, #7
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	b25b      	sxtb	r3, r3
 800686e:	089b      	lsrs	r3, r3, #2
 8006870:	33c0      	adds	r3, #192	@ 0xc0
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	589b      	ldr	r3, [r3, r2]
 8006876:	1dfa      	adds	r2, r7, #7
 8006878:	7812      	ldrb	r2, [r2, #0]
 800687a:	0011      	movs	r1, r2
 800687c:	2203      	movs	r2, #3
 800687e:	400a      	ands	r2, r1
 8006880:	00d2      	lsls	r2, r2, #3
 8006882:	21ff      	movs	r1, #255	@ 0xff
 8006884:	4091      	lsls	r1, r2
 8006886:	000a      	movs	r2, r1
 8006888:	43d2      	mvns	r2, r2
 800688a:	401a      	ands	r2, r3
 800688c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	019b      	lsls	r3, r3, #6
 8006892:	22ff      	movs	r2, #255	@ 0xff
 8006894:	401a      	ands	r2, r3
 8006896:	1dfb      	adds	r3, r7, #7
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	0018      	movs	r0, r3
 800689c:	2303      	movs	r3, #3
 800689e:	4003      	ands	r3, r0
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068a4:	481f      	ldr	r0, [pc, #124]	@ (8006924 <__NVIC_SetPriority+0xd4>)
 80068a6:	1dfb      	adds	r3, r7, #7
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	b25b      	sxtb	r3, r3
 80068ac:	089b      	lsrs	r3, r3, #2
 80068ae:	430a      	orrs	r2, r1
 80068b0:	33c0      	adds	r3, #192	@ 0xc0
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	501a      	str	r2, [r3, r0]
}
 80068b6:	e031      	b.n	800691c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80068b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006928 <__NVIC_SetPriority+0xd8>)
 80068ba:	1dfb      	adds	r3, r7, #7
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	0019      	movs	r1, r3
 80068c0:	230f      	movs	r3, #15
 80068c2:	400b      	ands	r3, r1
 80068c4:	3b08      	subs	r3, #8
 80068c6:	089b      	lsrs	r3, r3, #2
 80068c8:	3306      	adds	r3, #6
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	18d3      	adds	r3, r2, r3
 80068ce:	3304      	adds	r3, #4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	1dfa      	adds	r2, r7, #7
 80068d4:	7812      	ldrb	r2, [r2, #0]
 80068d6:	0011      	movs	r1, r2
 80068d8:	2203      	movs	r2, #3
 80068da:	400a      	ands	r2, r1
 80068dc:	00d2      	lsls	r2, r2, #3
 80068de:	21ff      	movs	r1, #255	@ 0xff
 80068e0:	4091      	lsls	r1, r2
 80068e2:	000a      	movs	r2, r1
 80068e4:	43d2      	mvns	r2, r2
 80068e6:	401a      	ands	r2, r3
 80068e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	019b      	lsls	r3, r3, #6
 80068ee:	22ff      	movs	r2, #255	@ 0xff
 80068f0:	401a      	ands	r2, r3
 80068f2:	1dfb      	adds	r3, r7, #7
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	0018      	movs	r0, r3
 80068f8:	2303      	movs	r3, #3
 80068fa:	4003      	ands	r3, r0
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006900:	4809      	ldr	r0, [pc, #36]	@ (8006928 <__NVIC_SetPriority+0xd8>)
 8006902:	1dfb      	adds	r3, r7, #7
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	001c      	movs	r4, r3
 8006908:	230f      	movs	r3, #15
 800690a:	4023      	ands	r3, r4
 800690c:	3b08      	subs	r3, #8
 800690e:	089b      	lsrs	r3, r3, #2
 8006910:	430a      	orrs	r2, r1
 8006912:	3306      	adds	r3, #6
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	18c3      	adds	r3, r0, r3
 8006918:	3304      	adds	r3, #4
 800691a:	601a      	str	r2, [r3, #0]
}
 800691c:	46c0      	nop			@ (mov r8, r8)
 800691e:	46bd      	mov	sp, r7
 8006920:	b003      	add	sp, #12
 8006922:	bd90      	pop	{r4, r7, pc}
 8006924:	e000e100 	.word	0xe000e100
 8006928:	e000ed00 	.word	0xe000ed00

0800692c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	1e5a      	subs	r2, r3, #1
 8006938:	2380      	movs	r3, #128	@ 0x80
 800693a:	045b      	lsls	r3, r3, #17
 800693c:	429a      	cmp	r2, r3
 800693e:	d301      	bcc.n	8006944 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006940:	2301      	movs	r3, #1
 8006942:	e010      	b.n	8006966 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006944:	4b0a      	ldr	r3, [pc, #40]	@ (8006970 <SysTick_Config+0x44>)
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	3a01      	subs	r2, #1
 800694a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800694c:	2301      	movs	r3, #1
 800694e:	425b      	negs	r3, r3
 8006950:	2103      	movs	r1, #3
 8006952:	0018      	movs	r0, r3
 8006954:	f7ff ff7c 	bl	8006850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006958:	4b05      	ldr	r3, [pc, #20]	@ (8006970 <SysTick_Config+0x44>)
 800695a:	2200      	movs	r2, #0
 800695c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800695e:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <SysTick_Config+0x44>)
 8006960:	2207      	movs	r2, #7
 8006962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006964:	2300      	movs	r3, #0
}
 8006966:	0018      	movs	r0, r3
 8006968:	46bd      	mov	sp, r7
 800696a:	b002      	add	sp, #8
 800696c:	bd80      	pop	{r7, pc}
 800696e:	46c0      	nop			@ (mov r8, r8)
 8006970:	e000e010 	.word	0xe000e010

08006974 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
 800697e:	210f      	movs	r1, #15
 8006980:	187b      	adds	r3, r7, r1
 8006982:	1c02      	adds	r2, r0, #0
 8006984:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	187b      	adds	r3, r7, r1
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	b25b      	sxtb	r3, r3
 800698e:	0011      	movs	r1, r2
 8006990:	0018      	movs	r0, r3
 8006992:	f7ff ff5d 	bl	8006850 <__NVIC_SetPriority>
}
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	46bd      	mov	sp, r7
 800699a:	b004      	add	sp, #16
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b082      	sub	sp, #8
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	0002      	movs	r2, r0
 80069a6:	1dfb      	adds	r3, r7, #7
 80069a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069aa:	1dfb      	adds	r3, r7, #7
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	b25b      	sxtb	r3, r3
 80069b0:	0018      	movs	r0, r3
 80069b2:	f7ff ff33 	bl	800681c <__NVIC_EnableIRQ>
}
 80069b6:	46c0      	nop			@ (mov r8, r8)
 80069b8:	46bd      	mov	sp, r7
 80069ba:	b002      	add	sp, #8
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	0018      	movs	r0, r3
 80069ca:	f7ff ffaf 	bl	800692c <SysTick_Config>
 80069ce:	0003      	movs	r3, r0
}
 80069d0:	0018      	movs	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	b002      	add	sp, #8
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069e2:	2300      	movs	r3, #0
 80069e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069e6:	e153      	b.n	8006c90 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2101      	movs	r1, #1
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	4091      	lsls	r1, r2
 80069f2:	000a      	movs	r2, r1
 80069f4:	4013      	ands	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d100      	bne.n	8006a00 <HAL_GPIO_Init+0x28>
 80069fe:	e144      	b.n	8006c8a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2203      	movs	r2, #3
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d005      	beq.n	8006a18 <HAL_GPIO_Init+0x40>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2203      	movs	r2, #3
 8006a12:	4013      	ands	r3, r2
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d130      	bne.n	8006a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	2203      	movs	r2, #3
 8006a24:	409a      	lsls	r2, r3
 8006a26:	0013      	movs	r3, r2
 8006a28:	43da      	mvns	r2, r3
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	409a      	lsls	r2, r3
 8006a3a:	0013      	movs	r3, r2
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a4e:	2201      	movs	r2, #1
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	409a      	lsls	r2, r3
 8006a54:	0013      	movs	r3, r2
 8006a56:	43da      	mvns	r2, r3
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	091b      	lsrs	r3, r3, #4
 8006a64:	2201      	movs	r2, #1
 8006a66:	401a      	ands	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	409a      	lsls	r2, r3
 8006a6c:	0013      	movs	r3, r2
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2203      	movs	r2, #3
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d017      	beq.n	8006ab6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	2203      	movs	r2, #3
 8006a92:	409a      	lsls	r2, r3
 8006a94:	0013      	movs	r3, r2
 8006a96:	43da      	mvns	r2, r3
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	0013      	movs	r3, r2
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2203      	movs	r2, #3
 8006abc:	4013      	ands	r3, r2
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d123      	bne.n	8006b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	08da      	lsrs	r2, r3, #3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3208      	adds	r2, #8
 8006aca:	0092      	lsls	r2, r2, #2
 8006acc:	58d3      	ldr	r3, [r2, r3]
 8006ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2207      	movs	r2, #7
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	220f      	movs	r2, #15
 8006ada:	409a      	lsls	r2, r3
 8006adc:	0013      	movs	r3, r2
 8006ade:	43da      	mvns	r2, r3
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	691a      	ldr	r2, [r3, #16]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2107      	movs	r1, #7
 8006aee:	400b      	ands	r3, r1
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	409a      	lsls	r2, r3
 8006af4:	0013      	movs	r3, r2
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	08da      	lsrs	r2, r3, #3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3208      	adds	r2, #8
 8006b04:	0092      	lsls	r2, r2, #2
 8006b06:	6939      	ldr	r1, [r7, #16]
 8006b08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	2203      	movs	r2, #3
 8006b16:	409a      	lsls	r2, r3
 8006b18:	0013      	movs	r3, r2
 8006b1a:	43da      	mvns	r2, r3
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2203      	movs	r2, #3
 8006b28:	401a      	ands	r2, r3
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	409a      	lsls	r2, r3
 8006b30:	0013      	movs	r3, r2
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	23c0      	movs	r3, #192	@ 0xc0
 8006b44:	029b      	lsls	r3, r3, #10
 8006b46:	4013      	ands	r3, r2
 8006b48:	d100      	bne.n	8006b4c <HAL_GPIO_Init+0x174>
 8006b4a:	e09e      	b.n	8006c8a <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006b4c:	4a56      	ldr	r2, [pc, #344]	@ (8006ca8 <HAL_GPIO_Init+0x2d0>)
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	089b      	lsrs	r3, r3, #2
 8006b52:	3318      	adds	r3, #24
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	589b      	ldr	r3, [r3, r2]
 8006b58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	4013      	ands	r3, r2
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	220f      	movs	r2, #15
 8006b64:	409a      	lsls	r2, r3
 8006b66:	0013      	movs	r3, r2
 8006b68:	43da      	mvns	r2, r3
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	23a0      	movs	r3, #160	@ 0xa0
 8006b74:	05db      	lsls	r3, r3, #23
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d01f      	beq.n	8006bba <HAL_GPIO_Init+0x1e2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8006cac <HAL_GPIO_Init+0x2d4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d019      	beq.n	8006bb6 <HAL_GPIO_Init+0x1de>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a4a      	ldr	r2, [pc, #296]	@ (8006cb0 <HAL_GPIO_Init+0x2d8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <HAL_GPIO_Init+0x1da>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a49      	ldr	r2, [pc, #292]	@ (8006cb4 <HAL_GPIO_Init+0x2dc>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00d      	beq.n	8006bae <HAL_GPIO_Init+0x1d6>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a48      	ldr	r2, [pc, #288]	@ (8006cb8 <HAL_GPIO_Init+0x2e0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <HAL_GPIO_Init+0x1d2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a47      	ldr	r2, [pc, #284]	@ (8006cbc <HAL_GPIO_Init+0x2e4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d101      	bne.n	8006ba6 <HAL_GPIO_Init+0x1ce>
 8006ba2:	2305      	movs	r3, #5
 8006ba4:	e00a      	b.n	8006bbc <HAL_GPIO_Init+0x1e4>
 8006ba6:	2306      	movs	r3, #6
 8006ba8:	e008      	b.n	8006bbc <HAL_GPIO_Init+0x1e4>
 8006baa:	2304      	movs	r3, #4
 8006bac:	e006      	b.n	8006bbc <HAL_GPIO_Init+0x1e4>
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e004      	b.n	8006bbc <HAL_GPIO_Init+0x1e4>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e002      	b.n	8006bbc <HAL_GPIO_Init+0x1e4>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <HAL_GPIO_Init+0x1e4>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	2103      	movs	r1, #3
 8006bc0:	400a      	ands	r2, r1
 8006bc2:	00d2      	lsls	r2, r2, #3
 8006bc4:	4093      	lsls	r3, r2
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006bcc:	4936      	ldr	r1, [pc, #216]	@ (8006ca8 <HAL_GPIO_Init+0x2d0>)
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	089b      	lsrs	r3, r3, #2
 8006bd2:	3318      	adds	r3, #24
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bda:	4b33      	ldr	r3, [pc, #204]	@ (8006ca8 <HAL_GPIO_Init+0x2d0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	43da      	mvns	r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	4013      	ands	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	2380      	movs	r3, #128	@ 0x80
 8006bf0:	035b      	lsls	r3, r3, #13
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8006ca8 <HAL_GPIO_Init+0x2d0>)
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006c04:	4b28      	ldr	r3, [pc, #160]	@ (8006ca8 <HAL_GPIO_Init+0x2d0>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	43da      	mvns	r2, r3
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4013      	ands	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	2380      	movs	r3, #128	@ 0x80
 8006c1a:	039b      	lsls	r3, r3, #14
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006c28:	4b1f      	ldr	r3, [pc, #124]	@ (8006ca8 <HAL_GPIO_Init+0x2d0>)
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ca8 <HAL_GPIO_Init+0x2d0>)
 8006c30:	2384      	movs	r3, #132	@ 0x84
 8006c32:	58d3      	ldr	r3, [r2, r3]
 8006c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	43da      	mvns	r2, r3
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	2380      	movs	r3, #128	@ 0x80
 8006c46:	029b      	lsls	r3, r3, #10
 8006c48:	4013      	ands	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006c54:	4914      	ldr	r1, [pc, #80]	@ (8006ca8 <HAL_GPIO_Init+0x2d0>)
 8006c56:	2284      	movs	r2, #132	@ 0x84
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006c5c:	4a12      	ldr	r2, [pc, #72]	@ (8006ca8 <HAL_GPIO_Init+0x2d0>)
 8006c5e:	2380      	movs	r3, #128	@ 0x80
 8006c60:	58d3      	ldr	r3, [r2, r3]
 8006c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	43da      	mvns	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	2380      	movs	r3, #128	@ 0x80
 8006c74:	025b      	lsls	r3, r3, #9
 8006c76:	4013      	ands	r3, r2
 8006c78:	d003      	beq.n	8006c82 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006c82:	4909      	ldr	r1, [pc, #36]	@ (8006ca8 <HAL_GPIO_Init+0x2d0>)
 8006c84:	2280      	movs	r2, #128	@ 0x80
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	40da      	lsrs	r2, r3
 8006c98:	1e13      	subs	r3, r2, #0
 8006c9a:	d000      	beq.n	8006c9e <HAL_GPIO_Init+0x2c6>
 8006c9c:	e6a4      	b.n	80069e8 <HAL_GPIO_Init+0x10>
  }
}
 8006c9e:	46c0      	nop			@ (mov r8, r8)
 8006ca0:	46c0      	nop			@ (mov r8, r8)
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	b006      	add	sp, #24
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40021800 	.word	0x40021800
 8006cac:	50000400 	.word	0x50000400
 8006cb0:	50000800 	.word	0x50000800
 8006cb4:	50000c00 	.word	0x50000c00
 8006cb8:	50001000 	.word	0x50001000
 8006cbc:	50001400 	.word	0x50001400

08006cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	0008      	movs	r0, r1
 8006cca:	0011      	movs	r1, r2
 8006ccc:	1cbb      	adds	r3, r7, #2
 8006cce:	1c02      	adds	r2, r0, #0
 8006cd0:	801a      	strh	r2, [r3, #0]
 8006cd2:	1c7b      	adds	r3, r7, #1
 8006cd4:	1c0a      	adds	r2, r1, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cd8:	1c7b      	adds	r3, r7, #1
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d004      	beq.n	8006cea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ce0:	1cbb      	adds	r3, r7, #2
 8006ce2:	881a      	ldrh	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ce8:	e003      	b.n	8006cf2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006cea:	1cbb      	adds	r3, r7, #2
 8006cec:	881a      	ldrh	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006cf2:	46c0      	nop			@ (mov r8, r8)
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	b002      	add	sp, #8
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	2380      	movs	r3, #128	@ 0x80
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d137      	bne.n	8006d7e <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d0e:	4b27      	ldr	r3, [pc, #156]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	23c0      	movs	r3, #192	@ 0xc0
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	401a      	ands	r2, r3
 8006d18:	2380      	movs	r3, #128	@ 0x80
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d040      	beq.n	8006da2 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d20:	4b22      	ldr	r3, [pc, #136]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a22      	ldr	r2, [pc, #136]	@ (8006db0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006d26:	401a      	ands	r2, r3
 8006d28:	4b20      	ldr	r3, [pc, #128]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d2a:	2180      	movs	r1, #128	@ 0x80
 8006d2c:	0089      	lsls	r1, r1, #2
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d32:	4b20      	ldr	r3, [pc, #128]	@ (8006db4 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2232      	movs	r2, #50	@ 0x32
 8006d38:	4353      	muls	r3, r2
 8006d3a:	491f      	ldr	r1, [pc, #124]	@ (8006db8 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f7f9 f9ff 	bl	8000140 <__udivsi3>
 8006d42:	0003      	movs	r3, r0
 8006d44:	3301      	adds	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d48:	e002      	b.n	8006d50 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d50:	4b16      	ldr	r3, [pc, #88]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d52:	695a      	ldr	r2, [r3, #20]
 8006d54:	2380      	movs	r3, #128	@ 0x80
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	401a      	ands	r2, r3
 8006d5a:	2380      	movs	r3, #128	@ 0x80
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d102      	bne.n	8006d68 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f0      	bne.n	8006d4a <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d68:	4b10      	ldr	r3, [pc, #64]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d6a:	695a      	ldr	r2, [r3, #20]
 8006d6c:	2380      	movs	r3, #128	@ 0x80
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	401a      	ands	r2, r3
 8006d72:	2380      	movs	r3, #128	@ 0x80
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d113      	bne.n	8006da2 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e012      	b.n	8006da4 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	23c0      	movs	r3, #192	@ 0xc0
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	401a      	ands	r2, r3
 8006d88:	2380      	movs	r3, #128	@ 0x80
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d008      	beq.n	8006da2 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d90:	4b06      	ldr	r3, [pc, #24]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a06      	ldr	r2, [pc, #24]	@ (8006db0 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8006d96:	401a      	ands	r2, r3
 8006d98:	4b04      	ldr	r3, [pc, #16]	@ (8006dac <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006d9a:	2180      	movs	r1, #128	@ 0x80
 8006d9c:	00c9      	lsls	r1, r1, #3
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	0018      	movs	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b004      	add	sp, #16
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	40007000 	.word	0x40007000
 8006db0:	fffff9ff 	.word	0xfffff9ff
 8006db4:	20000004 	.word	0x20000004
 8006db8:	000f4240 	.word	0x000f4240

08006dbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006dc0:	4b03      	ldr	r3, [pc, #12]	@ (8006dd0 <HAL_PWREx_GetVoltageRange+0x14>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	23c0      	movs	r3, #192	@ 0xc0
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	4013      	ands	r3, r2
}
 8006dca:	0018      	movs	r0, r3
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40007000 	.word	0x40007000

08006dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dd4:	b5b0      	push	{r4, r5, r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ddc:	4bc9      	ldr	r3, [pc, #804]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2238      	movs	r2, #56	@ 0x38
 8006de2:	4013      	ands	r3, r2
 8006de4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006de6:	4bc7      	ldr	r3, [pc, #796]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2203      	movs	r2, #3
 8006dec:	4013      	ands	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2210      	movs	r2, #16
 8006df6:	4013      	ands	r3, r2
 8006df8:	d100      	bne.n	8006dfc <HAL_RCC_OscConfig+0x28>
 8006dfa:	e0ef      	b.n	8006fdc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d007      	beq.n	8006e12 <HAL_RCC_OscConfig+0x3e>
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	2b18      	cmp	r3, #24
 8006e06:	d000      	beq.n	8006e0a <HAL_RCC_OscConfig+0x36>
 8006e08:	e093      	b.n	8006f32 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d000      	beq.n	8006e12 <HAL_RCC_OscConfig+0x3e>
 8006e10:	e08f      	b.n	8006f32 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006e12:	4bbc      	ldr	r3, [pc, #752]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2202      	movs	r2, #2
 8006e18:	4013      	ands	r3, r2
 8006e1a:	d006      	beq.n	8006e2a <HAL_RCC_OscConfig+0x56>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d102      	bne.n	8006e2a <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f000 fbf2 	bl	800760e <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e2e:	4bb5      	ldr	r3, [pc, #724]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2108      	movs	r1, #8
 8006e34:	400b      	ands	r3, r1
 8006e36:	d004      	beq.n	8006e42 <HAL_RCC_OscConfig+0x6e>
 8006e38:	4bb2      	ldr	r3, [pc, #712]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	21f0      	movs	r1, #240	@ 0xf0
 8006e3e:	400b      	ands	r3, r1
 8006e40:	e005      	b.n	8006e4e <HAL_RCC_OscConfig+0x7a>
 8006e42:	49b0      	ldr	r1, [pc, #704]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006e44:	2394      	movs	r3, #148	@ 0x94
 8006e46:	58cb      	ldr	r3, [r1, r3]
 8006e48:	091b      	lsrs	r3, r3, #4
 8006e4a:	21f0      	movs	r1, #240	@ 0xf0
 8006e4c:	400b      	ands	r3, r1
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d225      	bcs.n	8006e9e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e56:	0018      	movs	r0, r3
 8006e58:	f000 fd90 	bl	800797c <RCC_SetFlashLatencyFromMSIRange>
 8006e5c:	1e03      	subs	r3, r0, #0
 8006e5e:	d002      	beq.n	8006e66 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	f000 fbd4 	bl	800760e <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e66:	4ba7      	ldr	r3, [pc, #668]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4ba6      	ldr	r3, [pc, #664]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006e6c:	2108      	movs	r1, #8
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	4ba4      	ldr	r3, [pc, #656]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	22f0      	movs	r2, #240	@ 0xf0
 8006e78:	4393      	bics	r3, r2
 8006e7a:	0019      	movs	r1, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e80:	4ba0      	ldr	r3, [pc, #640]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006e82:	430a      	orrs	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e86:	4b9f      	ldr	r3, [pc, #636]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	4a9f      	ldr	r2, [pc, #636]	@ (8007108 <HAL_RCC_OscConfig+0x334>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	0019      	movs	r1, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	021a      	lsls	r2, r3, #8
 8006e96:	4b9b      	ldr	r3, [pc, #620]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	605a      	str	r2, [r3, #4]
 8006e9c:	e027      	b.n	8006eee <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e9e:	4b99      	ldr	r3, [pc, #612]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b98      	ldr	r3, [pc, #608]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006ea4:	2108      	movs	r1, #8
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	4b96      	ldr	r3, [pc, #600]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	22f0      	movs	r2, #240	@ 0xf0
 8006eb0:	4393      	bics	r3, r2
 8006eb2:	0019      	movs	r1, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eb8:	4b92      	ldr	r3, [pc, #584]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ebe:	4b91      	ldr	r3, [pc, #580]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	4a91      	ldr	r2, [pc, #580]	@ (8007108 <HAL_RCC_OscConfig+0x334>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	021a      	lsls	r2, r3, #8
 8006ece:	4b8d      	ldr	r3, [pc, #564]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f000 fd4c 	bl	800797c <RCC_SetFlashLatencyFromMSIRange>
 8006ee4:	1e03      	subs	r3, r0, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f000 fb90 	bl	800760e <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006eee:	f000 fc87 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 8006ef2:	0001      	movs	r1, r0
 8006ef4:	4b83      	ldr	r3, [pc, #524]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	220f      	movs	r2, #15
 8006efc:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006efe:	4a83      	ldr	r2, [pc, #524]	@ (800710c <HAL_RCC_OscConfig+0x338>)
 8006f00:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f02:	001a      	movs	r2, r3
 8006f04:	231f      	movs	r3, #31
 8006f06:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006f08:	000a      	movs	r2, r1
 8006f0a:	40da      	lsrs	r2, r3
 8006f0c:	4b80      	ldr	r3, [pc, #512]	@ (8007110 <HAL_RCC_OscConfig+0x33c>)
 8006f0e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006f10:	4b80      	ldr	r3, [pc, #512]	@ (8007114 <HAL_RCC_OscConfig+0x340>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	250f      	movs	r5, #15
 8006f16:	197c      	adds	r4, r7, r5
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f7fe ffcb 	bl	8005eb4 <HAL_InitTick>
 8006f1e:	0003      	movs	r3, r0
 8006f20:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8006f22:	197b      	adds	r3, r7, r5
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d057      	beq.n	8006fda <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8006f2a:	197b      	adds	r3, r7, r5
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	f000 fb6e 	bl	800760e <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d035      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006f3a:	4b72      	ldr	r3, [pc, #456]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b71      	ldr	r3, [pc, #452]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006f40:	2101      	movs	r1, #1
 8006f42:	430a      	orrs	r2, r1
 8006f44:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006f46:	f7ff f80f 	bl	8005f68 <HAL_GetTick>
 8006f4a:	0003      	movs	r3, r0
 8006f4c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f4e:	e009      	b.n	8006f64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006f50:	f7ff f80a 	bl	8005f68 <HAL_GetTick>
 8006f54:	0002      	movs	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d902      	bls.n	8006f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	f000 fb55 	bl	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006f64:	4b67      	ldr	r3, [pc, #412]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2202      	movs	r2, #2
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d0f0      	beq.n	8006f50 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006f6e:	4b65      	ldr	r3, [pc, #404]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	4b64      	ldr	r3, [pc, #400]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006f74:	2108      	movs	r1, #8
 8006f76:	430a      	orrs	r2, r1
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	4b62      	ldr	r3, [pc, #392]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	22f0      	movs	r2, #240	@ 0xf0
 8006f80:	4393      	bics	r3, r2
 8006f82:	0019      	movs	r1, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f88:	4b5e      	ldr	r3, [pc, #376]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4a5d      	ldr	r2, [pc, #372]	@ (8007108 <HAL_RCC_OscConfig+0x334>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	0019      	movs	r1, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	021a      	lsls	r2, r3, #8
 8006f9e:	4b59      	ldr	r3, [pc, #356]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	605a      	str	r2, [r3, #4]
 8006fa4:	e01a      	b.n	8006fdc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006fa6:	4b57      	ldr	r3, [pc, #348]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4b56      	ldr	r3, [pc, #344]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006fac:	2101      	movs	r1, #1
 8006fae:	438a      	bics	r2, r1
 8006fb0:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006fb2:	f7fe ffd9 	bl	8005f68 <HAL_GetTick>
 8006fb6:	0003      	movs	r3, r0
 8006fb8:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006fba:	e008      	b.n	8006fce <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006fbc:	f7fe ffd4 	bl	8005f68 <HAL_GetTick>
 8006fc0:	0002      	movs	r2, r0
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e31f      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006fce:	4b4d      	ldr	r3, [pc, #308]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	d1f1      	bne.n	8006fbc <HAL_RCC_OscConfig+0x1e8>
 8006fd8:	e000      	b.n	8006fdc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fda:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	d100      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x214>
 8006fe6:	e065      	b.n	80070b4 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	2b10      	cmp	r3, #16
 8006fec:	d005      	beq.n	8006ffa <HAL_RCC_OscConfig+0x226>
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2b18      	cmp	r3, #24
 8006ff2:	d10e      	bne.n	8007012 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d10b      	bne.n	8007012 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ffa:	4b42      	ldr	r3, [pc, #264]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	2380      	movs	r3, #128	@ 0x80
 8007000:	029b      	lsls	r3, r3, #10
 8007002:	4013      	ands	r3, r2
 8007004:	d055      	beq.n	80070b2 <HAL_RCC_OscConfig+0x2de>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d151      	bne.n	80070b2 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e2fd      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685a      	ldr	r2, [r3, #4]
 8007016:	2380      	movs	r3, #128	@ 0x80
 8007018:	025b      	lsls	r3, r3, #9
 800701a:	429a      	cmp	r2, r3
 800701c:	d107      	bne.n	800702e <HAL_RCC_OscConfig+0x25a>
 800701e:	4b39      	ldr	r3, [pc, #228]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4b38      	ldr	r3, [pc, #224]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8007024:	2180      	movs	r1, #128	@ 0x80
 8007026:	0249      	lsls	r1, r1, #9
 8007028:	430a      	orrs	r2, r1
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	e013      	b.n	8007056 <HAL_RCC_OscConfig+0x282>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	23a0      	movs	r3, #160	@ 0xa0
 8007034:	02db      	lsls	r3, r3, #11
 8007036:	429a      	cmp	r2, r3
 8007038:	d107      	bne.n	800704a <HAL_RCC_OscConfig+0x276>
 800703a:	4b32      	ldr	r3, [pc, #200]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b31      	ldr	r3, [pc, #196]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8007040:	21a0      	movs	r1, #160	@ 0xa0
 8007042:	02c9      	lsls	r1, r1, #11
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
 8007048:	e005      	b.n	8007056 <HAL_RCC_OscConfig+0x282>
 800704a:	4b2e      	ldr	r3, [pc, #184]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	4b2d      	ldr	r3, [pc, #180]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 8007050:	4931      	ldr	r1, [pc, #196]	@ (8007118 <HAL_RCC_OscConfig+0x344>)
 8007052:	400a      	ands	r2, r1
 8007054:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d014      	beq.n	8007088 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800705e:	f7fe ff83 	bl	8005f68 <HAL_GetTick>
 8007062:	0003      	movs	r3, r0
 8007064:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007068:	f7fe ff7e 	bl	8005f68 <HAL_GetTick>
 800706c:	0002      	movs	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b64      	cmp	r3, #100	@ 0x64
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e2c9      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800707a:	4b22      	ldr	r3, [pc, #136]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	2380      	movs	r3, #128	@ 0x80
 8007080:	029b      	lsls	r3, r3, #10
 8007082:	4013      	ands	r3, r2
 8007084:	d0f0      	beq.n	8007068 <HAL_RCC_OscConfig+0x294>
 8007086:	e015      	b.n	80070b4 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007088:	f7fe ff6e 	bl	8005f68 <HAL_GetTick>
 800708c:	0003      	movs	r3, r0
 800708e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007090:	e008      	b.n	80070a4 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007092:	f7fe ff69 	bl	8005f68 <HAL_GetTick>
 8007096:	0002      	movs	r2, r0
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b64      	cmp	r3, #100	@ 0x64
 800709e:	d901      	bls.n	80070a4 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e2b4      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070a4:	4b17      	ldr	r3, [pc, #92]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	2380      	movs	r3, #128	@ 0x80
 80070aa:	029b      	lsls	r3, r3, #10
 80070ac:	4013      	ands	r3, r2
 80070ae:	d1f0      	bne.n	8007092 <HAL_RCC_OscConfig+0x2be>
 80070b0:	e000      	b.n	80070b4 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2202      	movs	r2, #2
 80070ba:	4013      	ands	r3, r2
 80070bc:	d100      	bne.n	80070c0 <HAL_RCC_OscConfig+0x2ec>
 80070be:	e074      	b.n	80071aa <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	2b08      	cmp	r3, #8
 80070c4:	d005      	beq.n	80070d2 <HAL_RCC_OscConfig+0x2fe>
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b18      	cmp	r3, #24
 80070ca:	d129      	bne.n	8007120 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d126      	bne.n	8007120 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	2380      	movs	r3, #128	@ 0x80
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	4013      	ands	r3, r2
 80070dc:	d005      	beq.n	80070ea <HAL_RCC_OscConfig+0x316>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e291      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ea:	4b06      	ldr	r3, [pc, #24]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	4a0b      	ldr	r2, [pc, #44]	@ (800711c <HAL_RCC_OscConfig+0x348>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	0019      	movs	r1, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	061a      	lsls	r2, r3, #24
 80070fa:	4b02      	ldr	r3, [pc, #8]	@ (8007104 <HAL_RCC_OscConfig+0x330>)
 80070fc:	430a      	orrs	r2, r1
 80070fe:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007100:	e053      	b.n	80071aa <HAL_RCC_OscConfig+0x3d6>
 8007102:	46c0      	nop			@ (mov r8, r8)
 8007104:	40021000 	.word	0x40021000
 8007108:	ffff00ff 	.word	0xffff00ff
 800710c:	080100b8 	.word	0x080100b8
 8007110:	20000004 	.word	0x20000004
 8007114:	20000008 	.word	0x20000008
 8007118:	fffaffff 	.word	0xfffaffff
 800711c:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d026      	beq.n	8007176 <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007128:	4bc7      	ldr	r3, [pc, #796]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	4bc6      	ldr	r3, [pc, #792]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800712e:	2180      	movs	r1, #128	@ 0x80
 8007130:	0049      	lsls	r1, r1, #1
 8007132:	430a      	orrs	r2, r1
 8007134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007136:	f7fe ff17 	bl	8005f68 <HAL_GetTick>
 800713a:	0003      	movs	r3, r0
 800713c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800713e:	e008      	b.n	8007152 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007140:	f7fe ff12 	bl	8005f68 <HAL_GetTick>
 8007144:	0002      	movs	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e25d      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007152:	4bbd      	ldr	r3, [pc, #756]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	2380      	movs	r3, #128	@ 0x80
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	4013      	ands	r3, r2
 800715c:	d0f0      	beq.n	8007140 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715e:	4bba      	ldr	r3, [pc, #744]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	4aba      	ldr	r2, [pc, #744]	@ (800744c <HAL_RCC_OscConfig+0x678>)
 8007164:	4013      	ands	r3, r2
 8007166:	0019      	movs	r1, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	061a      	lsls	r2, r3, #24
 800716e:	4bb6      	ldr	r3, [pc, #728]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007170:	430a      	orrs	r2, r1
 8007172:	605a      	str	r2, [r3, #4]
 8007174:	e019      	b.n	80071aa <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007176:	4bb4      	ldr	r3, [pc, #720]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4bb3      	ldr	r3, [pc, #716]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800717c:	49b4      	ldr	r1, [pc, #720]	@ (8007450 <HAL_RCC_OscConfig+0x67c>)
 800717e:	400a      	ands	r2, r1
 8007180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007182:	f7fe fef1 	bl	8005f68 <HAL_GetTick>
 8007186:	0003      	movs	r3, r0
 8007188:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800718c:	f7fe feec 	bl	8005f68 <HAL_GetTick>
 8007190:	0002      	movs	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b02      	cmp	r3, #2
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e237      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800719e:	4baa      	ldr	r3, [pc, #680]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	2380      	movs	r3, #128	@ 0x80
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	4013      	ands	r3, r2
 80071a8:	d1f0      	bne.n	800718c <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2208      	movs	r2, #8
 80071b0:	4013      	ands	r3, r2
 80071b2:	d051      	beq.n	8007258 <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d031      	beq.n	8007220 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d108      	bne.n	80071d6 <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80071c4:	4aa0      	ldr	r2, [pc, #640]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80071c6:	2394      	movs	r3, #148	@ 0x94
 80071c8:	58d3      	ldr	r3, [r2, r3]
 80071ca:	499f      	ldr	r1, [pc, #636]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80071cc:	2204      	movs	r2, #4
 80071ce:	4393      	bics	r3, r2
 80071d0:	2294      	movs	r2, #148	@ 0x94
 80071d2:	508b      	str	r3, [r1, r2]
 80071d4:	e007      	b.n	80071e6 <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80071d6:	4a9c      	ldr	r2, [pc, #624]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80071d8:	2394      	movs	r3, #148	@ 0x94
 80071da:	58d3      	ldr	r3, [r2, r3]
 80071dc:	499a      	ldr	r1, [pc, #616]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80071de:	2204      	movs	r2, #4
 80071e0:	4313      	orrs	r3, r2
 80071e2:	2294      	movs	r2, #148	@ 0x94
 80071e4:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071e6:	4a98      	ldr	r2, [pc, #608]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80071e8:	2394      	movs	r3, #148	@ 0x94
 80071ea:	58d3      	ldr	r3, [r2, r3]
 80071ec:	4996      	ldr	r1, [pc, #600]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	4313      	orrs	r3, r2
 80071f2:	2294      	movs	r2, #148	@ 0x94
 80071f4:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f6:	f7fe feb7 	bl	8005f68 <HAL_GetTick>
 80071fa:	0003      	movs	r3, r0
 80071fc:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007200:	f7fe feb2 	bl	8005f68 <HAL_GetTick>
 8007204:	0002      	movs	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b11      	cmp	r3, #17
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e1fd      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007212:	4a8d      	ldr	r2, [pc, #564]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007214:	2394      	movs	r3, #148	@ 0x94
 8007216:	58d3      	ldr	r3, [r2, r3]
 8007218:	2202      	movs	r2, #2
 800721a:	4013      	ands	r3, r2
 800721c:	d0f0      	beq.n	8007200 <HAL_RCC_OscConfig+0x42c>
 800721e:	e01b      	b.n	8007258 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007220:	4a89      	ldr	r2, [pc, #548]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007222:	2394      	movs	r3, #148	@ 0x94
 8007224:	58d3      	ldr	r3, [r2, r3]
 8007226:	4988      	ldr	r1, [pc, #544]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007228:	2201      	movs	r2, #1
 800722a:	4393      	bics	r3, r2
 800722c:	2294      	movs	r2, #148	@ 0x94
 800722e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007230:	f7fe fe9a 	bl	8005f68 <HAL_GetTick>
 8007234:	0003      	movs	r3, r0
 8007236:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007238:	e008      	b.n	800724c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800723a:	f7fe fe95 	bl	8005f68 <HAL_GetTick>
 800723e:	0002      	movs	r2, r0
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b11      	cmp	r3, #17
 8007246:	d901      	bls.n	800724c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e1e0      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800724c:	4a7e      	ldr	r2, [pc, #504]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800724e:	2394      	movs	r3, #148	@ 0x94
 8007250:	58d3      	ldr	r3, [r2, r3]
 8007252:	2202      	movs	r2, #2
 8007254:	4013      	ands	r3, r2
 8007256:	d1f0      	bne.n	800723a <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2204      	movs	r2, #4
 800725e:	4013      	ands	r3, r2
 8007260:	d100      	bne.n	8007264 <HAL_RCC_OscConfig+0x490>
 8007262:	e10d      	b.n	8007480 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007264:	201f      	movs	r0, #31
 8007266:	183b      	adds	r3, r7, r0
 8007268:	2200      	movs	r2, #0
 800726a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 800726c:	4b76      	ldr	r3, [pc, #472]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800726e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007270:	2380      	movs	r3, #128	@ 0x80
 8007272:	055b      	lsls	r3, r3, #21
 8007274:	4013      	ands	r3, r2
 8007276:	d110      	bne.n	800729a <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007278:	4b73      	ldr	r3, [pc, #460]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800727a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800727c:	4b72      	ldr	r3, [pc, #456]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800727e:	2180      	movs	r1, #128	@ 0x80
 8007280:	0549      	lsls	r1, r1, #21
 8007282:	430a      	orrs	r2, r1
 8007284:	659a      	str	r2, [r3, #88]	@ 0x58
 8007286:	4b70      	ldr	r3, [pc, #448]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007288:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800728a:	2380      	movs	r3, #128	@ 0x80
 800728c:	055b      	lsls	r3, r3, #21
 800728e:	4013      	ands	r3, r2
 8007290:	60bb      	str	r3, [r7, #8]
 8007292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007294:	183b      	adds	r3, r7, r0
 8007296:	2201      	movs	r2, #1
 8007298:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800729a:	4b6e      	ldr	r3, [pc, #440]	@ (8007454 <HAL_RCC_OscConfig+0x680>)
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	2380      	movs	r3, #128	@ 0x80
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	4013      	ands	r3, r2
 80072a4:	d11a      	bne.n	80072dc <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072a6:	4b6b      	ldr	r3, [pc, #428]	@ (8007454 <HAL_RCC_OscConfig+0x680>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007454 <HAL_RCC_OscConfig+0x680>)
 80072ac:	2180      	movs	r1, #128	@ 0x80
 80072ae:	0049      	lsls	r1, r1, #1
 80072b0:	430a      	orrs	r2, r1
 80072b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072b4:	f7fe fe58 	bl	8005f68 <HAL_GetTick>
 80072b8:	0003      	movs	r3, r0
 80072ba:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072bc:	e008      	b.n	80072d0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072be:	f7fe fe53 	bl	8005f68 <HAL_GetTick>
 80072c2:	0002      	movs	r2, r0
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d901      	bls.n	80072d0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e19e      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072d0:	4b60      	ldr	r3, [pc, #384]	@ (8007454 <HAL_RCC_OscConfig+0x680>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	2380      	movs	r3, #128	@ 0x80
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	4013      	ands	r3, r2
 80072da:	d0f0      	beq.n	80072be <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2201      	movs	r2, #1
 80072e2:	4013      	ands	r3, r2
 80072e4:	d01e      	beq.n	8007324 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2204      	movs	r2, #4
 80072ec:	4013      	ands	r3, r2
 80072ee:	d010      	beq.n	8007312 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80072f0:	4a55      	ldr	r2, [pc, #340]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80072f2:	2390      	movs	r3, #144	@ 0x90
 80072f4:	58d3      	ldr	r3, [r2, r3]
 80072f6:	4954      	ldr	r1, [pc, #336]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80072f8:	2204      	movs	r2, #4
 80072fa:	4313      	orrs	r3, r2
 80072fc:	2290      	movs	r2, #144	@ 0x90
 80072fe:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007300:	4a51      	ldr	r2, [pc, #324]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007302:	2390      	movs	r3, #144	@ 0x90
 8007304:	58d3      	ldr	r3, [r2, r3]
 8007306:	4950      	ldr	r1, [pc, #320]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007308:	2201      	movs	r2, #1
 800730a:	4313      	orrs	r3, r2
 800730c:	2290      	movs	r2, #144	@ 0x90
 800730e:	508b      	str	r3, [r1, r2]
 8007310:	e018      	b.n	8007344 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007312:	4a4d      	ldr	r2, [pc, #308]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007314:	2390      	movs	r3, #144	@ 0x90
 8007316:	58d3      	ldr	r3, [r2, r3]
 8007318:	494b      	ldr	r1, [pc, #300]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800731a:	2201      	movs	r2, #1
 800731c:	4313      	orrs	r3, r2
 800731e:	2290      	movs	r2, #144	@ 0x90
 8007320:	508b      	str	r3, [r1, r2]
 8007322:	e00f      	b.n	8007344 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007324:	4a48      	ldr	r2, [pc, #288]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007326:	2390      	movs	r3, #144	@ 0x90
 8007328:	58d3      	ldr	r3, [r2, r3]
 800732a:	4947      	ldr	r1, [pc, #284]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800732c:	2201      	movs	r2, #1
 800732e:	4393      	bics	r3, r2
 8007330:	2290      	movs	r2, #144	@ 0x90
 8007332:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007334:	4a44      	ldr	r2, [pc, #272]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007336:	2390      	movs	r3, #144	@ 0x90
 8007338:	58d3      	ldr	r3, [r2, r3]
 800733a:	4943      	ldr	r1, [pc, #268]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800733c:	2204      	movs	r2, #4
 800733e:	4393      	bics	r3, r2
 8007340:	2290      	movs	r2, #144	@ 0x90
 8007342:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d04f      	beq.n	80073ec <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800734c:	f7fe fe0c 	bl	8005f68 <HAL_GetTick>
 8007350:	0003      	movs	r3, r0
 8007352:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007354:	e009      	b.n	800736a <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007356:	f7fe fe07 	bl	8005f68 <HAL_GetTick>
 800735a:	0002      	movs	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	4a3d      	ldr	r2, [pc, #244]	@ (8007458 <HAL_RCC_OscConfig+0x684>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e151      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800736a:	4a37      	ldr	r2, [pc, #220]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800736c:	2390      	movs	r3, #144	@ 0x90
 800736e:	58d3      	ldr	r3, [r2, r3]
 8007370:	2202      	movs	r2, #2
 8007372:	4013      	ands	r3, r2
 8007374:	d0ef      	beq.n	8007356 <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	2280      	movs	r2, #128	@ 0x80
 800737c:	4013      	ands	r3, r2
 800737e:	d01a      	beq.n	80073b6 <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007380:	4a31      	ldr	r2, [pc, #196]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007382:	2390      	movs	r3, #144	@ 0x90
 8007384:	58d3      	ldr	r3, [r2, r3]
 8007386:	4930      	ldr	r1, [pc, #192]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007388:	2280      	movs	r2, #128	@ 0x80
 800738a:	4313      	orrs	r3, r2
 800738c:	2290      	movs	r2, #144	@ 0x90
 800738e:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007390:	e009      	b.n	80073a6 <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007392:	f7fe fde9 	bl	8005f68 <HAL_GetTick>
 8007396:	0002      	movs	r2, r0
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	4a2e      	ldr	r2, [pc, #184]	@ (8007458 <HAL_RCC_OscConfig+0x684>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e133      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80073a6:	4a28      	ldr	r2, [pc, #160]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80073a8:	2390      	movs	r3, #144	@ 0x90
 80073aa:	58d2      	ldr	r2, [r2, r3]
 80073ac:	2380      	movs	r3, #128	@ 0x80
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	4013      	ands	r3, r2
 80073b2:	d0ee      	beq.n	8007392 <HAL_RCC_OscConfig+0x5be>
 80073b4:	e059      	b.n	800746a <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80073b6:	4a24      	ldr	r2, [pc, #144]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80073b8:	2390      	movs	r3, #144	@ 0x90
 80073ba:	58d3      	ldr	r3, [r2, r3]
 80073bc:	4922      	ldr	r1, [pc, #136]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80073be:	2280      	movs	r2, #128	@ 0x80
 80073c0:	4393      	bics	r3, r2
 80073c2:	2290      	movs	r2, #144	@ 0x90
 80073c4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073c6:	e009      	b.n	80073dc <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c8:	f7fe fdce 	bl	8005f68 <HAL_GetTick>
 80073cc:	0002      	movs	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	4a21      	ldr	r2, [pc, #132]	@ (8007458 <HAL_RCC_OscConfig+0x684>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d901      	bls.n	80073dc <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e118      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80073dc:	4a1a      	ldr	r2, [pc, #104]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 80073de:	2390      	movs	r3, #144	@ 0x90
 80073e0:	58d2      	ldr	r2, [r2, r3]
 80073e2:	2380      	movs	r3, #128	@ 0x80
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	4013      	ands	r3, r2
 80073e8:	d1ee      	bne.n	80073c8 <HAL_RCC_OscConfig+0x5f4>
 80073ea:	e03e      	b.n	800746a <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ec:	f7fe fdbc 	bl	8005f68 <HAL_GetTick>
 80073f0:	0003      	movs	r3, r0
 80073f2:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80073f4:	e009      	b.n	800740a <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fe fdb7 	bl	8005f68 <HAL_GetTick>
 80073fa:	0002      	movs	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	4a15      	ldr	r2, [pc, #84]	@ (8007458 <HAL_RCC_OscConfig+0x684>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d901      	bls.n	800740a <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e101      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800740a:	4a0f      	ldr	r2, [pc, #60]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800740c:	2390      	movs	r3, #144	@ 0x90
 800740e:	58d3      	ldr	r3, [r2, r3]
 8007410:	2202      	movs	r2, #2
 8007412:	4013      	ands	r3, r2
 8007414:	d1ef      	bne.n	80073f6 <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007416:	4a0c      	ldr	r2, [pc, #48]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007418:	2390      	movs	r3, #144	@ 0x90
 800741a:	58d3      	ldr	r3, [r2, r3]
 800741c:	2280      	movs	r2, #128	@ 0x80
 800741e:	4013      	ands	r3, r2
 8007420:	d023      	beq.n	800746a <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007422:	4a09      	ldr	r2, [pc, #36]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 8007424:	2390      	movs	r3, #144	@ 0x90
 8007426:	58d3      	ldr	r3, [r2, r3]
 8007428:	4907      	ldr	r1, [pc, #28]	@ (8007448 <HAL_RCC_OscConfig+0x674>)
 800742a:	2280      	movs	r2, #128	@ 0x80
 800742c:	4393      	bics	r3, r2
 800742e:	2290      	movs	r2, #144	@ 0x90
 8007430:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007432:	e013      	b.n	800745c <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007434:	f7fe fd98 	bl	8005f68 <HAL_GetTick>
 8007438:	0002      	movs	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	4a06      	ldr	r2, [pc, #24]	@ (8007458 <HAL_RCC_OscConfig+0x684>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d90b      	bls.n	800745c <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e0e2      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
 8007448:	40021000 	.word	0x40021000
 800744c:	80ffffff 	.word	0x80ffffff
 8007450:	fffffeff 	.word	0xfffffeff
 8007454:	40007000 	.word	0x40007000
 8007458:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800745c:	4a6e      	ldr	r2, [pc, #440]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 800745e:	2390      	movs	r3, #144	@ 0x90
 8007460:	58d2      	ldr	r2, [r2, r3]
 8007462:	2380      	movs	r3, #128	@ 0x80
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	4013      	ands	r3, r2
 8007468:	d1e4      	bne.n	8007434 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800746a:	231f      	movs	r3, #31
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d105      	bne.n	8007480 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007474:	4b68      	ldr	r3, [pc, #416]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 8007476:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007478:	4b67      	ldr	r3, [pc, #412]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 800747a:	4968      	ldr	r1, [pc, #416]	@ (800761c <HAL_RCC_OscConfig+0x848>)
 800747c:	400a      	ands	r2, r1
 800747e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2220      	movs	r2, #32
 8007486:	4013      	ands	r3, r2
 8007488:	d03c      	beq.n	8007504 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748e:	2b00      	cmp	r3, #0
 8007490:	d01c      	beq.n	80074cc <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007492:	4a61      	ldr	r2, [pc, #388]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 8007494:	2398      	movs	r3, #152	@ 0x98
 8007496:	58d3      	ldr	r3, [r2, r3]
 8007498:	495f      	ldr	r1, [pc, #380]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 800749a:	2201      	movs	r2, #1
 800749c:	4313      	orrs	r3, r2
 800749e:	2298      	movs	r2, #152	@ 0x98
 80074a0:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074a2:	f7fe fd61 	bl	8005f68 <HAL_GetTick>
 80074a6:	0003      	movs	r3, r0
 80074a8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074ac:	f7fe fd5c 	bl	8005f68 <HAL_GetTick>
 80074b0:	0002      	movs	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e0a7      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074be:	4a56      	ldr	r2, [pc, #344]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 80074c0:	2398      	movs	r3, #152	@ 0x98
 80074c2:	58d3      	ldr	r3, [r2, r3]
 80074c4:	2202      	movs	r2, #2
 80074c6:	4013      	ands	r3, r2
 80074c8:	d0f0      	beq.n	80074ac <HAL_RCC_OscConfig+0x6d8>
 80074ca:	e01b      	b.n	8007504 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074cc:	4a52      	ldr	r2, [pc, #328]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 80074ce:	2398      	movs	r3, #152	@ 0x98
 80074d0:	58d3      	ldr	r3, [r2, r3]
 80074d2:	4951      	ldr	r1, [pc, #324]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	4393      	bics	r3, r2
 80074d8:	2298      	movs	r2, #152	@ 0x98
 80074da:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074dc:	f7fe fd44 	bl	8005f68 <HAL_GetTick>
 80074e0:	0003      	movs	r3, r0
 80074e2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80074e4:	e008      	b.n	80074f8 <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074e6:	f7fe fd3f 	bl	8005f68 <HAL_GetTick>
 80074ea:	0002      	movs	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d901      	bls.n	80074f8 <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e08a      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80074f8:	4a47      	ldr	r2, [pc, #284]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 80074fa:	2398      	movs	r3, #152	@ 0x98
 80074fc:	58d3      	ldr	r3, [r2, r3]
 80074fe:	2202      	movs	r2, #2
 8007500:	4013      	ands	r3, r2
 8007502:	d1f0      	bne.n	80074e6 <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007508:	2b00      	cmp	r3, #0
 800750a:	d100      	bne.n	800750e <HAL_RCC_OscConfig+0x73a>
 800750c:	e07e      	b.n	800760c <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800750e:	4b42      	ldr	r3, [pc, #264]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	2238      	movs	r2, #56	@ 0x38
 8007514:	4013      	ands	r3, r2
 8007516:	2b18      	cmp	r3, #24
 8007518:	d100      	bne.n	800751c <HAL_RCC_OscConfig+0x748>
 800751a:	e075      	b.n	8007608 <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	2b02      	cmp	r3, #2
 8007522:	d156      	bne.n	80075d2 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007524:	4b3c      	ldr	r3, [pc, #240]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	4b3b      	ldr	r3, [pc, #236]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 800752a:	493d      	ldr	r1, [pc, #244]	@ (8007620 <HAL_RCC_OscConfig+0x84c>)
 800752c:	400a      	ands	r2, r1
 800752e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007530:	f7fe fd1a 	bl	8005f68 <HAL_GetTick>
 8007534:	0003      	movs	r3, r0
 8007536:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800753a:	f7fe fd15 	bl	8005f68 <HAL_GetTick>
 800753e:	0002      	movs	r2, r0
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e060      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800754c:	4b32      	ldr	r3, [pc, #200]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	2380      	movs	r3, #128	@ 0x80
 8007552:	049b      	lsls	r3, r3, #18
 8007554:	4013      	ands	r3, r2
 8007556:	d1f0      	bne.n	800753a <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007558:	4b2f      	ldr	r3, [pc, #188]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	4a31      	ldr	r2, [pc, #196]	@ (8007624 <HAL_RCC_OscConfig+0x850>)
 800755e:	4013      	ands	r3, r2
 8007560:	0019      	movs	r1, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007584:	431a      	orrs	r2, r3
 8007586:	4b24      	ldr	r3, [pc, #144]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 8007588:	430a      	orrs	r2, r1
 800758a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 800758c:	4b22      	ldr	r3, [pc, #136]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	4b21      	ldr	r3, [pc, #132]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 8007592:	2180      	movs	r1, #128	@ 0x80
 8007594:	0549      	lsls	r1, r1, #21
 8007596:	430a      	orrs	r2, r1
 8007598:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800759a:	4b1f      	ldr	r3, [pc, #124]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	4b1e      	ldr	r3, [pc, #120]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 80075a0:	2180      	movs	r1, #128	@ 0x80
 80075a2:	0449      	lsls	r1, r1, #17
 80075a4:	430a      	orrs	r2, r1
 80075a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a8:	f7fe fcde 	bl	8005f68 <HAL_GetTick>
 80075ac:	0003      	movs	r3, r0
 80075ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075b0:	e008      	b.n	80075c4 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b2:	f7fe fcd9 	bl	8005f68 <HAL_GetTick>
 80075b6:	0002      	movs	r2, r0
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d901      	bls.n	80075c4 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e024      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075c4:	4b14      	ldr	r3, [pc, #80]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	2380      	movs	r3, #128	@ 0x80
 80075ca:	049b      	lsls	r3, r3, #18
 80075cc:	4013      	ands	r3, r2
 80075ce:	d0f0      	beq.n	80075b2 <HAL_RCC_OscConfig+0x7de>
 80075d0:	e01c      	b.n	800760c <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075d2:	4b11      	ldr	r3, [pc, #68]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	4b10      	ldr	r3, [pc, #64]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 80075d8:	4911      	ldr	r1, [pc, #68]	@ (8007620 <HAL_RCC_OscConfig+0x84c>)
 80075da:	400a      	ands	r2, r1
 80075dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075de:	f7fe fcc3 	bl	8005f68 <HAL_GetTick>
 80075e2:	0003      	movs	r3, r0
 80075e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075e8:	f7fe fcbe 	bl	8005f68 <HAL_GetTick>
 80075ec:	0002      	movs	r2, r0
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e009      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075fa:	4b07      	ldr	r3, [pc, #28]	@ (8007618 <HAL_RCC_OscConfig+0x844>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	2380      	movs	r3, #128	@ 0x80
 8007600:	049b      	lsls	r3, r3, #18
 8007602:	4013      	ands	r3, r2
 8007604:	d1f0      	bne.n	80075e8 <HAL_RCC_OscConfig+0x814>
 8007606:	e001      	b.n	800760c <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e000      	b.n	800760e <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	0018      	movs	r0, r3
 8007610:	46bd      	mov	sp, r7
 8007612:	b008      	add	sp, #32
 8007614:	bdb0      	pop	{r4, r5, r7, pc}
 8007616:	46c0      	nop			@ (mov r8, r8)
 8007618:	40021000 	.word	0x40021000
 800761c:	efffffff 	.word	0xefffffff
 8007620:	feffffff 	.word	0xfeffffff
 8007624:	11c1808c 	.word	0x11c1808c

08007628 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8007628:	b5b0      	push	{r4, r5, r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007632:	4b6c      	ldr	r3, [pc, #432]	@ (80077e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2207      	movs	r2, #7
 8007638:	4013      	ands	r3, r2
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d911      	bls.n	8007664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007640:	4b68      	ldr	r3, [pc, #416]	@ (80077e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2207      	movs	r2, #7
 8007646:	4393      	bics	r3, r2
 8007648:	0019      	movs	r1, r3
 800764a:	4b66      	ldr	r3, [pc, #408]	@ (80077e4 <HAL_RCC_ClockConfig+0x1bc>)
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007652:	4b64      	ldr	r3, [pc, #400]	@ (80077e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2207      	movs	r2, #7
 8007658:	4013      	ands	r3, r2
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d001      	beq.n	8007664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e0bb      	b.n	80077dc <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2201      	movs	r2, #1
 800766a:	4013      	ands	r3, r2
 800766c:	d100      	bne.n	8007670 <HAL_RCC_ClockConfig+0x48>
 800766e:	e064      	b.n	800773a <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b03      	cmp	r3, #3
 8007676:	d107      	bne.n	8007688 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007678:	4b5b      	ldr	r3, [pc, #364]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	2380      	movs	r3, #128	@ 0x80
 800767e:	049b      	lsls	r3, r3, #18
 8007680:	4013      	ands	r3, r2
 8007682:	d138      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e0a9      	b.n	80077dc <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2b02      	cmp	r3, #2
 800768e:	d107      	bne.n	80076a0 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007690:	4b55      	ldr	r3, [pc, #340]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	2380      	movs	r3, #128	@ 0x80
 8007696:	029b      	lsls	r3, r3, #10
 8007698:	4013      	ands	r3, r2
 800769a:	d12c      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e09d      	b.n	80077dc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d106      	bne.n	80076b6 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80076a8:	4b4f      	ldr	r3, [pc, #316]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2202      	movs	r2, #2
 80076ae:	4013      	ands	r3, r2
 80076b0:	d121      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e092      	b.n	80077dc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d107      	bne.n	80076ce <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076be:	4b4a      	ldr	r3, [pc, #296]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	2380      	movs	r3, #128	@ 0x80
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4013      	ands	r3, r2
 80076c8:	d115      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e086      	b.n	80077dc <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d107      	bne.n	80076e6 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076d6:	4a44      	ldr	r2, [pc, #272]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 80076d8:	2394      	movs	r3, #148	@ 0x94
 80076da:	58d3      	ldr	r3, [r2, r3]
 80076dc:	2202      	movs	r2, #2
 80076de:	4013      	ands	r3, r2
 80076e0:	d109      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e07a      	b.n	80077dc <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076e6:	4a40      	ldr	r2, [pc, #256]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 80076e8:	2390      	movs	r3, #144	@ 0x90
 80076ea:	58d3      	ldr	r3, [r2, r3]
 80076ec:	2202      	movs	r2, #2
 80076ee:	4013      	ands	r3, r2
 80076f0:	d101      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e072      	b.n	80077dc <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076f6:	4b3c      	ldr	r3, [pc, #240]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2207      	movs	r2, #7
 80076fc:	4393      	bics	r3, r2
 80076fe:	0019      	movs	r1, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	4b38      	ldr	r3, [pc, #224]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 8007706:	430a      	orrs	r2, r1
 8007708:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800770a:	f7fe fc2d 	bl	8005f68 <HAL_GetTick>
 800770e:	0003      	movs	r3, r0
 8007710:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007712:	e009      	b.n	8007728 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007714:	f7fe fc28 	bl	8005f68 <HAL_GetTick>
 8007718:	0002      	movs	r2, r0
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	4a33      	ldr	r2, [pc, #204]	@ (80077ec <HAL_RCC_ClockConfig+0x1c4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d901      	bls.n	8007728 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e059      	b.n	80077dc <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007728:	4b2f      	ldr	r3, [pc, #188]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2238      	movs	r2, #56	@ 0x38
 800772e:	401a      	ands	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	429a      	cmp	r2, r3
 8007738:	d1ec      	bne.n	8007714 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2202      	movs	r2, #2
 8007740:	4013      	ands	r3, r2
 8007742:	d009      	beq.n	8007758 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007744:	4b28      	ldr	r3, [pc, #160]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	4a29      	ldr	r2, [pc, #164]	@ (80077f0 <HAL_RCC_ClockConfig+0x1c8>)
 800774a:	4013      	ands	r3, r2
 800774c:	0019      	movs	r1, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	4b25      	ldr	r3, [pc, #148]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 8007754:	430a      	orrs	r2, r1
 8007756:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007758:	4b22      	ldr	r3, [pc, #136]	@ (80077e4 <HAL_RCC_ClockConfig+0x1bc>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2207      	movs	r2, #7
 800775e:	4013      	ands	r3, r2
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d211      	bcs.n	800778a <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007766:	4b1f      	ldr	r3, [pc, #124]	@ (80077e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2207      	movs	r2, #7
 800776c:	4393      	bics	r3, r2
 800776e:	0019      	movs	r1, r3
 8007770:	4b1c      	ldr	r3, [pc, #112]	@ (80077e4 <HAL_RCC_ClockConfig+0x1bc>)
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007778:	4b1a      	ldr	r3, [pc, #104]	@ (80077e4 <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2207      	movs	r2, #7
 800777e:	4013      	ands	r3, r2
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	429a      	cmp	r2, r3
 8007784:	d001      	beq.n	800778a <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e028      	b.n	80077dc <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2204      	movs	r2, #4
 8007790:	4013      	ands	r3, r2
 8007792:	d009      	beq.n	80077a8 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007794:	4b14      	ldr	r3, [pc, #80]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	4a16      	ldr	r2, [pc, #88]	@ (80077f4 <HAL_RCC_ClockConfig+0x1cc>)
 800779a:	4013      	ands	r3, r2
 800779c:	0019      	movs	r1, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	4b11      	ldr	r3, [pc, #68]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 80077a4:	430a      	orrs	r2, r1
 80077a6:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80077a8:	f000 f82a 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 80077ac:	0001      	movs	r1, r0
 80077ae:	4b0e      	ldr	r3, [pc, #56]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c0>)
 80077b0:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077b2:	0a1b      	lsrs	r3, r3, #8
 80077b4:	220f      	movs	r2, #15
 80077b6:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80077b8:	4a0f      	ldr	r2, [pc, #60]	@ (80077f8 <HAL_RCC_ClockConfig+0x1d0>)
 80077ba:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077bc:	001a      	movs	r2, r3
 80077be:	231f      	movs	r3, #31
 80077c0:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80077c2:	000a      	movs	r2, r1
 80077c4:	40da      	lsrs	r2, r3
 80077c6:	4b0d      	ldr	r3, [pc, #52]	@ (80077fc <HAL_RCC_ClockConfig+0x1d4>)
 80077c8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80077ca:	250b      	movs	r5, #11
 80077cc:	197c      	adds	r4, r7, r5
 80077ce:	2003      	movs	r0, #3
 80077d0:	f7fe fb70 	bl	8005eb4 <HAL_InitTick>
 80077d4:	0003      	movs	r3, r0
 80077d6:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80077d8:	197b      	adds	r3, r7, r5
 80077da:	781b      	ldrb	r3, [r3, #0]
}
 80077dc:	0018      	movs	r0, r3
 80077de:	46bd      	mov	sp, r7
 80077e0:	b004      	add	sp, #16
 80077e2:	bdb0      	pop	{r4, r5, r7, pc}
 80077e4:	40022000 	.word	0x40022000
 80077e8:	40021000 	.word	0x40021000
 80077ec:	00001388 	.word	0x00001388
 80077f0:	fffff0ff 	.word	0xfffff0ff
 80077f4:	ffff8fff 	.word	0xffff8fff
 80077f8:	080100b8 	.word	0x080100b8
 80077fc:	20000004 	.word	0x20000004

08007800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	@ 0x28
 8007804:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800780e:	4b46      	ldr	r3, [pc, #280]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x128>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	2238      	movs	r2, #56	@ 0x38
 8007814:	4013      	ands	r3, r2
 8007816:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007818:	4b43      	ldr	r3, [pc, #268]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x128>)
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2203      	movs	r2, #3
 800781e:	4013      	ands	r3, r2
 8007820:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <HAL_RCC_GetSysClockFreq+0x34>
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b18      	cmp	r3, #24
 800782c:	d125      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d122      	bne.n	800787a <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007834:	4b3c      	ldr	r3, [pc, #240]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x128>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2208      	movs	r2, #8
 800783a:	4013      	ands	r3, r2
 800783c:	d107      	bne.n	800784e <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 800783e:	4a3a      	ldr	r2, [pc, #232]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x128>)
 8007840:	2394      	movs	r3, #148	@ 0x94
 8007842:	58d3      	ldr	r3, [r2, r3]
 8007844:	0a1b      	lsrs	r3, r3, #8
 8007846:	220f      	movs	r2, #15
 8007848:	4013      	ands	r3, r2
 800784a:	627b      	str	r3, [r7, #36]	@ 0x24
 800784c:	e005      	b.n	800785a <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800784e:	4b36      	ldr	r3, [pc, #216]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x128>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	091b      	lsrs	r3, r3, #4
 8007854:	220f      	movs	r2, #15
 8007856:	4013      	ands	r3, r2
 8007858:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	2b0b      	cmp	r3, #11
 800785e:	d901      	bls.n	8007864 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8007864:	4b31      	ldr	r3, [pc, #196]	@ (800792c <HAL_RCC_GetSysClockFreq+0x12c>)
 8007866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007868:	0092      	lsls	r2, r2, #2
 800786a:	58d3      	ldr	r3, [r2, r3]
 800786c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d11b      	bne.n	80078ac <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007876:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007878:	e018      	b.n	80078ac <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d102      	bne.n	8007886 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007880:	4b2b      	ldr	r3, [pc, #172]	@ (8007930 <HAL_RCC_GetSysClockFreq+0x130>)
 8007882:	623b      	str	r3, [r7, #32]
 8007884:	e012      	b.n	80078ac <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	2b10      	cmp	r3, #16
 800788a:	d102      	bne.n	8007892 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800788c:	4b29      	ldr	r3, [pc, #164]	@ (8007934 <HAL_RCC_GetSysClockFreq+0x134>)
 800788e:	623b      	str	r3, [r7, #32]
 8007890:	e00c      	b.n	80078ac <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b20      	cmp	r3, #32
 8007896:	d103      	bne.n	80078a0 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007898:	23fa      	movs	r3, #250	@ 0xfa
 800789a:	01db      	lsls	r3, r3, #7
 800789c:	623b      	str	r3, [r7, #32]
 800789e:	e005      	b.n	80078ac <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b28      	cmp	r3, #40	@ 0x28
 80078a4:	d102      	bne.n	80078ac <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80078a6:	2380      	movs	r3, #128	@ 0x80
 80078a8:	021b      	lsls	r3, r3, #8
 80078aa:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	2b18      	cmp	r3, #24
 80078b0:	d135      	bne.n	800791e <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80078b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x128>)
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	2203      	movs	r2, #3
 80078b8:	4013      	ands	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80078bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x128>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	091b      	lsrs	r3, r3, #4
 80078c2:	2207      	movs	r2, #7
 80078c4:	4013      	ands	r3, r2
 80078c6:	3301      	adds	r3, #1
 80078c8:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d003      	beq.n	80078d8 <HAL_RCC_GetSysClockFreq+0xd8>
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d003      	beq.n	80078de <HAL_RCC_GetSysClockFreq+0xde>
 80078d6:	e005      	b.n	80078e4 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80078d8:	4b15      	ldr	r3, [pc, #84]	@ (8007930 <HAL_RCC_GetSysClockFreq+0x130>)
 80078da:	61fb      	str	r3, [r7, #28]
        break;
 80078dc:	e005      	b.n	80078ea <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80078de:	4b15      	ldr	r3, [pc, #84]	@ (8007934 <HAL_RCC_GetSysClockFreq+0x134>)
 80078e0:	61fb      	str	r3, [r7, #28]
        break;
 80078e2:	e002      	b.n	80078ea <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	61fb      	str	r3, [r7, #28]
        break;
 80078e8:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80078ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x128>)
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	0a1b      	lsrs	r3, r3, #8
 80078f0:	227f      	movs	r2, #127	@ 0x7f
 80078f2:	4013      	ands	r3, r2
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	4353      	muls	r3, r2
 80078f8:	68f9      	ldr	r1, [r7, #12]
 80078fa:	0018      	movs	r0, r3
 80078fc:	f7f8 fc20 	bl	8000140 <__udivsi3>
 8007900:	0003      	movs	r3, r0
 8007902:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007904:	4b08      	ldr	r3, [pc, #32]	@ (8007928 <HAL_RCC_GetSysClockFreq+0x128>)
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	0f5b      	lsrs	r3, r3, #29
 800790a:	2207      	movs	r2, #7
 800790c:	4013      	ands	r3, r2
 800790e:	3301      	adds	r3, #1
 8007910:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	68b8      	ldr	r0, [r7, #8]
 8007916:	f7f8 fc13 	bl	8000140 <__udivsi3>
 800791a:	0003      	movs	r3, r0
 800791c:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800791e:	6a3b      	ldr	r3, [r7, #32]
}
 8007920:	0018      	movs	r0, r3
 8007922:	46bd      	mov	sp, r7
 8007924:	b00a      	add	sp, #40	@ 0x28
 8007926:	bd80      	pop	{r7, pc}
 8007928:	40021000 	.word	0x40021000
 800792c:	080100d0 	.word	0x080100d0
 8007930:	00f42400 	.word	0x00f42400
 8007934:	003d0900 	.word	0x003d0900

08007938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800793c:	4b02      	ldr	r3, [pc, #8]	@ (8007948 <HAL_RCC_GetHCLKFreq+0x10>)
 800793e:	681b      	ldr	r3, [r3, #0]
}
 8007940:	0018      	movs	r0, r3
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	46c0      	nop			@ (mov r8, r8)
 8007948:	20000004 	.word	0x20000004

0800794c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8007950:	f7ff fff2 	bl	8007938 <HAL_RCC_GetHCLKFreq>
 8007954:	0001      	movs	r1, r0
 8007956:	4b07      	ldr	r3, [pc, #28]	@ (8007974 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	0b1b      	lsrs	r3, r3, #12
 800795c:	2207      	movs	r2, #7
 800795e:	4013      	ands	r3, r2
 8007960:	4a05      	ldr	r2, [pc, #20]	@ (8007978 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8007962:	5cd3      	ldrb	r3, [r2, r3]
 8007964:	001a      	movs	r2, r3
 8007966:	231f      	movs	r3, #31
 8007968:	4013      	ands	r3, r2
 800796a:	40d9      	lsrs	r1, r3
 800796c:	000b      	movs	r3, r1
}
 800796e:	0018      	movs	r0, r3
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40021000 	.word	0x40021000
 8007978:	080100c8 	.word	0x080100c8

0800797c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007984:	2300      	movs	r3, #0
 8007986:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007988:	4b2f      	ldr	r3, [pc, #188]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800798a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800798c:	2380      	movs	r3, #128	@ 0x80
 800798e:	055b      	lsls	r3, r3, #21
 8007990:	4013      	ands	r3, r2
 8007992:	d004      	beq.n	800799e <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007994:	f7ff fa12 	bl	8006dbc <HAL_PWREx_GetVoltageRange>
 8007998:	0003      	movs	r3, r0
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	e017      	b.n	80079ce <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800799e:	4b2a      	ldr	r3, [pc, #168]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80079a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80079a2:	4b29      	ldr	r3, [pc, #164]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80079a4:	2180      	movs	r1, #128	@ 0x80
 80079a6:	0549      	lsls	r1, r1, #21
 80079a8:	430a      	orrs	r2, r1
 80079aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80079ac:	4b26      	ldr	r3, [pc, #152]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80079ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80079b0:	2380      	movs	r3, #128	@ 0x80
 80079b2:	055b      	lsls	r3, r3, #21
 80079b4:	4013      	ands	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80079ba:	f7ff f9ff 	bl	8006dbc <HAL_PWREx_GetVoltageRange>
 80079be:	0003      	movs	r3, r0
 80079c0:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80079c2:	4b21      	ldr	r3, [pc, #132]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80079c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80079c6:	4b20      	ldr	r3, [pc, #128]	@ (8007a48 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80079c8:	4920      	ldr	r1, [pc, #128]	@ (8007a4c <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80079ca:	400a      	ands	r2, r1
 80079cc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	2380      	movs	r3, #128	@ 0x80
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d111      	bne.n	80079fc <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b80      	cmp	r3, #128	@ 0x80
 80079dc:	d91c      	bls.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2bb0      	cmp	r3, #176	@ 0xb0
 80079e2:	d902      	bls.n	80079ea <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80079e4:	2302      	movs	r3, #2
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	e016      	b.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b90      	cmp	r3, #144	@ 0x90
 80079ee:	d902      	bls.n	80079f6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80079f0:	2301      	movs	r3, #1
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	e010      	b.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80079f6:	2300      	movs	r3, #0
 80079f8:	613b      	str	r3, [r7, #16]
 80079fa:	e00d      	b.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a00:	d902      	bls.n	8007a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8007a02:	2302      	movs	r3, #2
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	e007      	b.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2b70      	cmp	r3, #112	@ 0x70
 8007a0c:	d102      	bne.n	8007a14 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007a0e:	2301      	movs	r3, #1
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	e001      	b.n	8007a18 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007a14:	2300      	movs	r3, #0
 8007a16:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007a18:	4b0d      	ldr	r3, [pc, #52]	@ (8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2207      	movs	r2, #7
 8007a1e:	4393      	bics	r3, r2
 8007a20:	0019      	movs	r1, r3
 8007a22:	4b0b      	ldr	r3, [pc, #44]	@ (8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007a2a:	4b09      	ldr	r3, [pc, #36]	@ (8007a50 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2207      	movs	r2, #7
 8007a30:	4013      	ands	r3, r2
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d001      	beq.n	8007a3c <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e000      	b.n	8007a3e <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	0018      	movs	r0, r3
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b006      	add	sp, #24
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	40021000 	.word	0x40021000
 8007a4c:	efffffff 	.word	0xefffffff
 8007a50:	40022000 	.word	0x40022000

08007a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a5c:	2313      	movs	r3, #19
 8007a5e:	18fb      	adds	r3, r7, r3
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a64:	2312      	movs	r3, #18
 8007a66:	18fb      	adds	r3, r7, r3
 8007a68:	2200      	movs	r2, #0
 8007a6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	2380      	movs	r3, #128	@ 0x80
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	4013      	ands	r3, r2
 8007a76:	d100      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007a78:	e0b7      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a7a:	2011      	movs	r0, #17
 8007a7c:	183b      	adds	r3, r7, r0
 8007a7e:	2200      	movs	r2, #0
 8007a80:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a82:	4b4c      	ldr	r3, [pc, #304]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a86:	2380      	movs	r3, #128	@ 0x80
 8007a88:	055b      	lsls	r3, r3, #21
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	d110      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a8e:	4b49      	ldr	r3, [pc, #292]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a92:	4b48      	ldr	r3, [pc, #288]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a94:	2180      	movs	r1, #128	@ 0x80
 8007a96:	0549      	lsls	r1, r1, #21
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a9c:	4b45      	ldr	r3, [pc, #276]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007a9e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007aa0:	2380      	movs	r3, #128	@ 0x80
 8007aa2:	055b      	lsls	r3, r3, #21
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007aaa:	183b      	adds	r3, r7, r0
 8007aac:	2201      	movs	r2, #1
 8007aae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ab0:	4b41      	ldr	r3, [pc, #260]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	4b40      	ldr	r3, [pc, #256]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ab6:	2180      	movs	r1, #128	@ 0x80
 8007ab8:	0049      	lsls	r1, r1, #1
 8007aba:	430a      	orrs	r2, r1
 8007abc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007abe:	f7fe fa53 	bl	8005f68 <HAL_GetTick>
 8007ac2:	0003      	movs	r3, r0
 8007ac4:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ac6:	e00b      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ac8:	f7fe fa4e 	bl	8005f68 <HAL_GetTick>
 8007acc:	0002      	movs	r2, r0
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d904      	bls.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007ad6:	2313      	movs	r3, #19
 8007ad8:	18fb      	adds	r3, r7, r3
 8007ada:	2203      	movs	r2, #3
 8007adc:	701a      	strb	r2, [r3, #0]
        break;
 8007ade:	e005      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007ae0:	4b35      	ldr	r3, [pc, #212]	@ (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	2380      	movs	r3, #128	@ 0x80
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	4013      	ands	r3, r2
 8007aea:	d0ed      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007aec:	2313      	movs	r3, #19
 8007aee:	18fb      	adds	r3, r7, r3
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d168      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007af6:	4a2f      	ldr	r2, [pc, #188]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007af8:	2390      	movs	r3, #144	@ 0x90
 8007afa:	58d2      	ldr	r2, [r2, r3]
 8007afc:	23c0      	movs	r3, #192	@ 0xc0
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4013      	ands	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01f      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0e:	697a      	ldr	r2, [r7, #20]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d01a      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b14:	4a27      	ldr	r2, [pc, #156]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b16:	2390      	movs	r3, #144	@ 0x90
 8007b18:	58d3      	ldr	r3, [r2, r3]
 8007b1a:	4a28      	ldr	r2, [pc, #160]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b20:	4a24      	ldr	r2, [pc, #144]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b22:	2390      	movs	r3, #144	@ 0x90
 8007b24:	58d3      	ldr	r3, [r2, r3]
 8007b26:	4923      	ldr	r1, [pc, #140]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b28:	2280      	movs	r2, #128	@ 0x80
 8007b2a:	0252      	lsls	r2, r2, #9
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	2290      	movs	r2, #144	@ 0x90
 8007b30:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b32:	4a20      	ldr	r2, [pc, #128]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b34:	2390      	movs	r3, #144	@ 0x90
 8007b36:	58d3      	ldr	r3, [r2, r3]
 8007b38:	491e      	ldr	r1, [pc, #120]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b3a:	4a21      	ldr	r2, [pc, #132]	@ (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	2290      	movs	r2, #144	@ 0x90
 8007b40:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b42:	491c      	ldr	r1, [pc, #112]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b44:	2290      	movs	r2, #144	@ 0x90
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	4013      	ands	r3, r2
 8007b50:	d017      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b52:	f7fe fa09 	bl	8005f68 <HAL_GetTick>
 8007b56:	0003      	movs	r3, r0
 8007b58:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b5a:	e00c      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b5c:	f7fe fa04 	bl	8005f68 <HAL_GetTick>
 8007b60:	0002      	movs	r2, r0
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	4a17      	ldr	r2, [pc, #92]	@ (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d904      	bls.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8007b6c:	2313      	movs	r3, #19
 8007b6e:	18fb      	adds	r3, r7, r3
 8007b70:	2203      	movs	r2, #3
 8007b72:	701a      	strb	r2, [r3, #0]
            break;
 8007b74:	e005      	b.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b76:	4a0f      	ldr	r2, [pc, #60]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b78:	2390      	movs	r3, #144	@ 0x90
 8007b7a:	58d3      	ldr	r3, [r2, r3]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	4013      	ands	r3, r2
 8007b80:	d0ec      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8007b82:	2313      	movs	r3, #19
 8007b84:	18fb      	adds	r3, r7, r3
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10b      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b8c:	4a09      	ldr	r2, [pc, #36]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b8e:	2390      	movs	r3, #144	@ 0x90
 8007b90:	58d3      	ldr	r3, [r2, r3]
 8007b92:	4a0a      	ldr	r2, [pc, #40]	@ (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b94:	401a      	ands	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9a:	4906      	ldr	r1, [pc, #24]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	2290      	movs	r2, #144	@ 0x90
 8007ba0:	508b      	str	r3, [r1, r2]
 8007ba2:	e017      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ba4:	2312      	movs	r3, #18
 8007ba6:	18fb      	adds	r3, r7, r3
 8007ba8:	2213      	movs	r2, #19
 8007baa:	18ba      	adds	r2, r7, r2
 8007bac:	7812      	ldrb	r2, [r2, #0]
 8007bae:	701a      	strb	r2, [r3, #0]
 8007bb0:	e010      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007bb2:	46c0      	nop			@ (mov r8, r8)
 8007bb4:	40021000 	.word	0x40021000
 8007bb8:	40007000 	.word	0x40007000
 8007bbc:	fffffcff 	.word	0xfffffcff
 8007bc0:	fffeffff 	.word	0xfffeffff
 8007bc4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc8:	2312      	movs	r3, #18
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	2213      	movs	r2, #19
 8007bce:	18ba      	adds	r2, r7, r2
 8007bd0:	7812      	ldrb	r2, [r2, #0]
 8007bd2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007bd4:	2311      	movs	r3, #17
 8007bd6:	18fb      	adds	r3, r7, r3
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d105      	bne.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bde:	4ba4      	ldr	r3, [pc, #656]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007be0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007be2:	4ba3      	ldr	r3, [pc, #652]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007be4:	49a3      	ldr	r1, [pc, #652]	@ (8007e74 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8007be6:	400a      	ands	r2, r1
 8007be8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	d00b      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bf4:	4a9e      	ldr	r2, [pc, #632]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007bf6:	2388      	movs	r3, #136	@ 0x88
 8007bf8:	58d3      	ldr	r3, [r2, r3]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	4393      	bics	r3, r2
 8007bfe:	001a      	movs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	499a      	ldr	r1, [pc, #616]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c06:	4313      	orrs	r3, r2
 8007c08:	2288      	movs	r2, #136	@ 0x88
 8007c0a:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2202      	movs	r2, #2
 8007c12:	4013      	ands	r3, r2
 8007c14:	d00b      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c16:	4a96      	ldr	r2, [pc, #600]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c18:	2388      	movs	r3, #136	@ 0x88
 8007c1a:	58d3      	ldr	r3, [r2, r3]
 8007c1c:	220c      	movs	r2, #12
 8007c1e:	4393      	bics	r3, r2
 8007c20:	001a      	movs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	4992      	ldr	r1, [pc, #584]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	2288      	movs	r2, #136	@ 0x88
 8007c2c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2210      	movs	r2, #16
 8007c34:	4013      	ands	r3, r2
 8007c36:	d00a      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c38:	4a8d      	ldr	r2, [pc, #564]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c3a:	2388      	movs	r3, #136	@ 0x88
 8007c3c:	58d3      	ldr	r3, [r2, r3]
 8007c3e:	4a8e      	ldr	r2, [pc, #568]	@ (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8007c40:	401a      	ands	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	498a      	ldr	r1, [pc, #552]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	2288      	movs	r2, #136	@ 0x88
 8007c4c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2208      	movs	r2, #8
 8007c54:	4013      	ands	r3, r2
 8007c56:	d00a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8007c58:	4a85      	ldr	r2, [pc, #532]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c5a:	2388      	movs	r3, #136	@ 0x88
 8007c5c:	58d3      	ldr	r3, [r2, r3]
 8007c5e:	4a87      	ldr	r2, [pc, #540]	@ (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8007c60:	401a      	ands	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	4982      	ldr	r1, [pc, #520]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	2288      	movs	r2, #136	@ 0x88
 8007c6c:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2204      	movs	r2, #4
 8007c74:	4013      	ands	r3, r2
 8007c76:	d00b      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8007c78:	4a7d      	ldr	r2, [pc, #500]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c7a:	2388      	movs	r3, #136	@ 0x88
 8007c7c:	58d3      	ldr	r3, [r2, r3]
 8007c7e:	22c0      	movs	r2, #192	@ 0xc0
 8007c80:	4393      	bics	r3, r2
 8007c82:	001a      	movs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	4979      	ldr	r1, [pc, #484]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	2288      	movs	r2, #136	@ 0x88
 8007c8e:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2220      	movs	r2, #32
 8007c96:	4013      	ands	r3, r2
 8007c98:	d00a      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c9a:	4a75      	ldr	r2, [pc, #468]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007c9c:	2388      	movs	r3, #136	@ 0x88
 8007c9e:	58d3      	ldr	r3, [r2, r3]
 8007ca0:	4a77      	ldr	r2, [pc, #476]	@ (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007ca2:	401a      	ands	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	4971      	ldr	r1, [pc, #452]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	2288      	movs	r2, #136	@ 0x88
 8007cae:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2240      	movs	r2, #64	@ 0x40
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	d00a      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007cba:	4a6d      	ldr	r2, [pc, #436]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cbc:	2388      	movs	r3, #136	@ 0x88
 8007cbe:	58d3      	ldr	r3, [r2, r3]
 8007cc0:	4a70      	ldr	r2, [pc, #448]	@ (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8007cc2:	401a      	ands	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	4969      	ldr	r1, [pc, #420]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	2288      	movs	r2, #136	@ 0x88
 8007cce:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2280      	movs	r2, #128	@ 0x80
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	d00a      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cda:	4a65      	ldr	r2, [pc, #404]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cdc:	2388      	movs	r3, #136	@ 0x88
 8007cde:	58d3      	ldr	r3, [r2, r3]
 8007ce0:	4a69      	ldr	r2, [pc, #420]	@ (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007ce2:	401a      	ands	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	4961      	ldr	r1, [pc, #388]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	2288      	movs	r2, #136	@ 0x88
 8007cee:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	2380      	movs	r3, #128	@ 0x80
 8007cf6:	005b      	lsls	r3, r3, #1
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	d00a      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cfc:	4a5c      	ldr	r2, [pc, #368]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007cfe:	2388      	movs	r3, #136	@ 0x88
 8007d00:	58d3      	ldr	r3, [r2, r3]
 8007d02:	4a62      	ldr	r2, [pc, #392]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007d04:	401a      	ands	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	4959      	ldr	r1, [pc, #356]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	2288      	movs	r2, #136	@ 0x88
 8007d10:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	2380      	movs	r3, #128	@ 0x80
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	d00a      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007d1e:	4a54      	ldr	r2, [pc, #336]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d20:	2388      	movs	r3, #136	@ 0x88
 8007d22:	58d3      	ldr	r3, [r2, r3]
 8007d24:	4a5a      	ldr	r2, [pc, #360]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8007d26:	401a      	ands	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2c:	4950      	ldr	r1, [pc, #320]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	2288      	movs	r2, #136	@ 0x88
 8007d32:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	2380      	movs	r3, #128	@ 0x80
 8007d3a:	01db      	lsls	r3, r3, #7
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d017      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d44:	2380      	movs	r3, #128	@ 0x80
 8007d46:	055b      	lsls	r3, r3, #21
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d106      	bne.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8007d4c:	4b48      	ldr	r3, [pc, #288]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	4b47      	ldr	r3, [pc, #284]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d52:	2180      	movs	r1, #128	@ 0x80
 8007d54:	0249      	lsls	r1, r1, #9
 8007d56:	430a      	orrs	r2, r1
 8007d58:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d5a:	4a45      	ldr	r2, [pc, #276]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d5c:	2388      	movs	r3, #136	@ 0x88
 8007d5e:	58d3      	ldr	r3, [r2, r3]
 8007d60:	4a4c      	ldr	r2, [pc, #304]	@ (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8007d62:	401a      	ands	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d68:	4941      	ldr	r1, [pc, #260]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	2288      	movs	r2, #136	@ 0x88
 8007d6e:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	2380      	movs	r3, #128	@ 0x80
 8007d76:	015b      	lsls	r3, r3, #5
 8007d78:	4013      	ands	r3, r2
 8007d7a:	d017      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d80:	2380      	movs	r3, #128	@ 0x80
 8007d82:	051b      	lsls	r3, r3, #20
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d106      	bne.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007d88:	4b39      	ldr	r3, [pc, #228]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	4b38      	ldr	r3, [pc, #224]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d8e:	2180      	movs	r1, #128	@ 0x80
 8007d90:	0449      	lsls	r1, r1, #17
 8007d92:	430a      	orrs	r2, r1
 8007d94:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d96:	4a36      	ldr	r2, [pc, #216]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007d98:	2388      	movs	r3, #136	@ 0x88
 8007d9a:	58d3      	ldr	r3, [r2, r3]
 8007d9c:	4a3e      	ldr	r2, [pc, #248]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d9e:	401a      	ands	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007da4:	4932      	ldr	r1, [pc, #200]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	2288      	movs	r2, #136	@ 0x88
 8007daa:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	2380      	movs	r3, #128	@ 0x80
 8007db2:	019b      	lsls	r3, r3, #6
 8007db4:	4013      	ands	r3, r2
 8007db6:	d017      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dbc:	2380      	movs	r3, #128	@ 0x80
 8007dbe:	051b      	lsls	r3, r3, #20
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d106      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	4b29      	ldr	r3, [pc, #164]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dca:	2180      	movs	r1, #128	@ 0x80
 8007dcc:	0449      	lsls	r1, r1, #17
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dd2:	4a27      	ldr	r2, [pc, #156]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007dd4:	2388      	movs	r3, #136	@ 0x88
 8007dd6:	58d3      	ldr	r3, [r2, r3]
 8007dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007dda:	401a      	ands	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	4923      	ldr	r1, [pc, #140]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	2288      	movs	r2, #136	@ 0x88
 8007de6:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	2380      	movs	r3, #128	@ 0x80
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	4013      	ands	r3, r2
 8007df2:	d017      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df8:	2380      	movs	r3, #128	@ 0x80
 8007dfa:	045b      	lsls	r3, r3, #17
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d106      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e00:	4b1b      	ldr	r3, [pc, #108]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	4b1a      	ldr	r3, [pc, #104]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e06:	2180      	movs	r1, #128	@ 0x80
 8007e08:	0449      	lsls	r1, r1, #17
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007e0e:	4a18      	ldr	r2, [pc, #96]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e10:	2388      	movs	r3, #136	@ 0x88
 8007e12:	58d3      	ldr	r3, [r2, r3]
 8007e14:	4a21      	ldr	r2, [pc, #132]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007e16:	401a      	ands	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1c:	4914      	ldr	r1, [pc, #80]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	2288      	movs	r2, #136	@ 0x88
 8007e22:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	2380      	movs	r3, #128	@ 0x80
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	d017      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e34:	2380      	movs	r3, #128	@ 0x80
 8007e36:	049b      	lsls	r3, r3, #18
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d106      	bne.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	4b0b      	ldr	r3, [pc, #44]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e42:	2180      	movs	r1, #128	@ 0x80
 8007e44:	0449      	lsls	r1, r1, #17
 8007e46:	430a      	orrs	r2, r1
 8007e48:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007e4a:	4a09      	ldr	r2, [pc, #36]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e4c:	2388      	movs	r3, #136	@ 0x88
 8007e4e:	58d3      	ldr	r3, [r2, r3]
 8007e50:	4a12      	ldr	r2, [pc, #72]	@ (8007e9c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007e52:	401a      	ands	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e58:	4905      	ldr	r1, [pc, #20]	@ (8007e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	2288      	movs	r2, #136	@ 0x88
 8007e5e:	508b      	str	r3, [r1, r2]

  }

  return status;
 8007e60:	2312      	movs	r3, #18
 8007e62:	18fb      	adds	r3, r7, r3
 8007e64:	781b      	ldrb	r3, [r3, #0]
}
 8007e66:	0018      	movs	r0, r3
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	b006      	add	sp, #24
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	46c0      	nop			@ (mov r8, r8)
 8007e70:	40021000 	.word	0x40021000
 8007e74:	efffffff 	.word	0xefffffff
 8007e78:	fffff3ff 	.word	0xfffff3ff
 8007e7c:	fffffcff 	.word	0xfffffcff
 8007e80:	ffffcfff 	.word	0xffffcfff
 8007e84:	fffcffff 	.word	0xfffcffff
 8007e88:	fff3ffff 	.word	0xfff3ffff
 8007e8c:	ffcfffff 	.word	0xffcfffff
 8007e90:	ff3fffff 	.word	0xff3fffff
 8007e94:	cfffffff 	.word	0xcfffffff
 8007e98:	f3ffffff 	.word	0xf3ffffff
 8007e9c:	feffffff 	.word	0xfeffffff

08007ea0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ea0:	b590      	push	{r4, r7, lr}
 8007ea2:	b089      	sub	sp, #36	@ 0x24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	2380      	movs	r3, #128	@ 0x80
 8007eb0:	021b      	lsls	r3, r3, #8
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d154      	bne.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007eb6:	4ad5      	ldr	r2, [pc, #852]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007eb8:	2390      	movs	r3, #144	@ 0x90
 8007eba:	58d2      	ldr	r2, [r2, r3]
 8007ebc:	23c0      	movs	r3, #192	@ 0xc0
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	23c0      	movs	r3, #192	@ 0xc0
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d039      	beq.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	23c0      	movs	r3, #192	@ 0xc0
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d901      	bls.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007ed8:	f000 fd1a 	bl	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	2380      	movs	r3, #128	@ 0x80
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d006      	beq.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	2380      	movs	r3, #128	@ 0x80
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d00f      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8007ef0:	f000 fd0e 	bl	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ef4:	4ac5      	ldr	r2, [pc, #788]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007ef6:	2390      	movs	r3, #144	@ 0x90
 8007ef8:	58d3      	ldr	r3, [r2, r3]
 8007efa:	2202      	movs	r2, #2
 8007efc:	4013      	ands	r3, r2
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d001      	beq.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8007f02:	f000 fd07 	bl	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 8007f06:	2380      	movs	r3, #128	@ 0x80
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	61fb      	str	r3, [r7, #28]
        break;
 8007f0c:	f000 fd02 	bl	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007f10:	4abe      	ldr	r2, [pc, #760]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f12:	2394      	movs	r3, #148	@ 0x94
 8007f14:	58d3      	ldr	r3, [r2, r3]
 8007f16:	2202      	movs	r2, #2
 8007f18:	4013      	ands	r3, r2
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d001      	beq.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8007f1e:	f000 fcfb 	bl	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8007f22:	4aba      	ldr	r2, [pc, #744]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f24:	2394      	movs	r3, #148	@ 0x94
 8007f26:	58d3      	ldr	r3, [r2, r3]
 8007f28:	2204      	movs	r2, #4
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d103      	bne.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8007f30:	23fa      	movs	r3, #250	@ 0xfa
 8007f32:	61fb      	str	r3, [r7, #28]
        break;
 8007f34:	f000 fcf0 	bl	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 8007f38:	23fa      	movs	r3, #250	@ 0xfa
 8007f3a:	01db      	lsls	r3, r3, #7
 8007f3c:	61fb      	str	r3, [r7, #28]
        break;
 8007f3e:	f000 fceb 	bl	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f42:	4bb2      	ldr	r3, [pc, #712]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	2380      	movs	r3, #128	@ 0x80
 8007f48:	029b      	lsls	r3, r3, #10
 8007f4a:	401a      	ands	r2, r3
 8007f4c:	2380      	movs	r3, #128	@ 0x80
 8007f4e:	029b      	lsls	r3, r3, #10
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d001      	beq.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007f54:	f000 fce2 	bl	800891c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 8007f58:	4bad      	ldr	r3, [pc, #692]	@ (8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 8007f5a:	61fb      	str	r3, [r7, #28]
        break;
 8007f5c:	f000 fcde 	bl	800891c <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	2380      	movs	r3, #128	@ 0x80
 8007f64:	029b      	lsls	r3, r3, #10
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d100      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8007f6a:	e11a      	b.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	2380      	movs	r3, #128	@ 0x80
 8007f70:	029b      	lsls	r3, r3, #10
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d901      	bls.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007f76:	f000 fcd3 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	2380      	movs	r3, #128	@ 0x80
 8007f7e:	025b      	lsls	r3, r3, #9
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d100      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8007f84:	e10d      	b.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	2380      	movs	r3, #128	@ 0x80
 8007f8a:	025b      	lsls	r3, r3, #9
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d901      	bls.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007f90:	f000 fcc6 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	2380      	movs	r3, #128	@ 0x80
 8007f98:	01db      	lsls	r3, r3, #7
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d100      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007f9e:	e1eb      	b.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	2380      	movs	r3, #128	@ 0x80
 8007fa4:	01db      	lsls	r3, r3, #7
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d901      	bls.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8007faa:	f000 fcb9 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	2380      	movs	r3, #128	@ 0x80
 8007fb2:	019b      	lsls	r3, r3, #6
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d101      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 8007fb8:	f000 fc50 	bl	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	2380      	movs	r3, #128	@ 0x80
 8007fc0:	019b      	lsls	r3, r3, #6
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d901      	bls.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8007fc6:	f000 fcab 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	2380      	movs	r3, #128	@ 0x80
 8007fce:	015b      	lsls	r3, r3, #5
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d101      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007fd4:	f000 fbe2 	bl	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	2380      	movs	r3, #128	@ 0x80
 8007fdc:	015b      	lsls	r3, r3, #5
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007fe2:	f000 fc9d 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	2380      	movs	r3, #128	@ 0x80
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d101      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007ff0:	f000 fba9 	bl	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	2380      	movs	r3, #128	@ 0x80
 8007ff8:	011b      	lsls	r3, r3, #4
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d901      	bls.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8007ffe:	f000 fc8f 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	2380      	movs	r3, #128	@ 0x80
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	429a      	cmp	r2, r3
 800800a:	d101      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800800c:	f000 fb70 	bl	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	2380      	movs	r3, #128	@ 0x80
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	429a      	cmp	r2, r3
 8008018:	d901      	bls.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800801a:	f000 fc81 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	2380      	movs	r3, #128	@ 0x80
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	429a      	cmp	r2, r3
 8008026:	d100      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8008028:	e305      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	2380      	movs	r3, #128	@ 0x80
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	429a      	cmp	r2, r3
 8008032:	d901      	bls.n	8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8008034:	f000 fc74 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	2380      	movs	r3, #128	@ 0x80
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	429a      	cmp	r2, r3
 8008040:	d100      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008042:	e29b      	b.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	2380      	movs	r3, #128	@ 0x80
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	429a      	cmp	r2, r3
 800804c:	d901      	bls.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 800804e:	f000 fc67 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2b80      	cmp	r3, #128	@ 0x80
 8008056:	d100      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8008058:	e22f      	b.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b80      	cmp	r3, #128	@ 0x80
 800805e:	d901      	bls.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008060:	f000 fc5e 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b20      	cmp	r3, #32
 8008068:	d80f      	bhi.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8008070:	f000 fc56 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b20      	cmp	r3, #32
 8008078:	d901      	bls.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800807a:	f000 fc51 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	009a      	lsls	r2, r3, #2
 8008082:	4b64      	ldr	r3, [pc, #400]	@ (8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8008084:	18d3      	adds	r3, r2, r3
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	469f      	mov	pc, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b40      	cmp	r3, #64	@ 0x40
 800808e:	d100      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8008090:	e1df      	b.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8008092:	f000 fc45 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008096:	4a5d      	ldr	r2, [pc, #372]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008098:	2388      	movs	r3, #136	@ 0x88
 800809a:	58d3      	ldr	r3, [r2, r3]
 800809c:	2203      	movs	r2, #3
 800809e:	4013      	ands	r3, r2
 80080a0:	617b      	str	r3, [r7, #20]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d025      	beq.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d82d      	bhi.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d013      	beq.n	80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d827      	bhi.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d005      	beq.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 80080c6:	e020      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 80080c8:	f7ff fc40 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 80080cc:	0003      	movs	r3, r0
 80080ce:	61fb      	str	r3, [r7, #28]
            break;
 80080d0:	e022      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 80080d2:	f7ff fb95 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 80080d6:	0003      	movs	r3, r0
 80080d8:	61fb      	str	r3, [r7, #28]
            break;
 80080da:	e01d      	b.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080dc:	4b4b      	ldr	r3, [pc, #300]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	2380      	movs	r3, #128	@ 0x80
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	401a      	ands	r2, r3
 80080e6:	2380      	movs	r3, #128	@ 0x80
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d110      	bne.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 80080ee:	4b4a      	ldr	r3, [pc, #296]	@ (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80080f0:	61fb      	str	r3, [r7, #28]
            break;
 80080f2:	e00d      	b.n	8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80080f4:	4a45      	ldr	r2, [pc, #276]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80080f6:	2390      	movs	r3, #144	@ 0x90
 80080f8:	58d3      	ldr	r3, [r2, r3]
 80080fa:	2202      	movs	r2, #2
 80080fc:	4013      	ands	r3, r2
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d109      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 8008102:	2380      	movs	r3, #128	@ 0x80
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	61fb      	str	r3, [r7, #28]
            break;
 8008108:	e005      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 800810a:	46c0      	nop			@ (mov r8, r8)
 800810c:	f000 fc09 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008110:	46c0      	nop			@ (mov r8, r8)
 8008112:	f000 fc06 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008116:	46c0      	nop			@ (mov r8, r8)
        break;
 8008118:	f000 fc03 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800811c:	4a3b      	ldr	r2, [pc, #236]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800811e:	2388      	movs	r3, #136	@ 0x88
 8008120:	58d3      	ldr	r3, [r2, r3]
 8008122:	220c      	movs	r2, #12
 8008124:	4013      	ands	r3, r2
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b0c      	cmp	r3, #12
 800812c:	d025      	beq.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2b0c      	cmp	r3, #12
 8008132:	d82d      	bhi.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b08      	cmp	r3, #8
 8008138:	d013      	beq.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b08      	cmp	r3, #8
 800813e:	d827      	bhi.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b04      	cmp	r3, #4
 800814a:	d005      	beq.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 800814c:	e020      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 800814e:	f7ff fbfd 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 8008152:	0003      	movs	r3, r0
 8008154:	61fb      	str	r3, [r7, #28]
            break;
 8008156:	e022      	b.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 8008158:	f7ff fb52 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 800815c:	0003      	movs	r3, r0
 800815e:	61fb      	str	r3, [r7, #28]
            break;
 8008160:	e01d      	b.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008162:	4b2a      	ldr	r3, [pc, #168]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	2380      	movs	r3, #128	@ 0x80
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	401a      	ands	r2, r3
 800816c:	2380      	movs	r3, #128	@ 0x80
 800816e:	00db      	lsls	r3, r3, #3
 8008170:	429a      	cmp	r2, r3
 8008172:	d110      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8008174:	4b28      	ldr	r3, [pc, #160]	@ (8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 8008176:	61fb      	str	r3, [r7, #28]
            break;
 8008178:	e00d      	b.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800817a:	4a24      	ldr	r2, [pc, #144]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800817c:	2390      	movs	r3, #144	@ 0x90
 800817e:	58d3      	ldr	r3, [r2, r3]
 8008180:	2202      	movs	r2, #2
 8008182:	4013      	ands	r3, r2
 8008184:	2b02      	cmp	r3, #2
 8008186:	d109      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 8008188:	2380      	movs	r3, #128	@ 0x80
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	61fb      	str	r3, [r7, #28]
            break;
 800818e:	e005      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8008190:	46c0      	nop			@ (mov r8, r8)
 8008192:	f000 fbc6 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008196:	46c0      	nop			@ (mov r8, r8)
 8008198:	f000 fbc3 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800819c:	46c0      	nop			@ (mov r8, r8)
        break;
 800819e:	f000 fbc0 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 80081a2:	f7ff fbd3 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 80081a6:	0003      	movs	r3, r0
 80081a8:	61fb      	str	r3, [r7, #28]
        break;
 80081aa:	f000 fbba 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80081ae:	4a17      	ldr	r2, [pc, #92]	@ (800820c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80081b0:	2388      	movs	r3, #136	@ 0x88
 80081b2:	58d2      	ldr	r2, [r2, r3]
 80081b4:	23c0      	movs	r3, #192	@ 0xc0
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	4013      	ands	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	23c0      	movs	r3, #192	@ 0xc0
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d036      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	23c0      	movs	r3, #192	@ 0xc0
 80081ca:	011b      	lsls	r3, r3, #4
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d83c      	bhi.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	2380      	movs	r3, #128	@ 0x80
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d020      	beq.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	2380      	movs	r3, #128	@ 0x80
 80081de:	011b      	lsls	r3, r3, #4
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d832      	bhi.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	2380      	movs	r3, #128	@ 0x80
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d005      	beq.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 80081f4:	e029      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80081f6:	f7ff fba9 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 80081fa:	0003      	movs	r3, r0
 80081fc:	61fb      	str	r3, [r7, #28]
            break;
 80081fe:	e02b      	b.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 8008200:	f7ff fafe 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 8008204:	0003      	movs	r3, r0
 8008206:	61fb      	str	r3, [r7, #28]
            break;
 8008208:	e026      	b.n	8008258 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800820a:	46c0      	nop			@ (mov r8, r8)
 800820c:	40021000 	.word	0x40021000
 8008210:	0001e848 	.word	0x0001e848
 8008214:	08010100 	.word	0x08010100
 8008218:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800821c:	4bbb      	ldr	r3, [pc, #748]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	2380      	movs	r3, #128	@ 0x80
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	401a      	ands	r2, r3
 8008226:	2380      	movs	r3, #128	@ 0x80
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	429a      	cmp	r2, r3
 800822c:	d110      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 800822e:	4bb8      	ldr	r3, [pc, #736]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8008230:	61fb      	str	r3, [r7, #28]
            break;
 8008232:	e00d      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008234:	4ab5      	ldr	r2, [pc, #724]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008236:	2390      	movs	r3, #144	@ 0x90
 8008238:	58d3      	ldr	r3, [r2, r3]
 800823a:	2202      	movs	r2, #2
 800823c:	4013      	ands	r3, r2
 800823e:	2b02      	cmp	r3, #2
 8008240:	d109      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 8008242:	2380      	movs	r3, #128	@ 0x80
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	61fb      	str	r3, [r7, #28]
            break;
 8008248:	e005      	b.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 800824a:	46c0      	nop			@ (mov r8, r8)
 800824c:	f000 fb69 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008250:	46c0      	nop			@ (mov r8, r8)
 8008252:	f000 fb66 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008256:	46c0      	nop			@ (mov r8, r8)
        break;
 8008258:	f000 fb63 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 800825c:	4aab      	ldr	r2, [pc, #684]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800825e:	2388      	movs	r3, #136	@ 0x88
 8008260:	58d2      	ldr	r2, [r2, r3]
 8008262:	23c0      	movs	r3, #192	@ 0xc0
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4013      	ands	r3, r2
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	23c0      	movs	r3, #192	@ 0xc0
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	429a      	cmp	r2, r3
 8008272:	d02d      	beq.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	23c0      	movs	r3, #192	@ 0xc0
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	429a      	cmp	r2, r3
 800827c:	d833      	bhi.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	2380      	movs	r3, #128	@ 0x80
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	429a      	cmp	r2, r3
 8008286:	d017      	beq.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	2380      	movs	r3, #128	@ 0x80
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	429a      	cmp	r2, r3
 8008290:	d829      	bhi.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	2380      	movs	r3, #128	@ 0x80
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	429a      	cmp	r2, r3
 80082a0:	d005      	beq.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 80082a2:	e020      	b.n	80082e6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 80082a4:	f7ff fb52 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 80082a8:	0003      	movs	r3, r0
 80082aa:	61fb      	str	r3, [r7, #28]
            break;
 80082ac:	e022      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 80082ae:	f7ff faa7 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 80082b2:	0003      	movs	r3, r0
 80082b4:	61fb      	str	r3, [r7, #28]
            break;
 80082b6:	e01d      	b.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082b8:	4b94      	ldr	r3, [pc, #592]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	2380      	movs	r3, #128	@ 0x80
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	401a      	ands	r2, r3
 80082c2:	2380      	movs	r3, #128	@ 0x80
 80082c4:	00db      	lsls	r3, r3, #3
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d110      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 80082ca:	4b91      	ldr	r3, [pc, #580]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80082cc:	61fb      	str	r3, [r7, #28]
            break;
 80082ce:	e00d      	b.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80082d0:	4a8e      	ldr	r2, [pc, #568]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80082d2:	2390      	movs	r3, #144	@ 0x90
 80082d4:	58d3      	ldr	r3, [r2, r3]
 80082d6:	2202      	movs	r2, #2
 80082d8:	4013      	ands	r3, r2
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d109      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 80082de:	2380      	movs	r3, #128	@ 0x80
 80082e0:	021b      	lsls	r3, r3, #8
 80082e2:	61fb      	str	r3, [r7, #28]
            break;
 80082e4:	e005      	b.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 80082e6:	46c0      	nop			@ (mov r8, r8)
 80082e8:	f000 fb1b 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80082ec:	46c0      	nop			@ (mov r8, r8)
 80082ee:	f000 fb18 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80082f2:	46c0      	nop			@ (mov r8, r8)
        break;
 80082f4:	f000 fb15 	bl	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 80082f8:	4a84      	ldr	r2, [pc, #528]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80082fa:	2388      	movs	r3, #136	@ 0x88
 80082fc:	58d3      	ldr	r3, [r2, r3]
 80082fe:	22c0      	movs	r2, #192	@ 0xc0
 8008300:	4013      	ands	r3, r2
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2bc0      	cmp	r3, #192	@ 0xc0
 8008308:	d025      	beq.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2bc0      	cmp	r3, #192	@ 0xc0
 800830e:	d82d      	bhi.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2b80      	cmp	r3, #128	@ 0x80
 8008314:	d013      	beq.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b80      	cmp	r3, #128	@ 0x80
 800831a:	d827      	bhi.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b40      	cmp	r3, #64	@ 0x40
 8008326:	d005      	beq.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 8008328:	e020      	b.n	800836c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 800832a:	f7ff fb0f 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 800832e:	0003      	movs	r3, r0
 8008330:	61fb      	str	r3, [r7, #28]
            break;
 8008332:	e020      	b.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 8008334:	f7ff fa64 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 8008338:	0003      	movs	r3, r0
 800833a:	61fb      	str	r3, [r7, #28]
            break;
 800833c:	e01b      	b.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800833e:	4b73      	ldr	r3, [pc, #460]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	2380      	movs	r3, #128	@ 0x80
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	401a      	ands	r2, r3
 8008348:	2380      	movs	r3, #128	@ 0x80
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	429a      	cmp	r2, r3
 800834e:	d10f      	bne.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8008350:	4b6f      	ldr	r3, [pc, #444]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8008352:	61fb      	str	r3, [r7, #28]
            break;
 8008354:	e00c      	b.n	8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008356:	4a6d      	ldr	r2, [pc, #436]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008358:	2390      	movs	r3, #144	@ 0x90
 800835a:	58d3      	ldr	r3, [r2, r3]
 800835c:	2202      	movs	r2, #2
 800835e:	4013      	ands	r3, r2
 8008360:	2b02      	cmp	r3, #2
 8008362:	d107      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8008364:	2380      	movs	r3, #128	@ 0x80
 8008366:	021b      	lsls	r3, r3, #8
 8008368:	61fb      	str	r3, [r7, #28]
            break;
 800836a:	e003      	b.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 800836c:	46c0      	nop			@ (mov r8, r8)
 800836e:	e2d8      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008370:	46c0      	nop			@ (mov r8, r8)
 8008372:	e2d6      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008374:	46c0      	nop			@ (mov r8, r8)
        break;
 8008376:	e2d4      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008378:	4a64      	ldr	r2, [pc, #400]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800837a:	2388      	movs	r3, #136	@ 0x88
 800837c:	58d2      	ldr	r2, [r2, r3]
 800837e:	23c0      	movs	r3, #192	@ 0xc0
 8008380:	059b      	lsls	r3, r3, #22
 8008382:	4013      	ands	r3, r2
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	2380      	movs	r3, #128	@ 0x80
 800838a:	059b      	lsls	r3, r3, #22
 800838c:	429a      	cmp	r2, r3
 800838e:	d012      	beq.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	2380      	movs	r3, #128	@ 0x80
 8008394:	059b      	lsls	r3, r3, #22
 8008396:	429a      	cmp	r2, r3
 8008398:	d825      	bhi.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d005      	beq.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	2380      	movs	r3, #128	@ 0x80
 80083a4:	055b      	lsls	r3, r3, #21
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d014      	beq.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 80083aa:	e01c      	b.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 80083ac:	f7ff fa28 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 80083b0:	0003      	movs	r3, r0
 80083b2:	61fb      	str	r3, [r7, #28]
            break;
 80083b4:	e018      	b.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083b6:	4b55      	ldr	r3, [pc, #340]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	2380      	movs	r3, #128	@ 0x80
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	401a      	ands	r2, r3
 80083c0:	2380      	movs	r3, #128	@ 0x80
 80083c2:	00db      	lsls	r3, r3, #3
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d102      	bne.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 80083c8:	4b51      	ldr	r3, [pc, #324]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80083ca:	61fb      	str	r3, [r7, #28]
            break;
 80083cc:	e00c      	b.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	61fb      	str	r3, [r7, #28]
            break;
 80083d2:	e009      	b.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80083d4:	2408      	movs	r4, #8
 80083d6:	193b      	adds	r3, r7, r4
 80083d8:	0018      	movs	r0, r3
 80083da:	f000 faad 	bl	8008938 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 80083de:	193b      	adds	r3, r7, r4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	61fb      	str	r3, [r7, #28]
            break;
 80083e4:	e000      	b.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 80083e6:	46c0      	nop			@ (mov r8, r8)
        break;
 80083e8:	e29b      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80083ea:	4a48      	ldr	r2, [pc, #288]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80083ec:	2388      	movs	r3, #136	@ 0x88
 80083ee:	58d2      	ldr	r2, [r2, r3]
 80083f0:	23c0      	movs	r3, #192	@ 0xc0
 80083f2:	019b      	lsls	r3, r3, #6
 80083f4:	4013      	ands	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	2380      	movs	r3, #128	@ 0x80
 80083fc:	019b      	lsls	r3, r3, #6
 80083fe:	429a      	cmp	r2, r3
 8008400:	d017      	beq.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	2380      	movs	r3, #128	@ 0x80
 8008406:	019b      	lsls	r3, r3, #6
 8008408:	429a      	cmp	r2, r3
 800840a:	d81e      	bhi.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	2380      	movs	r3, #128	@ 0x80
 8008416:	015b      	lsls	r3, r3, #5
 8008418:	429a      	cmp	r2, r3
 800841a:	d005      	beq.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 800841c:	e015      	b.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 800841e:	f7ff fa95 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 8008422:	0003      	movs	r3, r0
 8008424:	61fb      	str	r3, [r7, #28]
            break;
 8008426:	e013      	b.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 8008428:	f7ff f9ea 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 800842c:	0003      	movs	r3, r0
 800842e:	61fb      	str	r3, [r7, #28]
            break;
 8008430:	e00e      	b.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008432:	4b36      	ldr	r3, [pc, #216]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	2380      	movs	r3, #128	@ 0x80
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	401a      	ands	r2, r3
 800843c:	2380      	movs	r3, #128	@ 0x80
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	429a      	cmp	r2, r3
 8008442:	d104      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 8008444:	4b32      	ldr	r3, [pc, #200]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8008446:	61fb      	str	r3, [r7, #28]
            break;
 8008448:	e001      	b.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 800844a:	46c0      	nop			@ (mov r8, r8)
 800844c:	e269      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800844e:	46c0      	nop			@ (mov r8, r8)
        break;
 8008450:	e267      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008452:	4a2e      	ldr	r2, [pc, #184]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8008454:	2388      	movs	r3, #136	@ 0x88
 8008456:	58d2      	ldr	r2, [r2, r3]
 8008458:	23c0      	movs	r3, #192	@ 0xc0
 800845a:	029b      	lsls	r3, r3, #10
 800845c:	4013      	ands	r3, r2
 800845e:	617b      	str	r3, [r7, #20]
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	2380      	movs	r3, #128	@ 0x80
 8008464:	029b      	lsls	r3, r3, #10
 8008466:	429a      	cmp	r2, r3
 8008468:	d017      	beq.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	2380      	movs	r3, #128	@ 0x80
 800846e:	029b      	lsls	r3, r3, #10
 8008470:	429a      	cmp	r2, r3
 8008472:	d81e      	bhi.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d005      	beq.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	2380      	movs	r3, #128	@ 0x80
 800847e:	025b      	lsls	r3, r3, #9
 8008480:	429a      	cmp	r2, r3
 8008482:	d005      	beq.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8008484:	e015      	b.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008486:	f7ff fa61 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 800848a:	0003      	movs	r3, r0
 800848c:	61fb      	str	r3, [r7, #28]
            break;
 800848e:	e013      	b.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8008490:	f7ff f9b6 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 8008494:	0003      	movs	r3, r0
 8008496:	61fb      	str	r3, [r7, #28]
            break;
 8008498:	e00e      	b.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800849a:	4b1c      	ldr	r3, [pc, #112]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	2380      	movs	r3, #128	@ 0x80
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	401a      	ands	r2, r3
 80084a4:	2380      	movs	r3, #128	@ 0x80
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d104      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 80084ac:	4b18      	ldr	r3, [pc, #96]	@ (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80084ae:	61fb      	str	r3, [r7, #28]
            break;
 80084b0:	e001      	b.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 80084b2:	46c0      	nop			@ (mov r8, r8)
 80084b4:	e235      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80084b6:	46c0      	nop			@ (mov r8, r8)
        break;
 80084b8:	e233      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80084ba:	4a14      	ldr	r2, [pc, #80]	@ (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80084bc:	2388      	movs	r3, #136	@ 0x88
 80084be:	58d2      	ldr	r2, [r2, r3]
 80084c0:	23c0      	movs	r3, #192	@ 0xc0
 80084c2:	031b      	lsls	r3, r3, #12
 80084c4:	4013      	ands	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	23c0      	movs	r3, #192	@ 0xc0
 80084cc:	031b      	lsls	r3, r3, #12
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d041      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	23c0      	movs	r3, #192	@ 0xc0
 80084d6:	031b      	lsls	r3, r3, #12
 80084d8:	429a      	cmp	r2, r3
 80084da:	d847      	bhi.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	2380      	movs	r3, #128	@ 0x80
 80084e0:	031b      	lsls	r3, r3, #12
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d02b      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	2380      	movs	r3, #128	@ 0x80
 80084ea:	031b      	lsls	r3, r3, #12
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d83d      	bhi.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	2380      	movs	r3, #128	@ 0x80
 80084fa:	02db      	lsls	r3, r3, #11
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d009      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 8008500:	e034      	b.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 8008502:	f7ff fa23 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 8008506:	0003      	movs	r3, r0
 8008508:	61fb      	str	r3, [r7, #28]
            break;
 800850a:	e036      	b.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800850c:	40021000 	.word	0x40021000
 8008510:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008514:	4abd      	ldr	r2, [pc, #756]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008516:	2394      	movs	r3, #148	@ 0x94
 8008518:	58d3      	ldr	r3, [r2, r3]
 800851a:	2202      	movs	r2, #2
 800851c:	4013      	ands	r3, r2
 800851e:	2b02      	cmp	r3, #2
 8008520:	d126      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8008522:	4aba      	ldr	r2, [pc, #744]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008524:	2394      	movs	r3, #148	@ 0x94
 8008526:	58d3      	ldr	r3, [r2, r3]
 8008528:	2204      	movs	r2, #4
 800852a:	4013      	ands	r3, r2
 800852c:	2b04      	cmp	r3, #4
 800852e:	d102      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 8008530:	23fa      	movs	r3, #250	@ 0xfa
 8008532:	61fb      	str	r3, [r7, #28]
            break;
 8008534:	e01c      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 8008536:	23fa      	movs	r3, #250	@ 0xfa
 8008538:	01db      	lsls	r3, r3, #7
 800853a:	61fb      	str	r3, [r7, #28]
            break;
 800853c:	e018      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800853e:	4bb3      	ldr	r3, [pc, #716]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	2380      	movs	r3, #128	@ 0x80
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	401a      	ands	r2, r3
 8008548:	2380      	movs	r3, #128	@ 0x80
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	429a      	cmp	r2, r3
 800854e:	d111      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8008550:	4baf      	ldr	r3, [pc, #700]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8008552:	61fb      	str	r3, [r7, #28]
            break;
 8008554:	e00e      	b.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008556:	4aad      	ldr	r2, [pc, #692]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008558:	2390      	movs	r3, #144	@ 0x90
 800855a:	58d3      	ldr	r3, [r2, r3]
 800855c:	2202      	movs	r2, #2
 800855e:	4013      	ands	r3, r2
 8008560:	2b02      	cmp	r3, #2
 8008562:	d109      	bne.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8008564:	2380      	movs	r3, #128	@ 0x80
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	61fb      	str	r3, [r7, #28]
            break;
 800856a:	e005      	b.n	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 800856c:	46c0      	nop			@ (mov r8, r8)
 800856e:	e1d8      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008570:	46c0      	nop			@ (mov r8, r8)
 8008572:	e1d6      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008574:	46c0      	nop			@ (mov r8, r8)
 8008576:	e1d4      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008578:	46c0      	nop			@ (mov r8, r8)
        break;
 800857a:	e1d2      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800857c:	4aa3      	ldr	r2, [pc, #652]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800857e:	2388      	movs	r3, #136	@ 0x88
 8008580:	58d2      	ldr	r2, [r2, r3]
 8008582:	23c0      	movs	r3, #192	@ 0xc0
 8008584:	039b      	lsls	r3, r3, #14
 8008586:	4013      	ands	r3, r2
 8008588:	617b      	str	r3, [r7, #20]
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	23c0      	movs	r3, #192	@ 0xc0
 800858e:	039b      	lsls	r3, r3, #14
 8008590:	429a      	cmp	r2, r3
 8008592:	d03d      	beq.n	8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	23c0      	movs	r3, #192	@ 0xc0
 8008598:	039b      	lsls	r3, r3, #14
 800859a:	429a      	cmp	r2, r3
 800859c:	d843      	bhi.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	2380      	movs	r3, #128	@ 0x80
 80085a2:	039b      	lsls	r3, r3, #14
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d027      	beq.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	2380      	movs	r3, #128	@ 0x80
 80085ac:	039b      	lsls	r3, r3, #14
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d839      	bhi.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	2380      	movs	r3, #128	@ 0x80
 80085bc:	035b      	lsls	r3, r3, #13
 80085be:	429a      	cmp	r2, r3
 80085c0:	d005      	beq.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 80085c2:	e030      	b.n	8008626 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 80085c4:	f7ff f9c2 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 80085c8:	0003      	movs	r3, r0
 80085ca:	61fb      	str	r3, [r7, #28]
            break;
 80085cc:	e032      	b.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80085ce:	4a8f      	ldr	r2, [pc, #572]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085d0:	2394      	movs	r3, #148	@ 0x94
 80085d2:	58d3      	ldr	r3, [r2, r3]
 80085d4:	2202      	movs	r2, #2
 80085d6:	4013      	ands	r3, r2
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d126      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80085dc:	4a8b      	ldr	r2, [pc, #556]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085de:	2394      	movs	r3, #148	@ 0x94
 80085e0:	58d3      	ldr	r3, [r2, r3]
 80085e2:	2204      	movs	r2, #4
 80085e4:	4013      	ands	r3, r2
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d102      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 80085ea:	23fa      	movs	r3, #250	@ 0xfa
 80085ec:	61fb      	str	r3, [r7, #28]
            break;
 80085ee:	e01c      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 80085f0:	23fa      	movs	r3, #250	@ 0xfa
 80085f2:	01db      	lsls	r3, r3, #7
 80085f4:	61fb      	str	r3, [r7, #28]
            break;
 80085f6:	e018      	b.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085f8:	4b84      	ldr	r3, [pc, #528]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	2380      	movs	r3, #128	@ 0x80
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	401a      	ands	r2, r3
 8008602:	2380      	movs	r3, #128	@ 0x80
 8008604:	00db      	lsls	r3, r3, #3
 8008606:	429a      	cmp	r2, r3
 8008608:	d111      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 800860a:	4b81      	ldr	r3, [pc, #516]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800860c:	61fb      	str	r3, [r7, #28]
            break;
 800860e:	e00e      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008610:	4a7e      	ldr	r2, [pc, #504]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008612:	2390      	movs	r3, #144	@ 0x90
 8008614:	58d3      	ldr	r3, [r2, r3]
 8008616:	2202      	movs	r2, #2
 8008618:	4013      	ands	r3, r2
 800861a:	2b02      	cmp	r3, #2
 800861c:	d109      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 800861e:	2380      	movs	r3, #128	@ 0x80
 8008620:	021b      	lsls	r3, r3, #8
 8008622:	61fb      	str	r3, [r7, #28]
            break;
 8008624:	e005      	b.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 8008626:	46c0      	nop			@ (mov r8, r8)
 8008628:	e17b      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800862a:	46c0      	nop			@ (mov r8, r8)
 800862c:	e179      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800862e:	46c0      	nop			@ (mov r8, r8)
 8008630:	e177      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008632:	46c0      	nop			@ (mov r8, r8)
        break;
 8008634:	e175      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008636:	4a75      	ldr	r2, [pc, #468]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008638:	2388      	movs	r3, #136	@ 0x88
 800863a:	58d2      	ldr	r2, [r2, r3]
 800863c:	23c0      	movs	r3, #192	@ 0xc0
 800863e:	041b      	lsls	r3, r3, #16
 8008640:	4013      	ands	r3, r2
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	23c0      	movs	r3, #192	@ 0xc0
 8008648:	041b      	lsls	r3, r3, #16
 800864a:	429a      	cmp	r2, r3
 800864c:	d03d      	beq.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	23c0      	movs	r3, #192	@ 0xc0
 8008652:	041b      	lsls	r3, r3, #16
 8008654:	429a      	cmp	r2, r3
 8008656:	d843      	bhi.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	2380      	movs	r3, #128	@ 0x80
 800865c:	041b      	lsls	r3, r3, #16
 800865e:	429a      	cmp	r2, r3
 8008660:	d027      	beq.n	80086b2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	2380      	movs	r3, #128	@ 0x80
 8008666:	041b      	lsls	r3, r3, #16
 8008668:	429a      	cmp	r2, r3
 800866a:	d839      	bhi.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	2380      	movs	r3, #128	@ 0x80
 8008676:	03db      	lsls	r3, r3, #15
 8008678:	429a      	cmp	r2, r3
 800867a:	d005      	beq.n	8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 800867c:	e030      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 800867e:	f7ff f965 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 8008682:	0003      	movs	r3, r0
 8008684:	61fb      	str	r3, [r7, #28]
            break;
 8008686:	e032      	b.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8008688:	4a60      	ldr	r2, [pc, #384]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800868a:	2394      	movs	r3, #148	@ 0x94
 800868c:	58d3      	ldr	r3, [r2, r3]
 800868e:	2202      	movs	r2, #2
 8008690:	4013      	ands	r3, r2
 8008692:	2b02      	cmp	r3, #2
 8008694:	d126      	bne.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8008696:	4a5d      	ldr	r2, [pc, #372]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008698:	2394      	movs	r3, #148	@ 0x94
 800869a:	58d3      	ldr	r3, [r2, r3]
 800869c:	2204      	movs	r2, #4
 800869e:	4013      	ands	r3, r2
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d102      	bne.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 80086a4:	23fa      	movs	r3, #250	@ 0xfa
 80086a6:	61fb      	str	r3, [r7, #28]
            break;
 80086a8:	e01c      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 80086aa:	23fa      	movs	r3, #250	@ 0xfa
 80086ac:	01db      	lsls	r3, r3, #7
 80086ae:	61fb      	str	r3, [r7, #28]
            break;
 80086b0:	e018      	b.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086b2:	4b56      	ldr	r3, [pc, #344]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	2380      	movs	r3, #128	@ 0x80
 80086b8:	00db      	lsls	r3, r3, #3
 80086ba:	401a      	ands	r2, r3
 80086bc:	2380      	movs	r3, #128	@ 0x80
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d111      	bne.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 80086c4:	4b52      	ldr	r3, [pc, #328]	@ (8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80086c6:	61fb      	str	r3, [r7, #28]
            break;
 80086c8:	e00e      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086ca:	4a50      	ldr	r2, [pc, #320]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086cc:	2390      	movs	r3, #144	@ 0x90
 80086ce:	58d3      	ldr	r3, [r2, r3]
 80086d0:	2202      	movs	r2, #2
 80086d2:	4013      	ands	r3, r2
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d109      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 80086d8:	2380      	movs	r3, #128	@ 0x80
 80086da:	021b      	lsls	r3, r3, #8
 80086dc:	61fb      	str	r3, [r7, #28]
            break;
 80086de:	e005      	b.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 80086e0:	46c0      	nop			@ (mov r8, r8)
 80086e2:	e11e      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086e4:	46c0      	nop			@ (mov r8, r8)
 80086e6:	e11c      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086e8:	46c0      	nop			@ (mov r8, r8)
 80086ea:	e11a      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80086ec:	46c0      	nop			@ (mov r8, r8)
        break;
 80086ee:	e118      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80086f0:	4a46      	ldr	r2, [pc, #280]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80086f2:	2388      	movs	r3, #136	@ 0x88
 80086f4:	58d2      	ldr	r2, [r2, r3]
 80086f6:	2380      	movs	r3, #128	@ 0x80
 80086f8:	045b      	lsls	r3, r3, #17
 80086fa:	4013      	ands	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	2380      	movs	r3, #128	@ 0x80
 8008708:	045b      	lsls	r3, r3, #17
 800870a:	429a      	cmp	r2, r3
 800870c:	d011      	beq.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 800870e:	e019      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8008710:	4b3e      	ldr	r3, [pc, #248]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	23e0      	movs	r3, #224	@ 0xe0
 8008716:	01db      	lsls	r3, r3, #7
 8008718:	4013      	ands	r3, r2
 800871a:	d104      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 800871c:	f7ff f916 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 8008720:	0003      	movs	r3, r0
 8008722:	61fb      	str	r3, [r7, #28]
            break;
 8008724:	e00e      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8008726:	f7ff f911 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 800872a:	0003      	movs	r3, r0
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	61fb      	str	r3, [r7, #28]
            break;
 8008730:	e008      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008732:	2408      	movs	r4, #8
 8008734:	193b      	adds	r3, r7, r4
 8008736:	0018      	movs	r0, r3
 8008738:	f000 f8fe 	bl	8008938 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 800873c:	193b      	adds	r3, r7, r4
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	61fb      	str	r3, [r7, #28]
            break;
 8008742:	46c0      	nop			@ (mov r8, r8)
        break;
 8008744:	e0ed      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8008746:	4a31      	ldr	r2, [pc, #196]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008748:	2388      	movs	r3, #136	@ 0x88
 800874a:	58d2      	ldr	r2, [r2, r3]
 800874c:	2380      	movs	r3, #128	@ 0x80
 800874e:	049b      	lsls	r3, r3, #18
 8008750:	4013      	ands	r3, r2
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d005      	beq.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	2380      	movs	r3, #128	@ 0x80
 800875e:	049b      	lsls	r3, r3, #18
 8008760:	429a      	cmp	r2, r3
 8008762:	d011      	beq.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8008764:	e019      	b.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8008766:	4b29      	ldr	r3, [pc, #164]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	23e0      	movs	r3, #224	@ 0xe0
 800876c:	01db      	lsls	r3, r3, #7
 800876e:	4013      	ands	r3, r2
 8008770:	d104      	bne.n	800877c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8008772:	f7ff f8eb 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 8008776:	0003      	movs	r3, r0
 8008778:	61fb      	str	r3, [r7, #28]
            break;
 800877a:	e00e      	b.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 800877c:	f7ff f8e6 	bl	800794c <HAL_RCC_GetPCLK1Freq>
 8008780:	0003      	movs	r3, r0
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	61fb      	str	r3, [r7, #28]
            break;
 8008786:	e008      	b.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8008788:	2408      	movs	r4, #8
 800878a:	193b      	adds	r3, r7, r4
 800878c:	0018      	movs	r0, r3
 800878e:	f000 f8d3 	bl	8008938 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8008792:	193b      	adds	r3, r7, r4
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	61fb      	str	r3, [r7, #28]
            break;
 8008798:	46c0      	nop			@ (mov r8, r8)
        break;
 800879a:	e0c2      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800879c:	4a1b      	ldr	r2, [pc, #108]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800879e:	2388      	movs	r3, #136	@ 0x88
 80087a0:	58d2      	ldr	r2, [r2, r3]
 80087a2:	23c0      	movs	r3, #192	@ 0xc0
 80087a4:	051b      	lsls	r3, r3, #20
 80087a6:	4013      	ands	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	23c0      	movs	r3, #192	@ 0xc0
 80087ae:	051b      	lsls	r3, r3, #20
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d017      	beq.n	80087e4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	23c0      	movs	r3, #192	@ 0xc0
 80087b8:	051b      	lsls	r3, r3, #20
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d84a      	bhi.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	2380      	movs	r3, #128	@ 0x80
 80087c2:	051b      	lsls	r3, r3, #20
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d039      	beq.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	2380      	movs	r3, #128	@ 0x80
 80087cc:	051b      	lsls	r3, r3, #20
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d840      	bhi.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d03a      	beq.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	2380      	movs	r3, #128	@ 0x80
 80087dc:	04db      	lsls	r3, r3, #19
 80087de:	429a      	cmp	r2, r3
 80087e0:	d003      	beq.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 80087e2:	e037      	b.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 80087e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 80087e6:	61fb      	str	r3, [r7, #28]
            break;
 80087e8:	e037      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80087ea:	4b08      	ldr	r3, [pc, #32]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2202      	movs	r2, #2
 80087f0:	4013      	ands	r3, r2
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d130      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80087f6:	4b05      	ldr	r3, [pc, #20]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2208      	movs	r2, #8
 80087fc:	4013      	ands	r3, r2
 80087fe:	d00b      	beq.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8008800:	4b02      	ldr	r3, [pc, #8]	@ (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	091b      	lsrs	r3, r3, #4
 8008806:	220f      	movs	r2, #15
 8008808:	4013      	ands	r3, r2
 800880a:	e00b      	b.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 800880c:	40021000 	.word	0x40021000
 8008810:	00f42400 	.word	0x00f42400
 8008814:	02dc6c00 	.word	0x02dc6c00
 8008818:	4a44      	ldr	r2, [pc, #272]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800881a:	2394      	movs	r3, #148	@ 0x94
 800881c:	58d3      	ldr	r3, [r2, r3]
 800881e:	0a1b      	lsrs	r3, r3, #8
 8008820:	220f      	movs	r2, #15
 8008822:	4013      	ands	r3, r2
 8008824:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	2b0b      	cmp	r3, #11
 800882a:	d901      	bls.n	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 800882c:	230b      	movs	r3, #11
 800882e:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8008830:	4b3f      	ldr	r3, [pc, #252]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	0092      	lsls	r2, r2, #2
 8008836:	58d3      	ldr	r3, [r2, r3]
 8008838:	61fb      	str	r3, [r7, #28]
            break;
 800883a:	e00d      	b.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800883c:	2408      	movs	r4, #8
 800883e:	193b      	adds	r3, r7, r4
 8008840:	0018      	movs	r0, r3
 8008842:	f000 f879 	bl	8008938 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8008846:	193b      	adds	r3, r7, r4
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	61fb      	str	r3, [r7, #28]
            break;
 800884c:	e005      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	61fb      	str	r3, [r7, #28]
            break;
 8008852:	e002      	b.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8008854:	46c0      	nop			@ (mov r8, r8)
 8008856:	e064      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8008858:	46c0      	nop			@ (mov r8, r8)
        break;
 800885a:	e062      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800885c:	4a33      	ldr	r2, [pc, #204]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 800885e:	2388      	movs	r3, #136	@ 0x88
 8008860:	58d2      	ldr	r2, [r2, r3]
 8008862:	23c0      	movs	r3, #192	@ 0xc0
 8008864:	051b      	lsls	r3, r3, #20
 8008866:	4013      	ands	r3, r2
 8008868:	617b      	str	r3, [r7, #20]
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	23c0      	movs	r3, #192	@ 0xc0
 800886e:	051b      	lsls	r3, r3, #20
 8008870:	429a      	cmp	r2, r3
 8008872:	d017      	beq.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	23c0      	movs	r3, #192	@ 0xc0
 8008878:	051b      	lsls	r3, r3, #20
 800887a:	429a      	cmp	r2, r3
 800887c:	d844      	bhi.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	2380      	movs	r3, #128	@ 0x80
 8008882:	051b      	lsls	r3, r3, #20
 8008884:	429a      	cmp	r2, r3
 8008886:	d033      	beq.n	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	2380      	movs	r3, #128	@ 0x80
 800888c:	051b      	lsls	r3, r3, #20
 800888e:	429a      	cmp	r2, r3
 8008890:	d83a      	bhi.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d034      	beq.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	2380      	movs	r3, #128	@ 0x80
 800889c:	04db      	lsls	r3, r3, #19
 800889e:	429a      	cmp	r2, r3
 80088a0:	d003      	beq.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 80088a2:	e031      	b.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 80088a4:	4b23      	ldr	r3, [pc, #140]	@ (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 80088a6:	61fb      	str	r3, [r7, #28]
            break;
 80088a8:	e031      	b.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80088aa:	4b20      	ldr	r3, [pc, #128]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2202      	movs	r2, #2
 80088b0:	4013      	ands	r3, r2
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d12a      	bne.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80088b6:	4b1d      	ldr	r3, [pc, #116]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2208      	movs	r2, #8
 80088bc:	4013      	ands	r3, r2
 80088be:	d005      	beq.n	80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 80088c0:	4b1a      	ldr	r3, [pc, #104]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	091b      	lsrs	r3, r3, #4
 80088c6:	220f      	movs	r2, #15
 80088c8:	4013      	ands	r3, r2
 80088ca:	e005      	b.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80088cc:	4a17      	ldr	r2, [pc, #92]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80088ce:	2394      	movs	r3, #148	@ 0x94
 80088d0:	58d3      	ldr	r3, [r2, r3]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	220f      	movs	r2, #15
 80088d6:	4013      	ands	r3, r2
 80088d8:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	2b0b      	cmp	r3, #11
 80088de:	d901      	bls.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 80088e0:	230b      	movs	r3, #11
 80088e2:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80088e4:	4b12      	ldr	r3, [pc, #72]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	58d3      	ldr	r3, [r2, r3]
 80088ec:	61fb      	str	r3, [r7, #28]
            break;
 80088ee:	e00d      	b.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80088f0:	2408      	movs	r4, #8
 80088f2:	193b      	adds	r3, r7, r4
 80088f4:	0018      	movs	r0, r3
 80088f6:	f000 f81f 	bl	8008938 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80088fa:	193b      	adds	r3, r7, r4
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	61fb      	str	r3, [r7, #28]
            break;
 8008900:	e005      	b.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	61fb      	str	r3, [r7, #28]
            break;
 8008906:	e002      	b.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 8008908:	46c0      	nop			@ (mov r8, r8)
 800890a:	e00a      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800890c:	46c0      	nop			@ (mov r8, r8)
        break;
 800890e:	e008      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008910:	46c0      	nop			@ (mov r8, r8)
 8008912:	e006      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008914:	46c0      	nop			@ (mov r8, r8)
 8008916:	e004      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008918:	46c0      	nop			@ (mov r8, r8)
 800891a:	e002      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 800891c:	46c0      	nop			@ (mov r8, r8)
 800891e:	e000      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8008920:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8008922:	69fb      	ldr	r3, [r7, #28]
}
 8008924:	0018      	movs	r0, r3
 8008926:	46bd      	mov	sp, r7
 8008928:	b009      	add	sp, #36	@ 0x24
 800892a:	bd90      	pop	{r4, r7, pc}
 800892c:	40021000 	.word	0x40021000
 8008930:	080100d0 	.word	0x080100d0
 8008934:	02dc6c00 	.word	0x02dc6c00

08008938 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008940:	4b58      	ldr	r3, [pc, #352]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	0a1b      	lsrs	r3, r3, #8
 8008946:	227f      	movs	r2, #127	@ 0x7f
 8008948:	4013      	ands	r3, r2
 800894a:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800894c:	4b55      	ldr	r3, [pc, #340]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	2203      	movs	r2, #3
 8008952:	4013      	ands	r3, r2
 8008954:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8008956:	4b53      	ldr	r3, [pc, #332]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	091b      	lsrs	r3, r3, #4
 800895c:	2207      	movs	r2, #7
 800895e:	4013      	ands	r3, r2
 8008960:	3301      	adds	r3, #1
 8008962:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8008964:	4b4f      	ldr	r3, [pc, #316]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2208      	movs	r2, #8
 800896a:	4013      	ands	r3, r2
 800896c:	d005      	beq.n	800897a <HAL_RCCEx_GetPLLClockFreq+0x42>
 800896e:	4b4d      	ldr	r3, [pc, #308]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	091b      	lsrs	r3, r3, #4
 8008974:	220f      	movs	r2, #15
 8008976:	4013      	ands	r3, r2
 8008978:	e005      	b.n	8008986 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 800897a:	4a4a      	ldr	r2, [pc, #296]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 800897c:	2394      	movs	r3, #148	@ 0x94
 800897e:	58d3      	ldr	r3, [r2, r3]
 8008980:	0a1b      	lsrs	r3, r3, #8
 8008982:	220f      	movs	r2, #15
 8008984:	4013      	ands	r3, r2
 8008986:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	2b0b      	cmp	r3, #11
 800898c:	d901      	bls.n	8008992 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 800898e:	230b      	movs	r3, #11
 8008990:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b03      	cmp	r3, #3
 8008996:	d020      	beq.n	80089da <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	2b03      	cmp	r3, #3
 800899c:	d827      	bhi.n	80089ee <HAL_RCCEx_GetPLLClockFreq+0xb6>
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d00c      	beq.n	80089be <HAL_RCCEx_GetPLLClockFreq+0x86>
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d121      	bne.n	80089ee <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 80089aa:	68f9      	ldr	r1, [r7, #12]
 80089ac:	483e      	ldr	r0, [pc, #248]	@ (8008aa8 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 80089ae:	f7f7 fbc7 	bl	8000140 <__udivsi3>
 80089b2:	0003      	movs	r3, r0
 80089b4:	001a      	movs	r2, r3
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	4353      	muls	r3, r2
 80089ba:	61fb      	str	r3, [r7, #28]
      break;
 80089bc:	e025      	b.n	8008a0a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80089be:	4b3b      	ldr	r3, [pc, #236]	@ (8008aac <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	0092      	lsls	r2, r2, #2
 80089c4:	58d3      	ldr	r3, [r2, r3]
 80089c6:	68f9      	ldr	r1, [r7, #12]
 80089c8:	0018      	movs	r0, r3
 80089ca:	f7f7 fbb9 	bl	8000140 <__udivsi3>
 80089ce:	0003      	movs	r3, r0
 80089d0:	001a      	movs	r2, r3
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	4353      	muls	r3, r2
 80089d6:	61fb      	str	r3, [r7, #28]
      break;
 80089d8:	e017      	b.n	8008a0a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 80089da:	68f9      	ldr	r1, [r7, #12]
 80089dc:	4834      	ldr	r0, [pc, #208]	@ (8008ab0 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 80089de:	f7f7 fbaf 	bl	8000140 <__udivsi3>
 80089e2:	0003      	movs	r3, r0
 80089e4:	001a      	movs	r2, r3
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	4353      	muls	r3, r2
 80089ea:	61fb      	str	r3, [r7, #28]
      break;
 80089ec:	e00d      	b.n	8008a0a <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 80089ee:	4b2f      	ldr	r3, [pc, #188]	@ (8008aac <HAL_RCCEx_GetPLLClockFreq+0x174>)
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	0092      	lsls	r2, r2, #2
 80089f4:	58d3      	ldr	r3, [r2, r3]
 80089f6:	68f9      	ldr	r1, [r7, #12]
 80089f8:	0018      	movs	r0, r3
 80089fa:	f7f7 fba1 	bl	8000140 <__udivsi3>
 80089fe:	0003      	movs	r3, r0
 8008a00:	001a      	movs	r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	4353      	muls	r3, r2
 8008a06:	61fb      	str	r3, [r7, #28]
      break;
 8008a08:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8008a0a:	4b26      	ldr	r3, [pc, #152]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	2380      	movs	r3, #128	@ 0x80
 8008a10:	025b      	lsls	r3, r3, #9
 8008a12:	4013      	ands	r3, r2
 8008a14:	d00e      	beq.n	8008a34 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008a16:	4b23      	ldr	r3, [pc, #140]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a18:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8008a1a:	0c5b      	lsrs	r3, r3, #17
 8008a1c:	221f      	movs	r2, #31
 8008a1e:	4013      	ands	r3, r2
 8008a20:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8008a22:	0019      	movs	r1, r3
 8008a24:	69f8      	ldr	r0, [r7, #28]
 8008a26:	f7f7 fb8b 	bl	8000140 <__udivsi3>
 8008a2a:	0003      	movs	r3, r0
 8008a2c:	001a      	movs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e002      	b.n	8008a3a <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8008a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	2380      	movs	r3, #128	@ 0x80
 8008a40:	045b      	lsls	r3, r3, #17
 8008a42:	4013      	ands	r3, r2
 8008a44:	d00e      	beq.n	8008a64 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008a46:	4b17      	ldr	r3, [pc, #92]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a48:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8008a4a:	0e5b      	lsrs	r3, r3, #25
 8008a4c:	2207      	movs	r2, #7
 8008a4e:	4013      	ands	r3, r2
 8008a50:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8008a52:	0019      	movs	r1, r3
 8008a54:	69f8      	ldr	r0, [r7, #28]
 8008a56:	f7f7 fb73 	bl	8000140 <__udivsi3>
 8008a5a:	0003      	movs	r3, r0
 8008a5c:	001a      	movs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	605a      	str	r2, [r3, #4]
 8008a62:	e002      	b.n	8008a6a <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8008a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	2380      	movs	r3, #128	@ 0x80
 8008a70:	055b      	lsls	r3, r3, #21
 8008a72:	4013      	ands	r3, r2
 8008a74:	d00e      	beq.n	8008a94 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008a76:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa4 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8008a78:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8008a7a:	0f5b      	lsrs	r3, r3, #29
 8008a7c:	2207      	movs	r2, #7
 8008a7e:	4013      	ands	r3, r2
 8008a80:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8008a82:	0019      	movs	r1, r3
 8008a84:	69f8      	ldr	r0, [r7, #28]
 8008a86:	f7f7 fb5b 	bl	8000140 <__udivsi3>
 8008a8a:	0003      	movs	r3, r0
 8008a8c:	001a      	movs	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8008a92:	e002      	b.n	8008a9a <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	609a      	str	r2, [r3, #8]
}
 8008a9a:	46c0      	nop			@ (mov r8, r8)
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	b008      	add	sp, #32
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	46c0      	nop			@ (mov r8, r8)
 8008aa4:	40021000 	.word	0x40021000
 8008aa8:	00f42400 	.word	0x00f42400
 8008aac:	080100d0 	.word	0x080100d0
 8008ab0:	003d0900 	.word	0x003d0900

08008ab4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008abc:	210f      	movs	r1, #15
 8008abe:	187b      	adds	r3, r7, r1
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d100      	bne.n	8008acc <HAL_RTC_Init+0x18>
 8008aca:	e08b      	b.n	8008be4 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8008acc:	187b      	adds	r3, r7, r1
 8008ace:	2200      	movs	r2, #0
 8008ad0:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	222d      	movs	r2, #45	@ 0x2d
 8008ad6:	5c9b      	ldrb	r3, [r3, r2]
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d107      	bne.n	8008aee <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	222c      	movs	r2, #44	@ 0x2c
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	0018      	movs	r0, r3
 8008aea:	f7fc fef3 	bl	80058d4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	222d      	movs	r2, #45	@ 0x2d
 8008af2:	2102      	movs	r1, #2
 8008af4:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008af6:	4b3f      	ldr	r3, [pc, #252]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008af8:	22ca      	movs	r2, #202	@ 0xca
 8008afa:	625a      	str	r2, [r3, #36]	@ 0x24
 8008afc:	4b3d      	ldr	r3, [pc, #244]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008afe:	2253      	movs	r2, #83	@ 0x53
 8008b00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	0018      	movs	r0, r3
 8008b06:	f000 f8a1 	bl	8008c4c <RTC_EnterInitMode>
 8008b0a:	1e03      	subs	r3, r0, #0
 8008b0c:	d00b      	beq.n	8008b26 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b0e:	4b39      	ldr	r3, [pc, #228]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b10:	22ff      	movs	r2, #255	@ 0xff
 8008b12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	222d      	movs	r2, #45	@ 0x2d
 8008b18:	2104      	movs	r1, #4
 8008b1a:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8008b1c:	230f      	movs	r3, #15
 8008b1e:	18fb      	adds	r3, r7, r3
 8008b20:	2201      	movs	r2, #1
 8008b22:	701a      	strb	r2, [r3, #0]
 8008b24:	e05e      	b.n	8008be4 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008b26:	4b33      	ldr	r3, [pc, #204]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b28:	699a      	ldr	r2, [r3, #24]
 8008b2a:	4b32      	ldr	r3, [pc, #200]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b2c:	4932      	ldr	r1, [pc, #200]	@ (8008bf8 <HAL_RTC_Init+0x144>)
 8008b2e:	400a      	ands	r2, r1
 8008b30:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008b32:	4b30      	ldr	r3, [pc, #192]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b34:	6999      	ldr	r1, [r3, #24]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	431a      	orrs	r2, r3
 8008b46:	4b2b      	ldr	r3, [pc, #172]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68d9      	ldr	r1, [r3, #12]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	041a      	lsls	r2, r3, #16
 8008b56:	4b27      	ldr	r3, [pc, #156]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008b5c:	4b25      	ldr	r3, [pc, #148]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	4a26      	ldr	r2, [pc, #152]	@ (8008bfc <HAL_RTC_Init+0x148>)
 8008b62:	4013      	ands	r3, r2
 8008b64:	0019      	movs	r1, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6e:	431a      	orrs	r2, r3
 8008b70:	4b20      	ldr	r3, [pc, #128]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b72:	430a      	orrs	r2, r1
 8008b74:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008b76:	4b1f      	ldr	r3, [pc, #124]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b7c:	2180      	movs	r1, #128	@ 0x80
 8008b7e:	438a      	bics	r2, r1
 8008b80:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008b82:	4b1c      	ldr	r3, [pc, #112]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	2220      	movs	r2, #32
 8008b88:	4013      	ands	r3, r2
 8008b8a:	d110      	bne.n	8008bae <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	0018      	movs	r0, r3
 8008b90:	f000 f836 	bl	8008c00 <HAL_RTC_WaitForSynchro>
 8008b94:	1e03      	subs	r3, r0, #0
 8008b96:	d00a      	beq.n	8008bae <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b98:	4b16      	ldr	r3, [pc, #88]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008b9a:	22ff      	movs	r2, #255	@ 0xff
 8008b9c:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	222d      	movs	r2, #45	@ 0x2d
 8008ba2:	2104      	movs	r1, #4
 8008ba4:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8008ba6:	230f      	movs	r3, #15
 8008ba8:	18fb      	adds	r3, r7, r3
 8008baa:	2201      	movs	r2, #1
 8008bac:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8008bae:	230f      	movs	r3, #15
 8008bb0:	18fb      	adds	r3, r7, r3
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d115      	bne.n	8008be4 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8008bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	00db      	lsls	r3, r3, #3
 8008bbe:	08d9      	lsrs	r1, r3, #3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a1a      	ldr	r2, [r3, #32]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	4b08      	ldr	r3, [pc, #32]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bd6:	4b07      	ldr	r3, [pc, #28]	@ (8008bf4 <HAL_RTC_Init+0x140>)
 8008bd8:	22ff      	movs	r2, #255	@ 0xff
 8008bda:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	222d      	movs	r2, #45	@ 0x2d
 8008be0:	2101      	movs	r1, #1
 8008be2:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8008be4:	230f      	movs	r3, #15
 8008be6:	18fb      	adds	r3, r7, r3
 8008be8:	781b      	ldrb	r3, [r3, #0]
}
 8008bea:	0018      	movs	r0, r3
 8008bec:	46bd      	mov	sp, r7
 8008bee:	b004      	add	sp, #16
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	46c0      	nop			@ (mov r8, r8)
 8008bf4:	40002800 	.word	0x40002800
 8008bf8:	fb8fffbf 	.word	0xfb8fffbf
 8008bfc:	ffffe0ff 	.word	0xffffe0ff

08008c00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008c08:	4b0f      	ldr	r3, [pc, #60]	@ (8008c48 <HAL_RTC_WaitForSynchro+0x48>)
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c48 <HAL_RTC_WaitForSynchro+0x48>)
 8008c0e:	2120      	movs	r1, #32
 8008c10:	438a      	bics	r2, r1
 8008c12:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008c14:	f7fd f9a8 	bl	8005f68 <HAL_GetTick>
 8008c18:	0003      	movs	r3, r0
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c1c:	e00a      	b.n	8008c34 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c1e:	f7fd f9a3 	bl	8005f68 <HAL_GetTick>
 8008c22:	0002      	movs	r2, r0
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	1ad2      	subs	r2, r2, r3
 8008c28:	23fa      	movs	r3, #250	@ 0xfa
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d901      	bls.n	8008c34 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e005      	b.n	8008c40 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c34:	4b04      	ldr	r3, [pc, #16]	@ (8008c48 <HAL_RTC_WaitForSynchro+0x48>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	d0ef      	beq.n	8008c1e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	0018      	movs	r0, r3
 8008c42:	46bd      	mov	sp, r7
 8008c44:	b004      	add	sp, #16
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	40002800 	.word	0x40002800

08008c4c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008c54:	4b12      	ldr	r3, [pc, #72]	@ (8008ca0 <RTC_EnterInitMode+0x54>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	2240      	movs	r2, #64	@ 0x40
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	d11a      	bne.n	8008c94 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008c5e:	4b10      	ldr	r3, [pc, #64]	@ (8008ca0 <RTC_EnterInitMode+0x54>)
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca0 <RTC_EnterInitMode+0x54>)
 8008c64:	2180      	movs	r1, #128	@ 0x80
 8008c66:	430a      	orrs	r2, r1
 8008c68:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008c6a:	f7fd f97d 	bl	8005f68 <HAL_GetTick>
 8008c6e:	0003      	movs	r3, r0
 8008c70:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008c72:	e00a      	b.n	8008c8a <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008c74:	f7fd f978 	bl	8005f68 <HAL_GetTick>
 8008c78:	0002      	movs	r2, r0
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	1ad2      	subs	r2, r2, r3
 8008c7e:	23fa      	movs	r3, #250	@ 0xfa
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d901      	bls.n	8008c8a <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e005      	b.n	8008c96 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008c8a:	4b05      	ldr	r3, [pc, #20]	@ (8008ca0 <RTC_EnterInitMode+0x54>)
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	2240      	movs	r2, #64	@ 0x40
 8008c90:	4013      	ands	r3, r2
 8008c92:	d0ef      	beq.n	8008c74 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	0018      	movs	r0, r3
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	b004      	add	sp, #16
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	46c0      	nop			@ (mov r8, r8)
 8008ca0:	40002800 	.word	0x40002800

08008ca4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	222c      	movs	r2, #44	@ 0x2c
 8008cb6:	5c9b      	ldrb	r3, [r3, r2]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d101      	bne.n	8008cc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e088      	b.n	8008dd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	222c      	movs	r2, #44	@ 0x2c
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	222d      	movs	r2, #45	@ 0x2d
 8008ccc:	2102      	movs	r1, #2
 8008cce:	5499      	strb	r1, [r3, r2]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if (READ_BIT(RTC->CR, RTC_CR_WUTE) != 0U)
 8008cd0:	4b42      	ldr	r3, [pc, #264]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008cd2:	699a      	ldr	r2, [r3, #24]
 8008cd4:	2380      	movs	r3, #128	@ 0x80
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	4013      	ands	r3, r2
 8008cda:	d01c      	beq.n	8008d16 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
  {
    tickstart = HAL_GetTick();
 8008cdc:	f7fd f944 	bl	8005f68 <HAL_GetTick>
 8008ce0:	0003      	movs	r3, r0
 8008ce2:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008ce4:	e012      	b.n	8008d0c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ce6:	f7fd f93f 	bl	8005f68 <HAL_GetTick>
 8008cea:	0002      	movs	r2, r0
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	1ad2      	subs	r2, r2, r3
 8008cf0:	23fa      	movs	r3, #250	@ 0xfa
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d909      	bls.n	8008d0c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
      {
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	222d      	movs	r2, #45	@ 0x2d
 8008cfc:	2103      	movs	r1, #3
 8008cfe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	222c      	movs	r2, #44	@ 0x2c
 8008d04:	2100      	movs	r1, #0
 8008d06:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e062      	b.n	8008dd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) != 0U)
 8008d0c:	4b33      	ldr	r3, [pc, #204]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	2204      	movs	r2, #4
 8008d12:	4013      	ands	r3, r2
 8008d14:	d1e7      	bne.n	8008ce6 <HAL_RTCEx_SetWakeUpTimer_IT+0x42>
      }
    }
  }
  /* Disable the Wake-Up timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8008d16:	4b31      	ldr	r3, [pc, #196]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008d18:	699a      	ldr	r2, [r3, #24]
 8008d1a:	4b30      	ldr	r3, [pc, #192]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008d1c:	4930      	ldr	r1, [pc, #192]	@ (8008de0 <HAL_RTCEx_SetWakeUpTimer_IT+0x13c>)
 8008d1e:	400a      	ands	r2, r1
 8008d20:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8008d22:	4b2e      	ldr	r3, [pc, #184]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008d24:	2204      	movs	r2, #4
 8008d26:	65da      	str	r2, [r3, #92]	@ 0x5c

  tickstart = HAL_GetTick();
 8008d28:	f7fd f91e 	bl	8005f68 <HAL_GetTick>
 8008d2c:	0003      	movs	r3, r0
 8008d2e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008d30:	e015      	b.n	8008d5e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d32:	f7fd f919 	bl	8005f68 <HAL_GetTick>
 8008d36:	0002      	movs	r2, r0
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	1ad2      	subs	r2, r2, r3
 8008d3c:	23fa      	movs	r3, #250	@ 0xfa
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d90c      	bls.n	8008d5e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d44:	4b25      	ldr	r3, [pc, #148]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008d46:	22ff      	movs	r2, #255	@ 0xff
 8008d48:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	222d      	movs	r2, #45	@ 0x2d
 8008d4e:	2103      	movs	r1, #3
 8008d50:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	222c      	movs	r2, #44	@ 0x2c
 8008d56:	2100      	movs	r1, #0
 8008d58:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e039      	b.n	8008dd2 <HAL_RTCEx_SetWakeUpTimer_IT+0x12e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	2204      	movs	r2, #4
 8008d64:	4013      	ands	r3, r2
 8008d66:	d0e4      	beq.n	8008d32 <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	0419      	lsls	r1, r3, #16
 8008d6c:	4b1b      	ldr	r3, [pc, #108]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	615a      	str	r2, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008d74:	4b19      	ldr	r3, [pc, #100]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	2207      	movs	r2, #7
 8008d7a:	4393      	bics	r3, r2
 8008d7c:	0019      	movs	r1, r3
 8008d7e:	4b17      	ldr	r3, [pc, #92]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d009      	beq.n	8008da0 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8008d8c:	4a15      	ldr	r2, [pc, #84]	@ (8008de4 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8008d8e:	2384      	movs	r3, #132	@ 0x84
 8008d90:	58d3      	ldr	r3, [r2, r3]
 8008d92:	4914      	ldr	r1, [pc, #80]	@ (8008de4 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8008d94:	2280      	movs	r2, #128	@ 0x80
 8008d96:	0552      	lsls	r2, r2, #21
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	2284      	movs	r2, #132	@ 0x84
 8008d9c:	508b      	str	r3, [r1, r2]
 8008d9e:	e008      	b.n	8008db2 <HAL_RTCEx_SetWakeUpTimer_IT+0x10e>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008da0:	4a10      	ldr	r2, [pc, #64]	@ (8008de4 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8008da2:	2380      	movs	r3, #128	@ 0x80
 8008da4:	58d3      	ldr	r3, [r2, r3]
 8008da6:	490f      	ldr	r1, [pc, #60]	@ (8008de4 <HAL_RTCEx_SetWakeUpTimer_IT+0x140>)
 8008da8:	2280      	movs	r2, #128	@ 0x80
 8008daa:	0552      	lsls	r2, r2, #21
 8008dac:	4313      	orrs	r3, r2
 8008dae:	2280      	movs	r2, #128	@ 0x80
 8008db0:	508b      	str	r3, [r1, r2]
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8008db2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008db4:	699a      	ldr	r2, [r3, #24]
 8008db6:	4b09      	ldr	r3, [pc, #36]	@ (8008ddc <HAL_RTCEx_SetWakeUpTimer_IT+0x138>)
 8008db8:	2188      	movs	r1, #136	@ 0x88
 8008dba:	01c9      	lsls	r1, r1, #7
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	619a      	str	r2, [r3, #24]

  hrtc->State = HAL_RTC_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	222d      	movs	r2, #45	@ 0x2d
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	222c      	movs	r2, #44	@ 0x2c
 8008dcc:	2100      	movs	r1, #0
 8008dce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	b006      	add	sp, #24
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	46c0      	nop			@ (mov r8, r8)
 8008ddc:	40002800 	.word	0x40002800
 8008de0:	fffffbff 	.word	0xfffffbff
 8008de4:	40021800 	.word	0x40021800

08008de8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8008df0:	4b09      	ldr	r3, [pc, #36]	@ (8008e18 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8008df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008df4:	2204      	movs	r2, #4
 8008df6:	4013      	ands	r3, r2
 8008df8:	d006      	beq.n	8008e08 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8008dfa:	4b07      	ldr	r3, [pc, #28]	@ (8008e18 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	0018      	movs	r0, r3
 8008e04:	f000 f80a 	bl	8008e1c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	222d      	movs	r2, #45	@ 0x2d
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	5499      	strb	r1, [r3, r2]
}
 8008e10:	46c0      	nop			@ (mov r8, r8)
 8008e12:	46bd      	mov	sp, r7
 8008e14:	b002      	add	sp, #8
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	40002800 	.word	0x40002800

08008e1c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8008e24:	46c0      	nop			@ (mov r8, r8)
 8008e26:	46bd      	mov	sp, r7
 8008e28:	b002      	add	sp, #8
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e0a0      	b.n	8008f80 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d109      	bne.n	8008e5a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	2382      	movs	r3, #130	@ 0x82
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d009      	beq.n	8008e66 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	61da      	str	r2, [r3, #28]
 8008e58:	e005      	b.n	8008e66 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	225d      	movs	r2, #93	@ 0x5d
 8008e70:	5c9b      	ldrb	r3, [r3, r2]
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d107      	bne.n	8008e88 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	225c      	movs	r2, #92	@ 0x5c
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7fc fdac 	bl	80059e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	225d      	movs	r2, #93	@ 0x5d
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2140      	movs	r1, #64	@ 0x40
 8008e9c:	438a      	bics	r2, r1
 8008e9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	23e0      	movs	r3, #224	@ 0xe0
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d902      	bls.n	8008eb2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	e002      	b.n	8008eb8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008eb2:	2380      	movs	r3, #128	@ 0x80
 8008eb4:	015b      	lsls	r3, r3, #5
 8008eb6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68da      	ldr	r2, [r3, #12]
 8008ebc:	23f0      	movs	r3, #240	@ 0xf0
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d008      	beq.n	8008ed6 <HAL_SPI_Init+0xaa>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	23e0      	movs	r3, #224	@ 0xe0
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d002      	beq.n	8008ed6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	2382      	movs	r3, #130	@ 0x82
 8008edc:	005b      	lsls	r3, r3, #1
 8008ede:	401a      	ands	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6899      	ldr	r1, [r3, #8]
 8008ee4:	2384      	movs	r3, #132	@ 0x84
 8008ee6:	021b      	lsls	r3, r3, #8
 8008ee8:	400b      	ands	r3, r1
 8008eea:	431a      	orrs	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	2102      	movs	r1, #2
 8008ef2:	400b      	ands	r3, r1
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	2101      	movs	r1, #1
 8008efc:	400b      	ands	r3, r1
 8008efe:	431a      	orrs	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6999      	ldr	r1, [r3, #24]
 8008f04:	2380      	movs	r3, #128	@ 0x80
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	400b      	ands	r3, r1
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	2138      	movs	r1, #56	@ 0x38
 8008f12:	400b      	ands	r3, r1
 8008f14:	431a      	orrs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	2180      	movs	r1, #128	@ 0x80
 8008f1c:	400b      	ands	r3, r1
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	0011      	movs	r1, r2
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f26:	2380      	movs	r3, #128	@ 0x80
 8008f28:	019b      	lsls	r3, r3, #6
 8008f2a:	401a      	ands	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	430a      	orrs	r2, r1
 8008f32:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	0c1b      	lsrs	r3, r3, #16
 8008f3a:	2204      	movs	r2, #4
 8008f3c:	401a      	ands	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f42:	2110      	movs	r1, #16
 8008f44:	400b      	ands	r3, r1
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f4c:	2108      	movs	r1, #8
 8008f4e:	400b      	ands	r3, r1
 8008f50:	431a      	orrs	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68d9      	ldr	r1, [r3, #12]
 8008f56:	23f0      	movs	r3, #240	@ 0xf0
 8008f58:	011b      	lsls	r3, r3, #4
 8008f5a:	400b      	ands	r3, r1
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	0011      	movs	r1, r2
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	2380      	movs	r3, #128	@ 0x80
 8008f64:	015b      	lsls	r3, r3, #5
 8008f66:	401a      	ands	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	225d      	movs	r2, #93	@ 0x5d
 8008f7a:	2101      	movs	r1, #1
 8008f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	0018      	movs	r0, r3
 8008f82:	46bd      	mov	sp, r7
 8008f84:	b004      	add	sp, #16
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d101      	bne.n	8008f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e046      	b.n	8009028 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2288      	movs	r2, #136	@ 0x88
 8008f9e:	589b      	ldr	r3, [r3, r2]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d107      	bne.n	8008fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2284      	movs	r2, #132	@ 0x84
 8008fa8:	2100      	movs	r1, #0
 8008faa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	0018      	movs	r0, r3
 8008fb0:	f7fc fee0 	bl	8005d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2288      	movs	r2, #136	@ 0x88
 8008fb8:	2124      	movs	r1, #36	@ 0x24
 8008fba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	438a      	bics	r2, r1
 8008fca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	f000 f9fe 	bl	80093d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	0018      	movs	r0, r3
 8008fe0:	f000 f828 	bl	8009034 <UART_SetConfig>
 8008fe4:	0003      	movs	r3, r0
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d101      	bne.n	8008fee <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e01c      	b.n	8009028 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	490d      	ldr	r1, [pc, #52]	@ (8009030 <HAL_UART_Init+0xa8>)
 8008ffa:	400a      	ands	r2, r1
 8008ffc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689a      	ldr	r2, [r3, #8]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	212a      	movs	r1, #42	@ 0x2a
 800900a:	438a      	bics	r2, r1
 800900c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2101      	movs	r1, #1
 800901a:	430a      	orrs	r2, r1
 800901c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	0018      	movs	r0, r3
 8009022:	f000 fa8d 	bl	8009540 <UART_CheckIdleState>
 8009026:	0003      	movs	r3, r0
}
 8009028:	0018      	movs	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	b002      	add	sp, #8
 800902e:	bd80      	pop	{r7, pc}
 8009030:	ffffb7ff 	.word	0xffffb7ff

08009034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009034:	b5b0      	push	{r4, r5, r7, lr}
 8009036:	b092      	sub	sp, #72	@ 0x48
 8009038:	af00      	add	r7, sp, #0
 800903a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800903c:	231f      	movs	r3, #31
 800903e:	2220      	movs	r2, #32
 8009040:	189b      	adds	r3, r3, r2
 8009042:	19db      	adds	r3, r3, r7
 8009044:	2200      	movs	r2, #0
 8009046:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4ac8      	ldr	r2, [pc, #800]	@ (8009370 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	431a      	orrs	r2, r3
 8009058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905a:	695b      	ldr	r3, [r3, #20]
 800905c:	431a      	orrs	r2, r3
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	4313      	orrs	r3, r2
 8009064:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4ac1      	ldr	r2, [pc, #772]	@ (8009374 <UART_SetConfig+0x340>)
 800906e:	4013      	ands	r3, r2
 8009070:	0019      	movs	r1, r3
 8009072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009078:	430b      	orrs	r3, r1
 800907a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800907c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	4abd      	ldr	r2, [pc, #756]	@ (8009378 <UART_SetConfig+0x344>)
 8009084:	4013      	ands	r3, r2
 8009086:	0018      	movs	r0, r3
 8009088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908a:	68d9      	ldr	r1, [r3, #12]
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	0003      	movs	r3, r0
 8009092:	430b      	orrs	r3, r1
 8009094:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800909c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4ab3      	ldr	r2, [pc, #716]	@ (8009370 <UART_SetConfig+0x33c>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00e      	beq.n	80090c4 <UART_SetConfig+0x90>
 80090a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4ab4      	ldr	r2, [pc, #720]	@ (800937c <UART_SetConfig+0x348>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d009      	beq.n	80090c4 <UART_SetConfig+0x90>
 80090b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4ab2      	ldr	r2, [pc, #712]	@ (8009380 <UART_SetConfig+0x34c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d004      	beq.n	80090c4 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090c0:	4313      	orrs	r3, r2
 80090c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	4aae      	ldr	r2, [pc, #696]	@ (8009384 <UART_SetConfig+0x350>)
 80090cc:	4013      	ands	r3, r2
 80090ce:	0019      	movs	r1, r3
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090d6:	430b      	orrs	r3, r1
 80090d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e0:	220f      	movs	r2, #15
 80090e2:	4393      	bics	r3, r2
 80090e4:	0018      	movs	r0, r3
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80090ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	0003      	movs	r3, r0
 80090f0:	430b      	orrs	r3, r1
 80090f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4aa3      	ldr	r2, [pc, #652]	@ (8009388 <UART_SetConfig+0x354>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d102      	bne.n	8009104 <UART_SetConfig+0xd0>
 80090fe:	2301      	movs	r3, #1
 8009100:	643b      	str	r3, [r7, #64]	@ 0x40
 8009102:	e033      	b.n	800916c <UART_SetConfig+0x138>
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4aa0      	ldr	r2, [pc, #640]	@ (800938c <UART_SetConfig+0x358>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d102      	bne.n	8009114 <UART_SetConfig+0xe0>
 800910e:	2302      	movs	r3, #2
 8009110:	643b      	str	r3, [r7, #64]	@ 0x40
 8009112:	e02b      	b.n	800916c <UART_SetConfig+0x138>
 8009114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a9d      	ldr	r2, [pc, #628]	@ (8009390 <UART_SetConfig+0x35c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d103      	bne.n	8009126 <UART_SetConfig+0xf2>
 800911e:	2380      	movs	r3, #128	@ 0x80
 8009120:	025b      	lsls	r3, r3, #9
 8009122:	643b      	str	r3, [r7, #64]	@ 0x40
 8009124:	e022      	b.n	800916c <UART_SetConfig+0x138>
 8009126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a9a      	ldr	r2, [pc, #616]	@ (8009394 <UART_SetConfig+0x360>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d103      	bne.n	8009138 <UART_SetConfig+0x104>
 8009130:	2380      	movs	r3, #128	@ 0x80
 8009132:	029b      	lsls	r3, r3, #10
 8009134:	643b      	str	r3, [r7, #64]	@ 0x40
 8009136:	e019      	b.n	800916c <UART_SetConfig+0x138>
 8009138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a8c      	ldr	r2, [pc, #560]	@ (8009370 <UART_SetConfig+0x33c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d102      	bne.n	8009148 <UART_SetConfig+0x114>
 8009142:	2310      	movs	r3, #16
 8009144:	643b      	str	r3, [r7, #64]	@ 0x40
 8009146:	e011      	b.n	800916c <UART_SetConfig+0x138>
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a8b      	ldr	r2, [pc, #556]	@ (800937c <UART_SetConfig+0x348>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d102      	bne.n	8009158 <UART_SetConfig+0x124>
 8009152:	2308      	movs	r3, #8
 8009154:	643b      	str	r3, [r7, #64]	@ 0x40
 8009156:	e009      	b.n	800916c <UART_SetConfig+0x138>
 8009158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a88      	ldr	r2, [pc, #544]	@ (8009380 <UART_SetConfig+0x34c>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d102      	bne.n	8009168 <UART_SetConfig+0x134>
 8009162:	2304      	movs	r3, #4
 8009164:	643b      	str	r3, [r7, #64]	@ 0x40
 8009166:	e001      	b.n	800916c <UART_SetConfig+0x138>
 8009168:	2300      	movs	r3, #0
 800916a:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800916c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a7f      	ldr	r2, [pc, #508]	@ (8009370 <UART_SetConfig+0x33c>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00a      	beq.n	800918c <UART_SetConfig+0x158>
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a80      	ldr	r2, [pc, #512]	@ (800937c <UART_SetConfig+0x348>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d005      	beq.n	800918c <UART_SetConfig+0x158>
 8009180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a7e      	ldr	r2, [pc, #504]	@ (8009380 <UART_SetConfig+0x34c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d000      	beq.n	800918c <UART_SetConfig+0x158>
 800918a:	e06f      	b.n	800926c <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800918c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800918e:	0018      	movs	r0, r3
 8009190:	f7fe fe86 	bl	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009194:	0003      	movs	r3, r0
 8009196:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8009198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919a:	2b00      	cmp	r3, #0
 800919c:	d100      	bne.n	80091a0 <UART_SetConfig+0x16c>
 800919e:	e103      	b.n	80093a8 <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091a4:	4b7c      	ldr	r3, [pc, #496]	@ (8009398 <UART_SetConfig+0x364>)
 80091a6:	0052      	lsls	r2, r2, #1
 80091a8:	5ad3      	ldrh	r3, [r2, r3]
 80091aa:	0019      	movs	r1, r3
 80091ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091ae:	f7f6 ffc7 	bl	8000140 <__udivsi3>
 80091b2:	0003      	movs	r3, r0
 80091b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	0013      	movs	r3, r2
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	189b      	adds	r3, r3, r2
 80091c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d305      	bcc.n	80091d2 <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d906      	bls.n	80091e0 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 80091d2:	231f      	movs	r3, #31
 80091d4:	2220      	movs	r2, #32
 80091d6:	189b      	adds	r3, r3, r2
 80091d8:	19db      	adds	r3, r3, r7
 80091da:	2201      	movs	r2, #1
 80091dc:	701a      	strb	r2, [r3, #0]
 80091de:	e044      	b.n	800926a <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	61bb      	str	r3, [r7, #24]
 80091e4:	2300      	movs	r3, #0
 80091e6:	61fb      	str	r3, [r7, #28]
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091ec:	4b6a      	ldr	r3, [pc, #424]	@ (8009398 <UART_SetConfig+0x364>)
 80091ee:	0052      	lsls	r2, r2, #1
 80091f0:	5ad3      	ldrh	r3, [r2, r3]
 80091f2:	613b      	str	r3, [r7, #16]
 80091f4:	2300      	movs	r3, #0
 80091f6:	617b      	str	r3, [r7, #20]
 80091f8:	693a      	ldr	r2, [r7, #16]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	69b8      	ldr	r0, [r7, #24]
 80091fe:	69f9      	ldr	r1, [r7, #28]
 8009200:	f7f7 f970 	bl	80004e4 <__aeabi_uldivmod>
 8009204:	0002      	movs	r2, r0
 8009206:	000b      	movs	r3, r1
 8009208:	0e11      	lsrs	r1, r2, #24
 800920a:	021d      	lsls	r5, r3, #8
 800920c:	430d      	orrs	r5, r1
 800920e:	0214      	lsls	r4, r2, #8
 8009210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	085b      	lsrs	r3, r3, #1
 8009216:	60bb      	str	r3, [r7, #8]
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	68b8      	ldr	r0, [r7, #8]
 800921e:	68f9      	ldr	r1, [r7, #12]
 8009220:	1900      	adds	r0, r0, r4
 8009222:	4169      	adcs	r1, r5
 8009224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	603b      	str	r3, [r7, #0]
 800922a:	2300      	movs	r3, #0
 800922c:	607b      	str	r3, [r7, #4]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f7f7 f957 	bl	80004e4 <__aeabi_uldivmod>
 8009236:	0002      	movs	r2, r0
 8009238:	000b      	movs	r3, r1
 800923a:	0013      	movs	r3, r2
 800923c:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800923e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009240:	23c0      	movs	r3, #192	@ 0xc0
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	429a      	cmp	r2, r3
 8009246:	d309      	bcc.n	800925c <UART_SetConfig+0x228>
 8009248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800924a:	2380      	movs	r3, #128	@ 0x80
 800924c:	035b      	lsls	r3, r3, #13
 800924e:	429a      	cmp	r2, r3
 8009250:	d204      	bcs.n	800925c <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009258:	60da      	str	r2, [r3, #12]
 800925a:	e006      	b.n	800926a <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 800925c:	231f      	movs	r3, #31
 800925e:	2220      	movs	r2, #32
 8009260:	189b      	adds	r3, r3, r2
 8009262:	19db      	adds	r3, r3, r7
 8009264:	2201      	movs	r2, #1
 8009266:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8009268:	e09e      	b.n	80093a8 <UART_SetConfig+0x374>
 800926a:	e09d      	b.n	80093a8 <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800926c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926e:	69da      	ldr	r2, [r3, #28]
 8009270:	2380      	movs	r3, #128	@ 0x80
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	429a      	cmp	r2, r3
 8009276:	d14c      	bne.n	8009312 <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800927a:	0018      	movs	r0, r3
 800927c:	f7fe fe10 	bl	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009280:	0003      	movs	r3, r0
 8009282:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009286:	2b00      	cmp	r3, #0
 8009288:	d100      	bne.n	800928c <UART_SetConfig+0x258>
 800928a:	e08d      	b.n	80093a8 <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800928c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009290:	4b41      	ldr	r3, [pc, #260]	@ (8009398 <UART_SetConfig+0x364>)
 8009292:	0052      	lsls	r2, r2, #1
 8009294:	5ad3      	ldrh	r3, [r2, r3]
 8009296:	0019      	movs	r1, r3
 8009298:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800929a:	f7f6 ff51 	bl	8000140 <__udivsi3>
 800929e:	0003      	movs	r3, r0
 80092a0:	005a      	lsls	r2, r3, #1
 80092a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	085b      	lsrs	r3, r3, #1
 80092a8:	18d2      	adds	r2, r2, r3
 80092aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	0019      	movs	r1, r3
 80092b0:	0010      	movs	r0, r2
 80092b2:	f7f6 ff45 	bl	8000140 <__udivsi3>
 80092b6:	0003      	movs	r3, r0
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092bc:	2b0f      	cmp	r3, #15
 80092be:	d921      	bls.n	8009304 <UART_SetConfig+0x2d0>
 80092c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092c2:	2380      	movs	r3, #128	@ 0x80
 80092c4:	025b      	lsls	r3, r3, #9
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d21c      	bcs.n	8009304 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	2012      	movs	r0, #18
 80092d0:	2420      	movs	r4, #32
 80092d2:	1903      	adds	r3, r0, r4
 80092d4:	19db      	adds	r3, r3, r7
 80092d6:	210f      	movs	r1, #15
 80092d8:	438a      	bics	r2, r1
 80092da:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092de:	085b      	lsrs	r3, r3, #1
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	2207      	movs	r2, #7
 80092e4:	4013      	ands	r3, r2
 80092e6:	b299      	uxth	r1, r3
 80092e8:	1903      	adds	r3, r0, r4
 80092ea:	19db      	adds	r3, r3, r7
 80092ec:	1902      	adds	r2, r0, r4
 80092ee:	19d2      	adds	r2, r2, r7
 80092f0:	8812      	ldrh	r2, [r2, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	1902      	adds	r2, r0, r4
 80092fc:	19d2      	adds	r2, r2, r7
 80092fe:	8812      	ldrh	r2, [r2, #0]
 8009300:	60da      	str	r2, [r3, #12]
 8009302:	e051      	b.n	80093a8 <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 8009304:	231f      	movs	r3, #31
 8009306:	2220      	movs	r2, #32
 8009308:	189b      	adds	r3, r3, r2
 800930a:	19db      	adds	r3, r3, r7
 800930c:	2201      	movs	r2, #1
 800930e:	701a      	strb	r2, [r3, #0]
 8009310:	e04a      	b.n	80093a8 <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009314:	0018      	movs	r0, r3
 8009316:	f7fe fdc3 	bl	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq>
 800931a:	0003      	movs	r3, r0
 800931c:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 800931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009320:	2b00      	cmp	r3, #0
 8009322:	d041      	beq.n	80093a8 <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009328:	4b1b      	ldr	r3, [pc, #108]	@ (8009398 <UART_SetConfig+0x364>)
 800932a:	0052      	lsls	r2, r2, #1
 800932c:	5ad3      	ldrh	r3, [r2, r3]
 800932e:	0019      	movs	r1, r3
 8009330:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009332:	f7f6 ff05 	bl	8000140 <__udivsi3>
 8009336:	0003      	movs	r3, r0
 8009338:	001a      	movs	r2, r3
 800933a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	085b      	lsrs	r3, r3, #1
 8009340:	18d2      	adds	r2, r2, r3
 8009342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	0019      	movs	r1, r3
 8009348:	0010      	movs	r0, r2
 800934a:	f7f6 fef9 	bl	8000140 <__udivsi3>
 800934e:	0003      	movs	r3, r0
 8009350:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009354:	2b0f      	cmp	r3, #15
 8009356:	d921      	bls.n	800939c <UART_SetConfig+0x368>
 8009358:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800935a:	2380      	movs	r3, #128	@ 0x80
 800935c:	025b      	lsls	r3, r3, #9
 800935e:	429a      	cmp	r2, r3
 8009360:	d21c      	bcs.n	800939c <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009364:	b29a      	uxth	r2, r3
 8009366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60da      	str	r2, [r3, #12]
 800936c:	e01c      	b.n	80093a8 <UART_SetConfig+0x374>
 800936e:	46c0      	nop			@ (mov r8, r8)
 8009370:	40008000 	.word	0x40008000
 8009374:	cfff69f3 	.word	0xcfff69f3
 8009378:	ffffcfff 	.word	0xffffcfff
 800937c:	40008400 	.word	0x40008400
 8009380:	40008c00 	.word	0x40008c00
 8009384:	11fff4ff 	.word	0x11fff4ff
 8009388:	40013800 	.word	0x40013800
 800938c:	40004400 	.word	0x40004400
 8009390:	40004800 	.word	0x40004800
 8009394:	40004c00 	.word	0x40004c00
 8009398:	08010184 	.word	0x08010184
      }
      else
      {
        ret = HAL_ERROR;
 800939c:	231f      	movs	r3, #31
 800939e:	2220      	movs	r2, #32
 80093a0:	189b      	adds	r3, r3, r2
 80093a2:	19db      	adds	r3, r3, r7
 80093a4:	2201      	movs	r2, #1
 80093a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093aa:	226a      	movs	r2, #106	@ 0x6a
 80093ac:	2101      	movs	r1, #1
 80093ae:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	2268      	movs	r2, #104	@ 0x68
 80093b4:	2101      	movs	r1, #1
 80093b6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ba:	2200      	movs	r2, #0
 80093bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	2200      	movs	r2, #0
 80093c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80093c4:	231f      	movs	r3, #31
 80093c6:	2220      	movs	r2, #32
 80093c8:	189b      	adds	r3, r3, r2
 80093ca:	19db      	adds	r3, r3, r7
 80093cc:	781b      	ldrb	r3, [r3, #0]
}
 80093ce:	0018      	movs	r0, r3
 80093d0:	46bd      	mov	sp, r7
 80093d2:	b012      	add	sp, #72	@ 0x48
 80093d4:	bdb0      	pop	{r4, r5, r7, pc}
 80093d6:	46c0      	nop			@ (mov r8, r8)

080093d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e4:	2208      	movs	r2, #8
 80093e6:	4013      	ands	r3, r2
 80093e8:	d00b      	beq.n	8009402 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	4a4a      	ldr	r2, [pc, #296]	@ (800951c <UART_AdvFeatureConfig+0x144>)
 80093f2:	4013      	ands	r3, r2
 80093f4:	0019      	movs	r1, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009406:	2201      	movs	r2, #1
 8009408:	4013      	ands	r3, r2
 800940a:	d00b      	beq.n	8009424 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	4a43      	ldr	r2, [pc, #268]	@ (8009520 <UART_AdvFeatureConfig+0x148>)
 8009414:	4013      	ands	r3, r2
 8009416:	0019      	movs	r1, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009428:	2202      	movs	r2, #2
 800942a:	4013      	ands	r3, r2
 800942c:	d00b      	beq.n	8009446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	4a3b      	ldr	r2, [pc, #236]	@ (8009524 <UART_AdvFeatureConfig+0x14c>)
 8009436:	4013      	ands	r3, r2
 8009438:	0019      	movs	r1, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	430a      	orrs	r2, r1
 8009444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800944a:	2204      	movs	r2, #4
 800944c:	4013      	ands	r3, r2
 800944e:	d00b      	beq.n	8009468 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	4a34      	ldr	r2, [pc, #208]	@ (8009528 <UART_AdvFeatureConfig+0x150>)
 8009458:	4013      	ands	r3, r2
 800945a:	0019      	movs	r1, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	430a      	orrs	r2, r1
 8009466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946c:	2210      	movs	r2, #16
 800946e:	4013      	ands	r3, r2
 8009470:	d00b      	beq.n	800948a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	4a2c      	ldr	r2, [pc, #176]	@ (800952c <UART_AdvFeatureConfig+0x154>)
 800947a:	4013      	ands	r3, r2
 800947c:	0019      	movs	r1, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	430a      	orrs	r2, r1
 8009488:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948e:	2220      	movs	r2, #32
 8009490:	4013      	ands	r3, r2
 8009492:	d00b      	beq.n	80094ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	4a25      	ldr	r2, [pc, #148]	@ (8009530 <UART_AdvFeatureConfig+0x158>)
 800949c:	4013      	ands	r3, r2
 800949e:	0019      	movs	r1, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	430a      	orrs	r2, r1
 80094aa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b0:	2240      	movs	r2, #64	@ 0x40
 80094b2:	4013      	ands	r3, r2
 80094b4:	d01d      	beq.n	80094f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009534 <UART_AdvFeatureConfig+0x15c>)
 80094be:	4013      	ands	r3, r2
 80094c0:	0019      	movs	r1, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	430a      	orrs	r2, r1
 80094cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094d2:	2380      	movs	r3, #128	@ 0x80
 80094d4:	035b      	lsls	r3, r3, #13
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d10b      	bne.n	80094f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	4a15      	ldr	r2, [pc, #84]	@ (8009538 <UART_AdvFeatureConfig+0x160>)
 80094e2:	4013      	ands	r3, r2
 80094e4:	0019      	movs	r1, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f6:	2280      	movs	r2, #128	@ 0x80
 80094f8:	4013      	ands	r3, r2
 80094fa:	d00b      	beq.n	8009514 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	4a0e      	ldr	r2, [pc, #56]	@ (800953c <UART_AdvFeatureConfig+0x164>)
 8009504:	4013      	ands	r3, r2
 8009506:	0019      	movs	r1, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	605a      	str	r2, [r3, #4]
  }
}
 8009514:	46c0      	nop			@ (mov r8, r8)
 8009516:	46bd      	mov	sp, r7
 8009518:	b002      	add	sp, #8
 800951a:	bd80      	pop	{r7, pc}
 800951c:	ffff7fff 	.word	0xffff7fff
 8009520:	fffdffff 	.word	0xfffdffff
 8009524:	fffeffff 	.word	0xfffeffff
 8009528:	fffbffff 	.word	0xfffbffff
 800952c:	ffffefff 	.word	0xffffefff
 8009530:	ffffdfff 	.word	0xffffdfff
 8009534:	ffefffff 	.word	0xffefffff
 8009538:	ff9fffff 	.word	0xff9fffff
 800953c:	fff7ffff 	.word	0xfff7ffff

08009540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b092      	sub	sp, #72	@ 0x48
 8009544:	af02      	add	r7, sp, #8
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2290      	movs	r2, #144	@ 0x90
 800954c:	2100      	movs	r1, #0
 800954e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009550:	f7fc fd0a 	bl	8005f68 <HAL_GetTick>
 8009554:	0003      	movs	r3, r0
 8009556:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2208      	movs	r2, #8
 8009560:	4013      	ands	r3, r2
 8009562:	2b08      	cmp	r3, #8
 8009564:	d12d      	bne.n	80095c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009568:	2280      	movs	r2, #128	@ 0x80
 800956a:	0391      	lsls	r1, r2, #14
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	4a47      	ldr	r2, [pc, #284]	@ (800968c <UART_CheckIdleState+0x14c>)
 8009570:	9200      	str	r2, [sp, #0]
 8009572:	2200      	movs	r2, #0
 8009574:	f000 f88e 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 8009578:	1e03      	subs	r3, r0, #0
 800957a:	d022      	beq.n	80095c2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800957c:	f3ef 8310 	mrs	r3, PRIMASK
 8009580:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009584:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009586:	2301      	movs	r3, #1
 8009588:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800958a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958c:	f383 8810 	msr	PRIMASK, r3
}
 8009590:	46c0      	nop			@ (mov r8, r8)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2180      	movs	r1, #128	@ 0x80
 800959e:	438a      	bics	r2, r1
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095a8:	f383 8810 	msr	PRIMASK, r3
}
 80095ac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2288      	movs	r2, #136	@ 0x88
 80095b2:	2120      	movs	r1, #32
 80095b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2284      	movs	r2, #132	@ 0x84
 80095ba:	2100      	movs	r1, #0
 80095bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e060      	b.n	8009684 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2204      	movs	r2, #4
 80095ca:	4013      	ands	r3, r2
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	d146      	bne.n	800965e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d2:	2280      	movs	r2, #128	@ 0x80
 80095d4:	03d1      	lsls	r1, r2, #15
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	4a2c      	ldr	r2, [pc, #176]	@ (800968c <UART_CheckIdleState+0x14c>)
 80095da:	9200      	str	r2, [sp, #0]
 80095dc:	2200      	movs	r2, #0
 80095de:	f000 f859 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 80095e2:	1e03      	subs	r3, r0, #0
 80095e4:	d03b      	beq.n	800965e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80095e6:	f3ef 8310 	mrs	r3, PRIMASK
 80095ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80095ec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f0:	2301      	movs	r3, #1
 80095f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f383 8810 	msr	PRIMASK, r3
}
 80095fa:	46c0      	nop			@ (mov r8, r8)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4922      	ldr	r1, [pc, #136]	@ (8009690 <UART_CheckIdleState+0x150>)
 8009608:	400a      	ands	r2, r1
 800960a:	601a      	str	r2, [r3, #0]
 800960c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800960e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f383 8810 	msr	PRIMASK, r3
}
 8009616:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009618:	f3ef 8310 	mrs	r3, PRIMASK
 800961c:	61bb      	str	r3, [r7, #24]
  return(result);
 800961e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009620:	633b      	str	r3, [r7, #48]	@ 0x30
 8009622:	2301      	movs	r3, #1
 8009624:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	f383 8810 	msr	PRIMASK, r3
}
 800962c:	46c0      	nop			@ (mov r8, r8)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2101      	movs	r1, #1
 800963a:	438a      	bics	r2, r1
 800963c:	609a      	str	r2, [r3, #8]
 800963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009640:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	f383 8810 	msr	PRIMASK, r3
}
 8009648:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	228c      	movs	r2, #140	@ 0x8c
 800964e:	2120      	movs	r1, #32
 8009650:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2284      	movs	r2, #132	@ 0x84
 8009656:	2100      	movs	r1, #0
 8009658:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e012      	b.n	8009684 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2288      	movs	r2, #136	@ 0x88
 8009662:	2120      	movs	r1, #32
 8009664:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	228c      	movs	r2, #140	@ 0x8c
 800966a:	2120      	movs	r1, #32
 800966c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2284      	movs	r2, #132	@ 0x84
 800967e:	2100      	movs	r1, #0
 8009680:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	0018      	movs	r0, r3
 8009686:	46bd      	mov	sp, r7
 8009688:	b010      	add	sp, #64	@ 0x40
 800968a:	bd80      	pop	{r7, pc}
 800968c:	01ffffff 	.word	0x01ffffff
 8009690:	fffffedf 	.word	0xfffffedf

08009694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	1dfb      	adds	r3, r7, #7
 80096a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096a4:	e051      	b.n	800974a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	3301      	adds	r3, #1
 80096aa:	d04e      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ac:	f7fc fc5c 	bl	8005f68 <HAL_GetTick>
 80096b0:	0002      	movs	r2, r0
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d302      	bcc.n	80096c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e051      	b.n	800976a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2204      	movs	r2, #4
 80096ce:	4013      	ands	r3, r2
 80096d0:	d03b      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb6>
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2b80      	cmp	r3, #128	@ 0x80
 80096d6:	d038      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb6>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b40      	cmp	r3, #64	@ 0x40
 80096dc:	d035      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	2208      	movs	r2, #8
 80096e6:	4013      	ands	r3, r2
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	d111      	bne.n	8009710 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2208      	movs	r2, #8
 80096f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	0018      	movs	r0, r3
 80096f8:	f000 f83c 	bl	8009774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2290      	movs	r2, #144	@ 0x90
 8009700:	2108      	movs	r1, #8
 8009702:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2284      	movs	r2, #132	@ 0x84
 8009708:	2100      	movs	r1, #0
 800970a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e02c      	b.n	800976a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	69da      	ldr	r2, [r3, #28]
 8009716:	2380      	movs	r3, #128	@ 0x80
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	401a      	ands	r2, r3
 800971c:	2380      	movs	r3, #128	@ 0x80
 800971e:	011b      	lsls	r3, r3, #4
 8009720:	429a      	cmp	r2, r3
 8009722:	d112      	bne.n	800974a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2280      	movs	r2, #128	@ 0x80
 800972a:	0112      	lsls	r2, r2, #4
 800972c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	0018      	movs	r0, r3
 8009732:	f000 f81f 	bl	8009774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2290      	movs	r2, #144	@ 0x90
 800973a:	2120      	movs	r1, #32
 800973c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2284      	movs	r2, #132	@ 0x84
 8009742:	2100      	movs	r1, #0
 8009744:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e00f      	b.n	800976a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	4013      	ands	r3, r2
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	1ad3      	subs	r3, r2, r3
 8009758:	425a      	negs	r2, r3
 800975a:	4153      	adcs	r3, r2
 800975c:	b2db      	uxtb	r3, r3
 800975e:	001a      	movs	r2, r3
 8009760:	1dfb      	adds	r3, r7, #7
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	429a      	cmp	r2, r3
 8009766:	d09e      	beq.n	80096a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	0018      	movs	r0, r3
 800976c:	46bd      	mov	sp, r7
 800976e:	b004      	add	sp, #16
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08e      	sub	sp, #56	@ 0x38
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800977c:	f3ef 8310 	mrs	r3, PRIMASK
 8009780:	617b      	str	r3, [r7, #20]
  return(result);
 8009782:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009784:	637b      	str	r3, [r7, #52]	@ 0x34
 8009786:	2301      	movs	r3, #1
 8009788:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	f383 8810 	msr	PRIMASK, r3
}
 8009790:	46c0      	nop			@ (mov r8, r8)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4926      	ldr	r1, [pc, #152]	@ (8009838 <UART_EndRxTransfer+0xc4>)
 800979e:	400a      	ands	r2, r1
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	f383 8810 	msr	PRIMASK, r3
}
 80097ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80097ae:	f3ef 8310 	mrs	r3, PRIMASK
 80097b2:	623b      	str	r3, [r7, #32]
  return(result);
 80097b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80097b8:	2301      	movs	r3, #1
 80097ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097be:	f383 8810 	msr	PRIMASK, r3
}
 80097c2:	46c0      	nop			@ (mov r8, r8)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	491b      	ldr	r1, [pc, #108]	@ (800983c <UART_EndRxTransfer+0xc8>)
 80097d0:	400a      	ands	r2, r1
 80097d2:	609a      	str	r2, [r3, #8]
 80097d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097da:	f383 8810 	msr	PRIMASK, r3
}
 80097de:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d118      	bne.n	800981a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80097e8:	f3ef 8310 	mrs	r3, PRIMASK
 80097ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80097ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097f2:	2301      	movs	r3, #1
 80097f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f383 8810 	msr	PRIMASK, r3
}
 80097fc:	46c0      	nop			@ (mov r8, r8)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2110      	movs	r1, #16
 800980a:	438a      	bics	r2, r1
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009810:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f383 8810 	msr	PRIMASK, r3
}
 8009818:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	228c      	movs	r2, #140	@ 0x8c
 800981e:	2120      	movs	r1, #32
 8009820:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800982e:	46c0      	nop			@ (mov r8, r8)
 8009830:	46bd      	mov	sp, r7
 8009832:	b00e      	add	sp, #56	@ 0x38
 8009834:	bd80      	pop	{r7, pc}
 8009836:	46c0      	nop			@ (mov r8, r8)
 8009838:	fffffedf 	.word	0xfffffedf
 800983c:	effffffe 	.word	0xeffffffe

08009840 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2284      	movs	r2, #132	@ 0x84
 800984c:	5c9b      	ldrb	r3, [r3, r2]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_UARTEx_DisableFifoMode+0x16>
 8009852:	2302      	movs	r3, #2
 8009854:	e027      	b.n	80098a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2284      	movs	r2, #132	@ 0x84
 800985a:	2101      	movs	r1, #1
 800985c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2288      	movs	r2, #136	@ 0x88
 8009862:	2124      	movs	r1, #36	@ 0x24
 8009864:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2101      	movs	r1, #1
 800987a:	438a      	bics	r2, r1
 800987c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	4a0b      	ldr	r2, [pc, #44]	@ (80098b0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009882:	4013      	ands	r3, r2
 8009884:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2288      	movs	r2, #136	@ 0x88
 8009898:	2120      	movs	r1, #32
 800989a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2284      	movs	r2, #132	@ 0x84
 80098a0:	2100      	movs	r1, #0
 80098a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	0018      	movs	r0, r3
 80098a8:	46bd      	mov	sp, r7
 80098aa:	b004      	add	sp, #16
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	46c0      	nop			@ (mov r8, r8)
 80098b0:	dfffffff 	.word	0xdfffffff

080098b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2284      	movs	r2, #132	@ 0x84
 80098c2:	5c9b      	ldrb	r3, [r3, r2]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d101      	bne.n	80098cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098c8:	2302      	movs	r3, #2
 80098ca:	e02e      	b.n	800992a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2284      	movs	r2, #132	@ 0x84
 80098d0:	2101      	movs	r1, #1
 80098d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2288      	movs	r2, #136	@ 0x88
 80098d8:	2124      	movs	r1, #36	@ 0x24
 80098da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2101      	movs	r1, #1
 80098f0:	438a      	bics	r2, r1
 80098f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	00db      	lsls	r3, r3, #3
 80098fc:	08d9      	lsrs	r1, r3, #3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	0018      	movs	r0, r3
 800990c:	f000 f854 	bl	80099b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2288      	movs	r2, #136	@ 0x88
 800991c:	2120      	movs	r1, #32
 800991e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2284      	movs	r2, #132	@ 0x84
 8009924:	2100      	movs	r1, #0
 8009926:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	0018      	movs	r0, r3
 800992c:	46bd      	mov	sp, r7
 800992e:	b004      	add	sp, #16
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2284      	movs	r2, #132	@ 0x84
 8009942:	5c9b      	ldrb	r3, [r3, r2]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d101      	bne.n	800994c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009948:	2302      	movs	r3, #2
 800994a:	e02f      	b.n	80099ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2284      	movs	r2, #132	@ 0x84
 8009950:	2101      	movs	r1, #1
 8009952:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2288      	movs	r2, #136	@ 0x88
 8009958:	2124      	movs	r1, #36	@ 0x24
 800995a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2101      	movs	r1, #1
 8009970:	438a      	bics	r2, r1
 8009972:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	4a0e      	ldr	r2, [pc, #56]	@ (80099b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800997c:	4013      	ands	r3, r2
 800997e:	0019      	movs	r1, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	430a      	orrs	r2, r1
 8009988:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	0018      	movs	r0, r3
 800998e:	f000 f813 	bl	80099b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2288      	movs	r2, #136	@ 0x88
 800999e:	2120      	movs	r1, #32
 80099a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2284      	movs	r2, #132	@ 0x84
 80099a6:	2100      	movs	r1, #0
 80099a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	0018      	movs	r0, r3
 80099ae:	46bd      	mov	sp, r7
 80099b0:	b004      	add	sp, #16
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	f1ffffff 	.word	0xf1ffffff

080099b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d108      	bne.n	80099da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	226a      	movs	r2, #106	@ 0x6a
 80099cc:	2101      	movs	r1, #1
 80099ce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2268      	movs	r2, #104	@ 0x68
 80099d4:	2101      	movs	r1, #1
 80099d6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099d8:	e043      	b.n	8009a62 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099da:	260f      	movs	r6, #15
 80099dc:	19bb      	adds	r3, r7, r6
 80099de:	2208      	movs	r2, #8
 80099e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099e2:	200e      	movs	r0, #14
 80099e4:	183b      	adds	r3, r7, r0
 80099e6:	2208      	movs	r2, #8
 80099e8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	0e5b      	lsrs	r3, r3, #25
 80099f2:	b2da      	uxtb	r2, r3
 80099f4:	240d      	movs	r4, #13
 80099f6:	193b      	adds	r3, r7, r4
 80099f8:	2107      	movs	r1, #7
 80099fa:	400a      	ands	r2, r1
 80099fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	0f5b      	lsrs	r3, r3, #29
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	250c      	movs	r5, #12
 8009a0a:	197b      	adds	r3, r7, r5
 8009a0c:	2107      	movs	r1, #7
 8009a0e:	400a      	ands	r2, r1
 8009a10:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a12:	183b      	adds	r3, r7, r0
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	197a      	adds	r2, r7, r5
 8009a18:	7812      	ldrb	r2, [r2, #0]
 8009a1a:	4914      	ldr	r1, [pc, #80]	@ (8009a6c <UARTEx_SetNbDataToProcess+0xb4>)
 8009a1c:	5c8a      	ldrb	r2, [r1, r2]
 8009a1e:	435a      	muls	r2, r3
 8009a20:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a22:	197b      	adds	r3, r7, r5
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	4a12      	ldr	r2, [pc, #72]	@ (8009a70 <UARTEx_SetNbDataToProcess+0xb8>)
 8009a28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a2a:	0019      	movs	r1, r3
 8009a2c:	f7f6 fc12 	bl	8000254 <__divsi3>
 8009a30:	0003      	movs	r3, r0
 8009a32:	b299      	uxth	r1, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	226a      	movs	r2, #106	@ 0x6a
 8009a38:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a3a:	19bb      	adds	r3, r7, r6
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	193a      	adds	r2, r7, r4
 8009a40:	7812      	ldrb	r2, [r2, #0]
 8009a42:	490a      	ldr	r1, [pc, #40]	@ (8009a6c <UARTEx_SetNbDataToProcess+0xb4>)
 8009a44:	5c8a      	ldrb	r2, [r1, r2]
 8009a46:	435a      	muls	r2, r3
 8009a48:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a4a:	193b      	adds	r3, r7, r4
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	4a08      	ldr	r2, [pc, #32]	@ (8009a70 <UARTEx_SetNbDataToProcess+0xb8>)
 8009a50:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a52:	0019      	movs	r1, r3
 8009a54:	f7f6 fbfe 	bl	8000254 <__divsi3>
 8009a58:	0003      	movs	r3, r0
 8009a5a:	b299      	uxth	r1, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2268      	movs	r2, #104	@ 0x68
 8009a60:	5299      	strh	r1, [r3, r2]
}
 8009a62:	46c0      	nop			@ (mov r8, r8)
 8009a64:	46bd      	mov	sp, r7
 8009a66:	b005      	add	sp, #20
 8009a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a6a:	46c0      	nop			@ (mov r8, r8)
 8009a6c:	0801019c 	.word	0x0801019c
 8009a70:	080101a4 	.word	0x080101a4

08009a74 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8009a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8009a7c:	230e      	movs	r3, #14
 8009a7e:	18fb      	adds	r3, r7, r3
 8009a80:	2205      	movs	r2, #5
 8009a82:	701a      	strb	r2, [r3, #0]
    uint8_t chip_id = 0;
 8009a84:	230d      	movs	r3, #13
 8009a86:	18fb      	adds	r3, r7, r3
 8009a88:	2200      	movs	r2, #0
 8009a8a:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009a8c:	250f      	movs	r5, #15
 8009a8e:	197c      	adds	r4, r7, r5
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	0018      	movs	r0, r3
 8009a94:	f001 fa2b 	bl	800aeee <null_ptr_check>
 8009a98:	0003      	movs	r3, r0
 8009a9a:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009a9c:	197b      	adds	r3, r7, r5
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	b25b      	sxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d154      	bne.n	8009b50 <bme280_init+0xdc>
    {
        while (try_count)
 8009aa6:	e043      	b.n	8009b30 <bme280_init+0xbc>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev); // 0xD0
 8009aa8:	250f      	movs	r5, #15
 8009aaa:	197c      	adds	r4, r7, r5
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	260d      	movs	r6, #13
 8009ab0:	19b9      	adds	r1, r7, r6
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	20d0      	movs	r0, #208	@ 0xd0
 8009ab6:	f000 f855 	bl	8009b64 <bme280_get_regs>
 8009aba:	0003      	movs	r3, r0
 8009abc:	7023      	strb	r3, [r4, #0]
            printf("bme280 chip_id = %x\n", chip_id);
 8009abe:	0034      	movs	r4, r6
 8009ac0:	193b      	adds	r3, r7, r4
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	001a      	movs	r2, r3
 8009ac6:	4b26      	ldr	r3, [pc, #152]	@ (8009b60 <bme280_init+0xec>)
 8009ac8:	0011      	movs	r1, r2
 8009aca:	0018      	movs	r0, r3
 8009acc:	f7fb fdba 	bl	8005644 <printf_>
            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8009ad0:	0029      	movs	r1, r5
 8009ad2:	187b      	adds	r3, r7, r1
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	b25b      	sxtb	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d11c      	bne.n	8009b16 <bme280_init+0xa2>
 8009adc:	193b      	adds	r3, r7, r4
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	2b60      	cmp	r3, #96	@ 0x60
 8009ae2:	d118      	bne.n	8009b16 <bme280_init+0xa2>
            {
                dev->chip_id = chip_id;
 8009ae4:	193b      	adds	r3, r7, r4
 8009ae6:	781a      	ldrb	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8009aec:	000d      	movs	r5, r1
 8009aee:	187c      	adds	r4, r7, r1
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	0018      	movs	r0, r3
 8009af4:	f000 fa05 	bl	8009f02 <bme280_soft_reset>
 8009af8:	0003      	movs	r3, r0
 8009afa:	7023      	strb	r3, [r4, #0]

                if (rslt == BME280_OK)
 8009afc:	197b      	adds	r3, r7, r5
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	b25b      	sxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d11a      	bne.n	8009b3c <bme280_init+0xc8>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8009b06:	197c      	adds	r4, r7, r5
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	0018      	movs	r0, r3
 8009b0c:	f001 f840 	bl	800ab90 <get_calib_data>
 8009b10:	0003      	movs	r3, r0
 8009b12:	7023      	strb	r3, [r4, #0]
                }

                break;
 8009b14:	e012      	b.n	8009b3c <bme280_init+0xc8>
            }

            /* Wait for 1 ms */
            dev->delay_us(1, dev->intf_ptr);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	695a      	ldr	r2, [r3, #20]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	0019      	movs	r1, r3
 8009b20:	2001      	movs	r0, #1
 8009b22:	4790      	blx	r2
            --try_count;
 8009b24:	220e      	movs	r2, #14
 8009b26:	18bb      	adds	r3, r7, r2
 8009b28:	18ba      	adds	r2, r7, r2
 8009b2a:	7812      	ldrb	r2, [r2, #0]
 8009b2c:	3a01      	subs	r2, #1
 8009b2e:	701a      	strb	r2, [r3, #0]
        while (try_count)
 8009b30:	230e      	movs	r3, #14
 8009b32:	18fb      	adds	r3, r7, r3
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1b6      	bne.n	8009aa8 <bme280_init+0x34>
 8009b3a:	e000      	b.n	8009b3e <bme280_init+0xca>
                break;
 8009b3c:	46c0      	nop			@ (mov r8, r8)
        }

        /* Chip id check failed */
        if (!try_count)
 8009b3e:	230e      	movs	r3, #14
 8009b40:	18fb      	adds	r3, r7, r3
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d103      	bne.n	8009b50 <bme280_init+0xdc>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8009b48:	230f      	movs	r3, #15
 8009b4a:	18fb      	adds	r3, r7, r3
 8009b4c:	22fe      	movs	r2, #254	@ 0xfe
 8009b4e:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8009b50:	230f      	movs	r3, #15
 8009b52:	18fb      	adds	r3, r7, r3
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	b25b      	sxtb	r3, r3
}
 8009b58:	0018      	movs	r0, r3
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b005      	add	sp, #20
 8009b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b60:	0800fd38 	.word	0x0800fd38

08009b64 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme280_dev *dev)
{
 8009b64:	b5b0      	push	{r4, r5, r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60b9      	str	r1, [r7, #8]
 8009b6c:	0011      	movs	r1, r2
 8009b6e:	607b      	str	r3, [r7, #4]
 8009b70:	240f      	movs	r4, #15
 8009b72:	193b      	adds	r3, r7, r4
 8009b74:	1c02      	adds	r2, r0, #0
 8009b76:	701a      	strb	r2, [r3, #0]
 8009b78:	230c      	movs	r3, #12
 8009b7a:	18fb      	adds	r3, r7, r3
 8009b7c:	1c0a      	adds	r2, r1, #0
 8009b7e:	801a      	strh	r2, [r3, #0]
    volatile int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	0018      	movs	r0, r3
 8009b84:	f001 f9b3 	bl	800aeee <null_ptr_check>
 8009b88:	0003      	movs	r3, r0
 8009b8a:	001a      	movs	r2, r3
 8009b8c:	2117      	movs	r1, #23
 8009b8e:	187b      	adds	r3, r7, r1
 8009b90:	701a      	strb	r2, [r3, #0]

    /* Proceed if null check is fine */
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8009b92:	187b      	adds	r3, r7, r1
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	b25b      	sxtb	r3, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d129      	bne.n	8009bf0 <bme280_get_regs+0x8c>
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d026      	beq.n	8009bf0 <bme280_get_regs+0x8c>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7a1b      	ldrb	r3, [r3, #8]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d006      	beq.n	8009bb8 <bme280_get_regs+0x54>
        {
            reg_addr = reg_addr | 0x80;
 8009baa:	193b      	adds	r3, r7, r4
 8009bac:	193a      	adds	r2, r7, r4
 8009bae:	7812      	ldrb	r2, [r2, #0]
 8009bb0:	2180      	movs	r1, #128	@ 0x80
 8009bb2:	4249      	negs	r1, r1
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	701a      	strb	r2, [r3, #0]

        /* Read the data  */
        /*  void *intf_ptr;Interface function pointer used to enable the device address for I2C
                            and chip selection for SPI */

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68dc      	ldr	r4, [r3, #12]
 8009bbc:	230c      	movs	r3, #12
 8009bbe:	18fb      	adds	r3, r7, r3
 8009bc0:	881a      	ldrh	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685d      	ldr	r5, [r3, #4]
 8009bc6:	68b9      	ldr	r1, [r7, #8]
 8009bc8:	230f      	movs	r3, #15
 8009bca:	18fb      	adds	r3, r7, r3
 8009bcc:	7818      	ldrb	r0, [r3, #0]
 8009bce:	002b      	movs	r3, r5
 8009bd0:	47a0      	blx	r4
 8009bd2:	0003      	movs	r3, r0
 8009bd4:	0019      	movs	r1, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2245      	movs	r2, #69	@ 0x45
 8009bda:	5499      	strb	r1, [r3, r2]

        /* Check for communication error */
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2245      	movs	r2, #69	@ 0x45
 8009be0:	569b      	ldrsb	r3, [r3, r2]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d008      	beq.n	8009bf8 <bme280_get_regs+0x94>
        {
            rslt = BME280_E_COMM_FAIL; // BME280_E_COMM_FAIL = INT8_C(-4)
 8009be6:	2317      	movs	r3, #23
 8009be8:	18fb      	adds	r3, r7, r3
 8009bea:	22fc      	movs	r2, #252	@ 0xfc
 8009bec:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS) // BME280_INTF_RET_SUCCESS = INT8_C(0)
 8009bee:	e003      	b.n	8009bf8 <bme280_get_regs+0x94>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR; // BME280_E_NULL_PTR = INT8_C(-1)
 8009bf0:	2317      	movs	r3, #23
 8009bf2:	18fb      	adds	r3, r7, r3
 8009bf4:	22ff      	movs	r2, #255	@ 0xff
 8009bf6:	701a      	strb	r2, [r3, #0]
    }
    //	printf("result => %d\n", rslt);
    return rslt;
 8009bf8:	2317      	movs	r3, #23
 8009bfa:	18fb      	adds	r3, r7, r3
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	b25b      	sxtb	r3, r3
}
 8009c00:	0018      	movs	r0, r3
 8009c02:	46bd      	mov	sp, r7
 8009c04:	b006      	add	sp, #24
 8009c06:	bdb0      	pop	{r4, r5, r7, pc}

08009c08 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme280_dev *dev)
{
 8009c08:	b5b0      	push	{r4, r5, r7, lr}
 8009c0a:	b08c      	sub	sp, #48	@ 0x30
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	1dfb      	adds	r3, r7, #7
 8009c16:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8009c18:	1dfb      	adds	r3, r7, #7
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b0a      	cmp	r3, #10
 8009c1e:	d902      	bls.n	8009c26 <bme280_set_regs+0x1e>
    {
        len = 10;
 8009c20:	1dfb      	adds	r3, r7, #7
 8009c22:	220a      	movs	r2, #10
 8009c24:	701a      	strb	r2, [r3, #0]

    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009c26:	252f      	movs	r5, #47	@ 0x2f
 8009c28:	197c      	adds	r4, r7, r5
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f001 f95e 	bl	800aeee <null_ptr_check>
 8009c32:	0003      	movs	r3, r0
 8009c34:	7023      	strb	r3, [r4, #0]

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8009c36:	197b      	adds	r3, r7, r5
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	b25b      	sxtb	r3, r3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d000      	beq.n	8009c42 <bme280_set_regs+0x3a>
 8009c40:	e06c      	b.n	8009d1c <bme280_set_regs+0x114>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d069      	beq.n	8009d1c <bme280_set_regs+0x114>
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d066      	beq.n	8009d1c <bme280_set_regs+0x114>
    {
        if (len != 0)
 8009c4e:	1dfb      	adds	r3, r7, #7
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d05d      	beq.n	8009d12 <bme280_set_regs+0x10a>
        {
            temp_buff[0] = reg_data[0];
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	781a      	ldrb	r2, [r3, #0]
 8009c5a:	2314      	movs	r3, #20
 8009c5c:	18fb      	adds	r3, r7, r3
 8009c5e:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	7a1b      	ldrb	r3, [r3, #8]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d01e      	beq.n	8009ca6 <bme280_set_regs+0x9e>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8009c68:	232b      	movs	r3, #43	@ 0x2b
 8009c6a:	18fb      	adds	r3, r7, r3
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	701a      	strb	r2, [r3, #0]
 8009c70:	e012      	b.n	8009c98 <bme280_set_regs+0x90>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8009c72:	202b      	movs	r0, #43	@ 0x2b
 8009c74:	183b      	adds	r3, r7, r0
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	18d3      	adds	r3, r2, r3
 8009c7c:	781a      	ldrb	r2, [r3, #0]
 8009c7e:	183b      	adds	r3, r7, r0
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	68f9      	ldr	r1, [r7, #12]
 8009c84:	18cb      	adds	r3, r1, r3
 8009c86:	217f      	movs	r1, #127	@ 0x7f
 8009c88:	400a      	ands	r2, r1
 8009c8a:	b2d2      	uxtb	r2, r2
 8009c8c:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8009c8e:	183b      	adds	r3, r7, r0
 8009c90:	781a      	ldrb	r2, [r3, #0]
 8009c92:	183b      	adds	r3, r7, r0
 8009c94:	3201      	adds	r2, #1
 8009c96:	701a      	strb	r2, [r3, #0]
 8009c98:	232b      	movs	r3, #43	@ 0x2b
 8009c9a:	18fa      	adds	r2, r7, r3
 8009c9c:	1dfb      	adds	r3, r7, #7
 8009c9e:	7812      	ldrb	r2, [r2, #0]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d3e5      	bcc.n	8009c72 <bme280_set_regs+0x6a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8009ca6:	1dfb      	adds	r3, r7, #7
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d911      	bls.n	8009cd2 <bme280_set_regs+0xca>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8009cae:	1dfb      	adds	r3, r7, #7
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	2114      	movs	r1, #20
 8009cb6:	1879      	adds	r1, r7, r1
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 ffb5 	bl	800ac28 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8009cbe:	1dfb      	adds	r3, r7, #7
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	18db      	adds	r3, r3, r3
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	232c      	movs	r3, #44	@ 0x2c
 8009cca:	18fb      	adds	r3, r7, r3
 8009ccc:	3a01      	subs	r2, #1
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	e004      	b.n	8009cdc <bme280_set_regs+0xd4>
            }
            else
            {
                temp_len = len;
 8009cd2:	232c      	movs	r3, #44	@ 0x2c
 8009cd4:	18fb      	adds	r3, r7, r3
 8009cd6:	1dfa      	adds	r2, r7, #7
 8009cd8:	7812      	ldrb	r2, [r2, #0]
 8009cda:	801a      	strh	r2, [r3, #0]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	691c      	ldr	r4, [r3, #16]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	7818      	ldrb	r0, [r3, #0]
 8009ce4:	232c      	movs	r3, #44	@ 0x2c
 8009ce6:	18fb      	adds	r3, r7, r3
 8009ce8:	881a      	ldrh	r2, [r3, #0]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	2114      	movs	r1, #20
 8009cf0:	1879      	adds	r1, r7, r1
 8009cf2:	47a0      	blx	r4
 8009cf4:	0003      	movs	r3, r0
 8009cf6:	0019      	movs	r1, r3
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2245      	movs	r2, #69	@ 0x45
 8009cfc:	5499      	strb	r1, [r3, r2]

            /* Check for communication error */
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2245      	movs	r2, #69	@ 0x45
 8009d02:	569b      	ldrsb	r3, [r3, r2]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00e      	beq.n	8009d26 <bme280_set_regs+0x11e>
            {
                rslt = BME280_E_COMM_FAIL;
 8009d08:	232f      	movs	r3, #47	@ 0x2f
 8009d0a:	18fb      	adds	r3, r7, r3
 8009d0c:	22fc      	movs	r2, #252	@ 0xfc
 8009d0e:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8009d10:	e009      	b.n	8009d26 <bme280_set_regs+0x11e>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8009d12:	232f      	movs	r3, #47	@ 0x2f
 8009d14:	18fb      	adds	r3, r7, r3
 8009d16:	22fd      	movs	r2, #253	@ 0xfd
 8009d18:	701a      	strb	r2, [r3, #0]
        if (len != 0)
 8009d1a:	e004      	b.n	8009d26 <bme280_set_regs+0x11e>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8009d1c:	232f      	movs	r3, #47	@ 0x2f
 8009d1e:	18fb      	adds	r3, r7, r3
 8009d20:	22ff      	movs	r2, #255	@ 0xff
 8009d22:	701a      	strb	r2, [r3, #0]
 8009d24:	e000      	b.n	8009d28 <bme280_set_regs+0x120>
        if (len != 0)
 8009d26:	46c0      	nop			@ (mov r8, r8)
    }

    return rslt;
 8009d28:	232f      	movs	r3, #47	@ 0x2f
 8009d2a:	18fb      	adds	r3, r7, r3
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	b25b      	sxtb	r3, r3
}
 8009d30:	0018      	movs	r0, r3
 8009d32:	46bd      	mov	sp, r7
 8009d34:	b00c      	add	sp, #48	@ 0x30
 8009d36:	bdb0      	pop	{r4, r5, r7, pc}

08009d38 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, struct bme280_dev *dev)
{
 8009d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	0002      	movs	r2, r0
 8009d40:	6039      	str	r1, [r7, #0]
 8009d42:	1dfb      	adds	r3, r7, #7
 8009d44:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009d46:	250f      	movs	r5, #15
 8009d48:	197c      	adds	r4, r7, r5
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f001 f8ce 	bl	800aeee <null_ptr_check>
 8009d52:	0003      	movs	r3, r0
 8009d54:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009d56:	197b      	adds	r3, r7, r5
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	b25b      	sxtb	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d14e      	bne.n	8009dfe <bme280_set_sensor_settings+0xc6>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8009d60:	197c      	adds	r4, r7, r5
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	260e      	movs	r6, #14
 8009d66:	19bb      	adds	r3, r7, r6
 8009d68:	0011      	movs	r1, r2
 8009d6a:	0018      	movs	r0, r3
 8009d6c:	f000 f896 	bl	8009e9c <bme280_get_sensor_mode>
 8009d70:	0003      	movs	r3, r0
 8009d72:	7023      	strb	r3, [r4, #0]

        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8009d74:	002a      	movs	r2, r5
 8009d76:	18bb      	adds	r3, r7, r2
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10a      	bne.n	8009d96 <bme280_set_sensor_settings+0x5e>
 8009d80:	19bb      	adds	r3, r7, r6
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d006      	beq.n	8009d96 <bme280_set_sensor_settings+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 8009d88:	18bc      	adds	r4, r7, r2
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f000 fc78 	bl	800a682 <put_device_to_sleep>
 8009d92:	0003      	movs	r3, r0
 8009d94:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME280_OK)
 8009d96:	240f      	movs	r4, #15
 8009d98:	193b      	adds	r3, r7, r4
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	b25b      	sxtb	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d12d      	bne.n	8009dfe <bme280_set_sensor_settings+0xc6>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8009da2:	1dfb      	adds	r3, r7, #7
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	0019      	movs	r1, r3
 8009da8:	2007      	movs	r0, #7
 8009daa:	f001 f87c 	bl	800aea6 <are_settings_changed>
 8009dae:	1e03      	subs	r3, r0, #0
 8009db0:	d00b      	beq.n	8009dca <bme280_set_sensor_settings+0x92>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	3340      	adds	r3, #64	@ 0x40
 8009db6:	0019      	movs	r1, r3
 8009db8:	193c      	adds	r4, r7, r4
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	1dfb      	adds	r3, r7, #7
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	f000 fa75 	bl	800a2b0 <set_osr_settings>
 8009dc6:	0003      	movs	r3, r0
 8009dc8:	7023      	strb	r3, [r4, #0]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8009dca:	240f      	movs	r4, #15
 8009dcc:	193b      	adds	r3, r7, r4
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	b25b      	sxtb	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d113      	bne.n	8009dfe <bme280_set_sensor_settings+0xc6>
 8009dd6:	1dfb      	adds	r3, r7, #7
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	0019      	movs	r1, r3
 8009ddc:	2018      	movs	r0, #24
 8009dde:	f001 f862 	bl	800aea6 <are_settings_changed>
 8009de2:	1e03      	subs	r3, r0, #0
 8009de4:	d00b      	beq.n	8009dfe <bme280_set_sensor_settings+0xc6>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	3340      	adds	r3, #64	@ 0x40
 8009dea:	0019      	movs	r1, r3
 8009dec:	193c      	adds	r4, r7, r4
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	1dfb      	adds	r3, r7, #7
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	0018      	movs	r0, r3
 8009df6:	f000 fb21 	bl	800a43c <set_filter_standby_settings>
 8009dfa:	0003      	movs	r3, r0
 8009dfc:	7023      	strb	r3, [r4, #0]
            }
        }
    }

    return rslt;
 8009dfe:	230f      	movs	r3, #15
 8009e00:	18fb      	adds	r3, r7, r3
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	b25b      	sxtb	r3, r3
}
 8009e06:	0018      	movs	r0, r3
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	b005      	add	sp, #20
 8009e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e0e <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 8009e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	0002      	movs	r2, r0
 8009e16:	6039      	str	r1, [r7, #0]
 8009e18:	1dfb      	adds	r3, r7, #7
 8009e1a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009e1c:	250f      	movs	r5, #15
 8009e1e:	197c      	adds	r4, r7, r5
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	0018      	movs	r0, r3
 8009e24:	f001 f863 	bl	800aeee <null_ptr_check>
 8009e28:	0003      	movs	r3, r0
 8009e2a:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 8009e2c:	197b      	adds	r3, r7, r5
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	b25b      	sxtb	r3, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d12a      	bne.n	8009e8c <bme280_set_sensor_mode+0x7e>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8009e36:	197c      	adds	r4, r7, r5
 8009e38:	683a      	ldr	r2, [r7, #0]
 8009e3a:	260e      	movs	r6, #14
 8009e3c:	19bb      	adds	r3, r7, r6
 8009e3e:	0011      	movs	r1, r2
 8009e40:	0018      	movs	r0, r3
 8009e42:	f000 f82b 	bl	8009e9c <bme280_get_sensor_mode>
 8009e46:	0003      	movs	r3, r0
 8009e48:	7023      	strb	r3, [r4, #0]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8009e4a:	002a      	movs	r2, r5
 8009e4c:	18bb      	adds	r3, r7, r2
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	b25b      	sxtb	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10a      	bne.n	8009e6c <bme280_set_sensor_mode+0x5e>
 8009e56:	19bb      	adds	r3, r7, r6
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d006      	beq.n	8009e6c <bme280_set_sensor_mode+0x5e>
        {
            rslt = put_device_to_sleep(dev);
 8009e5e:	18bc      	adds	r4, r7, r2
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	0018      	movs	r0, r3
 8009e64:	f000 fc0d 	bl	800a682 <put_device_to_sleep>
 8009e68:	0003      	movs	r3, r0
 8009e6a:	7023      	strb	r3, [r4, #0]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8009e6c:	220f      	movs	r2, #15
 8009e6e:	18bb      	adds	r3, r7, r2
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	b25b      	sxtb	r3, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d109      	bne.n	8009e8c <bme280_set_sensor_mode+0x7e>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8009e78:	18bc      	adds	r4, r7, r2
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	1dfb      	adds	r3, r7, #7
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	0011      	movs	r1, r2
 8009e82:	0018      	movs	r0, r3
 8009e84:	f000 fbbd 	bl	800a602 <write_power_mode>
 8009e88:	0003      	movs	r3, r0
 8009e8a:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 8009e8c:	230f      	movs	r3, #15
 8009e8e:	18fb      	adds	r3, r7, r3
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	b25b      	sxtb	r3, r3
}
 8009e94:	0018      	movs	r0, r3
 8009e96:	46bd      	mov	sp, r7
 8009e98:	b005      	add	sp, #20
 8009e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e9c <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
{
 8009e9c:	b5b0      	push	{r4, r5, r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009ea6:	250f      	movs	r5, #15
 8009ea8:	197c      	adds	r4, r7, r5
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	0018      	movs	r0, r3
 8009eae:	f001 f81e 	bl	800aeee <null_ptr_check>
 8009eb2:	0003      	movs	r3, r0
 8009eb4:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (sensor_mode != NULL))
 8009eb6:	002a      	movs	r2, r5
 8009eb8:	18bb      	adds	r3, r7, r2
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b25b      	sxtb	r3, r3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d113      	bne.n	8009eea <bme280_get_sensor_mode+0x4e>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d010      	beq.n	8009eea <bme280_get_sensor_mode+0x4e>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8009ec8:	18bc      	adds	r4, r7, r2
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	6879      	ldr	r1, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	20f4      	movs	r0, #244	@ 0xf4
 8009ed2:	f7ff fe47 	bl	8009b64 <bme280_get_regs>
 8009ed6:	0003      	movs	r3, r0
 8009ed8:	7023      	strb	r3, [r4, #0]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	2203      	movs	r2, #3
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	701a      	strb	r2, [r3, #0]
 8009ee8:	e003      	b.n	8009ef2 <bme280_get_sensor_mode+0x56>
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8009eea:	230f      	movs	r3, #15
 8009eec:	18fb      	adds	r3, r7, r3
 8009eee:	22ff      	movs	r2, #255	@ 0xff
 8009ef0:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8009ef2:	230f      	movs	r3, #15
 8009ef4:	18fb      	adds	r3, r7, r3
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	b25b      	sxtb	r3, r3
}
 8009efa:	0018      	movs	r0, r3
 8009efc:	46bd      	mov	sp, r7
 8009efe:	b004      	add	sp, #16
 8009f00:	bdb0      	pop	{r4, r5, r7, pc}

08009f02 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(struct bme280_dev *dev)
{
 8009f02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f04:	b085      	sub	sp, #20
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR; // UINT8_C(0xE0)
 8009f0a:	260d      	movs	r6, #13
 8009f0c:	19bb      	adds	r3, r7, r6
 8009f0e:	22e0      	movs	r2, #224	@ 0xe0
 8009f10:	701a      	strb	r2, [r3, #0]
    uint8_t status_reg = 0;
 8009f12:	230c      	movs	r3, #12
 8009f14:	18fb      	adds	r3, r7, r3
 8009f16:	2200      	movs	r2, #0
 8009f18:	701a      	strb	r2, [r3, #0]
    uint8_t try_run = 5;
 8009f1a:	230e      	movs	r3, #14
 8009f1c:	18fb      	adds	r3, r7, r3
 8009f1e:	2205      	movs	r2, #5
 8009f20:	701a      	strb	r2, [r3, #0]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8009f22:	230b      	movs	r3, #11
 8009f24:	18fb      	adds	r3, r7, r3
 8009f26:	22b6      	movs	r2, #182	@ 0xb6
 8009f28:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8009f2a:	250f      	movs	r5, #15
 8009f2c:	197c      	adds	r4, r7, r5
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	0018      	movs	r0, r3
 8009f32:	f000 ffdc 	bl	800aeee <null_ptr_check>
 8009f36:	0003      	movs	r3, r0
 8009f38:	7023      	strb	r3, [r4, #0]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8009f3a:	197b      	adds	r3, r7, r5
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	b25b      	sxtb	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d13e      	bne.n	8009fc2 <bme280_soft_reset+0xc0>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8009f44:	197c      	adds	r4, r7, r5
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	220b      	movs	r2, #11
 8009f4a:	18b9      	adds	r1, r7, r2
 8009f4c:	19b8      	adds	r0, r7, r6
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f7ff fe5a 	bl	8009c08 <bme280_set_regs>
 8009f54:	0003      	movs	r3, r0
 8009f56:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 8009f58:	197b      	adds	r3, r7, r5
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	b25b      	sxtb	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d12f      	bne.n	8009fc2 <bme280_soft_reset+0xc0>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_us(2, dev->intf_ptr);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695a      	ldr	r2, [r3, #20]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	0019      	movs	r1, r3
 8009f6c:	2002      	movs	r0, #2
 8009f6e:	4790      	blx	r2
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8009f70:	250f      	movs	r5, #15
 8009f72:	197c      	adds	r4, r7, r5
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	260c      	movs	r6, #12
 8009f78:	19b9      	adds	r1, r7, r6
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	20f3      	movs	r0, #243	@ 0xf3
 8009f7e:	f7ff fdf1 	bl	8009b64 <bme280_get_regs>
 8009f82:	0003      	movs	r3, r0
 8009f84:	7023      	strb	r3, [r4, #0]

            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8009f86:	197b      	adds	r3, r7, r5
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	b25b      	sxtb	r3, r3
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10d      	bne.n	8009fac <bme280_soft_reset+0xaa>
 8009f90:	220e      	movs	r2, #14
 8009f92:	18bb      	adds	r3, r7, r2
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	18ba      	adds	r2, r7, r2
 8009f98:	1e59      	subs	r1, r3, #1
 8009f9a:	7011      	strb	r1, [r2, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d005      	beq.n	8009fac <bme280_soft_reset+0xaa>
 8009fa0:	19bb      	adds	r3, r7, r6
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	001a      	movs	r2, r3
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	4013      	ands	r3, r2
 8009faa:	d1da      	bne.n	8009f62 <bme280_soft_reset+0x60>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8009fac:	230c      	movs	r3, #12
 8009fae:	18fb      	adds	r3, r7, r3
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	001a      	movs	r2, r3
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	d003      	beq.n	8009fc2 <bme280_soft_reset+0xc0>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8009fba:	230f      	movs	r3, #15
 8009fbc:	18fb      	adds	r3, r7, r3
 8009fbe:	22fa      	movs	r2, #250	@ 0xfa
 8009fc0:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    return rslt;
 8009fc2:	230f      	movs	r3, #15
 8009fc4:	18fb      	adds	r3, r7, r3
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	b25b      	sxtb	r3, r3
}
 8009fca:	0018      	movs	r0, r3
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	b005      	add	sp, #20
 8009fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009fd2 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user../ struct bme280_data
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8009fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fd4:	b08b      	sub	sp, #44	@ 0x2c
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	230f      	movs	r3, #15
 8009fde:	18fb      	adds	r3, r7, r3
 8009fe0:	1c02      	adds	r2, r0, #0
 8009fe2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8009fe4:	261c      	movs	r6, #28
 8009fe6:	19bb      	adds	r3, r7, r6
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	2200      	movs	r2, #0
 8009fee:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = {0};
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	18fb      	adds	r3, r7, r3
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	230c      	movs	r3, #12
 8009ff8:	001a      	movs	r2, r3
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	f003 fdac 	bl	800db58 <memset>

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800a000:	2527      	movs	r5, #39	@ 0x27
 800a002:	197c      	adds	r4, r7, r5
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	0018      	movs	r0, r3
 800a008:	f000 ff71 	bl	800aeee <null_ptr_check>
 800a00c:	0003      	movs	r3, r0
 800a00e:	7023      	strb	r3, [r4, #0]

    if ((rslt == BME280_OK) && (comp_data != NULL))
 800a010:	197b      	adds	r3, r7, r5
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	b25b      	sxtb	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	d128      	bne.n	800a06c <bme280_get_sensor_data+0x9a>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d025      	beq.n	800a06c <bme280_get_sensor_data+0x9a>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800a020:	197c      	adds	r4, r7, r5
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	19b9      	adds	r1, r7, r6
 800a026:	2208      	movs	r2, #8
 800a028:	20f7      	movs	r0, #247	@ 0xf7
 800a02a:	f7ff fd9b 	bl	8009b64 <bme280_get_regs>
 800a02e:	0003      	movs	r3, r0
 800a030:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a032:	002c      	movs	r4, r5
 800a034:	193b      	adds	r3, r7, r4
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	b25b      	sxtb	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d11a      	bne.n	800a074 <bme280_get_sensor_data+0xa2>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 800a03e:	2310      	movs	r3, #16
 800a040:	18fa      	adds	r2, r7, r3
 800a042:	19bb      	adds	r3, r7, r6
 800a044:	0011      	movs	r1, r2
 800a046:	0018      	movs	r0, r3
 800a048:	f000 f81c 	bl	800a084 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	001d      	movs	r5, r3
 800a050:	3518      	adds	r5, #24
 800a052:	193c      	adds	r4, r7, r4
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	2310      	movs	r3, #16
 800a058:	18f9      	adds	r1, r7, r3
 800a05a:	230f      	movs	r3, #15
 800a05c:	18fb      	adds	r3, r7, r3
 800a05e:	7818      	ldrb	r0, [r3, #0]
 800a060:	002b      	movs	r3, r5
 800a062:	f000 f853 	bl	800a10c <bme280_compensate_data>
 800a066:	0003      	movs	r3, r0
 800a068:	7023      	strb	r3, [r4, #0]
        if (rslt == BME280_OK)
 800a06a:	e003      	b.n	800a074 <bme280_get_sensor_data+0xa2>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800a06c:	2327      	movs	r3, #39	@ 0x27
 800a06e:	18fb      	adds	r3, r7, r3
 800a070:	22ff      	movs	r2, #255	@ 0xff
 800a072:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800a074:	2327      	movs	r3, #39	@ 0x27
 800a076:	18fb      	adds	r3, r7, r3
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	b25b      	sxtb	r3, r3
}
 800a07c:	0018      	movs	r0, r3
 800a07e:	46bd      	mov	sp, r7
 800a080:	b00b      	add	sp, #44	@ 0x2c
 800a082:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a084 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	031b      	lsls	r3, r3, #12
 800a094:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3301      	adds	r3, #1
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	011b      	lsls	r3, r3, #4
 800a09e:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3302      	adds	r3, #2
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	091b      	lsrs	r3, r3, #4
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3303      	adds	r3, #3
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	031b      	lsls	r3, r3, #12
 800a0c2:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	3305      	adds	r3, #5
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	091b      	lsrs	r3, r3, #4
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	431a      	orrs	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << 8;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3306      	adds	r3, #6
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	021b      	lsls	r3, r3, #8
 800a0f0:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[7];
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3307      	adds	r3, #7
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	613b      	str	r3, [r7, #16]
    uncomp_data->humidity = data_msb | data_lsb;
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	431a      	orrs	r2, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	609a      	str	r2, [r3, #8]
}
 800a104:	46c0      	nop			@ (mov r8, r8)
 800a106:	46bd      	mov	sp, r7
 800a108:	b006      	add	sp, #24
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	60b9      	str	r1, [r7, #8]
 800a114:	607a      	str	r2, [r7, #4]
 800a116:	603b      	str	r3, [r7, #0]
 800a118:	210f      	movs	r1, #15
 800a11a:	187b      	adds	r3, r7, r1
 800a11c:	1c02      	adds	r2, r0, #0
 800a11e:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_OK;
 800a120:	2317      	movs	r3, #23
 800a122:	18fb      	adds	r3, r7, r3
 800a124:	2200      	movs	r2, #0
 800a126:	701a      	strb	r2, [r3, #0]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d03b      	beq.n	800a1a6 <bme280_compensate_data+0x9a>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d038      	beq.n	800a1a6 <bme280_compensate_data+0x9a>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d035      	beq.n	800a1a6 <bme280_compensate_data+0x9a>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	605a      	str	r2, [r3, #4]
        comp_data->pressure = 0;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	601a      	str	r2, [r3, #0]
        comp_data->humidity = 0;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	609a      	str	r2, [r3, #8]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800a14c:	187b      	adds	r3, r7, r1
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	2207      	movs	r2, #7
 800a152:	4013      	ands	r3, r2
 800a154:	d008      	beq.n	800a168 <bme280_compensate_data+0x5c>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	0011      	movs	r1, r2
 800a15c:	0018      	movs	r0, r3
 800a15e:	f000 faf1 	bl	800a744 <compensate_temperature>
 800a162:	0002      	movs	r2, r0
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	605a      	str	r2, [r3, #4]
        }

        if (sensor_comp & BME280_PRESS)
 800a168:	230f      	movs	r3, #15
 800a16a:	18fb      	adds	r3, r7, r3
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	2201      	movs	r2, #1
 800a170:	4013      	ands	r3, r2
 800a172:	d008      	beq.n	800a186 <bme280_compensate_data+0x7a>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	0011      	movs	r1, r2
 800a17a:	0018      	movs	r0, r3
 800a17c:	f000 fb48 	bl	800a810 <compensate_pressure>
 800a180:	0002      	movs	r2, r0
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	601a      	str	r2, [r3, #0]
        }

        if (sensor_comp & BME280_HUM)
 800a186:	230f      	movs	r3, #15
 800a188:	18fb      	adds	r3, r7, r3
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2204      	movs	r2, #4
 800a18e:	4013      	ands	r3, r2
 800a190:	d00d      	beq.n	800a1ae <bme280_compensate_data+0xa2>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	0011      	movs	r1, r2
 800a198:	0018      	movs	r0, r3
 800a19a:	f000 fc3b 	bl	800aa14 <compensate_humidity>
 800a19e:	0002      	movs	r2, r0
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	609a      	str	r2, [r3, #8]
        if (sensor_comp & BME280_HUM)
 800a1a4:	e003      	b.n	800a1ae <bme280_compensate_data+0xa2>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 800a1a6:	2317      	movs	r3, #23
 800a1a8:	18fb      	adds	r3, r7, r3
 800a1aa:	22ff      	movs	r2, #255	@ 0xff
 800a1ac:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800a1ae:	2317      	movs	r3, #23
 800a1b0:	18fb      	adds	r3, r7, r3
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	b25b      	sxtb	r3, r3
}
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	b006      	add	sp, #24
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <bme280_cal_meas_delay>:
/*!
 * @brief This API is used to calculate the maximum delay in milliseconds required for the
 * temperature/pressure/humidity(which ever at enabled) measurement to complete.
 */
uint32_t bme280_cal_meas_delay(const struct bme280_settings *settings)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
    uint8_t temp_osr;
    uint8_t pres_osr;
    uint8_t hum_osr;

    /*Array to map OSR config register value to actual OSR */
    uint8_t osr_sett_to_act_osr[] = {0, 1, 2, 4, 8, 16};
 800a1c8:	2008      	movs	r0, #8
 800a1ca:	183b      	adds	r3, r7, r0
 800a1cc:	4a35      	ldr	r2, [pc, #212]	@ (800a2a4 <bme280_cal_meas_delay+0xe4>)
 800a1ce:	6811      	ldr	r1, [r2, #0]
 800a1d0:	6019      	str	r1, [r3, #0]
 800a1d2:	8892      	ldrh	r2, [r2, #4]
 800a1d4:	809a      	strh	r2, [r3, #4]

    /* Mapping osr settings to the actual osr values e.g. 0b101 -> osr X16  */
    if (settings->osr_t <= 5)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	2b05      	cmp	r3, #5
 800a1dc:	d808      	bhi.n	800a1f0 <bme280_cal_meas_delay+0x30>
    {
        temp_osr = osr_sett_to_act_osr[settings->osr_t];
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	785b      	ldrb	r3, [r3, #1]
 800a1e2:	0019      	movs	r1, r3
 800a1e4:	2317      	movs	r3, #23
 800a1e6:	18fb      	adds	r3, r7, r3
 800a1e8:	183a      	adds	r2, r7, r0
 800a1ea:	5c52      	ldrb	r2, [r2, r1]
 800a1ec:	701a      	strb	r2, [r3, #0]
 800a1ee:	e003      	b.n	800a1f8 <bme280_cal_meas_delay+0x38>
    }
    else
    {
        temp_osr = 16;
 800a1f0:	2317      	movs	r3, #23
 800a1f2:	18fb      	adds	r3, r7, r3
 800a1f4:	2210      	movs	r2, #16
 800a1f6:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_p <= 5)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b05      	cmp	r3, #5
 800a1fe:	d809      	bhi.n	800a214 <bme280_cal_meas_delay+0x54>
    {
        pres_osr = osr_sett_to_act_osr[settings->osr_p];
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	0019      	movs	r1, r3
 800a206:	2316      	movs	r3, #22
 800a208:	18fb      	adds	r3, r7, r3
 800a20a:	2208      	movs	r2, #8
 800a20c:	18ba      	adds	r2, r7, r2
 800a20e:	5c52      	ldrb	r2, [r2, r1]
 800a210:	701a      	strb	r2, [r3, #0]
 800a212:	e003      	b.n	800a21c <bme280_cal_meas_delay+0x5c>
    }
    else
    {
        pres_osr = 16;
 800a214:	2316      	movs	r3, #22
 800a216:	18fb      	adds	r3, r7, r3
 800a218:	2210      	movs	r2, #16
 800a21a:	701a      	strb	r2, [r3, #0]
    }

    if (settings->osr_h <= 5)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	789b      	ldrb	r3, [r3, #2]
 800a220:	2b05      	cmp	r3, #5
 800a222:	d809      	bhi.n	800a238 <bme280_cal_meas_delay+0x78>
    {
        hum_osr = osr_sett_to_act_osr[settings->osr_h];
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	789b      	ldrb	r3, [r3, #2]
 800a228:	0019      	movs	r1, r3
 800a22a:	2315      	movs	r3, #21
 800a22c:	18fb      	adds	r3, r7, r3
 800a22e:	2208      	movs	r2, #8
 800a230:	18ba      	adds	r2, r7, r2
 800a232:	5c52      	ldrb	r2, [r2, r1]
 800a234:	701a      	strb	r2, [r3, #0]
 800a236:	e003      	b.n	800a240 <bme280_cal_meas_delay+0x80>
    }
    else
    {
        hum_osr = 16;
 800a238:	2315      	movs	r3, #21
 800a23a:	18fb      	adds	r3, r7, r3
 800a23c:	2210      	movs	r2, #16
 800a23e:	701a      	strb	r2, [r3, #0]
    }

    max_delay =
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800a240:	2317      	movs	r3, #23
 800a242:	18fb      	adds	r3, r7, r3
 800a244:	781a      	ldrb	r2, [r3, #0]
 800a246:	0013      	movs	r3, r2
 800a248:	00db      	lsls	r3, r3, #3
 800a24a:	189b      	adds	r3, r3, r2
 800a24c:	019b      	lsls	r3, r3, #6
 800a24e:	1a9b      	subs	r3, r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4a15      	ldr	r2, [pc, #84]	@ (800a2a8 <bme280_cal_meas_delay+0xe8>)
 800a254:	1899      	adds	r1, r3, r2
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 800a256:	2316      	movs	r3, #22
 800a258:	18fb      	adds	r3, r7, r3
 800a25a:	781a      	ldrb	r2, [r3, #0]
 800a25c:	0013      	movs	r3, r2
 800a25e:	00db      	lsls	r3, r3, #3
 800a260:	189b      	adds	r3, r3, r2
 800a262:	019b      	lsls	r3, r3, #6
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4a10      	ldr	r2, [pc, #64]	@ (800a2ac <bme280_cal_meas_delay+0xec>)
 800a26a:	4694      	mov	ip, r2
 800a26c:	4463      	add	r3, ip
        (uint32_t)((BME280_MEAS_OFFSET + (BME280_MEAS_DUR * temp_osr) +
 800a26e:	18c9      	adds	r1, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) /
 800a270:	2315      	movs	r3, #21
 800a272:	18fb      	adds	r3, r7, r3
 800a274:	781a      	ldrb	r2, [r3, #0]
 800a276:	0013      	movs	r3, r2
 800a278:	00db      	lsls	r3, r3, #3
 800a27a:	189b      	adds	r3, r3, r2
 800a27c:	019b      	lsls	r3, r3, #6
 800a27e:	1a9b      	subs	r3, r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4a0a      	ldr	r2, [pc, #40]	@ (800a2ac <bme280_cal_meas_delay+0xec>)
 800a284:	4694      	mov	ip, r2
 800a286:	4463      	add	r3, ip
                    ((BME280_MEAS_DUR * pres_osr) + BME280_PRES_HUM_MEAS_OFFSET) +
 800a288:	18cb      	adds	r3, r1, r3
                    ((BME280_MEAS_DUR * hum_osr) + BME280_PRES_HUM_MEAS_OFFSET)) /
 800a28a:	22fa      	movs	r2, #250	@ 0xfa
 800a28c:	0091      	lsls	r1, r2, #2
 800a28e:	0018      	movs	r0, r3
 800a290:	f7f5 ffe0 	bl	8000254 <__divsi3>
 800a294:	0003      	movs	r3, r0
    max_delay =
 800a296:	613b      	str	r3, [r7, #16]
                   BME280_MEAS_SCALING_FACTOR);

    return max_delay;
 800a298:	693b      	ldr	r3, [r7, #16]
}
 800a29a:	0018      	movs	r0, r3
 800a29c:	46bd      	mov	sp, r7
 800a29e:	b006      	add	sp, #24
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	46c0      	nop			@ (mov r8, r8)
 800a2a4:	0800fd50 	.word	0x0800fd50
 800a2a8:	000004e2 	.word	0x000004e2
 800a2ac:	0000023f 	.word	0x0000023f

0800a2b0 <set_osr_settings>:
/*!
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a2b0:	b590      	push	{r4, r7, lr}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60b9      	str	r1, [r7, #8]
 800a2b8:	607a      	str	r2, [r7, #4]
 800a2ba:	210f      	movs	r1, #15
 800a2bc:	187b      	adds	r3, r7, r1
 800a2be:	1c02      	adds	r2, r0, #0
 800a2c0:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800a2c2:	2017      	movs	r0, #23
 800a2c4:	183b      	adds	r3, r7, r0
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	701a      	strb	r2, [r3, #0]

    if (desired_settings & BME280_OSR_HUM_SEL)
 800a2ca:	187b      	adds	r3, r7, r1
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2204      	movs	r2, #4
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	d008      	beq.n	800a2e6 <set_osr_settings+0x36>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 800a2d4:	183c      	adds	r4, r7, r0
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	0011      	movs	r1, r2
 800a2dc:	0018      	movs	r0, r3
 800a2de:	f000 f81b 	bl	800a318 <set_osr_humidity_settings>
 800a2e2:	0003      	movs	r3, r0
 800a2e4:	7023      	strb	r3, [r4, #0]
    }

    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800a2e6:	200f      	movs	r0, #15
 800a2e8:	183b      	adds	r3, r7, r0
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	2203      	movs	r2, #3
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	d00a      	beq.n	800a308 <set_osr_settings+0x58>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800a2f2:	2317      	movs	r3, #23
 800a2f4:	18fc      	adds	r4, r7, r3
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	68b9      	ldr	r1, [r7, #8]
 800a2fa:	183b      	adds	r3, r7, r0
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	0018      	movs	r0, r3
 800a300:	f000 f851 	bl	800a3a6 <set_osr_press_temp_settings>
 800a304:	0003      	movs	r3, r0
 800a306:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a308:	2317      	movs	r3, #23
 800a30a:	18fb      	adds	r3, r7, r3
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	b25b      	sxtb	r3, r3
}
 800a310:	0018      	movs	r0, r3
 800a312:	46bd      	mov	sp, r7
 800a314:	b007      	add	sp, #28
 800a316:	bd90      	pop	{r4, r7, pc}

0800a318 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800a322:	250c      	movs	r5, #12
 800a324:	197b      	adds	r3, r7, r5
 800a326:	22f2      	movs	r2, #242	@ 0xf2
 800a328:	701a      	strb	r2, [r3, #0]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	789b      	ldrb	r3, [r3, #2]
 800a32e:	2207      	movs	r2, #7
 800a330:	4013      	ands	r3, r2
 800a332:	b2da      	uxtb	r2, r3
 800a334:	210e      	movs	r1, #14
 800a336:	187b      	adds	r3, r7, r1
 800a338:	701a      	strb	r2, [r3, #0]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800a33a:	260f      	movs	r6, #15
 800a33c:	19bc      	adds	r4, r7, r6
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	1879      	adds	r1, r7, r1
 800a342:	1978      	adds	r0, r7, r5
 800a344:	2201      	movs	r2, #1
 800a346:	f7ff fc5f 	bl	8009c08 <bme280_set_regs>
 800a34a:	0003      	movs	r3, r0
 800a34c:	7023      	strb	r3, [r4, #0]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 800a34e:	0031      	movs	r1, r6
 800a350:	187b      	adds	r3, r7, r1
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	b25b      	sxtb	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d11d      	bne.n	800a396 <set_osr_humidity_settings+0x7e>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800a35a:	197b      	adds	r3, r7, r5
 800a35c:	22f4      	movs	r2, #244	@ 0xf4
 800a35e:	701a      	strb	r2, [r3, #0]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800a360:	197b      	adds	r3, r7, r5
 800a362:	7818      	ldrb	r0, [r3, #0]
 800a364:	000e      	movs	r6, r1
 800a366:	187c      	adds	r4, r7, r1
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	220d      	movs	r2, #13
 800a36c:	18b9      	adds	r1, r7, r2
 800a36e:	2201      	movs	r2, #1
 800a370:	f7ff fbf8 	bl	8009b64 <bme280_get_regs>
 800a374:	0003      	movs	r3, r0
 800a376:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a378:	19bb      	adds	r3, r7, r6
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	b25b      	sxtb	r3, r3
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d109      	bne.n	800a396 <set_osr_humidity_settings+0x7e>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800a382:	19bc      	adds	r4, r7, r6
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	220d      	movs	r2, #13
 800a388:	18b9      	adds	r1, r7, r2
 800a38a:	1978      	adds	r0, r7, r5
 800a38c:	2201      	movs	r2, #1
 800a38e:	f7ff fc3b 	bl	8009c08 <bme280_set_regs>
 800a392:	0003      	movs	r3, r0
 800a394:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800a396:	230f      	movs	r3, #15
 800a398:	18fb      	adds	r3, r7, r3
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b25b      	sxtb	r3, r3
}
 800a39e:	0018      	movs	r0, r3
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	b005      	add	sp, #20
 800a3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a3a6 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800a3a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3a8:	b087      	sub	sp, #28
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	250f      	movs	r5, #15
 800a3b2:	197b      	adds	r3, r7, r5
 800a3b4:	1c02      	adds	r2, r0, #0
 800a3b6:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800a3b8:	2116      	movs	r1, #22
 800a3ba:	187b      	adds	r3, r7, r1
 800a3bc:	22f4      	movs	r2, #244	@ 0xf4
 800a3be:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800a3c0:	187b      	adds	r3, r7, r1
 800a3c2:	7818      	ldrb	r0, [r3, #0]
 800a3c4:	2617      	movs	r6, #23
 800a3c6:	19bc      	adds	r4, r7, r6
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2215      	movs	r2, #21
 800a3cc:	18b9      	adds	r1, r7, r2
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f7ff fbc8 	bl	8009b64 <bme280_get_regs>
 800a3d4:	0003      	movs	r3, r0
 800a3d6:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a3d8:	19bb      	adds	r3, r7, r6
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	b25b      	sxtb	r3, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d124      	bne.n	800a42c <set_osr_press_temp_settings+0x86>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800a3e2:	197b      	adds	r3, r7, r5
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	d006      	beq.n	800a3fa <set_osr_press_temp_settings+0x54>
        {
            fill_osr_press_settings(&reg_data, settings);
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	2315      	movs	r3, #21
 800a3f0:	18fb      	adds	r3, r7, r3
 800a3f2:	0011      	movs	r1, r2
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f000 f89f 	bl	800a538 <fill_osr_press_settings>
        }

        if (desired_settings & BME280_OSR_TEMP_SEL)
 800a3fa:	230f      	movs	r3, #15
 800a3fc:	18fb      	adds	r3, r7, r3
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2202      	movs	r2, #2
 800a402:	4013      	ands	r3, r2
 800a404:	d006      	beq.n	800a414 <set_osr_press_temp_settings+0x6e>
        {
            fill_osr_temp_settings(&reg_data, settings);
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	2315      	movs	r3, #21
 800a40a:	18fb      	adds	r3, r7, r3
 800a40c:	0011      	movs	r1, r2
 800a40e:	0018      	movs	r0, r3
 800a410:	f000 f8ad 	bl	800a56e <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800a414:	2317      	movs	r3, #23
 800a416:	18fc      	adds	r4, r7, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2215      	movs	r2, #21
 800a41c:	18b9      	adds	r1, r7, r2
 800a41e:	2216      	movs	r2, #22
 800a420:	18b8      	adds	r0, r7, r2
 800a422:	2201      	movs	r2, #1
 800a424:	f7ff fbf0 	bl	8009c08 <bme280_set_regs>
 800a428:	0003      	movs	r3, r0
 800a42a:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a42c:	2317      	movs	r3, #23
 800a42e:	18fb      	adds	r3, r7, r3
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b25b      	sxtb	r3, r3
}
 800a434:	0018      	movs	r0, r3
 800a436:	46bd      	mov	sp, r7
 800a438:	b007      	add	sp, #28
 800a43a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a43c <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          struct bme280_dev *dev)
{
 800a43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60b9      	str	r1, [r7, #8]
 800a444:	607a      	str	r2, [r7, #4]
 800a446:	250f      	movs	r5, #15
 800a448:	197b      	adds	r3, r7, r5
 800a44a:	1c02      	adds	r2, r0, #0
 800a44c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800a44e:	2116      	movs	r1, #22
 800a450:	187b      	adds	r3, r7, r1
 800a452:	22f5      	movs	r2, #245	@ 0xf5
 800a454:	701a      	strb	r2, [r3, #0]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800a456:	187b      	adds	r3, r7, r1
 800a458:	7818      	ldrb	r0, [r3, #0]
 800a45a:	2617      	movs	r6, #23
 800a45c:	19bc      	adds	r4, r7, r6
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2215      	movs	r2, #21
 800a462:	18b9      	adds	r1, r7, r2
 800a464:	2201      	movs	r2, #1
 800a466:	f7ff fb7d 	bl	8009b64 <bme280_get_regs>
 800a46a:	0003      	movs	r3, r0
 800a46c:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a46e:	19bb      	adds	r3, r7, r6
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	b25b      	sxtb	r3, r3
 800a474:	2b00      	cmp	r3, #0
 800a476:	d124      	bne.n	800a4c2 <set_filter_standby_settings+0x86>
    {
        if (desired_settings & BME280_FILTER_SEL)
 800a478:	197b      	adds	r3, r7, r5
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	2208      	movs	r2, #8
 800a47e:	4013      	ands	r3, r2
 800a480:	d006      	beq.n	800a490 <set_filter_standby_settings+0x54>
        {
            fill_filter_settings(&reg_data, settings);
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	2315      	movs	r3, #21
 800a486:	18fb      	adds	r3, r7, r3
 800a488:	0011      	movs	r1, r2
 800a48a:	0018      	movs	r0, r3
 800a48c:	f000 f821 	bl	800a4d2 <fill_filter_settings>
        }

        if (desired_settings & BME280_STANDBY_SEL)
 800a490:	230f      	movs	r3, #15
 800a492:	18fb      	adds	r3, r7, r3
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2210      	movs	r2, #16
 800a498:	4013      	ands	r3, r2
 800a49a:	d006      	beq.n	800a4aa <set_filter_standby_settings+0x6e>
        {
            fill_standby_settings(&reg_data, settings);
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	2315      	movs	r3, #21
 800a4a0:	18fb      	adds	r3, r7, r3
 800a4a2:	0011      	movs	r1, r2
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f000 f82f 	bl	800a508 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800a4aa:	2317      	movs	r3, #23
 800a4ac:	18fc      	adds	r4, r7, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2215      	movs	r2, #21
 800a4b2:	18b9      	adds	r1, r7, r2
 800a4b4:	2216      	movs	r2, #22
 800a4b6:	18b8      	adds	r0, r7, r2
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f7ff fba5 	bl	8009c08 <bme280_set_regs>
 800a4be:	0003      	movs	r3, r0
 800a4c0:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a4c2:	2317      	movs	r3, #23
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b25b      	sxtb	r3, r3
}
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	b007      	add	sp, #28
 800a4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4d2 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	b25b      	sxtb	r3, r3
 800a4e2:	221c      	movs	r2, #28
 800a4e4:	4393      	bics	r3, r2
 800a4e6:	b25a      	sxtb	r2, r3
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	78db      	ldrb	r3, [r3, #3]
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	b25b      	sxtb	r3, r3
 800a4f0:	211c      	movs	r1, #28
 800a4f2:	400b      	ands	r3, r1
 800a4f4:	b25b      	sxtb	r3, r3
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	b25b      	sxtb	r3, r3
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	701a      	strb	r2, [r3, #0]
}
 800a500:	46c0      	nop			@ (mov r8, r8)
 800a502:	46bd      	mov	sp, r7
 800a504:	b002      	add	sp, #8
 800a506:	bd80      	pop	{r7, pc}

0800a508 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	b25b      	sxtb	r3, r3
 800a518:	221f      	movs	r2, #31
 800a51a:	4013      	ands	r3, r2
 800a51c:	b25a      	sxtb	r2, r3
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	791b      	ldrb	r3, [r3, #4]
 800a522:	015b      	lsls	r3, r3, #5
 800a524:	b25b      	sxtb	r3, r3
 800a526:	4313      	orrs	r3, r2
 800a528:	b25b      	sxtb	r3, r3
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	701a      	strb	r2, [r3, #0]
}
 800a530:	46c0      	nop			@ (mov r8, r8)
 800a532:	46bd      	mov	sp, r7
 800a534:	b002      	add	sp, #8
 800a536:	bd80      	pop	{r7, pc}

0800a538 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	b25b      	sxtb	r3, r3
 800a548:	221c      	movs	r2, #28
 800a54a:	4393      	bics	r3, r2
 800a54c:	b25a      	sxtb	r2, r3
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	b25b      	sxtb	r3, r3
 800a556:	211c      	movs	r1, #28
 800a558:	400b      	ands	r3, r1
 800a55a:	b25b      	sxtb	r3, r3
 800a55c:	4313      	orrs	r3, r2
 800a55e:	b25b      	sxtb	r3, r3
 800a560:	b2da      	uxtb	r2, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	701a      	strb	r2, [r3, #0]
}
 800a566:	46c0      	nop			@ (mov r8, r8)
 800a568:	46bd      	mov	sp, r7
 800a56a:	b002      	add	sp, #8
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b082      	sub	sp, #8
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	b25b      	sxtb	r3, r3
 800a57e:	221f      	movs	r2, #31
 800a580:	4013      	ands	r3, r2
 800a582:	b25a      	sxtb	r2, r3
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	785b      	ldrb	r3, [r3, #1]
 800a588:	015b      	lsls	r3, r3, #5
 800a58a:	b25b      	sxtb	r3, r3
 800a58c:	4313      	orrs	r3, r2
 800a58e:	b25b      	sxtb	r3, r3
 800a590:	b2da      	uxtb	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	701a      	strb	r2, [r3, #0]
}
 800a596:	46c0      	nop			@ (mov r8, r8)
 800a598:	46bd      	mov	sp, r7
 800a59a:	b002      	add	sp, #8
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	2207      	movs	r2, #7
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	3302      	adds	r3, #2
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	109b      	asrs	r3, r3, #2
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3302      	adds	r3, #2
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	095b      	lsrs	r3, r3, #5
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3303      	adds	r3, #3
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	109b      	asrs	r3, r3, #2
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2207      	movs	r2, #7
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3303      	adds	r3, #3
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	095b      	lsrs	r3, r3, #5
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	711a      	strb	r2, [r3, #4]
}
 800a5fa:	46c0      	nop			@ (mov r8, r8)
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	b002      	add	sp, #8
 800a600:	bd80      	pop	{r7, pc}

0800a602 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
{
 800a602:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a604:	b085      	sub	sp, #20
 800a606:	af00      	add	r7, sp, #0
 800a608:	0002      	movs	r2, r0
 800a60a:	6039      	str	r1, [r7, #0]
 800a60c:	1dfb      	adds	r3, r7, #7
 800a60e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800a610:	260e      	movs	r6, #14
 800a612:	19bb      	adds	r3, r7, r6
 800a614:	22f4      	movs	r2, #244	@ 0xf4
 800a616:	701a      	strb	r2, [r3, #0]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800a618:	19bb      	adds	r3, r7, r6
 800a61a:	7818      	ldrb	r0, [r3, #0]
 800a61c:	240f      	movs	r4, #15
 800a61e:	193c      	adds	r4, r7, r4
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	250d      	movs	r5, #13
 800a624:	1979      	adds	r1, r7, r5
 800a626:	2201      	movs	r2, #1
 800a628:	f7ff fa9c 	bl	8009b64 <bme280_get_regs>
 800a62c:	0003      	movs	r3, r0
 800a62e:	7023      	strb	r3, [r4, #0]

    /* Set the power mode */
    if (rslt == BME280_OK)
 800a630:	240f      	movs	r4, #15
 800a632:	193b      	adds	r3, r7, r4
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	b25b      	sxtb	r3, r3
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d11a      	bne.n	800a672 <write_power_mode+0x70>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800a63c:	0028      	movs	r0, r5
 800a63e:	183b      	adds	r3, r7, r0
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	b25b      	sxtb	r3, r3
 800a644:	2203      	movs	r2, #3
 800a646:	4393      	bics	r3, r2
 800a648:	b25a      	sxtb	r2, r3
 800a64a:	1dfb      	adds	r3, r7, #7
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	b25b      	sxtb	r3, r3
 800a650:	2103      	movs	r1, #3
 800a652:	400b      	ands	r3, r1
 800a654:	b25b      	sxtb	r3, r3
 800a656:	4313      	orrs	r3, r2
 800a658:	b25b      	sxtb	r3, r3
 800a65a:	b2da      	uxtb	r2, r3
 800a65c:	183b      	adds	r3, r7, r0
 800a65e:	701a      	strb	r2, [r3, #0]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800a660:	193c      	adds	r4, r7, r4
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	1839      	adds	r1, r7, r0
 800a666:	19b8      	adds	r0, r7, r6
 800a668:	2201      	movs	r2, #1
 800a66a:	f7ff facd 	bl	8009c08 <bme280_set_regs>
 800a66e:	0003      	movs	r3, r0
 800a670:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a672:	230f      	movs	r3, #15
 800a674:	18fb      	adds	r3, r7, r3
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	b25b      	sxtb	r3, r3
}
 800a67a:	0018      	movs	r0, r3
 800a67c:	46bd      	mov	sp, r7
 800a67e:	b005      	add	sp, #20
 800a680:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a682 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
int8_t put_device_to_sleep(struct bme280_dev *dev)
{
 800a682:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a684:	b087      	sub	sp, #28
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800a68a:	2517      	movs	r5, #23
 800a68c:	197c      	adds	r4, r7, r5
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2610      	movs	r6, #16
 800a692:	19b9      	adds	r1, r7, r6
 800a694:	2204      	movs	r2, #4
 800a696:	20f2      	movs	r0, #242	@ 0xf2
 800a698:	f7ff fa64 	bl	8009b64 <bme280_get_regs>
 800a69c:	0003      	movs	r3, r0
 800a69e:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a6a0:	002c      	movs	r4, r5
 800a6a2:	193b      	adds	r3, r7, r4
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	b25b      	sxtb	r3, r3
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d11d      	bne.n	800a6e8 <put_device_to_sleep+0x66>
    {
        parse_device_settings(reg_data, &settings);
 800a6ac:	2308      	movs	r3, #8
 800a6ae:	18fa      	adds	r2, r7, r3
 800a6b0:	19bb      	adds	r3, r7, r6
 800a6b2:	0011      	movs	r1, r2
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	f7ff ff72 	bl	800a59e <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 800a6ba:	0025      	movs	r5, r4
 800a6bc:	193c      	adds	r4, r7, r4
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	f7ff fc1e 	bl	8009f02 <bme280_soft_reset>
 800a6c6:	0003      	movs	r3, r0
 800a6c8:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800a6ca:	197b      	adds	r3, r7, r5
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	b25b      	sxtb	r3, r3
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d109      	bne.n	800a6e8 <put_device_to_sleep+0x66>
        {
            rslt = reload_device_settings(&settings, dev);
 800a6d4:	197c      	adds	r4, r7, r5
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	2308      	movs	r3, #8
 800a6da:	18fb      	adds	r3, r7, r3
 800a6dc:	0011      	movs	r1, r2
 800a6de:	0018      	movs	r0, r3
 800a6e0:	f000 f80a 	bl	800a6f8 <reload_device_settings>
 800a6e4:	0003      	movs	r3, r0
 800a6e6:	7023      	strb	r3, [r4, #0]
        }
    }

    return rslt;
 800a6e8:	2317      	movs	r3, #23
 800a6ea:	18fb      	adds	r3, r7, r3
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	b25b      	sxtb	r3, r3
}
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	b007      	add	sp, #28
 800a6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a6f8 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
{
 800a6f8:	b5b0      	push	{r4, r5, r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800a702:	250f      	movs	r5, #15
 800a704:	197c      	adds	r4, r7, r5
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	0019      	movs	r1, r3
 800a70c:	201f      	movs	r0, #31
 800a70e:	f7ff fdcf 	bl	800a2b0 <set_osr_settings>
 800a712:	0003      	movs	r3, r0
 800a714:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800a716:	197b      	adds	r3, r7, r5
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	b25b      	sxtb	r3, r3
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d108      	bne.n	800a732 <reload_device_settings+0x3a>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800a720:	197c      	adds	r4, r7, r5
 800a722:	683a      	ldr	r2, [r7, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	0019      	movs	r1, r3
 800a728:	201f      	movs	r0, #31
 800a72a:	f7ff fe87 	bl	800a43c <set_filter_standby_settings>
 800a72e:	0003      	movs	r3, r0
 800a730:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800a732:	230f      	movs	r3, #15
 800a734:	18fb      	adds	r3, r7, r3
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	b25b      	sxtb	r3, r3
}
 800a73a:	0018      	movs	r0, r3
 800a73c:	46bd      	mov	sp, r7
 800a73e:	b004      	add	sp, #16
 800a740:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a744 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b088      	sub	sp, #32
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
    int32_t var1;
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
 800a74e:	4b2b      	ldr	r3, [pc, #172]	@ (800a7fc <compensate_temperature+0xb8>)
 800a750:	61bb      	str	r3, [r7, #24]
    int32_t temperature_max = 8500;
 800a752:	4b2b      	ldr	r3, [pc, #172]	@ (800a800 <compensate_temperature+0xbc>)
 800a754:	617b      	str	r3, [r7, #20]

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	08db      	lsrs	r3, r3, #3
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	8812      	ldrh	r2, [r2, #0]
 800a760:	0052      	lsls	r2, r2, #1
 800a762:	1a9b      	subs	r3, r3, r2
 800a764:	613b      	str	r3, [r7, #16]
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2202      	movs	r2, #2
 800a76a:	5e9b      	ldrsh	r3, [r3, r2]
 800a76c:	001a      	movs	r2, r3
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	4353      	muls	r3, r2
 800a772:	2b00      	cmp	r3, #0
 800a774:	da02      	bge.n	800a77c <compensate_temperature+0x38>
 800a776:	4a23      	ldr	r2, [pc, #140]	@ (800a804 <compensate_temperature+0xc0>)
 800a778:	4694      	mov	ip, r2
 800a77a:	4463      	add	r3, ip
 800a77c:	12db      	asrs	r3, r3, #11
 800a77e:	613b      	str	r3, [r7, #16]
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_t1));
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	091b      	lsrs	r3, r3, #4
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	8812      	ldrh	r2, [r2, #0]
 800a78a:	1a9b      	subs	r3, r3, r2
 800a78c:	60fb      	str	r3, [r7, #12]
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	435b      	muls	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	da02      	bge.n	800a79c <compensate_temperature+0x58>
 800a796:	4a1c      	ldr	r2, [pc, #112]	@ (800a808 <compensate_temperature+0xc4>)
 800a798:	4694      	mov	ip, r2
 800a79a:	4463      	add	r3, ip
 800a79c:	131b      	asrs	r3, r3, #12
 800a79e:	001a      	movs	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2104      	movs	r1, #4
 800a7a4:	5e5b      	ldrsh	r3, [r3, r1]
 800a7a6:	4353      	muls	r3, r2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	da02      	bge.n	800a7b2 <compensate_temperature+0x6e>
 800a7ac:	4a17      	ldr	r2, [pc, #92]	@ (800a80c <compensate_temperature+0xc8>)
 800a7ae:	4694      	mov	ip, r2
 800a7b0:	4463      	add	r3, ip
 800a7b2:	139b      	asrs	r3, r3, #14
 800a7b4:	60fb      	str	r3, [r7, #12]
    calib_data->t_fine = var1 + var2;
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	18d2      	adds	r2, r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	625a      	str	r2, [r3, #36]	@ 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7c4:	0013      	movs	r3, r2
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	189b      	adds	r3, r3, r2
 800a7ca:	3380      	adds	r3, #128	@ 0x80
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	da00      	bge.n	800a7d2 <compensate_temperature+0x8e>
 800a7d0:	33ff      	adds	r3, #255	@ 0xff
 800a7d2:	121b      	asrs	r3, r3, #8
 800a7d4:	61fb      	str	r3, [r7, #28]

    if (temperature < temperature_min)
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	da02      	bge.n	800a7e4 <compensate_temperature+0xa0>
    {
        temperature = temperature_min;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	61fb      	str	r3, [r7, #28]
 800a7e2:	e005      	b.n	800a7f0 <compensate_temperature+0xac>
    }
    else if (temperature > temperature_max)
 800a7e4:	69fa      	ldr	r2, [r7, #28]
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	dd01      	ble.n	800a7f0 <compensate_temperature+0xac>
    {
        temperature = temperature_max;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	61fb      	str	r3, [r7, #28]
    }
    __asm volatile("nop");
 800a7f0:	46c0      	nop			@ (mov r8, r8)
    return temperature;
 800a7f2:	69fb      	ldr	r3, [r7, #28]
}
 800a7f4:	0018      	movs	r0, r3
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	b008      	add	sp, #32
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	fffff060 	.word	0xfffff060
 800a800:	00002134 	.word	0x00002134
 800a804:	000007ff 	.word	0x000007ff
 800a808:	00000fff 	.word	0x00000fff
 800a80c:	00003fff 	.word	0x00003fff

0800a810 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in integer data type.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08a      	sub	sp, #40	@ 0x28
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    uint32_t var5;
    uint32_t pressure;
    uint32_t pressure_min = 30000;
 800a81a:	4b75      	ldr	r3, [pc, #468]	@ (800a9f0 <compensate_pressure+0x1e0>)
 800a81c:	623b      	str	r3, [r7, #32]
    uint32_t pressure_max = 110000;
 800a81e:	4b75      	ldr	r3, [pc, #468]	@ (800a9f4 <compensate_pressure+0x1e4>)
 800a820:	61fb      	str	r3, [r7, #28]

    var1 = (((int32_t)calib_data->t_fine) / 2) - (int32_t)64000;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a826:	2b00      	cmp	r3, #0
 800a828:	da00      	bge.n	800a82c <compensate_pressure+0x1c>
 800a82a:	3301      	adds	r3, #1
 800a82c:	105b      	asrs	r3, r3, #1
 800a82e:	4a72      	ldr	r2, [pc, #456]	@ (800a9f8 <compensate_pressure+0x1e8>)
 800a830:	4694      	mov	ip, r2
 800a832:	4463      	add	r3, ip
 800a834:	61bb      	str	r3, [r7, #24]
    var2 = (((var1 / 4) * (var1 / 4)) / 2048) * ((int32_t)calib_data->dig_p6);
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	da00      	bge.n	800a83e <compensate_pressure+0x2e>
 800a83c:	3303      	adds	r3, #3
 800a83e:	109b      	asrs	r3, r3, #2
 800a840:	001a      	movs	r2, r3
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	2b00      	cmp	r3, #0
 800a846:	da00      	bge.n	800a84a <compensate_pressure+0x3a>
 800a848:	3303      	adds	r3, #3
 800a84a:	109b      	asrs	r3, r3, #2
 800a84c:	4353      	muls	r3, r2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	da02      	bge.n	800a858 <compensate_pressure+0x48>
 800a852:	4a6a      	ldr	r2, [pc, #424]	@ (800a9fc <compensate_pressure+0x1ec>)
 800a854:	4694      	mov	ip, r2
 800a856:	4463      	add	r3, ip
 800a858:	12db      	asrs	r3, r3, #11
 800a85a:	001a      	movs	r2, r3
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2110      	movs	r1, #16
 800a860:	5e5b      	ldrsh	r3, [r3, r1]
 800a862:	4353      	muls	r3, r2
 800a864:	617b      	str	r3, [r7, #20]
    var2 = var2 + ((var1 * ((int32_t)calib_data->dig_p5)) * 2);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	220e      	movs	r2, #14
 800a86a:	5e9b      	ldrsh	r3, [r3, r2]
 800a86c:	001a      	movs	r2, r3
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	4353      	muls	r3, r2
 800a872:	005b      	lsls	r3, r3, #1
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	18d3      	adds	r3, r2, r3
 800a878:	617b      	str	r3, [r7, #20]
    var2 = (var2 / 4) + (((int32_t)calib_data->dig_p4) * 65536);
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	da00      	bge.n	800a882 <compensate_pressure+0x72>
 800a880:	3303      	adds	r3, #3
 800a882:	109b      	asrs	r3, r3, #2
 800a884:	001a      	movs	r2, r3
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	210c      	movs	r1, #12
 800a88a:	5e5b      	ldrsh	r3, [r3, r1]
 800a88c:	041b      	lsls	r3, r3, #16
 800a88e:	18d3      	adds	r3, r2, r3
 800a890:	617b      	str	r3, [r7, #20]
    var3 = (calib_data->dig_p3 * (((var1 / 4) * (var1 / 4)) / 8192)) / 8;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	220a      	movs	r2, #10
 800a896:	5e9b      	ldrsh	r3, [r3, r2]
 800a898:	001a      	movs	r2, r3
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	da00      	bge.n	800a8a2 <compensate_pressure+0x92>
 800a8a0:	3303      	adds	r3, #3
 800a8a2:	109b      	asrs	r3, r3, #2
 800a8a4:	0019      	movs	r1, r3
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	da00      	bge.n	800a8ae <compensate_pressure+0x9e>
 800a8ac:	3303      	adds	r3, #3
 800a8ae:	109b      	asrs	r3, r3, #2
 800a8b0:	434b      	muls	r3, r1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	da02      	bge.n	800a8bc <compensate_pressure+0xac>
 800a8b6:	4952      	ldr	r1, [pc, #328]	@ (800aa00 <compensate_pressure+0x1f0>)
 800a8b8:	468c      	mov	ip, r1
 800a8ba:	4463      	add	r3, ip
 800a8bc:	135b      	asrs	r3, r3, #13
 800a8be:	4353      	muls	r3, r2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	da00      	bge.n	800a8c6 <compensate_pressure+0xb6>
 800a8c4:	3307      	adds	r3, #7
 800a8c6:	10db      	asrs	r3, r3, #3
 800a8c8:	613b      	str	r3, [r7, #16]
    var4 = (((int32_t)calib_data->dig_p2) * var1) / 2;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	2208      	movs	r2, #8
 800a8ce:	5e9b      	ldrsh	r3, [r3, r2]
 800a8d0:	001a      	movs	r2, r3
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	4353      	muls	r3, r2
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	da00      	bge.n	800a8dc <compensate_pressure+0xcc>
 800a8da:	3301      	adds	r3, #1
 800a8dc:	105b      	asrs	r3, r3, #1
 800a8de:	60fb      	str	r3, [r7, #12]
    var1 = (var3 + var4) / 262144;
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	18d3      	adds	r3, r2, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	da02      	bge.n	800a8f0 <compensate_pressure+0xe0>
 800a8ea:	4a46      	ldr	r2, [pc, #280]	@ (800aa04 <compensate_pressure+0x1f4>)
 800a8ec:	4694      	mov	ip, r2
 800a8ee:	4463      	add	r3, ip
 800a8f0:	149b      	asrs	r3, r3, #18
 800a8f2:	61bb      	str	r3, [r7, #24]
    var1 = (((32768 + var1)) * ((int32_t)calib_data->dig_p1)) / 32768;
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	2280      	movs	r2, #128	@ 0x80
 800a8f8:	0212      	lsls	r2, r2, #8
 800a8fa:	4694      	mov	ip, r2
 800a8fc:	4463      	add	r3, ip
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	88d2      	ldrh	r2, [r2, #6]
 800a902:	4353      	muls	r3, r2
 800a904:	2b00      	cmp	r3, #0
 800a906:	da02      	bge.n	800a90e <compensate_pressure+0xfe>
 800a908:	4a3f      	ldr	r2, [pc, #252]	@ (800aa08 <compensate_pressure+0x1f8>)
 800a90a:	4694      	mov	ip, r2
 800a90c:	4463      	add	r3, ip
 800a90e:	13db      	asrs	r3, r3, #15
 800a910:	61bb      	str	r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d064      	beq.n	800a9e2 <compensate_pressure+0x1d2>
    {
        var5 = (uint32_t)((uint32_t)1048576) - uncomp_data->pressure;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2280      	movs	r2, #128	@ 0x80
 800a91e:	0352      	lsls	r2, r2, #13
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	60bb      	str	r3, [r7, #8]
        pressure = ((uint32_t)(var5 - (uint32_t)(var2 / 4096))) * 3125;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	2b00      	cmp	r3, #0
 800a928:	da02      	bge.n	800a930 <compensate_pressure+0x120>
 800a92a:	4a38      	ldr	r2, [pc, #224]	@ (800aa0c <compensate_pressure+0x1fc>)
 800a92c:	4694      	mov	ip, r2
 800a92e:	4463      	add	r3, ip
 800a930:	131b      	asrs	r3, r3, #12
 800a932:	001a      	movs	r2, r3
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	1a9b      	subs	r3, r3, r2
 800a938:	4a35      	ldr	r2, [pc, #212]	@ (800aa10 <compensate_pressure+0x200>)
 800a93a:	4353      	muls	r3, r2
 800a93c:	627b      	str	r3, [r7, #36]	@ 0x24

        if (pressure < 0x80000000)
 800a93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a940:	2b00      	cmp	r3, #0
 800a942:	db09      	blt.n	800a958 <compensate_pressure+0x148>
        {
            pressure = (pressure << 1) / ((uint32_t)var1);
 800a944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	69ba      	ldr	r2, [r7, #24]
 800a94a:	0011      	movs	r1, r2
 800a94c:	0018      	movs	r0, r3
 800a94e:	f7f5 fbf7 	bl	8000140 <__udivsi3>
 800a952:	0003      	movs	r3, r0
 800a954:	627b      	str	r3, [r7, #36]	@ 0x24
 800a956:	e007      	b.n	800a968 <compensate_pressure+0x158>
        }
        else
        {
            pressure = (pressure / (uint32_t)var1) * 2;
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	0019      	movs	r1, r3
 800a95c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a95e:	f7f5 fbef 	bl	8000140 <__udivsi3>
 800a962:	0003      	movs	r3, r0
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        var1 = (((int32_t)calib_data->dig_p9) * ((int32_t)(((pressure / 8) * (pressure / 8)) / 8192))) / 4096;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2216      	movs	r2, #22
 800a96c:	5e9b      	ldrsh	r3, [r3, r2]
 800a96e:	0019      	movs	r1, r3
 800a970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a972:	08db      	lsrs	r3, r3, #3
 800a974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a976:	08d2      	lsrs	r2, r2, #3
 800a978:	4353      	muls	r3, r2
 800a97a:	0b5b      	lsrs	r3, r3, #13
 800a97c:	434b      	muls	r3, r1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	da02      	bge.n	800a988 <compensate_pressure+0x178>
 800a982:	4a22      	ldr	r2, [pc, #136]	@ (800aa0c <compensate_pressure+0x1fc>)
 800a984:	4694      	mov	ip, r2
 800a986:	4463      	add	r3, ip
 800a988:	131b      	asrs	r3, r3, #12
 800a98a:	61bb      	str	r3, [r7, #24]
        var2 = (((int32_t)(pressure / 4)) * ((int32_t)calib_data->dig_p8)) / 8192;
 800a98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98e:	089b      	lsrs	r3, r3, #2
 800a990:	001a      	movs	r2, r3
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2114      	movs	r1, #20
 800a996:	5e5b      	ldrsh	r3, [r3, r1]
 800a998:	4353      	muls	r3, r2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	da02      	bge.n	800a9a4 <compensate_pressure+0x194>
 800a99e:	4a18      	ldr	r2, [pc, #96]	@ (800aa00 <compensate_pressure+0x1f0>)
 800a9a0:	4694      	mov	ip, r2
 800a9a2:	4463      	add	r3, ip
 800a9a4:	135b      	asrs	r3, r3, #13
 800a9a6:	617b      	str	r3, [r7, #20]
        pressure = (uint32_t)((int32_t)pressure + ((var1 + var2 + calib_data->dig_p7) / 16));
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	18d3      	adds	r3, r2, r3
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	2112      	movs	r1, #18
 800a9b2:	5e52      	ldrsh	r2, [r2, r1]
 800a9b4:	189b      	adds	r3, r3, r2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	da00      	bge.n	800a9bc <compensate_pressure+0x1ac>
 800a9ba:	330f      	adds	r3, #15
 800a9bc:	111b      	asrs	r3, r3, #4
 800a9be:	001a      	movs	r2, r3
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c2:	18d3      	adds	r3, r2, r3
 800a9c4:	627b      	str	r3, [r7, #36]	@ 0x24

        if (pressure < pressure_min)
 800a9c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d202      	bcs.n	800a9d4 <compensate_pressure+0x1c4>
        {
            pressure = pressure_min;
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9d2:	e008      	b.n	800a9e6 <compensate_pressure+0x1d6>
        }
        else if (pressure > pressure_max)
 800a9d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d904      	bls.n	800a9e6 <compensate_pressure+0x1d6>
        {
            pressure = pressure_max;
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9e0:	e001      	b.n	800a9e6 <compensate_pressure+0x1d6>
        }
    }
    else
    {
        pressure = pressure_min;
 800a9e2:	6a3b      	ldr	r3, [r7, #32]
 800a9e4:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pressure;
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	b00a      	add	sp, #40	@ 0x28
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	00007530 	.word	0x00007530
 800a9f4:	0001adb0 	.word	0x0001adb0
 800a9f8:	ffff0600 	.word	0xffff0600
 800a9fc:	000007ff 	.word	0x000007ff
 800aa00:	00001fff 	.word	0x00001fff
 800aa04:	0003ffff 	.word	0x0003ffff
 800aa08:	00007fff 	.word	0x00007fff
 800aa0c:	00000fff 	.word	0x00000fff
 800aa10:	00000c35 	.word	0x00000c35

0800aa14 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08a      	sub	sp, #40	@ 0x28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
    int32_t var2;
    int32_t var3;
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;
 800aa1e:	23c8      	movs	r3, #200	@ 0xc8
 800aa20:	025b      	lsls	r3, r3, #9
 800aa22:	623b      	str	r3, [r7, #32]

    var1 = calib_data->t_fine - ((int32_t)76800);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa28:	4a53      	ldr	r2, [pc, #332]	@ (800ab78 <compensate_humidity+0x164>)
 800aa2a:	4694      	mov	ip, r2
 800aa2c:	4463      	add	r3, ip
 800aa2e:	61fb      	str	r3, [r7, #28]
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	039b      	lsls	r3, r3, #14
 800aa36:	61bb      	str	r3, [r7, #24]
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	221e      	movs	r2, #30
 800aa3c:	5e9b      	ldrsh	r3, [r3, r2]
 800aa3e:	051b      	lsls	r3, r3, #20
 800aa40:	617b      	str	r3, [r7, #20]
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2220      	movs	r2, #32
 800aa46:	5e9b      	ldrsh	r3, [r3, r2]
 800aa48:	001a      	movs	r2, r3
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	4353      	muls	r3, r2
 800aa4e:	613b      	str	r3, [r7, #16]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	1ad2      	subs	r2, r2, r3
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	1ad3      	subs	r3, r2, r3
 800aa5a:	2280      	movs	r2, #128	@ 0x80
 800aa5c:	01d2      	lsls	r2, r2, #7
 800aa5e:	4694      	mov	ip, r2
 800aa60:	4463      	add	r3, ip
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	da02      	bge.n	800aa6c <compensate_humidity+0x58>
 800aa66:	4a45      	ldr	r2, [pc, #276]	@ (800ab7c <compensate_humidity+0x168>)
 800aa68:	4694      	mov	ip, r2
 800aa6a:	4463      	add	r3, ip
 800aa6c:	13db      	asrs	r3, r3, #15
 800aa6e:	60fb      	str	r3, [r7, #12]
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	2222      	movs	r2, #34	@ 0x22
 800aa74:	569b      	ldrsb	r3, [r3, r2]
 800aa76:	001a      	movs	r2, r3
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	4353      	muls	r3, r2
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	da02      	bge.n	800aa86 <compensate_humidity+0x72>
 800aa80:	4a3f      	ldr	r2, [pc, #252]	@ (800ab80 <compensate_humidity+0x16c>)
 800aa82:	4694      	mov	ip, r2
 800aa84:	4463      	add	r3, ip
 800aa86:	129b      	asrs	r3, r3, #10
 800aa88:	61bb      	str	r3, [r7, #24]
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	7f1b      	ldrb	r3, [r3, #28]
 800aa8e:	001a      	movs	r2, r3
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	4353      	muls	r3, r2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	da02      	bge.n	800aa9e <compensate_humidity+0x8a>
 800aa98:	4a3a      	ldr	r2, [pc, #232]	@ (800ab84 <compensate_humidity+0x170>)
 800aa9a:	4694      	mov	ip, r2
 800aa9c:	4463      	add	r3, ip
 800aa9e:	12db      	asrs	r3, r3, #11
 800aaa0:	617b      	str	r3, [r7, #20]
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2280      	movs	r2, #128	@ 0x80
 800aaa6:	0212      	lsls	r2, r2, #8
 800aaa8:	4694      	mov	ip, r2
 800aaaa:	4463      	add	r3, ip
 800aaac:	69ba      	ldr	r2, [r7, #24]
 800aaae:	4353      	muls	r3, r2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	da02      	bge.n	800aaba <compensate_humidity+0xa6>
 800aab4:	4a32      	ldr	r2, [pc, #200]	@ (800ab80 <compensate_humidity+0x16c>)
 800aab6:	4694      	mov	ip, r2
 800aab8:	4463      	add	r3, ip
 800aaba:	129b      	asrs	r3, r3, #10
 800aabc:	2280      	movs	r2, #128	@ 0x80
 800aabe:	0392      	lsls	r2, r2, #14
 800aac0:	4694      	mov	ip, r2
 800aac2:	4463      	add	r3, ip
 800aac4:	613b      	str	r3, [r7, #16]
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	221a      	movs	r2, #26
 800aaca:	5e9b      	ldrsh	r3, [r3, r2]
 800aacc:	001a      	movs	r2, r3
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	4353      	muls	r3, r2
 800aad2:	2280      	movs	r2, #128	@ 0x80
 800aad4:	0192      	lsls	r2, r2, #6
 800aad6:	4694      	mov	ip, r2
 800aad8:	4463      	add	r3, ip
 800aada:	2b00      	cmp	r3, #0
 800aadc:	da02      	bge.n	800aae4 <compensate_humidity+0xd0>
 800aade:	4a2a      	ldr	r2, [pc, #168]	@ (800ab88 <compensate_humidity+0x174>)
 800aae0:	4694      	mov	ip, r2
 800aae2:	4463      	add	r3, ip
 800aae4:	139b      	asrs	r3, r3, #14
 800aae6:	61bb      	str	r3, [r7, #24]
    var3 = var5 * var2;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	69ba      	ldr	r2, [r7, #24]
 800aaec:	4353      	muls	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	da02      	bge.n	800aafc <compensate_humidity+0xe8>
 800aaf6:	4a21      	ldr	r2, [pc, #132]	@ (800ab7c <compensate_humidity+0x168>)
 800aaf8:	4694      	mov	ip, r2
 800aafa:	4463      	add	r3, ip
 800aafc:	13db      	asrs	r3, r3, #15
 800aafe:	001a      	movs	r2, r3
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	da02      	bge.n	800ab0c <compensate_humidity+0xf8>
 800ab06:	491d      	ldr	r1, [pc, #116]	@ (800ab7c <compensate_humidity+0x168>)
 800ab08:	468c      	mov	ip, r1
 800ab0a:	4463      	add	r3, ip
 800ab0c:	13db      	asrs	r3, r3, #15
 800ab0e:	4353      	muls	r3, r2
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	da00      	bge.n	800ab16 <compensate_humidity+0x102>
 800ab14:	337f      	adds	r3, #127	@ 0x7f
 800ab16:	11db      	asrs	r3, r3, #7
 800ab18:	613b      	str	r3, [r7, #16]
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	7e1b      	ldrb	r3, [r3, #24]
 800ab1e:	001a      	movs	r2, r3
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	4353      	muls	r3, r2
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	da00      	bge.n	800ab2a <compensate_humidity+0x116>
 800ab28:	330f      	adds	r3, #15
 800ab2a:	111b      	asrs	r3, r3, #4
 800ab2c:	425b      	negs	r3, r3
 800ab2e:	001a      	movs	r2, r3
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	189b      	adds	r3, r3, r2
 800ab34:	60fb      	str	r3, [r7, #12]
    var5 = (var5 < 0 ? 0 : var5);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	da00      	bge.n	800ab3e <compensate_humidity+0x12a>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60fb      	str	r3, [r7, #12]
    var5 = (var5 > 419430400 ? 419430400 : var5);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	22c8      	movs	r2, #200	@ 0xc8
 800ab44:	0552      	lsls	r2, r2, #21
 800ab46:	4293      	cmp	r3, r2
 800ab48:	dd01      	ble.n	800ab4e <compensate_humidity+0x13a>
 800ab4a:	23c8      	movs	r3, #200	@ 0xc8
 800ab4c:	055b      	lsls	r3, r3, #21
 800ab4e:	60fb      	str	r3, [r7, #12]
    humidity = (uint32_t)(var5 / 4096);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	da02      	bge.n	800ab5c <compensate_humidity+0x148>
 800ab56:	4a0d      	ldr	r2, [pc, #52]	@ (800ab8c <compensate_humidity+0x178>)
 800ab58:	4694      	mov	ip, r2
 800ab5a:	4463      	add	r3, ip
 800ab5c:	131b      	asrs	r3, r3, #12
 800ab5e:	627b      	str	r3, [r7, #36]	@ 0x24

    if (humidity > humidity_max)
 800ab60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d901      	bls.n	800ab6c <compensate_humidity+0x158>
    {
        humidity = humidity_max;
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return humidity;
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab6e:	0018      	movs	r0, r3
 800ab70:	46bd      	mov	sp, r7
 800ab72:	b00a      	add	sp, #40	@ 0x28
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	46c0      	nop			@ (mov r8, r8)
 800ab78:	fffed400 	.word	0xfffed400
 800ab7c:	00007fff 	.word	0x00007fff
 800ab80:	000003ff 	.word	0x000003ff
 800ab84:	000007ff 	.word	0x000007ff
 800ab88:	00003fff 	.word	0x00003fff
 800ab8c:	00000fff 	.word	0x00000fff

0800ab90 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 800ab90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab92:	b08b      	sub	sp, #44	@ 0x2c
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 800ab98:	2626      	movs	r6, #38	@ 0x26
 800ab9a:	19bb      	adds	r3, r7, r6
 800ab9c:	2288      	movs	r2, #136	@ 0x88
 800ab9e:	701a      	strb	r2, [r3, #0]

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800aba0:	250c      	movs	r5, #12
 800aba2:	197b      	adds	r3, r7, r5
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	3304      	adds	r3, #4
 800abaa:	2216      	movs	r2, #22
 800abac:	2100      	movs	r1, #0
 800abae:	0018      	movs	r0, r3
 800abb0:	f002 ffd2 	bl	800db58 <memset>

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800abb4:	2427      	movs	r4, #39	@ 0x27
 800abb6:	193c      	adds	r4, r7, r4
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	1979      	adds	r1, r7, r5
 800abbc:	19bb      	adds	r3, r7, r6
 800abbe:	7818      	ldrb	r0, [r3, #0]
 800abc0:	0013      	movs	r3, r2
 800abc2:	221a      	movs	r2, #26
 800abc4:	f7fe ffce 	bl	8009b64 <bme280_get_regs>
 800abc8:	0003      	movs	r3, r0
 800abca:	7023      	strb	r3, [r4, #0]

    if (rslt == BME280_OK)
 800abcc:	2427      	movs	r4, #39	@ 0x27
 800abce:	193b      	adds	r3, r7, r4
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	b25b      	sxtb	r3, r3
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d11f      	bne.n	800ac18 <get_calib_data+0x88>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	197b      	adds	r3, r7, r5
 800abdc:	0011      	movs	r1, r2
 800abde:	0018      	movs	r0, r3
 800abe0:	f000 f85a 	bl	800ac98 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800abe4:	19bb      	adds	r3, r7, r6
 800abe6:	22e1      	movs	r2, #225	@ 0xe1
 800abe8:	701a      	strb	r2, [r3, #0]

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800abea:	193c      	adds	r4, r7, r4
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	1979      	adds	r1, r7, r5
 800abf0:	19bb      	adds	r3, r7, r6
 800abf2:	7818      	ldrb	r0, [r3, #0]
 800abf4:	0013      	movs	r3, r2
 800abf6:	2207      	movs	r2, #7
 800abf8:	f7fe ffb4 	bl	8009b64 <bme280_get_regs>
 800abfc:	0003      	movs	r3, r0
 800abfe:	7023      	strb	r3, [r4, #0]

        if (rslt == BME280_OK)
 800ac00:	2427      	movs	r4, #39	@ 0x27
 800ac02:	193b      	adds	r3, r7, r4
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	b25b      	sxtb	r3, r3
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d105      	bne.n	800ac18 <get_calib_data+0x88>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	197b      	adds	r3, r7, r5
 800ac10:	0011      	movs	r1, r2
 800ac12:	0018      	movs	r0, r3
 800ac14:	f000 f8ee 	bl	800adf4 <parse_humidity_calib_data>
        }
    }

    return rslt;
 800ac18:	2327      	movs	r3, #39	@ 0x27
 800ac1a:	18fb      	adds	r3, r7, r3
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	b25b      	sxtb	r3, r3
}
 800ac20:	0018      	movs	r0, r3
 800ac22:	46bd      	mov	sp, r7
 800ac24:	b00b      	add	sp, #44	@ 0x2c
 800ac26:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac28 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b086      	sub	sp, #24
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	607a      	str	r2, [r7, #4]
 800ac34:	001a      	movs	r2, r3
 800ac36:	1cfb      	adds	r3, r7, #3
 800ac38:	701a      	strb	r2, [r3, #0]
    uint8_t index;

    for (index = 1; index < len; index++)
 800ac3a:	2317      	movs	r3, #23
 800ac3c:	18fb      	adds	r3, r7, r3
 800ac3e:	2201      	movs	r2, #1
 800ac40:	701a      	strb	r2, [r3, #0]
 800ac42:	e01d      	b.n	800ac80 <interleave_reg_addr+0x58>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800ac44:	2017      	movs	r0, #23
 800ac46:	183b      	adds	r3, r7, r0
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	18d2      	adds	r2, r2, r3
 800ac4e:	183b      	adds	r3, r7, r0
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	3b01      	subs	r3, #1
 800ac56:	68b9      	ldr	r1, [r7, #8]
 800ac58:	18cb      	adds	r3, r1, r3
 800ac5a:	7812      	ldrb	r2, [r2, #0]
 800ac5c:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800ac5e:	183b      	adds	r3, r7, r0
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	18d2      	adds	r2, r2, r3
 800ac66:	183b      	adds	r3, r7, r0
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	005b      	lsls	r3, r3, #1
 800ac6c:	0019      	movs	r1, r3
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	185b      	adds	r3, r3, r1
 800ac72:	7812      	ldrb	r2, [r2, #0]
 800ac74:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800ac76:	183b      	adds	r3, r7, r0
 800ac78:	781a      	ldrb	r2, [r3, #0]
 800ac7a:	183b      	adds	r3, r7, r0
 800ac7c:	3201      	adds	r2, #1
 800ac7e:	701a      	strb	r2, [r3, #0]
 800ac80:	2317      	movs	r3, #23
 800ac82:	18fa      	adds	r2, r7, r3
 800ac84:	1cfb      	adds	r3, r7, #3
 800ac86:	7812      	ldrb	r2, [r2, #0]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d3da      	bcc.n	800ac44 <interleave_reg_addr+0x1c>
    }
}
 800ac8e:	46c0      	nop			@ (mov r8, r8)
 800ac90:	46c0      	nop			@ (mov r8, r8)
 800ac92:	46bd      	mov	sp, r7
 800ac94:	b006      	add	sp, #24
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	3318      	adds	r3, #24
 800aca6:	60fb      	str	r3, [r7, #12]

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3301      	adds	r3, #1
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	021b      	lsls	r3, r3, #8
 800acb0:	b21a      	sxth	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	b21b      	sxth	r3, r3
 800acb8:	4313      	orrs	r3, r2
 800acba:	b21b      	sxth	r3, r3
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	801a      	strh	r2, [r3, #0]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3303      	adds	r3, #3
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	021b      	lsls	r3, r3, #8
 800acca:	b21a      	sxth	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	3302      	adds	r3, #2
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	b21b      	sxth	r3, r3
 800acd4:	4313      	orrs	r3, r2
 800acd6:	b21a      	sxth	r2, r3
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	805a      	strh	r2, [r3, #2]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3305      	adds	r3, #5
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	021b      	lsls	r3, r3, #8
 800ace4:	b21a      	sxth	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3304      	adds	r3, #4
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	b21b      	sxth	r3, r3
 800acee:	4313      	orrs	r3, r2
 800acf0:	b21a      	sxth	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	809a      	strh	r2, [r3, #4]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3307      	adds	r3, #7
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	021b      	lsls	r3, r3, #8
 800acfe:	b21a      	sxth	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3306      	adds	r3, #6
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	b21b      	sxth	r3, r3
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	b21b      	sxth	r3, r3
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	80da      	strh	r2, [r3, #6]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3309      	adds	r3, #9
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	021b      	lsls	r3, r3, #8
 800ad1a:	b21a      	sxth	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3308      	adds	r3, #8
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	b21b      	sxth	r3, r3
 800ad24:	4313      	orrs	r3, r2
 800ad26:	b21a      	sxth	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	811a      	strh	r2, [r3, #8]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	330b      	adds	r3, #11
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	021b      	lsls	r3, r3, #8
 800ad34:	b21a      	sxth	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	330a      	adds	r3, #10
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	b21b      	sxth	r3, r3
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	b21a      	sxth	r2, r3
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	815a      	strh	r2, [r3, #10]
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	330d      	adds	r3, #13
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	021b      	lsls	r3, r3, #8
 800ad4e:	b21a      	sxth	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	330c      	adds	r3, #12
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	b21b      	sxth	r3, r3
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	b21a      	sxth	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	819a      	strh	r2, [r3, #12]
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	330f      	adds	r3, #15
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	021b      	lsls	r3, r3, #8
 800ad68:	b21a      	sxth	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	330e      	adds	r3, #14
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	b21b      	sxth	r3, r3
 800ad72:	4313      	orrs	r3, r2
 800ad74:	b21a      	sxth	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	81da      	strh	r2, [r3, #14]
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3311      	adds	r3, #17
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	021b      	lsls	r3, r3, #8
 800ad82:	b21a      	sxth	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	3310      	adds	r3, #16
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	b21b      	sxth	r3, r3
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	b21a      	sxth	r2, r3
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	821a      	strh	r2, [r3, #16]
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3313      	adds	r3, #19
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	021b      	lsls	r3, r3, #8
 800ad9c:	b21a      	sxth	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3312      	adds	r3, #18
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	b21b      	sxth	r3, r3
 800ada6:	4313      	orrs	r3, r2
 800ada8:	b21a      	sxth	r2, r3
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	825a      	strh	r2, [r3, #18]
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3315      	adds	r3, #21
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	021b      	lsls	r3, r3, #8
 800adb6:	b21a      	sxth	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	3314      	adds	r3, #20
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	b21b      	sxth	r3, r3
 800adc0:	4313      	orrs	r3, r2
 800adc2:	b21a      	sxth	r2, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	829a      	strh	r2, [r3, #20]
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	3317      	adds	r3, #23
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	021b      	lsls	r3, r3, #8
 800add0:	b21a      	sxth	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	3316      	adds	r3, #22
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	b21b      	sxth	r3, r3
 800adda:	4313      	orrs	r3, r2
 800addc:	b21a      	sxth	r2, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	82da      	strh	r2, [r3, #22]
    calib_data->dig_h1 = reg_data[25];
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	3319      	adds	r3, #25
 800ade6:	781a      	ldrb	r2, [r3, #0]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	761a      	strb	r2, [r3, #24]
}
 800adec:	46c0      	nop			@ (mov r8, r8)
 800adee:	46bd      	mov	sp, r7
 800adf0:	b004      	add	sp, #16
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800adf4:	b590      	push	{r4, r7, lr}
 800adf6:	b087      	sub	sp, #28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	3318      	adds	r3, #24
 800ae02:	617b      	str	r3, [r7, #20]
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	3301      	adds	r3, #1
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	021b      	lsls	r3, r3, #8
 800ae0c:	b21a      	sxth	r2, r3
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	b21b      	sxth	r3, r3
 800ae14:	4313      	orrs	r3, r2
 800ae16:	b21a      	sxth	r2, r3
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	835a      	strh	r2, [r3, #26]
    calib_data->dig_h3 = reg_data[2];
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3302      	adds	r3, #2
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	771a      	strb	r2, [r3, #28]
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	3303      	adds	r3, #3
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	b25b      	sxtb	r3, r3
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	011b      	lsls	r3, r3, #4
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	2012      	movs	r0, #18
 800ae36:	183b      	adds	r3, r7, r0
 800ae38:	801a      	strh	r2, [r3, #0]
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	b21a      	sxth	r2, r3
 800ae42:	2410      	movs	r4, #16
 800ae44:	193b      	adds	r3, r7, r4
 800ae46:	210f      	movs	r1, #15
 800ae48:	400a      	ands	r2, r1
 800ae4a:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 800ae4c:	183a      	adds	r2, r7, r0
 800ae4e:	193b      	adds	r3, r7, r4
 800ae50:	8812      	ldrh	r2, [r2, #0]
 800ae52:	881b      	ldrh	r3, [r3, #0]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	b21a      	sxth	r2, r3
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	83da      	strh	r2, [r3, #30]
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3305      	adds	r3, #5
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	b25b      	sxtb	r3, r3
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	011b      	lsls	r3, r3, #4
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	210e      	movs	r1, #14
 800ae6c:	187b      	adds	r3, r7, r1
 800ae6e:	801a      	strh	r2, [r3, #0]
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3304      	adds	r3, #4
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	091b      	lsrs	r3, r3, #4
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	200c      	movs	r0, #12
 800ae7c:	183b      	adds	r3, r7, r0
 800ae7e:	801a      	strh	r2, [r3, #0]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800ae80:	187a      	adds	r2, r7, r1
 800ae82:	183b      	adds	r3, r7, r0
 800ae84:	8812      	ldrh	r2, [r2, #0]
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	b21a      	sxth	r2, r3
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	841a      	strh	r2, [r3, #32]
    calib_data->dig_h6 = (int8_t)reg_data[6];
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	3306      	adds	r3, #6
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	b259      	sxtb	r1, r3
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2222      	movs	r2, #34	@ 0x22
 800ae9c:	5499      	strb	r1, [r3, r2]
}
 800ae9e:	46c0      	nop			@ (mov r8, r8)
 800aea0:	46bd      	mov	sp, r7
 800aea2:	b007      	add	sp, #28
 800aea4:	bd90      	pop	{r4, r7, pc}

0800aea6 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	0002      	movs	r2, r0
 800aeae:	1dfb      	adds	r3, r7, #7
 800aeb0:	701a      	strb	r2, [r3, #0]
 800aeb2:	1dbb      	adds	r3, r7, #6
 800aeb4:	1c0a      	adds	r2, r1, #0
 800aeb6:	701a      	strb	r2, [r3, #0]
    uint8_t settings_changed = FALSE;
 800aeb8:	210f      	movs	r1, #15
 800aeba:	187b      	adds	r3, r7, r1
 800aebc:	2200      	movs	r2, #0
 800aebe:	701a      	strb	r2, [r3, #0]

    if (sub_settings & desired_settings)
 800aec0:	1dfb      	adds	r3, r7, #7
 800aec2:	1dba      	adds	r2, r7, #6
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	7812      	ldrb	r2, [r2, #0]
 800aec8:	4013      	ands	r3, r2
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d003      	beq.n	800aed8 <are_settings_changed+0x32>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800aed0:	187b      	adds	r3, r7, r1
 800aed2:	2201      	movs	r2, #1
 800aed4:	701a      	strb	r2, [r3, #0]
 800aed6:	e003      	b.n	800aee0 <are_settings_changed+0x3a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800aed8:	230f      	movs	r3, #15
 800aeda:	18fb      	adds	r3, r7, r3
 800aedc:	2200      	movs	r2, #0
 800aede:	701a      	strb	r2, [r3, #0]
    }

    return settings_changed;
 800aee0:	230f      	movs	r3, #15
 800aee2:	18fb      	adds	r3, r7, r3
 800aee4:	781b      	ldrb	r3, [r3, #0]
}
 800aee6:	0018      	movs	r0, r3
 800aee8:	46bd      	mov	sp, r7
 800aeea:	b004      	add	sp, #16
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00b      	beq.n	800af14 <null_ptr_check+0x26>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d007      	beq.n	800af14 <null_ptr_check+0x26>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <null_ptr_check+0x26>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d104      	bne.n	800af1e <null_ptr_check+0x30>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800af14:	230f      	movs	r3, #15
 800af16:	18fb      	adds	r3, r7, r3
 800af18:	22ff      	movs	r2, #255	@ 0xff
 800af1a:	701a      	strb	r2, [r3, #0]
 800af1c:	e003      	b.n	800af26 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 800af1e:	230f      	movs	r3, #15
 800af20:	18fb      	adds	r3, r7, r3
 800af22:	2200      	movs	r2, #0
 800af24:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800af26:	230f      	movs	r3, #15
 800af28:	18fb      	adds	r3, r7, r3
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	b25b      	sxtb	r3, r3
}
 800af2e:	0018      	movs	r0, r3
 800af30:	46bd      	mov	sp, r7
 800af32:	b004      	add	sp, #16
 800af34:	bd80      	pop	{r7, pc}

0800af36 <LL_SPI_IsActiveFlag_RXNE>:
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	2201      	movs	r2, #1
 800af44:	4013      	ands	r3, r2
 800af46:	2b01      	cmp	r3, #1
 800af48:	d101      	bne.n	800af4e <LL_SPI_IsActiveFlag_RXNE+0x18>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800af4e:	2300      	movs	r3, #0
}
 800af50:	0018      	movs	r0, r3
 800af52:	46bd      	mov	sp, r7
 800af54:	b002      	add	sp, #8
 800af56:	bd80      	pop	{r7, pc}

0800af58 <LL_SPI_IsActiveFlag_TXE>:
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	2202      	movs	r2, #2
 800af66:	4013      	ands	r3, r2
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d101      	bne.n	800af70 <LL_SPI_IsActiveFlag_TXE+0x18>
 800af6c:	2301      	movs	r3, #1
 800af6e:	e000      	b.n	800af72 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800af70:	2300      	movs	r3, #0
}
 800af72:	0018      	movs	r0, r3
 800af74:	46bd      	mov	sp, r7
 800af76:	b002      	add	sp, #8
 800af78:	bd80      	pop	{r7, pc}

0800af7a <LL_SPI_ReceiveData8>:
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b082      	sub	sp, #8
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	330c      	adds	r3, #12
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	b2db      	uxtb	r3, r3
}
 800af8a:	0018      	movs	r0, r3
 800af8c:	46bd      	mov	sp, r7
 800af8e:	b002      	add	sp, #8
 800af90:	bd80      	pop	{r7, pc}

0800af92 <LL_SPI_TransmitData8>:
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	000a      	movs	r2, r1
 800af9c:	1cfb      	adds	r3, r7, #3
 800af9e:	701a      	strb	r2, [r3, #0]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	330c      	adds	r3, #12
 800afa4:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	1cfa      	adds	r2, r7, #3
 800afaa:	7812      	ldrb	r2, [r2, #0]
 800afac:	701a      	strb	r2, [r3, #0]
}
 800afae:	46c0      	nop			@ (mov r8, r8)
 800afb0:	46bd      	mov	sp, r7
 800afb2:	b004      	add	sp, #16
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <user_delay_us>:
inline static uint8_t SPI1_Readbyte(uint8_t reg_addr);
inline static void SPI1_Writebyte(uint8_t reg_addr, uint8_t val);


void user_delay_us(uint32_t period,void *intf_ptr)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b082      	sub	sp, #8
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
	HAL_Delay(period);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	0018      	movs	r0, r3
 800afc4:	f7fa ffda 	bl	8005f7c <HAL_Delay>
}
 800afc8:	46c0      	nop			@ (mov r8, r8)
 800afca:	46bd      	mov	sp, r7
 800afcc:	b002      	add	sp, #8
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <SPI1_SendByte>:


inline static uint8_t SPI1_SendByte(uint8_t data)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	0002      	movs	r2, r0
 800afd8:	1dfb      	adds	r3, r7, #7
 800afda:	701a      	strb	r2, [r3, #0]
	while(LL_SPI_IsActiveFlag_TXE(SPI1)==RESET);
 800afdc:	46c0      	nop			@ (mov r8, r8)
 800afde:	4b0e      	ldr	r3, [pc, #56]	@ (800b018 <SPI1_SendByte+0x48>)
 800afe0:	0018      	movs	r0, r3
 800afe2:	f7ff ffb9 	bl	800af58 <LL_SPI_IsActiveFlag_TXE>
 800afe6:	1e03      	subs	r3, r0, #0
 800afe8:	d0f9      	beq.n	800afde <SPI1_SendByte+0xe>
	LL_SPI_TransmitData8(SPI1, data);
 800afea:	1dfb      	adds	r3, r7, #7
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	4a0a      	ldr	r2, [pc, #40]	@ (800b018 <SPI1_SendByte+0x48>)
 800aff0:	0019      	movs	r1, r3
 800aff2:	0010      	movs	r0, r2
 800aff4:	f7ff ffcd 	bl	800af92 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(SPI1)==RESET);
 800aff8:	46c0      	nop			@ (mov r8, r8)
 800affa:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <SPI1_SendByte+0x48>)
 800affc:	0018      	movs	r0, r3
 800affe:	f7ff ff9a 	bl	800af36 <LL_SPI_IsActiveFlag_RXNE>
 800b002:	1e03      	subs	r3, r0, #0
 800b004:	d0f9      	beq.n	800affa <SPI1_SendByte+0x2a>
	return LL_SPI_ReceiveData8(SPI1);
 800b006:	4b04      	ldr	r3, [pc, #16]	@ (800b018 <SPI1_SendByte+0x48>)
 800b008:	0018      	movs	r0, r3
 800b00a:	f7ff ffb6 	bl	800af7a <LL_SPI_ReceiveData8>
 800b00e:	0003      	movs	r3, r0
}
 800b010:	0018      	movs	r0, r3
 800b012:	46bd      	mov	sp, r7
 800b014:	b002      	add	sp, #8
 800b016:	bd80      	pop	{r7, pc}
 800b018:	40013000 	.word	0x40013000

0800b01c <user_spi_read>:
}



uint8_t user_spi_read(uint8_t reg_addr, uint8_t* data, uint8_t len, void *intf_ptr)
{
 800b01c:	b590      	push	{r4, r7, lr}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	0011      	movs	r1, r2
 800b026:	607b      	str	r3, [r7, #4]
 800b028:	230f      	movs	r3, #15
 800b02a:	18fb      	adds	r3, r7, r3
 800b02c:	1c02      	adds	r2, r0, #0
 800b02e:	701a      	strb	r2, [r3, #0]
 800b030:	230e      	movs	r3, #14
 800b032:	18fb      	adds	r3, r7, r3
 800b034:	1c0a      	adds	r2, r1, #0
 800b036:	701a      	strb	r2, [r3, #0]
	unsigned int i = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800b03c:	4b18      	ldr	r3, [pc, #96]	@ (800b0a0 <user_spi_read+0x84>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2240      	movs	r2, #64	@ 0x40
 800b042:	4013      	ands	r3, r2
 800b044:	d105      	bne.n	800b052 <user_spi_read+0x36>
 800b046:	4b16      	ldr	r3, [pc, #88]	@ (800b0a0 <user_spi_read+0x84>)
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	4b15      	ldr	r3, [pc, #84]	@ (800b0a0 <user_spi_read+0x84>)
 800b04c:	2140      	movs	r1, #64	@ 0x40
 800b04e:	430a      	orrs	r2, r1
 800b050:	601a      	str	r2, [r3, #0]
	CSB_L();
 800b052:	23a0      	movs	r3, #160	@ 0xa0
 800b054:	05db      	lsls	r3, r3, #23
 800b056:	2280      	movs	r2, #128	@ 0x80
 800b058:	04d2      	lsls	r2, r2, #19
 800b05a:	619a      	str	r2, [r3, #24]
	SPI1_SendByte(reg_addr); 	
 800b05c:	230f      	movs	r3, #15
 800b05e:	18fb      	adds	r3, r7, r3
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	0018      	movs	r0, r3
 800b064:	f7ff ffb4 	bl	800afd0 <SPI1_SendByte>
	while(i < len)
 800b068:	e009      	b.n	800b07e <user_spi_read+0x62>
	{
		data[i++] = SPI1_SendByte(0x00); 	//Send DUMMY to read data
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	1c5a      	adds	r2, r3, #1
 800b06e:	617a      	str	r2, [r7, #20]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	18d4      	adds	r4, r2, r3
 800b074:	2000      	movs	r0, #0
 800b076:	f7ff ffab 	bl	800afd0 <SPI1_SendByte>
 800b07a:	0003      	movs	r3, r0
 800b07c:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800b07e:	230e      	movs	r3, #14
 800b080:	18fb      	adds	r3, r7, r3
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	429a      	cmp	r2, r3
 800b088:	d3ef      	bcc.n	800b06a <user_spi_read+0x4e>
	}
	CSB_H();
 800b08a:	23a0      	movs	r3, #160	@ 0xa0
 800b08c:	05db      	lsls	r3, r3, #23
 800b08e:	2280      	movs	r2, #128	@ 0x80
 800b090:	00d2      	lsls	r2, r2, #3
 800b092:	619a      	str	r2, [r3, #24]
	return 0;
 800b094:	2300      	movs	r3, #0
}
 800b096:	0018      	movs	r0, r3
 800b098:	46bd      	mov	sp, r7
 800b09a:	b007      	add	sp, #28
 800b09c:	bd90      	pop	{r4, r7, pc}
 800b09e:	46c0      	nop			@ (mov r8, r8)
 800b0a0:	40013000 	.word	0x40013000

0800b0a4 <user_spi_write>:
}



uint8_t user_spi_write(uint8_t reg_addr, uint8_t* data, uint8_t len, void *intf_ptr)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60b9      	str	r1, [r7, #8]
 800b0ac:	0011      	movs	r1, r2
 800b0ae:	607b      	str	r3, [r7, #4]
 800b0b0:	230f      	movs	r3, #15
 800b0b2:	18fb      	adds	r3, r7, r3
 800b0b4:	1c02      	adds	r2, r0, #0
 800b0b6:	701a      	strb	r2, [r3, #0]
 800b0b8:	230e      	movs	r3, #14
 800b0ba:	18fb      	adds	r3, r7, r3
 800b0bc:	1c0a      	adds	r2, r1, #0
 800b0be:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800b0c0:	2317      	movs	r3, #23
 800b0c2:	18fb      	adds	r3, r7, r3
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	701a      	strb	r2, [r3, #0]
	if (!((SPI1)->CR1 & SPI_CR1_SPE)) {SPI1->CR1 |= SPI_CR1_SPE;}
 800b0c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b134 <user_spi_write+0x90>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2240      	movs	r2, #64	@ 0x40
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	d105      	bne.n	800b0de <user_spi_write+0x3a>
 800b0d2:	4b18      	ldr	r3, [pc, #96]	@ (800b134 <user_spi_write+0x90>)
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	4b17      	ldr	r3, [pc, #92]	@ (800b134 <user_spi_write+0x90>)
 800b0d8:	2140      	movs	r1, #64	@ 0x40
 800b0da:	430a      	orrs	r2, r1
 800b0dc:	601a      	str	r2, [r3, #0]
	CSB_L();
 800b0de:	23a0      	movs	r3, #160	@ 0xa0
 800b0e0:	05db      	lsls	r3, r3, #23
 800b0e2:	2280      	movs	r2, #128	@ 0x80
 800b0e4:	04d2      	lsls	r2, r2, #19
 800b0e6:	619a      	str	r2, [r3, #24]
	SPI1_SendByte(reg_addr); 		
 800b0e8:	230f      	movs	r3, #15
 800b0ea:	18fb      	adds	r3, r7, r3
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	0018      	movs	r0, r3
 800b0f0:	f7ff ff6e 	bl	800afd0 <SPI1_SendByte>
	while(i < len)
 800b0f4:	e00c      	b.n	800b110 <user_spi_write+0x6c>
	{
		SPI1_SendByte(data[i++]); 	//Send Data to write
 800b0f6:	2217      	movs	r2, #23
 800b0f8:	18bb      	adds	r3, r7, r2
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	18ba      	adds	r2, r7, r2
 800b0fe:	1c59      	adds	r1, r3, #1
 800b100:	7011      	strb	r1, [r2, #0]
 800b102:	001a      	movs	r2, r3
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	189b      	adds	r3, r3, r2
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	0018      	movs	r0, r3
 800b10c:	f7ff ff60 	bl	800afd0 <SPI1_SendByte>
	while(i < len)
 800b110:	2317      	movs	r3, #23
 800b112:	18fa      	adds	r2, r7, r3
 800b114:	230e      	movs	r3, #14
 800b116:	18fb      	adds	r3, r7, r3
 800b118:	7812      	ldrb	r2, [r2, #0]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d3ea      	bcc.n	800b0f6 <user_spi_write+0x52>
	}
	CSB_H();
 800b120:	23a0      	movs	r3, #160	@ 0xa0
 800b122:	05db      	lsls	r3, r3, #23
 800b124:	2280      	movs	r2, #128	@ 0x80
 800b126:	00d2      	lsls	r2, r2, #3
 800b128:	619a      	str	r2, [r3, #24]
	return 0;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	0018      	movs	r0, r3
 800b12e:	46bd      	mov	sp, r7
 800b130:	b006      	add	sp, #24
 800b132:	bd80      	pop	{r7, pc}
 800b134:	40013000 	.word	0x40013000

0800b138 <LL_SPI_IsActiveFlag_RXNE>:
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	2201      	movs	r2, #1
 800b146:	4013      	ands	r3, r2
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d101      	bne.n	800b150 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800b14c:	2301      	movs	r3, #1
 800b14e:	e000      	b.n	800b152 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800b150:	2300      	movs	r3, #0
}
 800b152:	0018      	movs	r0, r3
 800b154:	46bd      	mov	sp, r7
 800b156:	b002      	add	sp, #8
 800b158:	bd80      	pop	{r7, pc}

0800b15a <LL_SPI_IsActiveFlag_TXE>:
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	2202      	movs	r2, #2
 800b168:	4013      	ands	r3, r2
 800b16a:	2b02      	cmp	r3, #2
 800b16c:	d101      	bne.n	800b172 <LL_SPI_IsActiveFlag_TXE+0x18>
 800b16e:	2301      	movs	r3, #1
 800b170:	e000      	b.n	800b174 <LL_SPI_IsActiveFlag_TXE+0x1a>
 800b172:	2300      	movs	r3, #0
}
 800b174:	0018      	movs	r0, r3
 800b176:	46bd      	mov	sp, r7
 800b178:	b002      	add	sp, #8
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <LL_SPI_ReceiveData8>:
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	330c      	adds	r3, #12
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	b2db      	uxtb	r3, r3
}
 800b18c:	0018      	movs	r0, r3
 800b18e:	46bd      	mov	sp, r7
 800b190:	b002      	add	sp, #8
 800b192:	bd80      	pop	{r7, pc}

0800b194 <LL_SPI_TransmitData8>:
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	000a      	movs	r2, r1
 800b19e:	1cfb      	adds	r3, r7, #3
 800b1a0:	701a      	strb	r2, [r3, #0]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	330c      	adds	r3, #12
 800b1a6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	1cfa      	adds	r2, r7, #3
 800b1ac:	7812      	ldrb	r2, [r2, #0]
 800b1ae:	701a      	strb	r2, [r3, #0]
}
 800b1b0:	46c0      	nop			@ (mov r8, r8)
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	b004      	add	sp, #16
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <DEV_SPI_WriteByte>:
#include "main.h"
// #include "stm32l4xx_hal_spi.h"
// extern SPI_HandleTypeDef hspi1;

void DEV_SPI_WriteByte(uint8_t value)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	0002      	movs	r2, r0
 800b1c0:	1dfb      	adds	r3, r7, #7
 800b1c2:	701a      	strb	r2, [r3, #0]

	// Check if the SPI is enabled
	if (!((SPI1)->CR1 & SPI_CR1_SPE))
 800b1c4:	4b18      	ldr	r3, [pc, #96]	@ (800b228 <DEV_SPI_WriteByte+0x70>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2240      	movs	r2, #64	@ 0x40
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	d105      	bne.n	800b1da <DEV_SPI_WriteByte+0x22>
	{
		SPI1->CR1 |= SPI_CR1_SPE;
 800b1ce:	4b16      	ldr	r3, [pc, #88]	@ (800b228 <DEV_SPI_WriteByte+0x70>)
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	4b15      	ldr	r3, [pc, #84]	@ (800b228 <DEV_SPI_WriteByte+0x70>)
 800b1d4:	2140      	movs	r1, #64	@ 0x40
 800b1d6:	430a      	orrs	r2, r1
 800b1d8:	601a      	str	r2, [r3, #0]
	}

	while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
 800b1da:	46c0      	nop			@ (mov r8, r8)
 800b1dc:	4b12      	ldr	r3, [pc, #72]	@ (800b228 <DEV_SPI_WriteByte+0x70>)
 800b1de:	0018      	movs	r0, r3
 800b1e0:	f7ff ffbb 	bl	800b15a <LL_SPI_IsActiveFlag_TXE>
 800b1e4:	1e03      	subs	r3, r0, #0
 800b1e6:	d0f9      	beq.n	800b1dc <DEV_SPI_WriteByte+0x24>
		;

	CS_L();
 800b1e8:	23a0      	movs	r3, #160	@ 0xa0
 800b1ea:	05db      	lsls	r3, r3, #23
 800b1ec:	2280      	movs	r2, #128	@ 0x80
 800b1ee:	0552      	lsls	r2, r2, #21
 800b1f0:	619a      	str	r2, [r3, #24]
	// Send bytes over the SPI
	LL_SPI_TransmitData8(SPI1, value);
 800b1f2:	1dfb      	adds	r3, r7, #7
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	4a0c      	ldr	r2, [pc, #48]	@ (800b228 <DEV_SPI_WriteByte+0x70>)
 800b1f8:	0019      	movs	r1, r3
 800b1fa:	0010      	movs	r0, r2
 800b1fc:	f7ff ffca 	bl	800b194 <LL_SPI_TransmitData8>

	// Wait until the transmission is complete
	while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
 800b200:	46c0      	nop			@ (mov r8, r8)
 800b202:	4b09      	ldr	r3, [pc, #36]	@ (800b228 <DEV_SPI_WriteByte+0x70>)
 800b204:	0018      	movs	r0, r3
 800b206:	f7ff ff97 	bl	800b138 <LL_SPI_IsActiveFlag_RXNE>
 800b20a:	1e03      	subs	r3, r0, #0
 800b20c:	d0f9      	beq.n	800b202 <DEV_SPI_WriteByte+0x4a>
		;
	/* Read data register */
	(void)LL_SPI_ReceiveData8(SPI1);
 800b20e:	4b06      	ldr	r3, [pc, #24]	@ (800b228 <DEV_SPI_WriteByte+0x70>)
 800b210:	0018      	movs	r0, r3
 800b212:	f7ff ffb3 	bl	800b17c <LL_SPI_ReceiveData8>
	CS_H();
 800b216:	23a0      	movs	r3, #160	@ 0xa0
 800b218:	05db      	lsls	r3, r3, #23
 800b21a:	2280      	movs	r2, #128	@ 0x80
 800b21c:	0152      	lsls	r2, r2, #5
 800b21e:	619a      	str	r2, [r3, #24]
}
 800b220:	46c0      	nop			@ (mov r8, r8)
 800b222:	46bd      	mov	sp, r7
 800b224:	b002      	add	sp, #8
 800b226:	bd80      	pop	{r7, pc}
 800b228:	40013000 	.word	0x40013000

0800b22c <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	af00      	add	r7, sp, #0
	DC_L();
 800b230:	23a0      	movs	r3, #160	@ 0xa0
 800b232:	05db      	lsls	r3, r3, #23
 800b234:	2280      	movs	r2, #128	@ 0x80
 800b236:	0452      	lsls	r2, r2, #17
 800b238:	619a      	str	r2, [r3, #24]
	CS_H();
 800b23a:	23a0      	movs	r3, #160	@ 0xa0
 800b23c:	05db      	lsls	r3, r3, #23
 800b23e:	2280      	movs	r2, #128	@ 0x80
 800b240:	0152      	lsls	r2, r2, #5
 800b242:	619a      	str	r2, [r3, #24]
	RST_H(); // The Reset is active low.
 800b244:	23a0      	movs	r3, #160	@ 0xa0
 800b246:	05db      	lsls	r3, r3, #23
 800b248:	2280      	movs	r2, #128	@ 0x80
 800b24a:	0112      	lsls	r2, r2, #4
 800b24c:	619a      	str	r2, [r3, #24]
	return 0;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	0018      	movs	r0, r3
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <EPD_1IN54_V2_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
void EPD_1IN54_V2_Reset(void)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	af00      	add	r7, sp, #0
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800b25a:	23a0      	movs	r3, #160	@ 0xa0
 800b25c:	05db      	lsls	r3, r3, #23
 800b25e:	2280      	movs	r2, #128	@ 0x80
 800b260:	0112      	lsls	r2, r2, #4
 800b262:	619a      	str	r2, [r3, #24]
    RST_L(); // DEV_Digital_Write(EPD_RST_PIN, 0);
 800b264:	23a0      	movs	r3, #160	@ 0xa0
 800b266:	05db      	lsls	r3, r3, #23
 800b268:	2280      	movs	r2, #128	@ 0x80
 800b26a:	0512      	lsls	r2, r2, #20
 800b26c:	619a      	str	r2, [r3, #24]
    HAL_Delay(2);
 800b26e:	2002      	movs	r0, #2
 800b270:	f7fa fe84 	bl	8005f7c <HAL_Delay>
    RST_H(); // DEV_Digital_Write(EPD_RST_PIN, 1);
 800b274:	23a0      	movs	r3, #160	@ 0xa0
 800b276:	05db      	lsls	r3, r3, #23
 800b278:	2280      	movs	r2, #128	@ 0x80
 800b27a:	0112      	lsls	r2, r2, #4
 800b27c:	619a      	str	r2, [r3, #24]
}
 800b27e:	46c0      	nop			@ (mov r8, r8)
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <EPD_1IN54_V2_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_1IN54_V2_SendCommand(UBYTE Reg)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	0002      	movs	r2, r0
 800b28c:	1dfb      	adds	r3, r7, #7
 800b28e:	701a      	strb	r2, [r3, #0]
    DC_L();
 800b290:	23a0      	movs	r3, #160	@ 0xa0
 800b292:	05db      	lsls	r3, r3, #23
 800b294:	2280      	movs	r2, #128	@ 0x80
 800b296:	0452      	lsls	r2, r2, #17
 800b298:	619a      	str	r2, [r3, #24]
    CS_L();
 800b29a:	23a0      	movs	r3, #160	@ 0xa0
 800b29c:	05db      	lsls	r3, r3, #23
 800b29e:	2280      	movs	r2, #128	@ 0x80
 800b2a0:	0552      	lsls	r2, r2, #21
 800b2a2:	619a      	str	r2, [r3, #24]
    DEV_SPI_WriteByte(Reg);
 800b2a4:	1dfb      	adds	r3, r7, #7
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	f7ff ff85 	bl	800b1b8 <DEV_SPI_WriteByte>
    CS_H();
 800b2ae:	23a0      	movs	r3, #160	@ 0xa0
 800b2b0:	05db      	lsls	r3, r3, #23
 800b2b2:	2280      	movs	r2, #128	@ 0x80
 800b2b4:	0152      	lsls	r2, r2, #5
 800b2b6:	619a      	str	r2, [r3, #24]
}
 800b2b8:	46c0      	nop			@ (mov r8, r8)
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	b002      	add	sp, #8
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <EPD_1IN54_V2_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_1IN54_V2_SendData(UBYTE Data)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	0002      	movs	r2, r0
 800b2c8:	1dfb      	adds	r3, r7, #7
 800b2ca:	701a      	strb	r2, [r3, #0]
    DC_H();
 800b2cc:	23a0      	movs	r3, #160	@ 0xa0
 800b2ce:	05db      	lsls	r3, r3, #23
 800b2d0:	2280      	movs	r2, #128	@ 0x80
 800b2d2:	0052      	lsls	r2, r2, #1
 800b2d4:	619a      	str	r2, [r3, #24]
    CS_L();
 800b2d6:	23a0      	movs	r3, #160	@ 0xa0
 800b2d8:	05db      	lsls	r3, r3, #23
 800b2da:	2280      	movs	r2, #128	@ 0x80
 800b2dc:	0552      	lsls	r2, r2, #21
 800b2de:	619a      	str	r2, [r3, #24]
    DEV_SPI_WriteByte(Data);
 800b2e0:	1dfb      	adds	r3, r7, #7
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	0018      	movs	r0, r3
 800b2e6:	f7ff ff67 	bl	800b1b8 <DEV_SPI_WriteByte>
    CS_H();
 800b2ea:	23a0      	movs	r3, #160	@ 0xa0
 800b2ec:	05db      	lsls	r3, r3, #23
 800b2ee:	2280      	movs	r2, #128	@ 0x80
 800b2f0:	0152      	lsls	r2, r2, #5
 800b2f2:	619a      	str	r2, [r3, #24]
}
 800b2f4:	46c0      	nop			@ (mov r8, r8)
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	b002      	add	sp, #8
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <EPD_1IN54_V2_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_1IN54_V2_ReadBusy(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0

    uint32_t time1 = HAL_GetTick();
 800b302:	f7fa fe31 	bl	8005f68 <HAL_GetTick>
 800b306:	0003      	movs	r3, r0
 800b308:	607b      	str	r3, [r7, #4]
    //	bool result = GPIOA->regs->IDR & 0x0004; //returns true if A2 is HIGH
    while (GPIOA->IDR & 0b0000001000000000)
 800b30a:	e00c      	b.n	800b326 <EPD_1IN54_V2_ReadBusy+0x2a>
    { // A9, LOW = idle, HIGH = busy; DEV_Digital_Read(EPD_BUSY_PIN) == 1

        // Timeout check
        if ((HAL_GetTick() - time1) > timeout_value)
 800b30c:	f7fa fe2c 	bl	8005f68 <HAL_GetTick>
 800b310:	0002      	movs	r2, r0
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	4a0a      	ldr	r2, [pc, #40]	@ (800b340 <EPD_1IN54_V2_ReadBusy+0x44>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d904      	bls.n	800b326 <EPD_1IN54_V2_ReadBusy+0x2a>
        {
            timeout_reset(__func__, __LINE__);
 800b31c:	4b09      	ldr	r3, [pc, #36]	@ (800b344 <EPD_1IN54_V2_ReadBusy+0x48>)
 800b31e:	218b      	movs	r1, #139	@ 0x8b
 800b320:	0018      	movs	r0, r3
 800b322:	f7f8 fd21 	bl	8003d68 <timeout_reset>
    while (GPIOA->IDR & 0b0000001000000000)
 800b326:	23a0      	movs	r3, #160	@ 0xa0
 800b328:	05db      	lsls	r3, r3, #23
 800b32a:	691a      	ldr	r2, [r3, #16]
 800b32c:	2380      	movs	r3, #128	@ 0x80
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	4013      	ands	r3, r2
 800b332:	d1eb      	bne.n	800b30c <EPD_1IN54_V2_ReadBusy+0x10>
        }
    }

    //DE_BUG("busy: %d\r\n", (HAL_GetTick() - time1));
}
 800b334:	46c0      	nop			@ (mov r8, r8)
 800b336:	46c0      	nop			@ (mov r8, r8)
 800b338:	46bd      	mov	sp, r7
 800b33a:	b002      	add	sp, #8
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	46c0      	nop			@ (mov r8, r8)
 800b340:	00000bb8 	.word	0x00000bb8
 800b344:	080101ac 	.word	0x080101ac

0800b348 <EPD_1IN54_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display full
parameter:
******************************************************************************/
static void EPD_1IN54_V2_TurnOnDisplay(void)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800b34c:	2022      	movs	r0, #34	@ 0x22
 800b34e:	f7ff ff99 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xc7);
 800b352:	20c7      	movs	r0, #199	@ 0xc7
 800b354:	f7ff ffb4 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b358:	2020      	movs	r0, #32
 800b35a:	f7ff ff93 	bl	800b284 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b35e:	f7ff ffcd 	bl	800b2fc <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_TurnOnDisplay: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b362:	46c0      	nop			@ (mov r8, r8)
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <EPD_1IN54_V2_TurnOnDisplayPart>:
/******************************************************************************
function :	Turn On Display part
parameter:
******************************************************************************/
void EPD_1IN54_V2_TurnOnDisplayPart(void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x22);
 800b36c:	2022      	movs	r0, #34	@ 0x22
 800b36e:	f7ff ff89 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xcF);
 800b372:	20cf      	movs	r0, #207	@ 0xcf
 800b374:	f7ff ffa4 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b378:	2020      	movs	r0, #32
 800b37a:	f7ff ff83 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    //  *********************   S L E E P  571 ms !  *********************
    // Wakeup Time Base = 8 /(32768)  = 0.244 ms
    // Wakeup Time = 0.244 ms  * WakeUpCounter
    // WakeUpCounter = Wakeup Time / (0.244 ms => 570ms /0.244ms=2336=0x920) /// 500/0.244ms=2049
    //	#define SHORT_WUT_WUTR               ((uint32_t)2336)     /* 570 ms -> WUTR = 1163 */
    PB6_H();
 800b37e:	4b0c      	ldr	r3, [pc, #48]	@ (800b3b0 <EPD_1IN54_V2_TurnOnDisplayPart+0x48>)
 800b380:	2240      	movs	r2, #64	@ 0x40
 800b382:	619a      	str	r2, [r3, #24]
    PB7_H();
 800b384:	4b0a      	ldr	r3, [pc, #40]	@ (800b3b0 <EPD_1IN54_V2_TurnOnDisplayPart+0x48>)
 800b386:	2280      	movs	r2, #128	@ 0x80
 800b388:	619a      	str	r2, [r3, #24]
    enter_stop2(2330, LL_RTC_WAKEUPCLOCK_DIV_8);
 800b38a:	4b0a      	ldr	r3, [pc, #40]	@ (800b3b4 <EPD_1IN54_V2_TurnOnDisplayPart+0x4c>)
 800b38c:	2101      	movs	r1, #1
 800b38e:	0018      	movs	r0, r3
 800b390:	f7f8 f99e 	bl	80036d0 <enter_stop2>

    //  *********************   End S L E E P  571 ms !  *********************
    PB6_L();
 800b394:	4b06      	ldr	r3, [pc, #24]	@ (800b3b0 <EPD_1IN54_V2_TurnOnDisplayPart+0x48>)
 800b396:	2280      	movs	r2, #128	@ 0x80
 800b398:	03d2      	lsls	r2, r2, #15
 800b39a:	619a      	str	r2, [r3, #24]
    EPD_1IN54_V2_ReadBusy();
 800b39c:	f7ff ffae 	bl	800b2fc <EPD_1IN54_V2_ReadBusy>
    PB7_L();
 800b3a0:	4b03      	ldr	r3, [pc, #12]	@ (800b3b0 <EPD_1IN54_V2_TurnOnDisplayPart+0x48>)
 800b3a2:	2280      	movs	r2, #128	@ 0x80
 800b3a4:	0412      	lsls	r2, r2, #16
 800b3a6:	619a      	str	r2, [r3, #24]
}
 800b3a8:	46c0      	nop			@ (mov r8, r8)
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	46c0      	nop			@ (mov r8, r8)
 800b3b0:	50000400 	.word	0x50000400
 800b3b4:	0000091a 	.word	0x0000091a

0800b3b8 <EPD_1IN54_V2_Lut>:

static void EPD_1IN54_V2_Lut(UBYTE *lut)
{
 800b3b8:	b590      	push	{r4, r7, lr}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
    EPD_1IN54_V2_SendCommand(0x32);
 800b3c0:	2032      	movs	r0, #50	@ 0x32
 800b3c2:	f7ff ff5f 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    for (UBYTE i = 0; i < 153; i++)
 800b3c6:	230f      	movs	r3, #15
 800b3c8:	18fb      	adds	r3, r7, r3
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	701a      	strb	r2, [r3, #0]
 800b3ce:	e00d      	b.n	800b3ec <EPD_1IN54_V2_Lut+0x34>
        EPD_1IN54_V2_SendData(lut[i]);
 800b3d0:	240f      	movs	r4, #15
 800b3d2:	193b      	adds	r3, r7, r4
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	18d3      	adds	r3, r2, r3
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	0018      	movs	r0, r3
 800b3de:	f7ff ff6f 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    for (UBYTE i = 0; i < 153; i++)
 800b3e2:	193b      	adds	r3, r7, r4
 800b3e4:	781a      	ldrb	r2, [r3, #0]
 800b3e6:	193b      	adds	r3, r7, r4
 800b3e8:	3201      	adds	r2, #1
 800b3ea:	701a      	strb	r2, [r3, #0]
 800b3ec:	230f      	movs	r3, #15
 800b3ee:	18fb      	adds	r3, r7, r3
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	2b98      	cmp	r3, #152	@ 0x98
 800b3f4:	d9ec      	bls.n	800b3d0 <EPD_1IN54_V2_Lut+0x18>


}
 800b3f6:	46c0      	nop			@ (mov r8, r8)
 800b3f8:	46c0      	nop			@ (mov r8, r8)
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	b005      	add	sp, #20
 800b3fe:	bd90      	pop	{r4, r7, pc}

0800b400 <EPD_1IN54_V2_SetLut>:

static void EPD_1IN54_V2_SetLut(UBYTE *lut)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
    EPD_1IN54_V2_Lut(lut);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	0018      	movs	r0, r3
 800b40c:	f7ff ffd4 	bl	800b3b8 <EPD_1IN54_V2_Lut>

    EPD_1IN54_V2_SendCommand(0x3f);
 800b410:	203f      	movs	r0, #63	@ 0x3f
 800b412:	f7ff ff37 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[153]);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3399      	adds	r3, #153	@ 0x99
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	0018      	movs	r0, r3
 800b41e:	f7ff ff4f 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x03);
 800b422:	2003      	movs	r0, #3
 800b424:	f7ff ff2e 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[154]);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	339a      	adds	r3, #154	@ 0x9a
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	0018      	movs	r0, r3
 800b430:	f7ff ff46 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x04);
 800b434:	2004      	movs	r0, #4
 800b436:	f7ff ff25 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[155]);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	339b      	adds	r3, #155	@ 0x9b
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	0018      	movs	r0, r3
 800b442:	f7ff ff3d 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(lut[156]);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	339c      	adds	r3, #156	@ 0x9c
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	0018      	movs	r0, r3
 800b44e:	f7ff ff37 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(lut[157]);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	339d      	adds	r3, #157	@ 0x9d
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	0018      	movs	r0, r3
 800b45a:	f7ff ff31 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x2c);
 800b45e:	202c      	movs	r0, #44	@ 0x2c
 800b460:	f7ff ff10 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(lut[158]);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	339e      	adds	r3, #158	@ 0x9e
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	0018      	movs	r0, r3
 800b46c:	f7ff ff28 	bl	800b2c0 <EPD_1IN54_V2_SendData>
}
 800b470:	46c0      	nop			@ (mov r8, r8)
 800b472:	46bd      	mov	sp, r7
 800b474:	b002      	add	sp, #8
 800b476:	bd80      	pop	{r7, pc}

0800b478 <EPD_1IN54_V2_SetWindows>:

static void EPD_1IN54_V2_SetWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend)
{
 800b478:	b5b0      	push	{r4, r5, r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	0005      	movs	r5, r0
 800b480:	000c      	movs	r4, r1
 800b482:	0010      	movs	r0, r2
 800b484:	0019      	movs	r1, r3
 800b486:	1dbb      	adds	r3, r7, #6
 800b488:	1c2a      	adds	r2, r5, #0
 800b48a:	801a      	strh	r2, [r3, #0]
 800b48c:	1d3b      	adds	r3, r7, #4
 800b48e:	1c22      	adds	r2, r4, #0
 800b490:	801a      	strh	r2, [r3, #0]
 800b492:	1cbb      	adds	r3, r7, #2
 800b494:	1c02      	adds	r2, r0, #0
 800b496:	801a      	strh	r2, [r3, #0]
 800b498:	003b      	movs	r3, r7
 800b49a:	1c0a      	adds	r2, r1, #0
 800b49c:	801a      	strh	r2, [r3, #0]
    EPD_1IN54_V2_SendCommand(0x44); // SET_RAM_X_ADDRESS_START_END_POSITION
 800b49e:	2044      	movs	r0, #68	@ 0x44
 800b4a0:	f7ff fef0 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData((Xstart >> 3) & 0xFF);
 800b4a4:	1dbb      	adds	r3, r7, #6
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	08db      	lsrs	r3, r3, #3
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	0018      	movs	r0, r3
 800b4b0:	f7ff ff06 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Xend >> 3) & 0xFF);
 800b4b4:	1cbb      	adds	r3, r7, #2
 800b4b6:	881b      	ldrh	r3, [r3, #0]
 800b4b8:	08db      	lsrs	r3, r3, #3
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f7ff fefe 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x45); // SET_RAM_Y_ADDRESS_START_END_POSITION
 800b4c4:	2045      	movs	r0, #69	@ 0x45
 800b4c6:	f7ff fedd 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 800b4ca:	1d3b      	adds	r3, r7, #4
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	f7ff fef5 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 800b4d6:	1d3b      	adds	r3, r7, #4
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	0a1b      	lsrs	r3, r3, #8
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f7ff feed 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(Yend & 0xFF);
 800b4e6:	003b      	movs	r3, r7
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	0018      	movs	r0, r3
 800b4ee:	f7ff fee7 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Yend >> 8) & 0xFF);
 800b4f2:	003b      	movs	r3, r7
 800b4f4:	881b      	ldrh	r3, [r3, #0]
 800b4f6:	0a1b      	lsrs	r3, r3, #8
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	0018      	movs	r0, r3
 800b4fe:	f7ff fedf 	bl	800b2c0 <EPD_1IN54_V2_SendData>
}
 800b502:	46c0      	nop			@ (mov r8, r8)
 800b504:	46bd      	mov	sp, r7
 800b506:	b002      	add	sp, #8
 800b508:	bdb0      	pop	{r4, r5, r7, pc}

0800b50a <EPD_1IN54_V2_SetCursor>:

static void EPD_1IN54_V2_SetCursor(UWORD Xstart, UWORD Ystart)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b082      	sub	sp, #8
 800b50e:	af00      	add	r7, sp, #0
 800b510:	0002      	movs	r2, r0
 800b512:	1dbb      	adds	r3, r7, #6
 800b514:	801a      	strh	r2, [r3, #0]
 800b516:	1d3b      	adds	r3, r7, #4
 800b518:	1c0a      	adds	r2, r1, #0
 800b51a:	801a      	strh	r2, [r3, #0]
    EPD_1IN54_V2_SendCommand(0x4E); // SET_RAM_X_ADDRESS_COUNTER
 800b51c:	204e      	movs	r0, #78	@ 0x4e
 800b51e:	f7ff feb1 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Xstart & 0xFF);
 800b522:	1dbb      	adds	r3, r7, #6
 800b524:	881b      	ldrh	r3, [r3, #0]
 800b526:	b2db      	uxtb	r3, r3
 800b528:	0018      	movs	r0, r3
 800b52a:	f7ff fec9 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x4F); // SET_RAM_Y_ADDRESS_COUNTER
 800b52e:	204f      	movs	r0, #79	@ 0x4f
 800b530:	f7ff fea8 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(Ystart & 0xFF);
 800b534:	1d3b      	adds	r3, r7, #4
 800b536:	881b      	ldrh	r3, [r3, #0]
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	0018      	movs	r0, r3
 800b53c:	f7ff fec0 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData((Ystart >> 8) & 0xFF);
 800b540:	1d3b      	adds	r3, r7, #4
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	0a1b      	lsrs	r3, r3, #8
 800b546:	b29b      	uxth	r3, r3
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	0018      	movs	r0, r3
 800b54c:	f7ff feb8 	bl	800b2c0 <EPD_1IN54_V2_SendData>
}
 800b550:	46c0      	nop			@ (mov r8, r8)
 800b552:	46bd      	mov	sp, r7
 800b554:	b002      	add	sp, #8
 800b556:	bd80      	pop	{r7, pc}

0800b558 <EPD_1IN54_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init(void)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800b55c:	f7ff fe7b 	bl	800b256 <EPD_1IN54_V2_Reset>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b560:	f7ff fecc 	bl	800b2fc <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-1: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SendCommand(0x12); // SWRESET
 800b564:	2012      	movs	r0, #18
 800b566:	f7ff fe8d 	bl	800b284 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b56a:	f7ff fec7 	bl	800b2fc <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-2: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SendCommand(0x01); // Driver output control
 800b56e:	2001      	movs	r0, #1
 800b570:	f7ff fe88 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xC7);
 800b574:	20c7      	movs	r0, #199	@ 0xc7
 800b576:	f7ff fea3 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b57a:	2000      	movs	r0, #0
 800b57c:	f7ff fea0 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x01);
 800b580:	2001      	movs	r0, #1
 800b582:	f7ff fe9d 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x11); // data entry mode
 800b586:	2011      	movs	r0, #17
 800b588:	f7ff fe7c 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b58c:	2001      	movs	r0, #1
 800b58e:	f7ff fe97 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SetWindows(0, EPD_1IN54_V2_HEIGHT - 1, EPD_1IN54_V2_WIDTH - 1, 0);
 800b592:	2300      	movs	r3, #0
 800b594:	22c7      	movs	r2, #199	@ 0xc7
 800b596:	21c7      	movs	r1, #199	@ 0xc7
 800b598:	2000      	movs	r0, #0
 800b59a:	f7ff ff6d 	bl	800b478 <EPD_1IN54_V2_SetWindows>

    EPD_1IN54_V2_SendCommand(0x3C); // BorderWavefrom
 800b59e:	203c      	movs	r0, #60	@ 0x3c
 800b5a0:	f7ff fe70 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	f7ff fe8b 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x18);
 800b5aa:	2018      	movs	r0, #24
 800b5ac:	f7ff fe6a 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 800b5b0:	2080      	movs	r0, #128	@ 0x80
 800b5b2:	f7ff fe85 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22); // Load Temperature and waveform setting.
 800b5b6:	2022      	movs	r0, #34	@ 0x22
 800b5b8:	f7ff fe64 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0XB1);
 800b5bc:	20b1      	movs	r0, #177	@ 0xb1
 800b5be:	f7ff fe7f 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b5c2:	2020      	movs	r0, #32
 800b5c4:	f7ff fe5e 	bl	800b284 <EPD_1IN54_V2_SendCommand>

    EPD_1IN54_V2_SetCursor(0, EPD_1IN54_V2_HEIGHT - 1);
 800b5c8:	21c7      	movs	r1, #199	@ 0xc7
 800b5ca:	2000      	movs	r0, #0
 800b5cc:	f7ff ff9d 	bl	800b50a <EPD_1IN54_V2_SetCursor>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b5d0:	f7ff fe94 	bl	800b2fc <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init-3: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SetLut(WF_Full_1IN54);
 800b5d4:	4b03      	ldr	r3, [pc, #12]	@ (800b5e4 <EPD_1IN54_V2_Init+0x8c>)
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	f7ff ff12 	bl	800b400 <EPD_1IN54_V2_SetLut>
}
 800b5dc:	46c0      	nop			@ (mov r8, r8)
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	46c0      	nop			@ (mov r8, r8)
 800b5e4:	20000010 	.word	0x20000010

0800b5e8 <EPD_1IN54_V2_Init_Partial>:
/******************************************************************************
function :	Initialize the e-Paper register (Partial display)
parameter:
******************************************************************************/
void EPD_1IN54_V2_Init_Partial(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_Reset();
 800b5ec:	f7ff fe33 	bl	800b256 <EPD_1IN54_V2_Reset>

#if (USE_TIME_PROFILING == 1)
    uint32_t startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b5f0:	f7ff fe84 	bl	800b2fc <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    uint32_t tmp = DWT->CYCCNT - startTick;
    printf("####  EPD_1IN54_V2_Init_Partial-1: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */

    EPD_1IN54_V2_SetLut(WF_PARTIAL_1IN54_0);
 800b5f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b668 <EPD_1IN54_V2_Init_Partial+0x80>)
 800b5f6:	0018      	movs	r0, r3
 800b5f8:	f7ff ff02 	bl	800b400 <EPD_1IN54_V2_SetLut>
    EPD_1IN54_V2_SendCommand(0x37);
 800b5fc:	2037      	movs	r0, #55	@ 0x37
 800b5fe:	f7ff fe41 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x00);
 800b602:	2000      	movs	r0, #0
 800b604:	f7ff fe5c 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b608:	2000      	movs	r0, #0
 800b60a:	f7ff fe59 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b60e:	2000      	movs	r0, #0
 800b610:	f7ff fe56 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b614:	2000      	movs	r0, #0
 800b616:	f7ff fe53 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b61a:	2000      	movs	r0, #0
 800b61c:	f7ff fe50 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x40);
 800b620:	2040      	movs	r0, #64	@ 0x40
 800b622:	f7ff fe4d 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b626:	2000      	movs	r0, #0
 800b628:	f7ff fe4a 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b62c:	2000      	movs	r0, #0
 800b62e:	f7ff fe47 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b632:	2000      	movs	r0, #0
 800b634:	f7ff fe44 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendData(0x00);
 800b638:	2000      	movs	r0, #0
 800b63a:	f7ff fe41 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x3C); // BorderWavefrom
 800b63e:	203c      	movs	r0, #60	@ 0x3c
 800b640:	f7ff fe20 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x80);
 800b644:	2080      	movs	r0, #128	@ 0x80
 800b646:	f7ff fe3b 	bl	800b2c0 <EPD_1IN54_V2_SendData>

    EPD_1IN54_V2_SendCommand(0x22);
 800b64a:	2022      	movs	r0, #34	@ 0x22
 800b64c:	f7ff fe1a 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0xc0);
 800b650:	20c0      	movs	r0, #192	@ 0xc0
 800b652:	f7ff fe35 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    EPD_1IN54_V2_SendCommand(0x20);
 800b656:	2020      	movs	r0, #32
 800b658:	f7ff fe14 	bl	800b284 <EPD_1IN54_V2_SendCommand>

#if (USE_TIME_PROFILING == 1)
    startTick = DWT->CYCCNT;
#endif /* USE_TIME_PROFILING */
    EPD_1IN54_V2_ReadBusy();
 800b65c:	f7ff fe4e 	bl	800b2fc <EPD_1IN54_V2_ReadBusy>
#if (USE_TIME_PROFILING == 1)
    tmp = DWT->CYCCNT - startTick;
    printf("###  EPD_1IN54_V2_Init_Partial-2: %d\n", (int)(tmp * 0.0000625));
#endif /* USE_TIME_PROFILING */
}
 800b660:	46c0      	nop			@ (mov r8, r8)
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	46c0      	nop			@ (mov r8, r8)
 800b668:	200000b0 	.word	0x200000b0

0800b66c <EPD_1IN54_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_Display(UBYTE *Image)
{
 800b66c:	b590      	push	{r4, r7, lr}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b674:	2312      	movs	r3, #18
 800b676:	18fb      	adds	r3, r7, r3
 800b678:	2219      	movs	r2, #25
 800b67a:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b67c:	2310      	movs	r3, #16
 800b67e:	18fb      	adds	r3, r7, r3
 800b680:	22c8      	movs	r2, #200	@ 0xc8
 800b682:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 800b688:	2024      	movs	r0, #36	@ 0x24
 800b68a:	f7ff fdfb 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b68e:	2316      	movs	r3, #22
 800b690:	18fb      	adds	r3, r7, r3
 800b692:	2200      	movs	r2, #0
 800b694:	801a      	strh	r2, [r3, #0]
 800b696:	e02a      	b.n	800b6ee <EPD_1IN54_V2_Display+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b698:	2314      	movs	r3, #20
 800b69a:	18fb      	adds	r3, r7, r3
 800b69c:	2200      	movs	r2, #0
 800b69e:	801a      	strh	r2, [r3, #0]
 800b6a0:	e017      	b.n	800b6d2 <EPD_1IN54_V2_Display+0x66>
        {
            Addr = i + j * Width;
 800b6a2:	2414      	movs	r4, #20
 800b6a4:	193b      	adds	r3, r7, r4
 800b6a6:	881a      	ldrh	r2, [r3, #0]
 800b6a8:	2316      	movs	r3, #22
 800b6aa:	18fb      	adds	r3, r7, r3
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	2112      	movs	r1, #18
 800b6b0:	1879      	adds	r1, r7, r1
 800b6b2:	8809      	ldrh	r1, [r1, #0]
 800b6b4:	434b      	muls	r3, r1
 800b6b6:	18d3      	adds	r3, r2, r3
 800b6b8:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	18d3      	adds	r3, r2, r3
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	0018      	movs	r0, r3
 800b6c4:	f7ff fdfc 	bl	800b2c0 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b6c8:	193b      	adds	r3, r7, r4
 800b6ca:	881a      	ldrh	r2, [r3, #0]
 800b6cc:	193b      	adds	r3, r7, r4
 800b6ce:	3201      	adds	r2, #1
 800b6d0:	801a      	strh	r2, [r3, #0]
 800b6d2:	2314      	movs	r3, #20
 800b6d4:	18fa      	adds	r2, r7, r3
 800b6d6:	2312      	movs	r3, #18
 800b6d8:	18fb      	adds	r3, r7, r3
 800b6da:	8812      	ldrh	r2, [r2, #0]
 800b6dc:	881b      	ldrh	r3, [r3, #0]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d3df      	bcc.n	800b6a2 <EPD_1IN54_V2_Display+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b6e2:	2116      	movs	r1, #22
 800b6e4:	187b      	adds	r3, r7, r1
 800b6e6:	881a      	ldrh	r2, [r3, #0]
 800b6e8:	187b      	adds	r3, r7, r1
 800b6ea:	3201      	adds	r2, #1
 800b6ec:	801a      	strh	r2, [r3, #0]
 800b6ee:	2316      	movs	r3, #22
 800b6f0:	18fa      	adds	r2, r7, r3
 800b6f2:	2310      	movs	r3, #16
 800b6f4:	18fb      	adds	r3, r7, r3
 800b6f6:	8812      	ldrh	r2, [r2, #0]
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d3cc      	bcc.n	800b698 <EPD_1IN54_V2_Display+0x2c>
        }
    }
    EPD_1IN54_V2_TurnOnDisplay();
 800b6fe:	f7ff fe23 	bl	800b348 <EPD_1IN54_V2_TurnOnDisplay>
}
 800b702:	46c0      	nop			@ (mov r8, r8)
 800b704:	46bd      	mov	sp, r7
 800b706:	b007      	add	sp, #28
 800b708:	bd90      	pop	{r4, r7, pc}

0800b70a <EPD_1IN54_V2_DisplayPartBaseImage>:
function :	 The image of the previous frame must be uploaded, otherwise the
                 first few seconds will display an exception.
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPartBaseImage(UBYTE *Image)
{
 800b70a:	b590      	push	{r4, r7, lr}
 800b70c:	b087      	sub	sp, #28
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b712:	230e      	movs	r3, #14
 800b714:	18fb      	adds	r3, r7, r3
 800b716:	2219      	movs	r2, #25
 800b718:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b71a:	230c      	movs	r3, #12
 800b71c:	18fb      	adds	r3, r7, r3
 800b71e:	22c8      	movs	r2, #200	@ 0xc8
 800b720:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	60bb      	str	r3, [r7, #8]
    EPD_1IN54_V2_SendCommand(0x24);
 800b726:	2024      	movs	r0, #36	@ 0x24
 800b728:	f7ff fdac 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b72c:	2316      	movs	r3, #22
 800b72e:	18fb      	adds	r3, r7, r3
 800b730:	2200      	movs	r2, #0
 800b732:	801a      	strh	r2, [r3, #0]
 800b734:	e02a      	b.n	800b78c <EPD_1IN54_V2_DisplayPartBaseImage+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b736:	2314      	movs	r3, #20
 800b738:	18fb      	adds	r3, r7, r3
 800b73a:	2200      	movs	r2, #0
 800b73c:	801a      	strh	r2, [r3, #0]
 800b73e:	e017      	b.n	800b770 <EPD_1IN54_V2_DisplayPartBaseImage+0x66>
        {
            Addr = i + j * Width;
 800b740:	2414      	movs	r4, #20
 800b742:	193b      	adds	r3, r7, r4
 800b744:	881a      	ldrh	r2, [r3, #0]
 800b746:	2316      	movs	r3, #22
 800b748:	18fb      	adds	r3, r7, r3
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	210e      	movs	r1, #14
 800b74e:	1879      	adds	r1, r7, r1
 800b750:	8809      	ldrh	r1, [r1, #0]
 800b752:	434b      	muls	r3, r1
 800b754:	18d3      	adds	r3, r2, r3
 800b756:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	18d3      	adds	r3, r2, r3
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	0018      	movs	r0, r3
 800b762:	f7ff fdad 	bl	800b2c0 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b766:	193b      	adds	r3, r7, r4
 800b768:	881a      	ldrh	r2, [r3, #0]
 800b76a:	193b      	adds	r3, r7, r4
 800b76c:	3201      	adds	r2, #1
 800b76e:	801a      	strh	r2, [r3, #0]
 800b770:	2314      	movs	r3, #20
 800b772:	18fa      	adds	r2, r7, r3
 800b774:	230e      	movs	r3, #14
 800b776:	18fb      	adds	r3, r7, r3
 800b778:	8812      	ldrh	r2, [r2, #0]
 800b77a:	881b      	ldrh	r3, [r3, #0]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d3df      	bcc.n	800b740 <EPD_1IN54_V2_DisplayPartBaseImage+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b780:	2116      	movs	r1, #22
 800b782:	187b      	adds	r3, r7, r1
 800b784:	881a      	ldrh	r2, [r3, #0]
 800b786:	187b      	adds	r3, r7, r1
 800b788:	3201      	adds	r2, #1
 800b78a:	801a      	strh	r2, [r3, #0]
 800b78c:	2316      	movs	r3, #22
 800b78e:	18fa      	adds	r2, r7, r3
 800b790:	230c      	movs	r3, #12
 800b792:	18fb      	adds	r3, r7, r3
 800b794:	8812      	ldrh	r2, [r2, #0]
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d3cc      	bcc.n	800b736 <EPD_1IN54_V2_DisplayPartBaseImage+0x2c>
        }
    }
    EPD_1IN54_V2_SendCommand(0x26);
 800b79c:	2026      	movs	r0, #38	@ 0x26
 800b79e:	f7ff fd71 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b7a2:	2312      	movs	r3, #18
 800b7a4:	18fb      	adds	r3, r7, r3
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	801a      	strh	r2, [r3, #0]
 800b7aa:	e02a      	b.n	800b802 <EPD_1IN54_V2_DisplayPartBaseImage+0xf8>
    {
        for (UWORD i = 0; i < Width; i++)
 800b7ac:	2310      	movs	r3, #16
 800b7ae:	18fb      	adds	r3, r7, r3
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	801a      	strh	r2, [r3, #0]
 800b7b4:	e017      	b.n	800b7e6 <EPD_1IN54_V2_DisplayPartBaseImage+0xdc>
        {
            Addr = i + j * Width;
 800b7b6:	2410      	movs	r4, #16
 800b7b8:	193b      	adds	r3, r7, r4
 800b7ba:	881a      	ldrh	r2, [r3, #0]
 800b7bc:	2312      	movs	r3, #18
 800b7be:	18fb      	adds	r3, r7, r3
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	210e      	movs	r1, #14
 800b7c4:	1879      	adds	r1, r7, r1
 800b7c6:	8809      	ldrh	r1, [r1, #0]
 800b7c8:	434b      	muls	r3, r1
 800b7ca:	18d3      	adds	r3, r2, r3
 800b7cc:	60bb      	str	r3, [r7, #8]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	18d3      	adds	r3, r2, r3
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	0018      	movs	r0, r3
 800b7d8:	f7ff fd72 	bl	800b2c0 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b7dc:	193b      	adds	r3, r7, r4
 800b7de:	881a      	ldrh	r2, [r3, #0]
 800b7e0:	193b      	adds	r3, r7, r4
 800b7e2:	3201      	adds	r2, #1
 800b7e4:	801a      	strh	r2, [r3, #0]
 800b7e6:	2310      	movs	r3, #16
 800b7e8:	18fa      	adds	r2, r7, r3
 800b7ea:	230e      	movs	r3, #14
 800b7ec:	18fb      	adds	r3, r7, r3
 800b7ee:	8812      	ldrh	r2, [r2, #0]
 800b7f0:	881b      	ldrh	r3, [r3, #0]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d3df      	bcc.n	800b7b6 <EPD_1IN54_V2_DisplayPartBaseImage+0xac>
    for (UWORD j = 0; j < Height; j++)
 800b7f6:	2112      	movs	r1, #18
 800b7f8:	187b      	adds	r3, r7, r1
 800b7fa:	881a      	ldrh	r2, [r3, #0]
 800b7fc:	187b      	adds	r3, r7, r1
 800b7fe:	3201      	adds	r2, #1
 800b800:	801a      	strh	r2, [r3, #0]
 800b802:	2312      	movs	r3, #18
 800b804:	18fa      	adds	r2, r7, r3
 800b806:	230c      	movs	r3, #12
 800b808:	18fb      	adds	r3, r7, r3
 800b80a:	8812      	ldrh	r2, [r2, #0]
 800b80c:	881b      	ldrh	r3, [r3, #0]
 800b80e:	429a      	cmp	r2, r3
 800b810:	d3cc      	bcc.n	800b7ac <EPD_1IN54_V2_DisplayPartBaseImage+0xa2>
        }
    }
    EPD_1IN54_V2_TurnOnDisplayPart();
 800b812:	f7ff fda9 	bl	800b368 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800b816:	46c0      	nop			@ (mov r8, r8)
 800b818:	46bd      	mov	sp, r7
 800b81a:	b007      	add	sp, #28
 800b81c:	bd90      	pop	{r4, r7, pc}

0800b81e <EPD_1IN54_V2_DisplayPart>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_1IN54_V2_DisplayPart(UBYTE *Image)
{
 800b81e:	b590      	push	{r4, r7, lr}
 800b820:	b087      	sub	sp, #28
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
    UWORD Width, Height;
    Width = (EPD_1IN54_V2_WIDTH % 8 == 0) ? (EPD_1IN54_V2_WIDTH / 8) : (EPD_1IN54_V2_WIDTH / 8 + 1);
 800b826:	2312      	movs	r3, #18
 800b828:	18fb      	adds	r3, r7, r3
 800b82a:	2219      	movs	r2, #25
 800b82c:	801a      	strh	r2, [r3, #0]
    Height = EPD_1IN54_V2_HEIGHT;
 800b82e:	2310      	movs	r3, #16
 800b830:	18fb      	adds	r3, r7, r3
 800b832:	22c8      	movs	r2, #200	@ 0xc8
 800b834:	801a      	strh	r2, [r3, #0]

    UDOUBLE Addr = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	60fb      	str	r3, [r7, #12]
    EPD_1IN54_V2_SendCommand(0x24);
 800b83a:	2024      	movs	r0, #36	@ 0x24
 800b83c:	f7ff fd22 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    for (UWORD j = 0; j < Height; j++)
 800b840:	2316      	movs	r3, #22
 800b842:	18fb      	adds	r3, r7, r3
 800b844:	2200      	movs	r2, #0
 800b846:	801a      	strh	r2, [r3, #0]
 800b848:	e02a      	b.n	800b8a0 <EPD_1IN54_V2_DisplayPart+0x82>
    {
        for (UWORD i = 0; i < Width; i++)
 800b84a:	2314      	movs	r3, #20
 800b84c:	18fb      	adds	r3, r7, r3
 800b84e:	2200      	movs	r2, #0
 800b850:	801a      	strh	r2, [r3, #0]
 800b852:	e017      	b.n	800b884 <EPD_1IN54_V2_DisplayPart+0x66>
        {
            Addr = i + j * Width;
 800b854:	2414      	movs	r4, #20
 800b856:	193b      	adds	r3, r7, r4
 800b858:	881a      	ldrh	r2, [r3, #0]
 800b85a:	2316      	movs	r3, #22
 800b85c:	18fb      	adds	r3, r7, r3
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	2112      	movs	r1, #18
 800b862:	1879      	adds	r1, r7, r1
 800b864:	8809      	ldrh	r1, [r1, #0]
 800b866:	434b      	muls	r3, r1
 800b868:	18d3      	adds	r3, r2, r3
 800b86a:	60fb      	str	r3, [r7, #12]
            EPD_1IN54_V2_SendData(Image[Addr]);
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	18d3      	adds	r3, r2, r3
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	0018      	movs	r0, r3
 800b876:	f7ff fd23 	bl	800b2c0 <EPD_1IN54_V2_SendData>
        for (UWORD i = 0; i < Width; i++)
 800b87a:	193b      	adds	r3, r7, r4
 800b87c:	881a      	ldrh	r2, [r3, #0]
 800b87e:	193b      	adds	r3, r7, r4
 800b880:	3201      	adds	r2, #1
 800b882:	801a      	strh	r2, [r3, #0]
 800b884:	2314      	movs	r3, #20
 800b886:	18fa      	adds	r2, r7, r3
 800b888:	2312      	movs	r3, #18
 800b88a:	18fb      	adds	r3, r7, r3
 800b88c:	8812      	ldrh	r2, [r2, #0]
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	429a      	cmp	r2, r3
 800b892:	d3df      	bcc.n	800b854 <EPD_1IN54_V2_DisplayPart+0x36>
    for (UWORD j = 0; j < Height; j++)
 800b894:	2116      	movs	r1, #22
 800b896:	187b      	adds	r3, r7, r1
 800b898:	881a      	ldrh	r2, [r3, #0]
 800b89a:	187b      	adds	r3, r7, r1
 800b89c:	3201      	adds	r2, #1
 800b89e:	801a      	strh	r2, [r3, #0]
 800b8a0:	2316      	movs	r3, #22
 800b8a2:	18fa      	adds	r2, r7, r3
 800b8a4:	2310      	movs	r3, #16
 800b8a6:	18fb      	adds	r3, r7, r3
 800b8a8:	8812      	ldrh	r2, [r2, #0]
 800b8aa:	881b      	ldrh	r3, [r3, #0]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d3cc      	bcc.n	800b84a <EPD_1IN54_V2_DisplayPart+0x2c>
        }
    }

    EPD_1IN54_V2_TurnOnDisplayPart();
 800b8b0:	f7ff fd5a 	bl	800b368 <EPD_1IN54_V2_TurnOnDisplayPart>
}
 800b8b4:	46c0      	nop			@ (mov r8, r8)
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	b007      	add	sp, #28
 800b8ba:	bd90      	pop	{r4, r7, pc}

0800b8bc <EPD_1IN54_V2_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_1IN54_V2_Sleep(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	af00      	add	r7, sp, #0
    EPD_1IN54_V2_SendCommand(0x10); // enter deep sleep
 800b8c0:	2010      	movs	r0, #16
 800b8c2:	f7ff fcdf 	bl	800b284 <EPD_1IN54_V2_SendCommand>
    EPD_1IN54_V2_SendData(0x01);
 800b8c6:	2001      	movs	r0, #1
 800b8c8:	f7ff fcfa 	bl	800b2c0 <EPD_1IN54_V2_SendData>
    //    DEV_Delay_ms(100);
}
 800b8cc:	46c0      	nop			@ (mov r8, r8)
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
	...

0800b8d4 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800b8d4:	b5b0      	push	{r4, r5, r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	000c      	movs	r4, r1
 800b8de:	0010      	movs	r0, r2
 800b8e0:	0019      	movs	r1, r3
 800b8e2:	250a      	movs	r5, #10
 800b8e4:	197b      	adds	r3, r7, r5
 800b8e6:	1c22      	adds	r2, r4, #0
 800b8e8:	801a      	strh	r2, [r3, #0]
 800b8ea:	2408      	movs	r4, #8
 800b8ec:	193b      	adds	r3, r7, r4
 800b8ee:	1c02      	adds	r2, r0, #0
 800b8f0:	801a      	strh	r2, [r3, #0]
 800b8f2:	1dbb      	adds	r3, r7, #6
 800b8f4:	1c0a      	adds	r2, r1, #0
 800b8f6:	801a      	strh	r2, [r3, #0]
    Paint.Image = NULL;
 800b8f8:	4b2c      	ldr	r3, [pc, #176]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800b8fe:	4b2b      	ldr	r3, [pc, #172]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	601a      	str	r2, [r3, #0]

    Paint.WidthMemory = Width;
 800b904:	4b29      	ldr	r3, [pc, #164]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b906:	0029      	movs	r1, r5
 800b908:	187a      	adds	r2, r7, r1
 800b90a:	8812      	ldrh	r2, [r2, #0]
 800b90c:	811a      	strh	r2, [r3, #8]
    Paint.HeightMemory = Height;
 800b90e:	4b27      	ldr	r3, [pc, #156]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b910:	193a      	adds	r2, r7, r4
 800b912:	8812      	ldrh	r2, [r2, #0]
 800b914:	815a      	strh	r2, [r3, #10]
    Paint.Color = Color;
 800b916:	4a25      	ldr	r2, [pc, #148]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b918:	2320      	movs	r3, #32
 800b91a:	18fb      	adds	r3, r7, r3
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	8193      	strh	r3, [r2, #12]
    Paint.Scale = 2;
 800b920:	4b22      	ldr	r3, [pc, #136]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b922:	2202      	movs	r2, #2
 800b924:	82da      	strh	r2, [r3, #22]

    Paint.WidthByte = (Width % 8 == 0) ? (Width / 8) : (Width / 8 + 1);
 800b926:	187b      	adds	r3, r7, r1
 800b928:	881b      	ldrh	r3, [r3, #0]
 800b92a:	2207      	movs	r2, #7
 800b92c:	4013      	ands	r3, r2
 800b92e:	b29b      	uxth	r3, r3
 800b930:	2b00      	cmp	r3, #0
 800b932:	d104      	bne.n	800b93e <Paint_NewImage+0x6a>
 800b934:	187b      	adds	r3, r7, r1
 800b936:	881b      	ldrh	r3, [r3, #0]
 800b938:	08db      	lsrs	r3, r3, #3
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	e006      	b.n	800b94c <Paint_NewImage+0x78>
 800b93e:	230a      	movs	r3, #10
 800b940:	18fb      	adds	r3, r7, r3
 800b942:	881b      	ldrh	r3, [r3, #0]
 800b944:	08db      	lsrs	r3, r3, #3
 800b946:	b29b      	uxth	r3, r3
 800b948:	3301      	adds	r3, #1
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	4a17      	ldr	r2, [pc, #92]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b94e:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;
 800b950:	4b16      	ldr	r3, [pc, #88]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b952:	2208      	movs	r2, #8
 800b954:	18ba      	adds	r2, r7, r2
 800b956:	8812      	ldrh	r2, [r2, #0]
 800b958:	829a      	strh	r2, [r3, #20]
    //    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
    //    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);

    Paint.Rotate = Rotate;
 800b95a:	4b14      	ldr	r3, [pc, #80]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b95c:	1dba      	adds	r2, r7, #6
 800b95e:	8812      	ldrh	r2, [r2, #0]
 800b960:	81da      	strh	r2, [r3, #14]
    Paint.Mirror = MIRROR_NONE;
 800b962:	4b12      	ldr	r3, [pc, #72]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b964:	2200      	movs	r2, #0
 800b966:	821a      	strh	r2, [r3, #16]

    if (Rotate == ROTATE_0 || Rotate == ROTATE_180)
 800b968:	1dbb      	adds	r3, r7, #6
 800b96a:	881b      	ldrh	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d003      	beq.n	800b978 <Paint_NewImage+0xa4>
 800b970:	1dbb      	adds	r3, r7, #6
 800b972:	881b      	ldrh	r3, [r3, #0]
 800b974:	2bb4      	cmp	r3, #180	@ 0xb4
 800b976:	d10a      	bne.n	800b98e <Paint_NewImage+0xba>
    {
        Paint.Width = Width;
 800b978:	4b0c      	ldr	r3, [pc, #48]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b97a:	220a      	movs	r2, #10
 800b97c:	18ba      	adds	r2, r7, r2
 800b97e:	8812      	ldrh	r2, [r2, #0]
 800b980:	809a      	strh	r2, [r3, #4]
        Paint.Height = Height;
 800b982:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b984:	2208      	movs	r2, #8
 800b986:	18ba      	adds	r2, r7, r2
 800b988:	8812      	ldrh	r2, [r2, #0]
 800b98a:	80da      	strh	r2, [r3, #6]
 800b98c:	e00a      	b.n	800b9a4 <Paint_NewImage+0xd0>
    }
    else
    {
        Paint.Width = Height;
 800b98e:	4b07      	ldr	r3, [pc, #28]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b990:	2208      	movs	r2, #8
 800b992:	18ba      	adds	r2, r7, r2
 800b994:	8812      	ldrh	r2, [r2, #0]
 800b996:	809a      	strh	r2, [r3, #4]
        Paint.Height = Width;
 800b998:	4b04      	ldr	r3, [pc, #16]	@ (800b9ac <Paint_NewImage+0xd8>)
 800b99a:	220a      	movs	r2, #10
 800b99c:	18ba      	adds	r2, r7, r2
 800b99e:	8812      	ldrh	r2, [r2, #0]
 800b9a0:	80da      	strh	r2, [r3, #6]
    }
}
 800b9a2:	46c0      	nop			@ (mov r8, r8)
 800b9a4:	46c0      	nop			@ (mov r8, r8)
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	b004      	add	sp, #16
 800b9aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b9ac:	2000055c 	.word	0x2000055c

0800b9b0 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800b9b8:	4b03      	ldr	r3, [pc, #12]	@ (800b9c8 <Paint_SelectImage+0x18>)
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	601a      	str	r2, [r3, #0]
}
 800b9be:	46c0      	nop			@ (mov r8, r8)
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	b002      	add	sp, #8
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	46c0      	nop			@ (mov r8, r8)
 800b9c8:	2000055c 	.word	0x2000055c

0800b9cc <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800b9cc:	b590      	push	{r4, r7, lr}
 800b9ce:	b08b      	sub	sp, #44	@ 0x2c
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	0004      	movs	r4, r0
 800b9d4:	0008      	movs	r0, r1
 800b9d6:	0011      	movs	r1, r2
 800b9d8:	1dbb      	adds	r3, r7, #6
 800b9da:	1c22      	adds	r2, r4, #0
 800b9dc:	801a      	strh	r2, [r3, #0]
 800b9de:	1d3b      	adds	r3, r7, #4
 800b9e0:	1c02      	adds	r2, r0, #0
 800b9e2:	801a      	strh	r2, [r3, #0]
 800b9e4:	1cbb      	adds	r3, r7, #2
 800b9e6:	1c0a      	adds	r2, r1, #0
 800b9e8:	801a      	strh	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800b9ea:	4bc4      	ldr	r3, [pc, #784]	@ (800bcfc <Paint_SetPixel+0x330>)
 800b9ec:	889b      	ldrh	r3, [r3, #4]
 800b9ee:	1dba      	adds	r2, r7, #6
 800b9f0:	8812      	ldrh	r2, [r2, #0]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d900      	bls.n	800b9f8 <Paint_SetPixel+0x2c>
 800b9f6:	e17b      	b.n	800bcf0 <Paint_SetPixel+0x324>
 800b9f8:	4bc0      	ldr	r3, [pc, #768]	@ (800bcfc <Paint_SetPixel+0x330>)
 800b9fa:	88db      	ldrh	r3, [r3, #6]
 800b9fc:	1d3a      	adds	r2, r7, #4
 800b9fe:	8812      	ldrh	r2, [r2, #0]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d900      	bls.n	800ba06 <Paint_SetPixel+0x3a>
 800ba04:	e174      	b.n	800bcf0 <Paint_SetPixel+0x324>
        DE_BUG("Exceeding display boundaries\r\n");
        return;
    }
    UWORD X, Y;

    switch (Paint.Rotate)
 800ba06:	4bbd      	ldr	r3, [pc, #756]	@ (800bcfc <Paint_SetPixel+0x330>)
 800ba08:	89db      	ldrh	r3, [r3, #14]
 800ba0a:	2287      	movs	r2, #135	@ 0x87
 800ba0c:	0052      	lsls	r2, r2, #1
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d03d      	beq.n	800ba8e <Paint_SetPixel+0xc2>
 800ba12:	2287      	movs	r2, #135	@ 0x87
 800ba14:	0052      	lsls	r2, r2, #1
 800ba16:	4293      	cmp	r3, r2
 800ba18:	dd00      	ble.n	800ba1c <Paint_SetPixel+0x50>
 800ba1a:	e16b      	b.n	800bcf4 <Paint_SetPixel+0x328>
 800ba1c:	2bb4      	cmp	r3, #180	@ 0xb4
 800ba1e:	d021      	beq.n	800ba64 <Paint_SetPixel+0x98>
 800ba20:	dd00      	ble.n	800ba24 <Paint_SetPixel+0x58>
 800ba22:	e167      	b.n	800bcf4 <Paint_SetPixel+0x328>
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <Paint_SetPixel+0x62>
 800ba28:	2b5a      	cmp	r3, #90	@ 0x5a
 800ba2a:	d00b      	beq.n	800ba44 <Paint_SetPixel+0x78>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800ba2c:	e162      	b.n	800bcf4 <Paint_SetPixel+0x328>
        X = Xpoint;
 800ba2e:	2326      	movs	r3, #38	@ 0x26
 800ba30:	18fb      	adds	r3, r7, r3
 800ba32:	1dba      	adds	r2, r7, #6
 800ba34:	8812      	ldrh	r2, [r2, #0]
 800ba36:	801a      	strh	r2, [r3, #0]
        Y = Ypoint;
 800ba38:	2324      	movs	r3, #36	@ 0x24
 800ba3a:	18fb      	adds	r3, r7, r3
 800ba3c:	1d3a      	adds	r2, r7, #4
 800ba3e:	8812      	ldrh	r2, [r2, #0]
 800ba40:	801a      	strh	r2, [r3, #0]
        break;
 800ba42:	e034      	b.n	800baae <Paint_SetPixel+0xe2>
        X = Paint.WidthMemory - Ypoint - 1;
 800ba44:	4bad      	ldr	r3, [pc, #692]	@ (800bcfc <Paint_SetPixel+0x330>)
 800ba46:	891a      	ldrh	r2, [r3, #8]
 800ba48:	1d3b      	adds	r3, r7, #4
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	2326      	movs	r3, #38	@ 0x26
 800ba52:	18fb      	adds	r3, r7, r3
 800ba54:	3a01      	subs	r2, #1
 800ba56:	801a      	strh	r2, [r3, #0]
        Y = Xpoint;
 800ba58:	2324      	movs	r3, #36	@ 0x24
 800ba5a:	18fb      	adds	r3, r7, r3
 800ba5c:	1dba      	adds	r2, r7, #6
 800ba5e:	8812      	ldrh	r2, [r2, #0]
 800ba60:	801a      	strh	r2, [r3, #0]
        break;
 800ba62:	e024      	b.n	800baae <Paint_SetPixel+0xe2>
        X = Paint.WidthMemory - Xpoint - 1;
 800ba64:	4ba5      	ldr	r3, [pc, #660]	@ (800bcfc <Paint_SetPixel+0x330>)
 800ba66:	891a      	ldrh	r2, [r3, #8]
 800ba68:	1dbb      	adds	r3, r7, #6
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	2326      	movs	r3, #38	@ 0x26
 800ba72:	18fb      	adds	r3, r7, r3
 800ba74:	3a01      	subs	r2, #1
 800ba76:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Ypoint - 1;
 800ba78:	4ba0      	ldr	r3, [pc, #640]	@ (800bcfc <Paint_SetPixel+0x330>)
 800ba7a:	895a      	ldrh	r2, [r3, #10]
 800ba7c:	1d3b      	adds	r3, r7, #4
 800ba7e:	881b      	ldrh	r3, [r3, #0]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	2324      	movs	r3, #36	@ 0x24
 800ba86:	18fb      	adds	r3, r7, r3
 800ba88:	3a01      	subs	r2, #1
 800ba8a:	801a      	strh	r2, [r3, #0]
        break;
 800ba8c:	e00f      	b.n	800baae <Paint_SetPixel+0xe2>
        X = Ypoint;
 800ba8e:	2326      	movs	r3, #38	@ 0x26
 800ba90:	18fb      	adds	r3, r7, r3
 800ba92:	1d3a      	adds	r2, r7, #4
 800ba94:	8812      	ldrh	r2, [r2, #0]
 800ba96:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Xpoint - 1;
 800ba98:	4b98      	ldr	r3, [pc, #608]	@ (800bcfc <Paint_SetPixel+0x330>)
 800ba9a:	895a      	ldrh	r2, [r3, #10]
 800ba9c:	1dbb      	adds	r3, r7, #6
 800ba9e:	881b      	ldrh	r3, [r3, #0]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	2324      	movs	r3, #36	@ 0x24
 800baa6:	18fb      	adds	r3, r7, r3
 800baa8:	3a01      	subs	r2, #1
 800baaa:	801a      	strh	r2, [r3, #0]
        break;
 800baac:	46c0      	nop			@ (mov r8, r8)
    }

    switch (Paint.Mirror)
 800baae:	4b93      	ldr	r3, [pc, #588]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bab0:	8a1b      	ldrh	r3, [r3, #16]
 800bab2:	2b03      	cmp	r3, #3
 800bab4:	d020      	beq.n	800baf8 <Paint_SetPixel+0x12c>
 800bab6:	dd00      	ble.n	800baba <Paint_SetPixel+0xee>
 800bab8:	e11e      	b.n	800bcf8 <Paint_SetPixel+0x32c>
 800baba:	2b02      	cmp	r3, #2
 800babc:	d011      	beq.n	800bae2 <Paint_SetPixel+0x116>
 800babe:	dd00      	ble.n	800bac2 <Paint_SetPixel+0xf6>
 800bac0:	e11a      	b.n	800bcf8 <Paint_SetPixel+0x32c>
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d02d      	beq.n	800bb22 <Paint_SetPixel+0x156>
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d000      	beq.n	800bacc <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
        Y = Paint.HeightMemory - Y - 1;
        break;
    default:
        return;
 800baca:	e115      	b.n	800bcf8 <Paint_SetPixel+0x32c>
        X = Paint.WidthMemory - X - 1;
 800bacc:	4b8b      	ldr	r3, [pc, #556]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bace:	891a      	ldrh	r2, [r3, #8]
 800bad0:	2126      	movs	r1, #38	@ 0x26
 800bad2:	187b      	adds	r3, r7, r1
 800bad4:	881b      	ldrh	r3, [r3, #0]
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	b29a      	uxth	r2, r3
 800bada:	187b      	adds	r3, r7, r1
 800badc:	3a01      	subs	r2, #1
 800bade:	801a      	strh	r2, [r3, #0]
        break;
 800bae0:	e020      	b.n	800bb24 <Paint_SetPixel+0x158>
        Y = Paint.HeightMemory - Y - 1;
 800bae2:	4b86      	ldr	r3, [pc, #536]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bae4:	895a      	ldrh	r2, [r3, #10]
 800bae6:	2124      	movs	r1, #36	@ 0x24
 800bae8:	187b      	adds	r3, r7, r1
 800baea:	881b      	ldrh	r3, [r3, #0]
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	b29a      	uxth	r2, r3
 800baf0:	187b      	adds	r3, r7, r1
 800baf2:	3a01      	subs	r2, #1
 800baf4:	801a      	strh	r2, [r3, #0]
        break;
 800baf6:	e015      	b.n	800bb24 <Paint_SetPixel+0x158>
        X = Paint.WidthMemory - X - 1;
 800baf8:	4b80      	ldr	r3, [pc, #512]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bafa:	891a      	ldrh	r2, [r3, #8]
 800bafc:	2126      	movs	r1, #38	@ 0x26
 800bafe:	187b      	adds	r3, r7, r1
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	187b      	adds	r3, r7, r1
 800bb08:	3a01      	subs	r2, #1
 800bb0a:	801a      	strh	r2, [r3, #0]
        Y = Paint.HeightMemory - Y - 1;
 800bb0c:	4b7b      	ldr	r3, [pc, #492]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bb0e:	895a      	ldrh	r2, [r3, #10]
 800bb10:	2124      	movs	r1, #36	@ 0x24
 800bb12:	187b      	adds	r3, r7, r1
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	187b      	adds	r3, r7, r1
 800bb1c:	3a01      	subs	r2, #1
 800bb1e:	801a      	strh	r2, [r3, #0]
        break;
 800bb20:	e000      	b.n	800bb24 <Paint_SetPixel+0x158>
        break;
 800bb22:	46c0      	nop			@ (mov r8, r8)
    }

    if (X > Paint.WidthMemory || Y > Paint.HeightMemory)
 800bb24:	4b75      	ldr	r3, [pc, #468]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bb26:	891b      	ldrh	r3, [r3, #8]
 800bb28:	2026      	movs	r0, #38	@ 0x26
 800bb2a:	183a      	adds	r2, r7, r0
 800bb2c:	8812      	ldrh	r2, [r2, #0]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d900      	bls.n	800bb34 <Paint_SetPixel+0x168>
 800bb32:	e0e5      	b.n	800bd00 <Paint_SetPixel+0x334>
 800bb34:	4b71      	ldr	r3, [pc, #452]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bb36:	895b      	ldrh	r3, [r3, #10]
 800bb38:	2424      	movs	r4, #36	@ 0x24
 800bb3a:	193a      	adds	r2, r7, r4
 800bb3c:	8812      	ldrh	r2, [r2, #0]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d900      	bls.n	800bb44 <Paint_SetPixel+0x178>
 800bb42:	e0dd      	b.n	800bd00 <Paint_SetPixel+0x334>
    {
        DE_BUG("Exceeding display boundaries\r\n");
        return;
    }

    if (Paint.Scale == 2)
 800bb44:	4b6d      	ldr	r3, [pc, #436]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bb46:	8adb      	ldrh	r3, [r3, #22]
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d143      	bne.n	800bbd4 <Paint_SetPixel+0x208>
    {
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800bb4c:	183b      	adds	r3, r7, r0
 800bb4e:	881b      	ldrh	r3, [r3, #0]
 800bb50:	08db      	lsrs	r3, r3, #3
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	0019      	movs	r1, r3
 800bb56:	193b      	adds	r3, r7, r4
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	4a68      	ldr	r2, [pc, #416]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bb5c:	8a52      	ldrh	r2, [r2, #18]
 800bb5e:	4353      	muls	r3, r2
 800bb60:	18cb      	adds	r3, r1, r3
 800bb62:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 800bb64:	4b65      	ldr	r3, [pc, #404]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	18d2      	adds	r2, r2, r3
 800bb6c:	210f      	movs	r1, #15
 800bb6e:	187b      	adds	r3, r7, r1
 800bb70:	7812      	ldrb	r2, [r2, #0]
 800bb72:	701a      	strb	r2, [r3, #0]
        if (Color == BLACK)
 800bb74:	1cbb      	adds	r3, r7, #2
 800bb76:	881b      	ldrh	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d115      	bne.n	800bba8 <Paint_SetPixel+0x1dc>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800bb7c:	183b      	adds	r3, r7, r0
 800bb7e:	881b      	ldrh	r3, [r3, #0]
 800bb80:	2207      	movs	r2, #7
 800bb82:	4013      	ands	r3, r2
 800bb84:	2280      	movs	r2, #128	@ 0x80
 800bb86:	411a      	asrs	r2, r3
 800bb88:	0013      	movs	r3, r2
 800bb8a:	b25b      	sxtb	r3, r3
 800bb8c:	43db      	mvns	r3, r3
 800bb8e:	b25b      	sxtb	r3, r3
 800bb90:	187a      	adds	r2, r7, r1
 800bb92:	7812      	ldrb	r2, [r2, #0]
 800bb94:	b252      	sxtb	r2, r2
 800bb96:	4013      	ands	r3, r2
 800bb98:	b259      	sxtb	r1, r3
 800bb9a:	4b58      	ldr	r3, [pc, #352]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	18d3      	adds	r3, r2, r3
 800bba2:	b2ca      	uxtb	r2, r1
 800bba4:	701a      	strb	r2, [r3, #0]
 800bba6:	e0ac      	b.n	800bd02 <Paint_SetPixel+0x336>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800bba8:	2326      	movs	r3, #38	@ 0x26
 800bbaa:	18fb      	adds	r3, r7, r3
 800bbac:	881b      	ldrh	r3, [r3, #0]
 800bbae:	2207      	movs	r2, #7
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	2280      	movs	r2, #128	@ 0x80
 800bbb4:	411a      	asrs	r2, r3
 800bbb6:	0013      	movs	r3, r2
 800bbb8:	b25a      	sxtb	r2, r3
 800bbba:	230f      	movs	r3, #15
 800bbbc:	18fb      	adds	r3, r7, r3
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	b25b      	sxtb	r3, r3
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	b259      	sxtb	r1, r3
 800bbc6:	4b4d      	ldr	r3, [pc, #308]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	18d3      	adds	r3, r2, r3
 800bbce:	b2ca      	uxtb	r2, r1
 800bbd0:	701a      	strb	r2, [r3, #0]
 800bbd2:	e096      	b.n	800bd02 <Paint_SetPixel+0x336>
    }
    else if (Paint.Scale == 4)
 800bbd4:	4b49      	ldr	r3, [pc, #292]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bbd6:	8adb      	ldrh	r3, [r3, #22]
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	d145      	bne.n	800bc68 <Paint_SetPixel+0x29c>
    {
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800bbdc:	2426      	movs	r4, #38	@ 0x26
 800bbde:	193b      	adds	r3, r7, r4
 800bbe0:	881b      	ldrh	r3, [r3, #0]
 800bbe2:	089b      	lsrs	r3, r3, #2
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	0019      	movs	r1, r3
 800bbe8:	2324      	movs	r3, #36	@ 0x24
 800bbea:	18fb      	adds	r3, r7, r3
 800bbec:	881b      	ldrh	r3, [r3, #0]
 800bbee:	4a43      	ldr	r2, [pc, #268]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bbf0:	8a52      	ldrh	r2, [r2, #18]
 800bbf2:	4353      	muls	r3, r2
 800bbf4:	18cb      	adds	r3, r1, r3
 800bbf6:	61bb      	str	r3, [r7, #24]
        Color = Color % 4; // Guaranteed color scale is 4  --- 0~3
 800bbf8:	1cbb      	adds	r3, r7, #2
 800bbfa:	1cba      	adds	r2, r7, #2
 800bbfc:	8812      	ldrh	r2, [r2, #0]
 800bbfe:	2103      	movs	r1, #3
 800bc00:	400a      	ands	r2, r1
 800bc02:	801a      	strh	r2, [r3, #0]
        UBYTE Rdata = Paint.Image[Addr];
 800bc04:	4b3d      	ldr	r3, [pc, #244]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	18d2      	adds	r2, r2, r3
 800bc0c:	2017      	movs	r0, #23
 800bc0e:	183b      	adds	r3, r7, r0
 800bc10:	7812      	ldrb	r2, [r2, #0]
 800bc12:	701a      	strb	r2, [r3, #0]

        Rdata = Rdata & (~(0xC0 >> ((X % 4) * 2)));
 800bc14:	0021      	movs	r1, r4
 800bc16:	187b      	adds	r3, r7, r1
 800bc18:	881b      	ldrh	r3, [r3, #0]
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	22c0      	movs	r2, #192	@ 0xc0
 800bc22:	411a      	asrs	r2, r3
 800bc24:	0013      	movs	r3, r2
 800bc26:	b25b      	sxtb	r3, r3
 800bc28:	43db      	mvns	r3, r3
 800bc2a:	b25b      	sxtb	r3, r3
 800bc2c:	183a      	adds	r2, r7, r0
 800bc2e:	7812      	ldrb	r2, [r2, #0]
 800bc30:	b252      	sxtb	r2, r2
 800bc32:	4013      	ands	r3, r2
 800bc34:	b25a      	sxtb	r2, r3
 800bc36:	183b      	adds	r3, r7, r0
 800bc38:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4) * 2));
 800bc3a:	1cbb      	adds	r3, r7, #2
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	019a      	lsls	r2, r3, #6
 800bc40:	187b      	adds	r3, r7, r1
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	2103      	movs	r1, #3
 800bc46:	400b      	ands	r3, r1
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	411a      	asrs	r2, r3
 800bc4c:	0013      	movs	r3, r2
 800bc4e:	b25a      	sxtb	r2, r3
 800bc50:	183b      	adds	r3, r7, r0
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	b25b      	sxtb	r3, r3
 800bc56:	4313      	orrs	r3, r2
 800bc58:	b259      	sxtb	r1, r3
 800bc5a:	4b28      	ldr	r3, [pc, #160]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	18d3      	adds	r3, r2, r3
 800bc62:	b2ca      	uxtb	r2, r1
 800bc64:	701a      	strb	r2, [r3, #0]
 800bc66:	e04c      	b.n	800bd02 <Paint_SetPixel+0x336>
    }
    else if (Paint.Scale == 7)
 800bc68:	4b24      	ldr	r3, [pc, #144]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bc6a:	8adb      	ldrh	r3, [r3, #22]
 800bc6c:	2b07      	cmp	r3, #7
 800bc6e:	d148      	bne.n	800bd02 <Paint_SetPixel+0x336>
    {
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800bc70:	2426      	movs	r4, #38	@ 0x26
 800bc72:	193b      	adds	r3, r7, r4
 800bc74:	881b      	ldrh	r3, [r3, #0]
 800bc76:	085b      	lsrs	r3, r3, #1
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	0019      	movs	r1, r3
 800bc7c:	2324      	movs	r3, #36	@ 0x24
 800bc7e:	18fb      	adds	r3, r7, r3
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	4a1e      	ldr	r2, [pc, #120]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bc84:	8a52      	ldrh	r2, [r2, #18]
 800bc86:	4353      	muls	r3, r2
 800bc88:	18cb      	adds	r3, r1, r3
 800bc8a:	623b      	str	r3, [r7, #32]
        UBYTE Rdata = Paint.Image[Addr];
 800bc8c:	4b1b      	ldr	r3, [pc, #108]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	18d2      	adds	r2, r2, r3
 800bc94:	201f      	movs	r0, #31
 800bc96:	183b      	adds	r3, r7, r0
 800bc98:	7812      	ldrb	r2, [r2, #0]
 800bc9a:	701a      	strb	r2, [r3, #0]
        Rdata = Rdata & (~(0xF0 >> ((X % 2) * 4))); // Clear first, then set value
 800bc9c:	0021      	movs	r1, r4
 800bc9e:	187b      	adds	r3, r7, r1
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	2201      	movs	r2, #1
 800bca4:	4013      	ands	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	22f0      	movs	r2, #240	@ 0xf0
 800bcaa:	411a      	asrs	r2, r3
 800bcac:	0013      	movs	r3, r2
 800bcae:	b25b      	sxtb	r3, r3
 800bcb0:	43db      	mvns	r3, r3
 800bcb2:	b25b      	sxtb	r3, r3
 800bcb4:	183a      	adds	r2, r7, r0
 800bcb6:	7812      	ldrb	r2, [r2, #0]
 800bcb8:	b252      	sxtb	r2, r2
 800bcba:	4013      	ands	r3, r2
 800bcbc:	b25a      	sxtb	r2, r3
 800bcbe:	183b      	adds	r3, r7, r0
 800bcc0:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2) * 4));
 800bcc2:	1cbb      	adds	r3, r7, #2
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	011a      	lsls	r2, r3, #4
 800bcc8:	187b      	adds	r3, r7, r1
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	2101      	movs	r1, #1
 800bcce:	400b      	ands	r3, r1
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	411a      	asrs	r2, r3
 800bcd4:	0013      	movs	r3, r2
 800bcd6:	b25a      	sxtb	r2, r3
 800bcd8:	183b      	adds	r3, r7, r0
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	b25b      	sxtb	r3, r3
 800bcde:	4313      	orrs	r3, r2
 800bce0:	b259      	sxtb	r1, r3
 800bce2:	4b06      	ldr	r3, [pc, #24]	@ (800bcfc <Paint_SetPixel+0x330>)
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	18d3      	adds	r3, r2, r3
 800bcea:	b2ca      	uxtb	r2, r1
 800bcec:	701a      	strb	r2, [r3, #0]
 800bcee:	e008      	b.n	800bd02 <Paint_SetPixel+0x336>
        return;
 800bcf0:	46c0      	nop			@ (mov r8, r8)
 800bcf2:	e006      	b.n	800bd02 <Paint_SetPixel+0x336>
        return;
 800bcf4:	46c0      	nop			@ (mov r8, r8)
 800bcf6:	e004      	b.n	800bd02 <Paint_SetPixel+0x336>
        return;
 800bcf8:	46c0      	nop			@ (mov r8, r8)
 800bcfa:	e002      	b.n	800bd02 <Paint_SetPixel+0x336>
 800bcfc:	2000055c 	.word	0x2000055c
        return;
 800bd00:	46c0      	nop			@ (mov r8, r8)
        // printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
    }
}
 800bd02:	46bd      	mov	sp, r7
 800bd04:	b00b      	add	sp, #44	@ 0x2c
 800bd06:	bd90      	pop	{r4, r7, pc}

0800bd08 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	0002      	movs	r2, r0
 800bd10:	1dbb      	adds	r3, r7, #6
 800bd12:	801a      	strh	r2, [r3, #0]
    if (Paint.Scale == 2 || Paint.Scale == 4)
 800bd14:	4b42      	ldr	r3, [pc, #264]	@ (800be20 <Paint_Clear+0x118>)
 800bd16:	8adb      	ldrh	r3, [r3, #22]
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d003      	beq.n	800bd24 <Paint_Clear+0x1c>
 800bd1c:	4b40      	ldr	r3, [pc, #256]	@ (800be20 <Paint_Clear+0x118>)
 800bd1e:	8adb      	ldrh	r3, [r3, #22]
 800bd20:	2b04      	cmp	r3, #4
 800bd22:	d136      	bne.n	800bd92 <Paint_Clear+0x8a>
    {
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bd24:	2316      	movs	r3, #22
 800bd26:	18fb      	adds	r3, r7, r3
 800bd28:	2200      	movs	r2, #0
 800bd2a:	801a      	strh	r2, [r3, #0]
 800bd2c:	e029      	b.n	800bd82 <Paint_Clear+0x7a>
        {
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bd2e:	2314      	movs	r3, #20
 800bd30:	18fb      	adds	r3, r7, r3
 800bd32:	2200      	movs	r2, #0
 800bd34:	801a      	strh	r2, [r3, #0]
 800bd36:	e017      	b.n	800bd68 <Paint_Clear+0x60>
            { // 8 pixel =  1 byte
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800bd38:	2014      	movs	r0, #20
 800bd3a:	183b      	adds	r3, r7, r0
 800bd3c:	881a      	ldrh	r2, [r3, #0]
 800bd3e:	2316      	movs	r3, #22
 800bd40:	18fb      	adds	r3, r7, r3
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	4936      	ldr	r1, [pc, #216]	@ (800be20 <Paint_Clear+0x118>)
 800bd46:	8a49      	ldrh	r1, [r1, #18]
 800bd48:	434b      	muls	r3, r1
 800bd4a:	18d3      	adds	r3, r2, r3
 800bd4c:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800bd4e:	4b34      	ldr	r3, [pc, #208]	@ (800be20 <Paint_Clear+0x118>)
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	18d3      	adds	r3, r2, r3
 800bd56:	1dba      	adds	r2, r7, #6
 800bd58:	8812      	ldrh	r2, [r2, #0]
 800bd5a:	b2d2      	uxtb	r2, r2
 800bd5c:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bd5e:	183b      	adds	r3, r7, r0
 800bd60:	881a      	ldrh	r2, [r3, #0]
 800bd62:	183b      	adds	r3, r7, r0
 800bd64:	3201      	adds	r2, #1
 800bd66:	801a      	strh	r2, [r3, #0]
 800bd68:	4b2d      	ldr	r3, [pc, #180]	@ (800be20 <Paint_Clear+0x118>)
 800bd6a:	8a5b      	ldrh	r3, [r3, #18]
 800bd6c:	2214      	movs	r2, #20
 800bd6e:	18ba      	adds	r2, r7, r2
 800bd70:	8812      	ldrh	r2, [r2, #0]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d3e0      	bcc.n	800bd38 <Paint_Clear+0x30>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bd76:	2116      	movs	r1, #22
 800bd78:	187b      	adds	r3, r7, r1
 800bd7a:	881a      	ldrh	r2, [r3, #0]
 800bd7c:	187b      	adds	r3, r7, r1
 800bd7e:	3201      	adds	r2, #1
 800bd80:	801a      	strh	r2, [r3, #0]
 800bd82:	4b27      	ldr	r3, [pc, #156]	@ (800be20 <Paint_Clear+0x118>)
 800bd84:	8a9b      	ldrh	r3, [r3, #20]
 800bd86:	2216      	movs	r2, #22
 800bd88:	18ba      	adds	r2, r7, r2
 800bd8a:	8812      	ldrh	r2, [r2, #0]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d3ce      	bcc.n	800bd2e <Paint_Clear+0x26>
 800bd90:	e041      	b.n	800be16 <Paint_Clear+0x10e>
            }
        }
    }
    else if (Paint.Scale == 7)
 800bd92:	4b23      	ldr	r3, [pc, #140]	@ (800be20 <Paint_Clear+0x118>)
 800bd94:	8adb      	ldrh	r3, [r3, #22]
 800bd96:	2b07      	cmp	r3, #7
 800bd98:	d13d      	bne.n	800be16 <Paint_Clear+0x10e>
    {
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bd9a:	2312      	movs	r3, #18
 800bd9c:	18fb      	adds	r3, r7, r3
 800bd9e:	2200      	movs	r2, #0
 800bda0:	801a      	strh	r2, [r3, #0]
 800bda2:	e030      	b.n	800be06 <Paint_Clear+0xfe>
        {
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bda4:	2310      	movs	r3, #16
 800bda6:	18fb      	adds	r3, r7, r3
 800bda8:	2200      	movs	r2, #0
 800bdaa:	801a      	strh	r2, [r3, #0]
 800bdac:	e01e      	b.n	800bdec <Paint_Clear+0xe4>
            {
                UDOUBLE Addr = X + Y * Paint.WidthByte;
 800bdae:	2010      	movs	r0, #16
 800bdb0:	183b      	adds	r3, r7, r0
 800bdb2:	881a      	ldrh	r2, [r3, #0]
 800bdb4:	2312      	movs	r3, #18
 800bdb6:	18fb      	adds	r3, r7, r3
 800bdb8:	881b      	ldrh	r3, [r3, #0]
 800bdba:	4919      	ldr	r1, [pc, #100]	@ (800be20 <Paint_Clear+0x118>)
 800bdbc:	8a49      	ldrh	r1, [r1, #18]
 800bdbe:	434b      	muls	r3, r1
 800bdc0:	18d3      	adds	r3, r2, r3
 800bdc2:	60fb      	str	r3, [r7, #12]
                Paint.Image[Addr] = (Color << 4) | Color;
 800bdc4:	1dbb      	adds	r3, r7, #6
 800bdc6:	881b      	ldrh	r3, [r3, #0]
 800bdc8:	011b      	lsls	r3, r3, #4
 800bdca:	b25a      	sxtb	r2, r3
 800bdcc:	1dbb      	adds	r3, r7, #6
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	b25b      	sxtb	r3, r3
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	b259      	sxtb	r1, r3
 800bdd6:	4b12      	ldr	r3, [pc, #72]	@ (800be20 <Paint_Clear+0x118>)
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	18d3      	adds	r3, r2, r3
 800bdde:	b2ca      	uxtb	r2, r1
 800bde0:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++)
 800bde2:	183b      	adds	r3, r7, r0
 800bde4:	881a      	ldrh	r2, [r3, #0]
 800bde6:	183b      	adds	r3, r7, r0
 800bde8:	3201      	adds	r2, #1
 800bdea:	801a      	strh	r2, [r3, #0]
 800bdec:	4b0c      	ldr	r3, [pc, #48]	@ (800be20 <Paint_Clear+0x118>)
 800bdee:	8a5b      	ldrh	r3, [r3, #18]
 800bdf0:	2210      	movs	r2, #16
 800bdf2:	18ba      	adds	r2, r7, r2
 800bdf4:	8812      	ldrh	r2, [r2, #0]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d3d9      	bcc.n	800bdae <Paint_Clear+0xa6>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++)
 800bdfa:	2112      	movs	r1, #18
 800bdfc:	187b      	adds	r3, r7, r1
 800bdfe:	881a      	ldrh	r2, [r3, #0]
 800be00:	187b      	adds	r3, r7, r1
 800be02:	3201      	adds	r2, #1
 800be04:	801a      	strh	r2, [r3, #0]
 800be06:	4b06      	ldr	r3, [pc, #24]	@ (800be20 <Paint_Clear+0x118>)
 800be08:	8a9b      	ldrh	r3, [r3, #20]
 800be0a:	2212      	movs	r2, #18
 800be0c:	18ba      	adds	r2, r7, r2
 800be0e:	8812      	ldrh	r2, [r2, #0]
 800be10:	429a      	cmp	r2, r3
 800be12:	d3c7      	bcc.n	800bda4 <Paint_Clear+0x9c>
            }
        }
    }
}
 800be14:	e7ff      	b.n	800be16 <Paint_Clear+0x10e>
 800be16:	46c0      	nop			@ (mov r8, r8)
 800be18:	46bd      	mov	sp, r7
 800be1a:	b006      	add	sp, #24
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	46c0      	nop			@ (mov r8, r8)
 800be20:	2000055c 	.word	0x2000055c

0800be24 <Paint_ClearWindows>:
    Xend   : x end point
    Yend   : y end point
    Color  : Painted colors
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800be24:	b5b0      	push	{r4, r5, r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	0005      	movs	r5, r0
 800be2c:	000c      	movs	r4, r1
 800be2e:	0010      	movs	r0, r2
 800be30:	0019      	movs	r1, r3
 800be32:	1dbb      	adds	r3, r7, #6
 800be34:	1c2a      	adds	r2, r5, #0
 800be36:	801a      	strh	r2, [r3, #0]
 800be38:	1d3b      	adds	r3, r7, #4
 800be3a:	1c22      	adds	r2, r4, #0
 800be3c:	801a      	strh	r2, [r3, #0]
 800be3e:	1cbb      	adds	r3, r7, #2
 800be40:	1c02      	adds	r2, r0, #0
 800be42:	801a      	strh	r2, [r3, #0]
 800be44:	003b      	movs	r3, r7
 800be46:	1c0a      	adds	r2, r1, #0
 800be48:	801a      	strh	r2, [r3, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 800be4a:	230c      	movs	r3, #12
 800be4c:	18fb      	adds	r3, r7, r3
 800be4e:	1d3a      	adds	r2, r7, #4
 800be50:	8812      	ldrh	r2, [r2, #0]
 800be52:	801a      	strh	r2, [r3, #0]
 800be54:	e024      	b.n	800bea0 <Paint_ClearWindows+0x7c>
    {
        for (X = Xstart; X < Xend; X++)
 800be56:	230e      	movs	r3, #14
 800be58:	18fb      	adds	r3, r7, r3
 800be5a:	1dba      	adds	r2, r7, #6
 800be5c:	8812      	ldrh	r2, [r2, #0]
 800be5e:	801a      	strh	r2, [r3, #0]
 800be60:	e011      	b.n	800be86 <Paint_ClearWindows+0x62>
        { // 8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 800be62:	2320      	movs	r3, #32
 800be64:	18fb      	adds	r3, r7, r3
 800be66:	881a      	ldrh	r2, [r3, #0]
 800be68:	230c      	movs	r3, #12
 800be6a:	18fb      	adds	r3, r7, r3
 800be6c:	8819      	ldrh	r1, [r3, #0]
 800be6e:	240e      	movs	r4, #14
 800be70:	193b      	adds	r3, r7, r4
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	0018      	movs	r0, r3
 800be76:	f7ff fda9 	bl	800b9cc <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 800be7a:	0021      	movs	r1, r4
 800be7c:	187b      	adds	r3, r7, r1
 800be7e:	881a      	ldrh	r2, [r3, #0]
 800be80:	187b      	adds	r3, r7, r1
 800be82:	3201      	adds	r2, #1
 800be84:	801a      	strh	r2, [r3, #0]
 800be86:	230e      	movs	r3, #14
 800be88:	18fa      	adds	r2, r7, r3
 800be8a:	1cbb      	adds	r3, r7, #2
 800be8c:	8812      	ldrh	r2, [r2, #0]
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d3e6      	bcc.n	800be62 <Paint_ClearWindows+0x3e>
    for (Y = Ystart; Y < Yend; Y++)
 800be94:	210c      	movs	r1, #12
 800be96:	187b      	adds	r3, r7, r1
 800be98:	881a      	ldrh	r2, [r3, #0]
 800be9a:	187b      	adds	r3, r7, r1
 800be9c:	3201      	adds	r2, #1
 800be9e:	801a      	strh	r2, [r3, #0]
 800bea0:	230c      	movs	r3, #12
 800bea2:	18fa      	adds	r2, r7, r3
 800bea4:	003b      	movs	r3, r7
 800bea6:	8812      	ldrh	r2, [r2, #0]
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d3d3      	bcc.n	800be56 <Paint_ClearWindows+0x32>
        }
    }
}
 800beae:	46c0      	nop			@ (mov r8, r8)
 800beb0:	46c0      	nop			@ (mov r8, r8)
 800beb2:	46bd      	mov	sp, r7
 800beb4:	b004      	add	sp, #16
 800beb6:	bdb0      	pop	{r4, r5, r7, pc}

0800beb8 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 800beb8:	b5b0      	push	{r4, r5, r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	0005      	movs	r5, r0
 800bec0:	000c      	movs	r4, r1
 800bec2:	0010      	movs	r0, r2
 800bec4:	0019      	movs	r1, r3
 800bec6:	1dbb      	adds	r3, r7, #6
 800bec8:	1c2a      	adds	r2, r5, #0
 800beca:	801a      	strh	r2, [r3, #0]
 800becc:	1d3b      	adds	r3, r7, #4
 800bece:	1c22      	adds	r2, r4, #0
 800bed0:	801a      	strh	r2, [r3, #0]
 800bed2:	1cbb      	adds	r3, r7, #2
 800bed4:	1c02      	adds	r2, r0, #0
 800bed6:	801a      	strh	r2, [r3, #0]
 800bed8:	1c7b      	adds	r3, r7, #1
 800beda:	1c0a      	adds	r2, r1, #0
 800bedc:	701a      	strb	r2, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800bede:	4b65      	ldr	r3, [pc, #404]	@ (800c074 <Paint_DrawPoint+0x1bc>)
 800bee0:	889b      	ldrh	r3, [r3, #4]
 800bee2:	1dba      	adds	r2, r7, #6
 800bee4:	8812      	ldrh	r2, [r2, #0]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d805      	bhi.n	800bef6 <Paint_DrawPoint+0x3e>
 800beea:	4b62      	ldr	r3, [pc, #392]	@ (800c074 <Paint_DrawPoint+0x1bc>)
 800beec:	88db      	ldrh	r3, [r3, #6]
 800beee:	1d3a      	adds	r2, r7, #4
 800bef0:	8812      	ldrh	r2, [r2, #0]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d912      	bls.n	800bf1c <Paint_DrawPoint+0x64>
    {
        DE_BUG("Paint_DrawPoint Input exceeds the normal display range\r\n");
        printf("Xpoint = %d , Paint.Width = %d  \r\n ", Xpoint, Paint.Width);
 800bef6:	1dbb      	adds	r3, r7, #6
 800bef8:	8819      	ldrh	r1, [r3, #0]
 800befa:	4b5e      	ldr	r3, [pc, #376]	@ (800c074 <Paint_DrawPoint+0x1bc>)
 800befc:	889b      	ldrh	r3, [r3, #4]
 800befe:	001a      	movs	r2, r3
 800bf00:	4b5d      	ldr	r3, [pc, #372]	@ (800c078 <Paint_DrawPoint+0x1c0>)
 800bf02:	0018      	movs	r0, r3
 800bf04:	f7f9 fb9e 	bl	8005644 <printf_>
        printf("Ypoint = %d , Paint.Height = %d  \r\n ", Ypoint, Paint.Height);
 800bf08:	1d3b      	adds	r3, r7, #4
 800bf0a:	8819      	ldrh	r1, [r3, #0]
 800bf0c:	4b59      	ldr	r3, [pc, #356]	@ (800c074 <Paint_DrawPoint+0x1bc>)
 800bf0e:	88db      	ldrh	r3, [r3, #6]
 800bf10:	001a      	movs	r2, r3
 800bf12:	4b5a      	ldr	r3, [pc, #360]	@ (800c07c <Paint_DrawPoint+0x1c4>)
 800bf14:	0018      	movs	r0, r3
 800bf16:	f7f9 fb95 	bl	8005644 <printf_>
        return;
 800bf1a:	e0a8      	b.n	800c06e <Paint_DrawPoint+0x1b6>
    }

    int16_t XDir_Num, YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND)
 800bf1c:	2320      	movs	r3, #32
 800bf1e:	18fb      	adds	r3, r7, r3
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d161      	bne.n	800bfea <Paint_DrawPoint+0x132>
    {
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800bf26:	230e      	movs	r3, #14
 800bf28:	18fb      	adds	r3, r7, r3
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	801a      	strh	r2, [r3, #0]
 800bf2e:	e051      	b.n	800bfd4 <Paint_DrawPoint+0x11c>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800bf30:	230c      	movs	r3, #12
 800bf32:	18fb      	adds	r3, r7, r3
 800bf34:	2200      	movs	r2, #0
 800bf36:	801a      	strh	r2, [r3, #0]
 800bf38:	e039      	b.n	800bfae <Paint_DrawPoint+0xf6>
            {
                if (Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800bf3a:	1dbb      	adds	r3, r7, #6
 800bf3c:	881a      	ldrh	r2, [r3, #0]
 800bf3e:	200e      	movs	r0, #14
 800bf40:	183b      	adds	r3, r7, r0
 800bf42:	2100      	movs	r1, #0
 800bf44:	5e5b      	ldrsh	r3, [r3, r1]
 800bf46:	18d2      	adds	r2, r2, r3
 800bf48:	1c7b      	adds	r3, r7, #1
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	d438      	bmi.n	800bfc2 <Paint_DrawPoint+0x10a>
 800bf50:	1d3b      	adds	r3, r7, #4
 800bf52:	881a      	ldrh	r2, [r3, #0]
 800bf54:	210c      	movs	r1, #12
 800bf56:	187b      	adds	r3, r7, r1
 800bf58:	2400      	movs	r4, #0
 800bf5a:	5f1b      	ldrsh	r3, [r3, r4]
 800bf5c:	18d2      	adds	r2, r2, r3
 800bf5e:	1c7b      	adds	r3, r7, #1
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	d42d      	bmi.n	800bfc2 <Paint_DrawPoint+0x10a>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800bf66:	183b      	adds	r3, r7, r0
 800bf68:	881a      	ldrh	r2, [r3, #0]
 800bf6a:	1dbb      	adds	r3, r7, #6
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	18d3      	adds	r3, r2, r3
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	1c7b      	adds	r3, r7, #1
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	b298      	uxth	r0, r3
 800bf7c:	000c      	movs	r4, r1
 800bf7e:	187b      	adds	r3, r7, r1
 800bf80:	881a      	ldrh	r2, [r3, #0]
 800bf82:	1d3b      	adds	r3, r7, #4
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	18d3      	adds	r3, r2, r3
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	1c7b      	adds	r3, r7, #1
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	b299      	uxth	r1, r3
 800bf94:	1cbb      	adds	r3, r7, #2
 800bf96:	881b      	ldrh	r3, [r3, #0]
 800bf98:	001a      	movs	r2, r3
 800bf9a:	f7ff fd17 	bl	800b9cc <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800bf9e:	193b      	adds	r3, r7, r4
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	5e9b      	ldrsh	r3, [r3, r2]
 800bfa4:	b29b      	uxth	r3, r3
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	193b      	adds	r3, r7, r4
 800bfac:	801a      	strh	r2, [r3, #0]
 800bfae:	230c      	movs	r3, #12
 800bfb0:	18fb      	adds	r3, r7, r3
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	5e9a      	ldrsh	r2, [r3, r2]
 800bfb6:	1c7b      	adds	r3, r7, #1
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	005b      	lsls	r3, r3, #1
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	dbbb      	blt.n	800bf3a <Paint_DrawPoint+0x82>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++)
 800bfc2:	210e      	movs	r1, #14
 800bfc4:	187b      	adds	r3, r7, r1
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	5e9b      	ldrsh	r3, [r3, r2]
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	3301      	adds	r3, #1
 800bfce:	b29a      	uxth	r2, r3
 800bfd0:	187b      	adds	r3, r7, r1
 800bfd2:	801a      	strh	r2, [r3, #0]
 800bfd4:	230e      	movs	r3, #14
 800bfd6:	18fb      	adds	r3, r7, r3
 800bfd8:	2200      	movs	r2, #0
 800bfda:	5e9a      	ldrsh	r2, [r3, r2]
 800bfdc:	1c7b      	adds	r3, r7, #1
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	dba3      	blt.n	800bf30 <Paint_DrawPoint+0x78>
 800bfe8:	e041      	b.n	800c06e <Paint_DrawPoint+0x1b6>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 800bfea:	230e      	movs	r3, #14
 800bfec:	18fb      	adds	r3, r7, r3
 800bfee:	2200      	movs	r2, #0
 800bff0:	801a      	strh	r2, [r3, #0]
 800bff2:	e034      	b.n	800c05e <Paint_DrawPoint+0x1a6>
        {
            for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++)
 800bff4:	230c      	movs	r3, #12
 800bff6:	18fb      	adds	r3, r7, r3
 800bff8:	2200      	movs	r2, #0
 800bffa:	801a      	strh	r2, [r3, #0]
 800bffc:	e01e      	b.n	800c03c <Paint_DrawPoint+0x184>
            {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800bffe:	230e      	movs	r3, #14
 800c000:	18fb      	adds	r3, r7, r3
 800c002:	881a      	ldrh	r2, [r3, #0]
 800c004:	1dbb      	adds	r3, r7, #6
 800c006:	881b      	ldrh	r3, [r3, #0]
 800c008:	18d3      	adds	r3, r2, r3
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	3b01      	subs	r3, #1
 800c00e:	b298      	uxth	r0, r3
 800c010:	240c      	movs	r4, #12
 800c012:	193b      	adds	r3, r7, r4
 800c014:	881a      	ldrh	r2, [r3, #0]
 800c016:	1d3b      	adds	r3, r7, #4
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	18d3      	adds	r3, r2, r3
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	3b01      	subs	r3, #1
 800c020:	b299      	uxth	r1, r3
 800c022:	1cbb      	adds	r3, r7, #2
 800c024:	881b      	ldrh	r3, [r3, #0]
 800c026:	001a      	movs	r2, r3
 800c028:	f7ff fcd0 	bl	800b9cc <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < Dot_Pixel; YDir_Num++)
 800c02c:	193b      	adds	r3, r7, r4
 800c02e:	2200      	movs	r2, #0
 800c030:	5e9b      	ldrsh	r3, [r3, r2]
 800c032:	b29b      	uxth	r3, r3
 800c034:	3301      	adds	r3, #1
 800c036:	b29a      	uxth	r2, r3
 800c038:	193b      	adds	r3, r7, r4
 800c03a:	801a      	strh	r2, [r3, #0]
 800c03c:	230c      	movs	r3, #12
 800c03e:	18fb      	adds	r3, r7, r3
 800c040:	2200      	movs	r2, #0
 800c042:	5e9a      	ldrsh	r2, [r3, r2]
 800c044:	1c7b      	adds	r3, r7, #1
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	429a      	cmp	r2, r3
 800c04a:	dbd8      	blt.n	800bffe <Paint_DrawPoint+0x146>
        for (XDir_Num = 0; XDir_Num < Dot_Pixel; XDir_Num++)
 800c04c:	210e      	movs	r1, #14
 800c04e:	187b      	adds	r3, r7, r1
 800c050:	2200      	movs	r2, #0
 800c052:	5e9b      	ldrsh	r3, [r3, r2]
 800c054:	b29b      	uxth	r3, r3
 800c056:	3301      	adds	r3, #1
 800c058:	b29a      	uxth	r2, r3
 800c05a:	187b      	adds	r3, r7, r1
 800c05c:	801a      	strh	r2, [r3, #0]
 800c05e:	230e      	movs	r3, #14
 800c060:	18fb      	adds	r3, r7, r3
 800c062:	2200      	movs	r2, #0
 800c064:	5e9a      	ldrsh	r2, [r3, r2]
 800c066:	1c7b      	adds	r3, r7, #1
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	dbc2      	blt.n	800bff4 <Paint_DrawPoint+0x13c>
            }
        }
    }
}
 800c06e:	46bd      	mov	sp, r7
 800c070:	b004      	add	sp, #16
 800c072:	bdb0      	pop	{r4, r5, r7, pc}
 800c074:	2000055c 	.word	0x2000055c
 800c078:	0800fd58 	.word	0x0800fd58
 800c07c:	0800fd7c 	.word	0x0800fd7c

0800c080 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800c080:	b5b0      	push	{r4, r5, r7, lr}
 800c082:	b08c      	sub	sp, #48	@ 0x30
 800c084:	af02      	add	r7, sp, #8
 800c086:	0005      	movs	r5, r0
 800c088:	000c      	movs	r4, r1
 800c08a:	0010      	movs	r0, r2
 800c08c:	0019      	movs	r1, r3
 800c08e:	1dbb      	adds	r3, r7, #6
 800c090:	1c2a      	adds	r2, r5, #0
 800c092:	801a      	strh	r2, [r3, #0]
 800c094:	1d3b      	adds	r3, r7, #4
 800c096:	1c22      	adds	r2, r4, #0
 800c098:	801a      	strh	r2, [r3, #0]
 800c09a:	1cbb      	adds	r3, r7, #2
 800c09c:	1c02      	adds	r2, r0, #0
 800c09e:	801a      	strh	r2, [r3, #0]
 800c0a0:	003b      	movs	r3, r7
 800c0a2:	1c0a      	adds	r2, r1, #0
 800c0a4:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c0a6:	4b63      	ldr	r3, [pc, #396]	@ (800c234 <Paint_DrawLine+0x1b4>)
 800c0a8:	889b      	ldrh	r3, [r3, #4]
 800c0aa:	1dba      	adds	r2, r7, #6
 800c0ac:	8812      	ldrh	r2, [r2, #0]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d900      	bls.n	800c0b4 <Paint_DrawLine+0x34>
 800c0b2:	e0b7      	b.n	800c224 <Paint_DrawLine+0x1a4>
 800c0b4:	4b5f      	ldr	r3, [pc, #380]	@ (800c234 <Paint_DrawLine+0x1b4>)
 800c0b6:	88db      	ldrh	r3, [r3, #6]
 800c0b8:	1d3a      	adds	r2, r7, #4
 800c0ba:	8812      	ldrh	r2, [r2, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d900      	bls.n	800c0c2 <Paint_DrawLine+0x42>
 800c0c0:	e0b0      	b.n	800c224 <Paint_DrawLine+0x1a4>
        Xend > Paint.Width || Yend > Paint.Height)
 800c0c2:	4b5c      	ldr	r3, [pc, #368]	@ (800c234 <Paint_DrawLine+0x1b4>)
 800c0c4:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c0c6:	1cba      	adds	r2, r7, #2
 800c0c8:	8812      	ldrh	r2, [r2, #0]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d900      	bls.n	800c0d0 <Paint_DrawLine+0x50>
 800c0ce:	e0a9      	b.n	800c224 <Paint_DrawLine+0x1a4>
        Xend > Paint.Width || Yend > Paint.Height)
 800c0d0:	4b58      	ldr	r3, [pc, #352]	@ (800c234 <Paint_DrawLine+0x1b4>)
 800c0d2:	88db      	ldrh	r3, [r3, #6]
 800c0d4:	003a      	movs	r2, r7
 800c0d6:	8812      	ldrh	r2, [r2, #0]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d900      	bls.n	800c0de <Paint_DrawLine+0x5e>
 800c0dc:	e0a2      	b.n	800c224 <Paint_DrawLine+0x1a4>
    {
        DE_BUG("Paint_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    UWORD Xpoint = Xstart;
 800c0de:	2326      	movs	r3, #38	@ 0x26
 800c0e0:	18fb      	adds	r3, r7, r3
 800c0e2:	1dba      	adds	r2, r7, #6
 800c0e4:	8812      	ldrh	r2, [r2, #0]
 800c0e6:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800c0e8:	2324      	movs	r3, #36	@ 0x24
 800c0ea:	18fb      	adds	r3, r7, r3
 800c0ec:	1d3a      	adds	r2, r7, #4
 800c0ee:	8812      	ldrh	r2, [r2, #0]
 800c0f0:	801a      	strh	r2, [r3, #0]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800c0f2:	1cbb      	adds	r3, r7, #2
 800c0f4:	881a      	ldrh	r2, [r3, #0]
 800c0f6:	1dbb      	adds	r3, r7, #6
 800c0f8:	881b      	ldrh	r3, [r3, #0]
 800c0fa:	1ad3      	subs	r3, r2, r3
 800c0fc:	17da      	asrs	r2, r3, #31
 800c0fe:	189b      	adds	r3, r3, r2
 800c100:	4053      	eors	r3, r2
 800c102:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800c104:	003b      	movs	r3, r7
 800c106:	881a      	ldrh	r2, [r3, #0]
 800c108:	1d3b      	adds	r3, r7, #4
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	17da      	asrs	r2, r3, #31
 800c110:	189b      	adds	r3, r3, r2
 800c112:	4053      	eors	r3, r2
 800c114:	425b      	negs	r3, r3
 800c116:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800c118:	1dba      	adds	r2, r7, #6
 800c11a:	1cbb      	adds	r3, r7, #2
 800c11c:	8812      	ldrh	r2, [r2, #0]
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	429a      	cmp	r2, r3
 800c122:	d201      	bcs.n	800c128 <Paint_DrawLine+0xa8>
 800c124:	2301      	movs	r3, #1
 800c126:	e001      	b.n	800c12c <Paint_DrawLine+0xac>
 800c128:	2301      	movs	r3, #1
 800c12a:	425b      	negs	r3, r3
 800c12c:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800c12e:	1d3a      	adds	r2, r7, #4
 800c130:	003b      	movs	r3, r7
 800c132:	8812      	ldrh	r2, [r2, #0]
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	d201      	bcs.n	800c13e <Paint_DrawLine+0xbe>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e001      	b.n	800c142 <Paint_DrawLine+0xc2>
 800c13e:	2301      	movs	r3, #1
 800c140:	425b      	negs	r3, r3
 800c142:	60fb      	str	r3, [r7, #12]

    // Cumulative error
    int Esp = dx + dy;
 800c144:	69ba      	ldr	r2, [r7, #24]
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	18d3      	adds	r3, r2, r3
 800c14a:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800c14c:	231f      	movs	r3, #31
 800c14e:	18fb      	adds	r3, r7, r3
 800c150:	2200      	movs	r2, #0
 800c152:	701a      	strb	r2, [r3, #0]

    for (;;)
    {
        Dotted_Len++;
 800c154:	241f      	movs	r4, #31
 800c156:	193b      	adds	r3, r7, r4
 800c158:	781a      	ldrb	r2, [r3, #0]
 800c15a:	193b      	adds	r3, r7, r4
 800c15c:	3201      	adds	r2, #1
 800c15e:	701a      	strb	r2, [r3, #0]
        // Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 800c160:	2340      	movs	r3, #64	@ 0x40
 800c162:	18fb      	adds	r3, r7, r3
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d11c      	bne.n	800c1a4 <Paint_DrawLine+0x124>
 800c16a:	193b      	adds	r3, r7, r4
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	2103      	movs	r1, #3
 800c170:	0018      	movs	r0, r3
 800c172:	f7f4 f86b 	bl	800024c <__aeabi_uidivmod>
 800c176:	000b      	movs	r3, r1
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d112      	bne.n	800c1a4 <Paint_DrawLine+0x124>
        {
            // DE_BUG("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800c17e:	233c      	movs	r3, #60	@ 0x3c
 800c180:	18fb      	adds	r3, r7, r3
 800c182:	781a      	ldrb	r2, [r3, #0]
 800c184:	2324      	movs	r3, #36	@ 0x24
 800c186:	18fb      	adds	r3, r7, r3
 800c188:	8819      	ldrh	r1, [r3, #0]
 800c18a:	2326      	movs	r3, #38	@ 0x26
 800c18c:	18fb      	adds	r3, r7, r3
 800c18e:	8818      	ldrh	r0, [r3, #0]
 800c190:	2301      	movs	r3, #1
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	0013      	movs	r3, r2
 800c196:	22ff      	movs	r2, #255	@ 0xff
 800c198:	f7ff fe8e 	bl	800beb8 <Paint_DrawPoint>
            Dotted_Len = 0;
 800c19c:	193b      	adds	r3, r7, r4
 800c19e:	2200      	movs	r2, #0
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	e010      	b.n	800c1c6 <Paint_DrawLine+0x146>
        }
        else
        {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800c1a4:	233c      	movs	r3, #60	@ 0x3c
 800c1a6:	18fb      	adds	r3, r7, r3
 800c1a8:	781c      	ldrb	r4, [r3, #0]
 800c1aa:	2338      	movs	r3, #56	@ 0x38
 800c1ac:	18fb      	adds	r3, r7, r3
 800c1ae:	881a      	ldrh	r2, [r3, #0]
 800c1b0:	2324      	movs	r3, #36	@ 0x24
 800c1b2:	18fb      	adds	r3, r7, r3
 800c1b4:	8819      	ldrh	r1, [r3, #0]
 800c1b6:	2326      	movs	r3, #38	@ 0x26
 800c1b8:	18fb      	adds	r3, r7, r3
 800c1ba:	8818      	ldrh	r0, [r3, #0]
 800c1bc:	2301      	movs	r3, #1
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	0023      	movs	r3, r4
 800c1c2:	f7ff fe79 	bl	800beb8 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy)
 800c1c6:	6a3b      	ldr	r3, [r7, #32]
 800c1c8:	005b      	lsls	r3, r3, #1
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	dc11      	bgt.n	800c1f4 <Paint_DrawLine+0x174>
        {
            if (Xpoint == Xend)
 800c1d0:	2026      	movs	r0, #38	@ 0x26
 800c1d2:	183a      	adds	r2, r7, r0
 800c1d4:	1cbb      	adds	r3, r7, #2
 800c1d6:	8812      	ldrh	r2, [r2, #0]
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d024      	beq.n	800c228 <Paint_DrawLine+0x1a8>
                break;
            Esp += dy;
 800c1de:	6a3a      	ldr	r2, [r7, #32]
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	18d3      	adds	r3, r2, r3
 800c1e4:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	b299      	uxth	r1, r3
 800c1ea:	183b      	adds	r3, r7, r0
 800c1ec:	183a      	adds	r2, r7, r0
 800c1ee:	8812      	ldrh	r2, [r2, #0]
 800c1f0:	188a      	adds	r2, r1, r2
 800c1f2:	801a      	strh	r2, [r3, #0]
        }
        if (2 * Esp <= dx)
 800c1f4:	6a3b      	ldr	r3, [r7, #32]
 800c1f6:	005b      	lsls	r3, r3, #1
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	dbaa      	blt.n	800c154 <Paint_DrawLine+0xd4>
        {
            if (Ypoint == Yend)
 800c1fe:	2024      	movs	r0, #36	@ 0x24
 800c200:	183a      	adds	r2, r7, r0
 800c202:	003b      	movs	r3, r7
 800c204:	8812      	ldrh	r2, [r2, #0]
 800c206:	881b      	ldrh	r3, [r3, #0]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d00f      	beq.n	800c22c <Paint_DrawLine+0x1ac>
                break;
            Esp += dx;
 800c20c:	6a3a      	ldr	r2, [r7, #32]
 800c20e:	69bb      	ldr	r3, [r7, #24]
 800c210:	18d3      	adds	r3, r2, r3
 800c212:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	b299      	uxth	r1, r3
 800c218:	183b      	adds	r3, r7, r0
 800c21a:	183a      	adds	r2, r7, r0
 800c21c:	8812      	ldrh	r2, [r2, #0]
 800c21e:	188a      	adds	r2, r1, r2
 800c220:	801a      	strh	r2, [r3, #0]
        Dotted_Len++;
 800c222:	e797      	b.n	800c154 <Paint_DrawLine+0xd4>
        return;
 800c224:	46c0      	nop			@ (mov r8, r8)
 800c226:	e002      	b.n	800c22e <Paint_DrawLine+0x1ae>
                break;
 800c228:	46c0      	nop			@ (mov r8, r8)
 800c22a:	e000      	b.n	800c22e <Paint_DrawLine+0x1ae>
                break;
 800c22c:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 800c22e:	46bd      	mov	sp, r7
 800c230:	b00a      	add	sp, #40	@ 0x28
 800c232:	bdb0      	pop	{r4, r5, r7, pc}
 800c234:	2000055c 	.word	0x2000055c

0800c238 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800c238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c23a:	b089      	sub	sp, #36	@ 0x24
 800c23c:	af04      	add	r7, sp, #16
 800c23e:	0005      	movs	r5, r0
 800c240:	000c      	movs	r4, r1
 800c242:	0010      	movs	r0, r2
 800c244:	0019      	movs	r1, r3
 800c246:	1dbb      	adds	r3, r7, #6
 800c248:	1c2a      	adds	r2, r5, #0
 800c24a:	801a      	strh	r2, [r3, #0]
 800c24c:	1d3b      	adds	r3, r7, #4
 800c24e:	1c22      	adds	r2, r4, #0
 800c250:	801a      	strh	r2, [r3, #0]
 800c252:	1cbb      	adds	r3, r7, #2
 800c254:	1c02      	adds	r2, r0, #0
 800c256:	801a      	strh	r2, [r3, #0]
 800c258:	003b      	movs	r3, r7
 800c25a:	1c0a      	adds	r2, r1, #0
 800c25c:	801a      	strh	r2, [r3, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c25e:	4b59      	ldr	r3, [pc, #356]	@ (800c3c4 <Paint_DrawRectangle+0x18c>)
 800c260:	889b      	ldrh	r3, [r3, #4]
 800c262:	1dba      	adds	r2, r7, #6
 800c264:	8812      	ldrh	r2, [r2, #0]
 800c266:	429a      	cmp	r2, r3
 800c268:	d900      	bls.n	800c26c <Paint_DrawRectangle+0x34>
 800c26a:	e0a6      	b.n	800c3ba <Paint_DrawRectangle+0x182>
 800c26c:	4b55      	ldr	r3, [pc, #340]	@ (800c3c4 <Paint_DrawRectangle+0x18c>)
 800c26e:	88db      	ldrh	r3, [r3, #6]
 800c270:	1d3a      	adds	r2, r7, #4
 800c272:	8812      	ldrh	r2, [r2, #0]
 800c274:	429a      	cmp	r2, r3
 800c276:	d900      	bls.n	800c27a <Paint_DrawRectangle+0x42>
 800c278:	e09f      	b.n	800c3ba <Paint_DrawRectangle+0x182>
        Xend > Paint.Width || Yend > Paint.Height)
 800c27a:	4b52      	ldr	r3, [pc, #328]	@ (800c3c4 <Paint_DrawRectangle+0x18c>)
 800c27c:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800c27e:	1cba      	adds	r2, r7, #2
 800c280:	8812      	ldrh	r2, [r2, #0]
 800c282:	429a      	cmp	r2, r3
 800c284:	d900      	bls.n	800c288 <Paint_DrawRectangle+0x50>
 800c286:	e098      	b.n	800c3ba <Paint_DrawRectangle+0x182>
        Xend > Paint.Width || Yend > Paint.Height)
 800c288:	4b4e      	ldr	r3, [pc, #312]	@ (800c3c4 <Paint_DrawRectangle+0x18c>)
 800c28a:	88db      	ldrh	r3, [r3, #6]
 800c28c:	003a      	movs	r2, r7
 800c28e:	8812      	ldrh	r2, [r2, #0]
 800c290:	429a      	cmp	r2, r3
 800c292:	d900      	bls.n	800c296 <Paint_DrawRectangle+0x5e>
 800c294:	e091      	b.n	800c3ba <Paint_DrawRectangle+0x182>
    {
        DE_BUG("Input exceeds the normal display range\r\n");
        return;
    }

    if (Draw_Fill)
 800c296:	2328      	movs	r3, #40	@ 0x28
 800c298:	2208      	movs	r2, #8
 800c29a:	189b      	adds	r3, r3, r2
 800c29c:	19db      	adds	r3, r3, r7
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d02b      	beq.n	800c2fc <Paint_DrawRectangle+0xc4>
    {
        UWORD Ypoint;
        for (Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800c2a4:	230e      	movs	r3, #14
 800c2a6:	18fb      	adds	r3, r7, r3
 800c2a8:	1d3a      	adds	r2, r7, #4
 800c2aa:	8812      	ldrh	r2, [r2, #0]
 800c2ac:	801a      	strh	r2, [r3, #0]
 800c2ae:	e01d      	b.n	800c2ec <Paint_DrawRectangle+0xb4>
        {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color, Line_width, LINE_STYLE_SOLID);
 800c2b0:	250e      	movs	r5, #14
 800c2b2:	197b      	adds	r3, r7, r5
 800c2b4:	881c      	ldrh	r4, [r3, #0]
 800c2b6:	1cbb      	adds	r3, r7, #2
 800c2b8:	881a      	ldrh	r2, [r3, #0]
 800c2ba:	197b      	adds	r3, r7, r5
 800c2bc:	8819      	ldrh	r1, [r3, #0]
 800c2be:	1dbb      	adds	r3, r7, #6
 800c2c0:	8818      	ldrh	r0, [r3, #0]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	9302      	str	r3, [sp, #8]
 800c2c6:	2324      	movs	r3, #36	@ 0x24
 800c2c8:	2608      	movs	r6, #8
 800c2ca:	199b      	adds	r3, r3, r6
 800c2cc:	19db      	adds	r3, r3, r7
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	9301      	str	r3, [sp, #4]
 800c2d2:	2320      	movs	r3, #32
 800c2d4:	199b      	adds	r3, r3, r6
 800c2d6:	19db      	adds	r3, r3, r7
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	0023      	movs	r3, r4
 800c2de:	f7ff fecf 	bl	800c080 <Paint_DrawLine>
        for (Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800c2e2:	197b      	adds	r3, r7, r5
 800c2e4:	881a      	ldrh	r2, [r3, #0]
 800c2e6:	197b      	adds	r3, r7, r5
 800c2e8:	3201      	adds	r2, #1
 800c2ea:	801a      	strh	r2, [r3, #0]
 800c2ec:	230e      	movs	r3, #14
 800c2ee:	18fa      	adds	r2, r7, r3
 800c2f0:	003b      	movs	r3, r7
 800c2f2:	8812      	ldrh	r2, [r2, #0]
 800c2f4:	881b      	ldrh	r3, [r3, #0]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d3da      	bcc.n	800c2b0 <Paint_DrawRectangle+0x78>
 800c2fa:	e05f      	b.n	800c3bc <Paint_DrawRectangle+0x184>
        }
    }
    else
    {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800c2fc:	1d3b      	adds	r3, r7, #4
 800c2fe:	881c      	ldrh	r4, [r3, #0]
 800c300:	1cbb      	adds	r3, r7, #2
 800c302:	881a      	ldrh	r2, [r3, #0]
 800c304:	1d3b      	adds	r3, r7, #4
 800c306:	8819      	ldrh	r1, [r3, #0]
 800c308:	1dbb      	adds	r3, r7, #6
 800c30a:	8818      	ldrh	r0, [r3, #0]
 800c30c:	2300      	movs	r3, #0
 800c30e:	9302      	str	r3, [sp, #8]
 800c310:	2524      	movs	r5, #36	@ 0x24
 800c312:	2308      	movs	r3, #8
 800c314:	18ee      	adds	r6, r5, r3
 800c316:	19f3      	adds	r3, r6, r7
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	9301      	str	r3, [sp, #4]
 800c31c:	2620      	movs	r6, #32
 800c31e:	2308      	movs	r3, #8
 800c320:	18f3      	adds	r3, r6, r3
 800c322:	19db      	adds	r3, r3, r7
 800c324:	881b      	ldrh	r3, [r3, #0]
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	0023      	movs	r3, r4
 800c32a:	f7ff fea9 	bl	800c080 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800c32e:	003b      	movs	r3, r7
 800c330:	881c      	ldrh	r4, [r3, #0]
 800c332:	1dbb      	adds	r3, r7, #6
 800c334:	881a      	ldrh	r2, [r3, #0]
 800c336:	1d3b      	adds	r3, r7, #4
 800c338:	8819      	ldrh	r1, [r3, #0]
 800c33a:	1dbb      	adds	r3, r7, #6
 800c33c:	8818      	ldrh	r0, [r3, #0]
 800c33e:	2300      	movs	r3, #0
 800c340:	9302      	str	r3, [sp, #8]
 800c342:	2308      	movs	r3, #8
 800c344:	18eb      	adds	r3, r5, r3
 800c346:	19db      	adds	r3, r3, r7
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	9301      	str	r3, [sp, #4]
 800c34c:	2308      	movs	r3, #8
 800c34e:	18f3      	adds	r3, r6, r3
 800c350:	19db      	adds	r3, r3, r7
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	0023      	movs	r3, r4
 800c358:	f7ff fe92 	bl	800c080 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800c35c:	1d3b      	adds	r3, r7, #4
 800c35e:	881c      	ldrh	r4, [r3, #0]
 800c360:	1cbb      	adds	r3, r7, #2
 800c362:	881a      	ldrh	r2, [r3, #0]
 800c364:	003b      	movs	r3, r7
 800c366:	8819      	ldrh	r1, [r3, #0]
 800c368:	1cbb      	adds	r3, r7, #2
 800c36a:	8818      	ldrh	r0, [r3, #0]
 800c36c:	2300      	movs	r3, #0
 800c36e:	9302      	str	r3, [sp, #8]
 800c370:	2308      	movs	r3, #8
 800c372:	18eb      	adds	r3, r5, r3
 800c374:	19db      	adds	r3, r3, r7
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	9301      	str	r3, [sp, #4]
 800c37a:	2308      	movs	r3, #8
 800c37c:	18f3      	adds	r3, r6, r3
 800c37e:	19db      	adds	r3, r3, r7
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	0023      	movs	r3, r4
 800c386:	f7ff fe7b 	bl	800c080 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800c38a:	003b      	movs	r3, r7
 800c38c:	881c      	ldrh	r4, [r3, #0]
 800c38e:	1dbb      	adds	r3, r7, #6
 800c390:	881a      	ldrh	r2, [r3, #0]
 800c392:	003b      	movs	r3, r7
 800c394:	8819      	ldrh	r1, [r3, #0]
 800c396:	1cbb      	adds	r3, r7, #2
 800c398:	8818      	ldrh	r0, [r3, #0]
 800c39a:	2300      	movs	r3, #0
 800c39c:	9302      	str	r3, [sp, #8]
 800c39e:	2308      	movs	r3, #8
 800c3a0:	18ed      	adds	r5, r5, r3
 800c3a2:	19eb      	adds	r3, r5, r7
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	2308      	movs	r3, #8
 800c3aa:	18f3      	adds	r3, r6, r3
 800c3ac:	19db      	adds	r3, r3, r7
 800c3ae:	881b      	ldrh	r3, [r3, #0]
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	0023      	movs	r3, r4
 800c3b4:	f7ff fe64 	bl	800c080 <Paint_DrawLine>
 800c3b8:	e000      	b.n	800c3bc <Paint_DrawRectangle+0x184>
        return;
 800c3ba:	46c0      	nop			@ (mov r8, r8)
    }
}
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	b005      	add	sp, #20
 800c3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3c2:	46c0      	nop			@ (mov r8, r8)
 800c3c4:	2000055c 	.word	0x2000055c

0800c3c8 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    tFont *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800c3c8:	b5b0      	push	{r4, r5, r7, lr}
 800c3ca:	b088      	sub	sp, #32
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	0004      	movs	r4, r0
 800c3d0:	0008      	movs	r0, r1
 800c3d2:	0011      	movs	r1, r2
 800c3d4:	607b      	str	r3, [r7, #4]
 800c3d6:	250e      	movs	r5, #14
 800c3d8:	197b      	adds	r3, r7, r5
 800c3da:	1c22      	adds	r2, r4, #0
 800c3dc:	801a      	strh	r2, [r3, #0]
 800c3de:	240c      	movs	r4, #12
 800c3e0:	193b      	adds	r3, r7, r4
 800c3e2:	1c02      	adds	r2, r0, #0
 800c3e4:	801a      	strh	r2, [r3, #0]
 800c3e6:	200b      	movs	r0, #11
 800c3e8:	183b      	adds	r3, r7, r0
 800c3ea:	1c0a      	adds	r2, r1, #0
 800c3ec:	701a      	strb	r2, [r3, #0]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800c3ee:	4b67      	ldr	r3, [pc, #412]	@ (800c58c <Paint_DrawChar+0x1c4>)
 800c3f0:	889b      	ldrh	r3, [r3, #4]
 800c3f2:	197a      	adds	r2, r7, r5
 800c3f4:	8812      	ldrh	r2, [r2, #0]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d900      	bls.n	800c3fc <Paint_DrawChar+0x34>
 800c3fa:	e0c2      	b.n	800c582 <Paint_DrawChar+0x1ba>
 800c3fc:	4b63      	ldr	r3, [pc, #396]	@ (800c58c <Paint_DrawChar+0x1c4>)
 800c3fe:	88db      	ldrh	r3, [r3, #6]
 800c400:	193a      	adds	r2, r7, r4
 800c402:	8812      	ldrh	r2, [r2, #0]
 800c404:	429a      	cmp	r2, r3
 800c406:	d900      	bls.n	800c40a <Paint_DrawChar+0x42>
 800c408:	e0bb      	b.n	800c582 <Paint_DrawChar+0x1ba>
    {
        DE_BUG("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }
    uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	183b      	adds	r3, r7, r0
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	495f      	ldr	r1, [pc, #380]	@ (800c590 <Paint_DrawChar+0x1c8>)
 800c414:	468c      	mov	ip, r1
 800c416:	4463      	add	r3, ip
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	18d3      	adds	r3, r2, r3
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	889b      	ldrh	r3, [r3, #4]
 800c420:	617b      	str	r3, [r7, #20]
    uint32_t font_Height = (*Font).chars[Acsii_Char - ' '].image->height;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	183b      	adds	r3, r7, r0
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	4959      	ldr	r1, [pc, #356]	@ (800c590 <Paint_DrawChar+0x1c8>)
 800c42c:	468c      	mov	ip, r1
 800c42e:	4463      	add	r3, ip
 800c430:	00db      	lsls	r3, r3, #3
 800c432:	18d3      	adds	r3, r2, r3
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	88db      	ldrh	r3, [r3, #6]
 800c438:	613b      	str	r3, [r7, #16]

    //   uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
    const unsigned char *ptr = (*Font).chars[Acsii_Char - ' '].image->data;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	685a      	ldr	r2, [r3, #4]
 800c43e:	183b      	adds	r3, r7, r0
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	4953      	ldr	r1, [pc, #332]	@ (800c590 <Paint_DrawChar+0x1c8>)
 800c444:	468c      	mov	ip, r1
 800c446:	4463      	add	r3, ip
 800c448:	00db      	lsls	r3, r3, #3
 800c44a:	18d3      	adds	r3, r2, r3
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < font_Height; Page++)
 800c452:	231e      	movs	r3, #30
 800c454:	18fb      	adds	r3, r7, r3
 800c456:	2200      	movs	r2, #0
 800c458:	801a      	strh	r2, [r3, #0]
 800c45a:	e08a      	b.n	800c572 <Paint_DrawChar+0x1aa>
    {
        for (Column = 0; Column < font_Width; Column++)
 800c45c:	231c      	movs	r3, #28
 800c45e:	18fb      	adds	r3, r7, r3
 800c460:	2200      	movs	r2, #0
 800c462:	801a      	strh	r2, [r3, #0]
 800c464:	e071      	b.n	800c54a <Paint_DrawChar+0x182>
        {

            // To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background)
 800c466:	2334      	movs	r3, #52	@ 0x34
 800c468:	18fb      	adds	r3, r7, r3
 800c46a:	881b      	ldrh	r3, [r3, #0]
 800c46c:	2bff      	cmp	r3, #255	@ 0xff
 800c46e:	d122      	bne.n	800c4b6 <Paint_DrawChar+0xee>
            { // this process is to speed up the scan
                if (*ptr & (0x80 >> (Column % 8)))
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	0019      	movs	r1, r3
 800c476:	201c      	movs	r0, #28
 800c478:	183b      	adds	r3, r7, r0
 800c47a:	881b      	ldrh	r3, [r3, #0]
 800c47c:	2207      	movs	r2, #7
 800c47e:	4013      	ands	r3, r2
 800c480:	2280      	movs	r2, #128	@ 0x80
 800c482:	411a      	asrs	r2, r3
 800c484:	0013      	movs	r3, r2
 800c486:	400b      	ands	r3, r1
 800c488:	d04e      	beq.n	800c528 <Paint_DrawChar+0x160>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800c48a:	230e      	movs	r3, #14
 800c48c:	18fa      	adds	r2, r7, r3
 800c48e:	183b      	adds	r3, r7, r0
 800c490:	8812      	ldrh	r2, [r2, #0]
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	18d3      	adds	r3, r2, r3
 800c496:	b298      	uxth	r0, r3
 800c498:	230c      	movs	r3, #12
 800c49a:	18fa      	adds	r2, r7, r3
 800c49c:	231e      	movs	r3, #30
 800c49e:	18fb      	adds	r3, r7, r3
 800c4a0:	8812      	ldrh	r2, [r2, #0]
 800c4a2:	881b      	ldrh	r3, [r3, #0]
 800c4a4:	18d3      	adds	r3, r2, r3
 800c4a6:	b299      	uxth	r1, r3
 800c4a8:	2330      	movs	r3, #48	@ 0x30
 800c4aa:	18fb      	adds	r3, r7, r3
 800c4ac:	881b      	ldrh	r3, [r3, #0]
 800c4ae:	001a      	movs	r2, r3
 800c4b0:	f7ff fa8c 	bl	800b9cc <Paint_SetPixel>
 800c4b4:	e038      	b.n	800c528 <Paint_DrawChar+0x160>
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	0019      	movs	r1, r3
 800c4bc:	201c      	movs	r0, #28
 800c4be:	183b      	adds	r3, r7, r0
 800c4c0:	881b      	ldrh	r3, [r3, #0]
 800c4c2:	2207      	movs	r2, #7
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	2280      	movs	r2, #128	@ 0x80
 800c4c8:	411a      	asrs	r2, r3
 800c4ca:	0013      	movs	r3, r2
 800c4cc:	400b      	ands	r3, r1
 800c4ce:	d015      	beq.n	800c4fc <Paint_DrawChar+0x134>
                {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800c4d0:	230e      	movs	r3, #14
 800c4d2:	18fa      	adds	r2, r7, r3
 800c4d4:	183b      	adds	r3, r7, r0
 800c4d6:	8812      	ldrh	r2, [r2, #0]
 800c4d8:	881b      	ldrh	r3, [r3, #0]
 800c4da:	18d3      	adds	r3, r2, r3
 800c4dc:	b298      	uxth	r0, r3
 800c4de:	230c      	movs	r3, #12
 800c4e0:	18fa      	adds	r2, r7, r3
 800c4e2:	231e      	movs	r3, #30
 800c4e4:	18fb      	adds	r3, r7, r3
 800c4e6:	8812      	ldrh	r2, [r2, #0]
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	18d3      	adds	r3, r2, r3
 800c4ec:	b299      	uxth	r1, r3
 800c4ee:	2330      	movs	r3, #48	@ 0x30
 800c4f0:	18fb      	adds	r3, r7, r3
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	001a      	movs	r2, r3
 800c4f6:	f7ff fa69 	bl	800b9cc <Paint_SetPixel>
 800c4fa:	e015      	b.n	800c528 <Paint_DrawChar+0x160>
                }
                else
                {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800c4fc:	230e      	movs	r3, #14
 800c4fe:	18fa      	adds	r2, r7, r3
 800c500:	231c      	movs	r3, #28
 800c502:	18fb      	adds	r3, r7, r3
 800c504:	8812      	ldrh	r2, [r2, #0]
 800c506:	881b      	ldrh	r3, [r3, #0]
 800c508:	18d3      	adds	r3, r2, r3
 800c50a:	b298      	uxth	r0, r3
 800c50c:	230c      	movs	r3, #12
 800c50e:	18fa      	adds	r2, r7, r3
 800c510:	231e      	movs	r3, #30
 800c512:	18fb      	adds	r3, r7, r3
 800c514:	8812      	ldrh	r2, [r2, #0]
 800c516:	881b      	ldrh	r3, [r3, #0]
 800c518:	18d3      	adds	r3, r2, r3
 800c51a:	b299      	uxth	r1, r3
 800c51c:	2334      	movs	r3, #52	@ 0x34
 800c51e:	18fb      	adds	r3, r7, r3
 800c520:	881b      	ldrh	r3, [r3, #0]
 800c522:	001a      	movs	r2, r3
 800c524:	f7ff fa52 	bl	800b9cc <Paint_SetPixel>
                }
            }
            // One pixel is 8 bits
            if (Column % 8 == 7)
 800c528:	231c      	movs	r3, #28
 800c52a:	18fb      	adds	r3, r7, r3
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	2207      	movs	r2, #7
 800c530:	4013      	ands	r3, r2
 800c532:	b29b      	uxth	r3, r3
 800c534:	2b07      	cmp	r3, #7
 800c536:	d102      	bne.n	800c53e <Paint_DrawChar+0x176>
                ptr++;
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	3301      	adds	r3, #1
 800c53c:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < font_Width; Column++)
 800c53e:	211c      	movs	r1, #28
 800c540:	187b      	adds	r3, r7, r1
 800c542:	881a      	ldrh	r2, [r3, #0]
 800c544:	187b      	adds	r3, r7, r1
 800c546:	3201      	adds	r2, #1
 800c548:	801a      	strh	r2, [r3, #0]
 800c54a:	231c      	movs	r3, #28
 800c54c:	18fb      	adds	r3, r7, r3
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	429a      	cmp	r2, r3
 800c554:	d900      	bls.n	800c558 <Paint_DrawChar+0x190>
 800c556:	e786      	b.n	800c466 <Paint_DrawChar+0x9e>
        } // Write a line
        if (font_Width % 8 != 0)
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	2207      	movs	r2, #7
 800c55c:	4013      	ands	r3, r2
 800c55e:	d002      	beq.n	800c566 <Paint_DrawChar+0x19e>
            ptr++;
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	3301      	adds	r3, #1
 800c564:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < font_Height; Page++)
 800c566:	211e      	movs	r1, #30
 800c568:	187b      	adds	r3, r7, r1
 800c56a:	881a      	ldrh	r2, [r3, #0]
 800c56c:	187b      	adds	r3, r7, r1
 800c56e:	3201      	adds	r2, #1
 800c570:	801a      	strh	r2, [r3, #0]
 800c572:	231e      	movs	r3, #30
 800c574:	18fb      	adds	r3, r7, r3
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d900      	bls.n	800c580 <Paint_DrawChar+0x1b8>
 800c57e:	e76d      	b.n	800c45c <Paint_DrawChar+0x94>
 800c580:	e000      	b.n	800c584 <Paint_DrawChar+0x1bc>
        return;
 800c582:	46c0      	nop			@ (mov r8, r8)
    } // Write all
}
 800c584:	46bd      	mov	sp, r7
 800c586:	b008      	add	sp, #32
 800c588:	bdb0      	pop	{r4, r5, r7, pc}
 800c58a:	46c0      	nop			@ (mov r8, r8)
 800c58c:	2000055c 	.word	0x2000055c
 800c590:	1fffffe0 	.word	0x1fffffe0

0800c594 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char *pString,
                         tFont *Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800c594:	b5b0      	push	{r4, r5, r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af02      	add	r7, sp, #8
 800c59a:	60ba      	str	r2, [r7, #8]
 800c59c:	607b      	str	r3, [r7, #4]
 800c59e:	240e      	movs	r4, #14
 800c5a0:	193b      	adds	r3, r7, r4
 800c5a2:	1c02      	adds	r2, r0, #0
 800c5a4:	801a      	strh	r2, [r3, #0]
 800c5a6:	200c      	movs	r0, #12
 800c5a8:	183b      	adds	r3, r7, r0
 800c5aa:	1c0a      	adds	r2, r1, #0
 800c5ac:	801a      	strh	r2, [r3, #0]
    UWORD Xpoint = Xstart;
 800c5ae:	2316      	movs	r3, #22
 800c5b0:	18fb      	adds	r3, r7, r3
 800c5b2:	0021      	movs	r1, r4
 800c5b4:	187a      	adds	r2, r7, r1
 800c5b6:	8812      	ldrh	r2, [r2, #0]
 800c5b8:	801a      	strh	r2, [r3, #0]
    UWORD Ypoint = Ystart;
 800c5ba:	2314      	movs	r3, #20
 800c5bc:	18fb      	adds	r3, r7, r3
 800c5be:	183a      	adds	r2, r7, r0
 800c5c0:	8812      	ldrh	r2, [r2, #0]
 800c5c2:	801a      	strh	r2, [r3, #0]
    //			uint32_t font_Width = (*Font).chars[Acsii_Char - ' '].image->width;
    //		uint32_t font_Height = (*Font).chars[Acsii_Char - ' ' ].image->height;

    if (Xstart > Paint.Width || Ystart > Paint.Height)
 800c5c4:	4b1f      	ldr	r3, [pc, #124]	@ (800c644 <Paint_DrawString_EN+0xb0>)
 800c5c6:	889b      	ldrh	r3, [r3, #4]
 800c5c8:	187a      	adds	r2, r7, r1
 800c5ca:	8812      	ldrh	r2, [r2, #0]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d835      	bhi.n	800c63c <Paint_DrawString_EN+0xa8>
 800c5d0:	4b1c      	ldr	r3, [pc, #112]	@ (800c644 <Paint_DrawString_EN+0xb0>)
 800c5d2:	88db      	ldrh	r3, [r3, #6]
 800c5d4:	183a      	adds	r2, r7, r0
 800c5d6:	8812      	ldrh	r2, [r2, #0]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d82f      	bhi.n	800c63c <Paint_DrawString_EN+0xa8>
    {
        DE_BUG("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (*pString != '\0')
 800c5dc:	e029      	b.n	800c632 <Paint_DrawString_EN+0x9e>
        //        // If the Y direction is full, reposition to(Xstart, Ystart)
        //        if ((Ypoint  + Font->Height ) > Paint.Height ) {
        //            Xpoint = Xstart;
        //            Ypoint = Ystart;
        //        }
        Paint_DrawChar(Xpoint, Ypoint, *pString, Font, Color_Background, Color_Foreground);
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	781a      	ldrb	r2, [r3, #0]
 800c5e2:	687c      	ldr	r4, [r7, #4]
 800c5e4:	2314      	movs	r3, #20
 800c5e6:	18fb      	adds	r3, r7, r3
 800c5e8:	8819      	ldrh	r1, [r3, #0]
 800c5ea:	2516      	movs	r5, #22
 800c5ec:	197b      	adds	r3, r7, r5
 800c5ee:	8818      	ldrh	r0, [r3, #0]
 800c5f0:	2328      	movs	r3, #40	@ 0x28
 800c5f2:	18fb      	adds	r3, r7, r3
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	232c      	movs	r3, #44	@ 0x2c
 800c5fa:	18fb      	adds	r3, r7, r3
 800c5fc:	881b      	ldrh	r3, [r3, #0]
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	0023      	movs	r3, r4
 800c602:	f7ff fee1 	bl	800c3c8 <Paint_DrawChar>

        // The next character of the address

        uint32_t font_Width = (*Font).chars[*pString - ' '].image->width;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	685a      	ldr	r2, [r3, #4]
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	490e      	ldr	r1, [pc, #56]	@ (800c648 <Paint_DrawString_EN+0xb4>)
 800c610:	468c      	mov	ip, r1
 800c612:	4463      	add	r3, ip
 800c614:	00db      	lsls	r3, r3, #3
 800c616:	18d3      	adds	r3, r2, r3
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	889b      	ldrh	r3, [r3, #4]
 800c61c:	613b      	str	r3, [r7, #16]
        // The next word of the abscissa increases the font of the broadband
        Xpoint += font_Width;
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	b299      	uxth	r1, r3
 800c622:	197b      	adds	r3, r7, r5
 800c624:	197a      	adds	r2, r7, r5
 800c626:	8812      	ldrh	r2, [r2, #0]
 800c628:	188a      	adds	r2, r1, r2
 800c62a:	801a      	strh	r2, [r3, #0]
        pString++;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	3301      	adds	r3, #1
 800c630:	60bb      	str	r3, [r7, #8]
    while (*pString != '\0')
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1d1      	bne.n	800c5de <Paint_DrawString_EN+0x4a>
 800c63a:	e000      	b.n	800c63e <Paint_DrawString_EN+0xaa>
        return;
 800c63c:	46c0      	nop			@ (mov r8, r8)
    }
}
 800c63e:	46bd      	mov	sp, r7
 800c640:	b006      	add	sp, #24
 800c642:	bdb0      	pop	{r4, r5, r7, pc}
 800c644:	2000055c 	.word	0x2000055c
 800c648:	1fffffe0 	.word	0x1fffffe0

0800c64c <LL_RTC_TIME_GetHour>:
  *         RTC_TR           HU            LL_RTC_TIME_GetHour
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x12 or between Min_Data=0x00 and Max_Data=0x23
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetHour(RTC_TypeDef *RTCx)
{
 800c64c:	b590      	push	{r4, r7, lr}
 800c64e:	b083      	sub	sp, #12
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_HT | RTC_TR_HU));
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	23fc      	movs	r3, #252	@ 0xfc
 800c65a:	039b      	lsls	r3, r3, #14
 800c65c:	401a      	ands	r2, r3
 800c65e:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_TR_HT) >> RTC_TR_HT_Pos) << 4U) | ((temp & RTC_TR_HU) >> RTC_TR_HU_Pos));
 800c660:	0d23      	lsrs	r3, r4, #20
 800c662:	011b      	lsls	r3, r3, #4
 800c664:	2230      	movs	r2, #48	@ 0x30
 800c666:	401a      	ands	r2, r3
 800c668:	0c23      	lsrs	r3, r4, #16
 800c66a:	210f      	movs	r1, #15
 800c66c:	400b      	ands	r3, r1
 800c66e:	4313      	orrs	r3, r2
}
 800c670:	0018      	movs	r0, r3
 800c672:	46bd      	mov	sp, r7
 800c674:	b003      	add	sp, #12
 800c676:	bd90      	pop	{r4, r7, pc}

0800c678 <LL_RTC_TIME_GetMinute>:
  *         RTC_TR           MNU           LL_RTC_TIME_GetMinute
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetMinute(RTC_TypeDef *RTCx)
{
 800c678:	b590      	push	{r4, r7, lr}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_MNT | RTC_TR_MNU));
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	23fe      	movs	r3, #254	@ 0xfe
 800c686:	01db      	lsls	r3, r3, #7
 800c688:	401a      	ands	r2, r3
 800c68a:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_TR_MNT) >> RTC_TR_MNT_Pos) << 4U) | ((temp & RTC_TR_MNU) >> RTC_TR_MNU_Pos));
 800c68c:	0b23      	lsrs	r3, r4, #12
 800c68e:	011b      	lsls	r3, r3, #4
 800c690:	2270      	movs	r2, #112	@ 0x70
 800c692:	401a      	ands	r2, r3
 800c694:	0a23      	lsrs	r3, r4, #8
 800c696:	210f      	movs	r1, #15
 800c698:	400b      	ands	r3, r1
 800c69a:	4313      	orrs	r3, r2
}
 800c69c:	0018      	movs	r0, r3
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	b003      	add	sp, #12
 800c6a2:	bd90      	pop	{r4, r7, pc}

0800c6a4 <LL_RTC_TIME_GetSecond>:
  *         RTC_TR           SU            LL_RTC_TIME_GetSecond
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x59
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
{
 800c6a4:	b590      	push	{r4, r7, lr}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->TR, (RTC_TR_ST | RTC_TR_SU));
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	227f      	movs	r2, #127	@ 0x7f
 800c6b2:	4013      	ands	r3, r2
 800c6b4:	001c      	movs	r4, r3
  return (uint32_t)((((temp & RTC_TR_ST) >> RTC_TR_ST_Pos) << 4U) | ((temp & RTC_TR_SU) >> RTC_TR_SU_Pos));
 800c6b6:	237f      	movs	r3, #127	@ 0x7f
 800c6b8:	4023      	ands	r3, r4
}
 800c6ba:	0018      	movs	r0, r3
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	b003      	add	sp, #12
 800c6c0:	bd90      	pop	{r4, r7, pc}

0800c6c2 <LL_RTC_DATE_GetYear>:
  *         RTC_DR           YU            LL_RTC_DATE_GetYear
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x99
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetYear(RTC_TypeDef *RTCx)
{
 800c6c2:	b590      	push	{r4, r7, lr}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_YT | RTC_DR_YU));
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	23ff      	movs	r3, #255	@ 0xff
 800c6d0:	041b      	lsls	r3, r3, #16
 800c6d2:	401a      	ands	r2, r3
 800c6d4:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_DR_YT) >> RTC_DR_YT_Pos) << 4U) | ((temp & RTC_DR_YU) >> RTC_DR_YU_Pos));
 800c6d6:	0d23      	lsrs	r3, r4, #20
 800c6d8:	011b      	lsls	r3, r3, #4
 800c6da:	22ff      	movs	r2, #255	@ 0xff
 800c6dc:	401a      	ands	r2, r3
 800c6de:	0c23      	lsrs	r3, r4, #16
 800c6e0:	210f      	movs	r1, #15
 800c6e2:	400b      	ands	r3, r1
 800c6e4:	4313      	orrs	r3, r2
}
 800c6e6:	0018      	movs	r0, r3
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	b003      	add	sp, #12
 800c6ec:	bd90      	pop	{r4, r7, pc}

0800c6ee <LL_RTC_DATE_GetMonth>:
  *         @arg @ref LL_RTC_MONTH_OCTOBER
  *         @arg @ref LL_RTC_MONTH_NOVEMBER
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetMonth(RTC_TypeDef *RTCx)
{
 800c6ee:	b590      	push	{r4, r7, lr}
 800c6f0:	b083      	sub	sp, #12
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_MT | RTC_DR_MU));
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	685a      	ldr	r2, [r3, #4]
 800c6fa:	23f8      	movs	r3, #248	@ 0xf8
 800c6fc:	015b      	lsls	r3, r3, #5
 800c6fe:	401a      	ands	r2, r3
 800c700:	0014      	movs	r4, r2
  return (uint32_t)((((temp & RTC_DR_MT) >> RTC_DR_MT_Pos) << 4U) | ((temp & RTC_DR_MU) >> RTC_DR_MU_Pos));
 800c702:	0b23      	lsrs	r3, r4, #12
 800c704:	011b      	lsls	r3, r3, #4
 800c706:	2210      	movs	r2, #16
 800c708:	401a      	ands	r2, r3
 800c70a:	0a23      	lsrs	r3, r4, #8
 800c70c:	210f      	movs	r1, #15
 800c70e:	400b      	ands	r3, r1
 800c710:	4313      	orrs	r3, r2
}
 800c712:	0018      	movs	r0, r3
 800c714:	46bd      	mov	sp, r7
 800c716:	b003      	add	sp, #12
 800c718:	bd90      	pop	{r4, r7, pc}

0800c71a <LL_RTC_DATE_GetDay>:
  *         RTC_DR           DU            LL_RTC_DATE_GetDay
  * @param  RTCx RTC Instance
  * @retval Value between Min_Data=0x01 and Max_Data=0x31
  */
__STATIC_INLINE uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
 800c71a:	b590      	push	{r4, r7, lr}
 800c71c:	b083      	sub	sp, #12
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
  register uint32_t temp = 0U;

  temp = READ_BIT(RTCx->DR, (RTC_DR_DT | RTC_DR_DU));
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	223f      	movs	r2, #63	@ 0x3f
 800c728:	4013      	ands	r3, r2
 800c72a:	001c      	movs	r4, r3
  return (uint32_t)((((temp & RTC_DR_DT) >> RTC_DR_DT_Pos) << 4U) | ((temp & RTC_DR_DU) >> RTC_DR_DU_Pos));
 800c72c:	233f      	movs	r3, #63	@ 0x3f
 800c72e:	4023      	ands	r3, r4
}
 800c730:	0018      	movs	r0, r3
 800c732:	46bd      	mov	sp, r7
 800c734:	b003      	add	sp, #12
 800c736:	bd90      	pop	{r4, r7, pc}

0800c738 <battery_out>:
static const struct X0_Y0 big_0 = {67, 30};		//	Big 1
static const struct X0_Y0 small_0 = {142,46};		//	Small 0

// *************************************************************************************

void battery_out(uint16_t bat){  // Battery voltage out  X.Y
 800c738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af02      	add	r7, sp, #8
 800c73e:	0002      	movs	r2, r0
 800c740:	1dbb      	adds	r3, r7, #6
 800c742:	801a      	strh	r2, [r3, #0]
	
	printf("**  Vbat out\n");
 800c744:	4b2d      	ldr	r3, [pc, #180]	@ (800c7fc <battery_out+0xc4>)
 800c746:	0018      	movs	r0, r3
 800c748:	f7f8 ff7c 	bl	8005644 <printf_>
	uint8_t x = 3;
 800c74c:	250f      	movs	r5, #15
 800c74e:	197b      	adds	r3, r7, r5
 800c750:	2203      	movs	r2, #3
 800c752:	701a      	strb	r2, [r3, #0]
	uint8_t y = 160;
 800c754:	260e      	movs	r6, #14
 800c756:	19bb      	adds	r3, r7, r6
 800c758:	22a0      	movs	r2, #160	@ 0xa0
 800c75a:	701a      	strb	r2, [r3, #0]
//	const uint16_t Ubat_min = 220;				// Battery min voltage 2.2 V (display).
	
	sprintf(str_array, "%2d", bat);
 800c75c:	1dbb      	adds	r3, r7, #6
 800c75e:	881a      	ldrh	r2, [r3, #0]
 800c760:	4927      	ldr	r1, [pc, #156]	@ (800c800 <battery_out+0xc8>)
 800c762:	4b28      	ldr	r3, [pc, #160]	@ (800c804 <battery_out+0xcc>)
 800c764:	0018      	movs	r0, r3
 800c766:	f7f8 ff8b 	bl	8005680 <sprintf_>
	Paint_ClearWindows(x, y, x+40, y+29, WHITE);	
 800c76a:	197b      	adds	r3, r7, r5
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	b298      	uxth	r0, r3
 800c770:	19bb      	adds	r3, r7, r6
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	b299      	uxth	r1, r3
 800c776:	197b      	adds	r3, r7, r5
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	3328      	adds	r3, #40	@ 0x28
 800c77e:	b29a      	uxth	r2, r3
 800c780:	19bb      	adds	r3, r7, r6
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	b29b      	uxth	r3, r3
 800c786:	331d      	adds	r3, #29
 800c788:	b29b      	uxth	r3, r3
 800c78a:	24ff      	movs	r4, #255	@ 0xff
 800c78c:	9400      	str	r4, [sp, #0]
 800c78e:	f7ff fb49 	bl	800be24 <Paint_ClearWindows>

	Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800c792:	197b      	adds	r3, r7, r5
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	b298      	uxth	r0, r3
 800c798:	19bb      	adds	r3, r7, r6
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	b299      	uxth	r1, r3
 800c79e:	4b19      	ldr	r3, [pc, #100]	@ (800c804 <battery_out+0xcc>)
 800c7a0:	781a      	ldrb	r2, [r3, #0]
 800c7a2:	4b19      	ldr	r3, [pc, #100]	@ (800c808 <battery_out+0xd0>)
 800c7a4:	24ff      	movs	r4, #255	@ 0xff
 800c7a6:	9401      	str	r4, [sp, #4]
 800c7a8:	2400      	movs	r4, #0
 800c7aa:	9400      	str	r4, [sp, #0]
 800c7ac:	f7ff fe0c 	bl	800c3c8 <Paint_DrawChar>
	Paint_DrawChar(x+12, y, str_array[1], &calibri_24pts, BLACK, WHITE);	
 800c7b0:	197b      	adds	r3, r7, r5
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	330c      	adds	r3, #12
 800c7b8:	b298      	uxth	r0, r3
 800c7ba:	19bb      	adds	r3, r7, r6
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	b299      	uxth	r1, r3
 800c7c0:	4b10      	ldr	r3, [pc, #64]	@ (800c804 <battery_out+0xcc>)
 800c7c2:	785a      	ldrb	r2, [r3, #1]
 800c7c4:	4b10      	ldr	r3, [pc, #64]	@ (800c808 <battery_out+0xd0>)
 800c7c6:	24ff      	movs	r4, #255	@ 0xff
 800c7c8:	9401      	str	r4, [sp, #4]
 800c7ca:	2400      	movs	r4, #0
 800c7cc:	9400      	str	r4, [sp, #0]
 800c7ce:	f7ff fdfb 	bl	800c3c8 <Paint_DrawChar>
	Paint_DrawChar(x+12+12, y, str_array[2], &calibri_24pts, BLACK, WHITE);	
 800c7d2:	197b      	adds	r3, r7, r5
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	3318      	adds	r3, #24
 800c7da:	b298      	uxth	r0, r3
 800c7dc:	19bb      	adds	r3, r7, r6
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	b299      	uxth	r1, r3
 800c7e2:	4b08      	ldr	r3, [pc, #32]	@ (800c804 <battery_out+0xcc>)
 800c7e4:	789a      	ldrb	r2, [r3, #2]
 800c7e6:	4b08      	ldr	r3, [pc, #32]	@ (800c808 <battery_out+0xd0>)
 800c7e8:	24ff      	movs	r4, #255	@ 0xff
 800c7ea:	9401      	str	r4, [sp, #4]
 800c7ec:	2400      	movs	r4, #0
 800c7ee:	9400      	str	r4, [sp, #0]
 800c7f0:	f7ff fdea 	bl	800c3c8 <Paint_DrawChar>
	
//		EPD_1IN54_V2_DisplayPart(BlackImage);	
}
 800c7f4:	46c0      	nop			@ (mov r8, r8)
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	b005      	add	sp, #20
 800c7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7fc:	0800fdb0 	.word	0x0800fdb0
 800c800:	0800fdc0 	.word	0x0800fdc0
 800c804:	200005a0 	.word	0x200005a0
 800c808:	20000160 	.word	0x20000160

0800c80c <temperature_out>:


void temperature_out(uint16_t tempr){
 800c80c:	b590      	push	{r4, r7, lr}
 800c80e:	b085      	sub	sp, #20
 800c810:	af02      	add	r7, sp, #8
 800c812:	0002      	movs	r2, r0
 800c814:	1dbb      	adds	r3, r7, #6
 800c816:	801a      	strh	r2, [r3, #0]
	
	printf("**  T out\n");
 800c818:	4b26      	ldr	r3, [pc, #152]	@ (800c8b4 <temperature_out+0xa8>)
 800c81a:	0018      	movs	r0, r3
 800c81c:	f7f8 ff12 	bl	8005644 <printf_>
	sprintf(str_array, "%3d", tempr);						
 800c820:	1dbb      	adds	r3, r7, #6
 800c822:	881a      	ldrh	r2, [r3, #0]
 800c824:	4924      	ldr	r1, [pc, #144]	@ (800c8b8 <temperature_out+0xac>)
 800c826:	4b25      	ldr	r3, [pc, #148]	@ (800c8bc <temperature_out+0xb0>)
 800c828:	0018      	movs	r0, r3
 800c82a:	f7f8 ff29 	bl	8005680 <sprintf_>
	Paint_ClearWindows(big_1.x, big_1.y, 142 + 41, big_1.y + 101, WHITE);	// 40 ms		
 800c82e:	230a      	movs	r3, #10
 800c830:	0018      	movs	r0, r3
 800c832:	231e      	movs	r3, #30
 800c834:	0019      	movs	r1, r3
 800c836:	231e      	movs	r3, #30
 800c838:	3365      	adds	r3, #101	@ 0x65
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	22ff      	movs	r2, #255	@ 0xff
 800c83e:	9200      	str	r2, [sp, #0]
 800c840:	22b7      	movs	r2, #183	@ 0xb7
 800c842:	f7ff faef 	bl	800be24 <Paint_ClearWindows>

	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800c846:	230a      	movs	r3, #10
 800c848:	0018      	movs	r0, r3
 800c84a:	231e      	movs	r3, #30
 800c84c:	001c      	movs	r4, r3
 800c84e:	4b1b      	ldr	r3, [pc, #108]	@ (800c8bc <temperature_out+0xb0>)
 800c850:	781a      	ldrb	r2, [r3, #0]
 800c852:	4b1b      	ldr	r3, [pc, #108]	@ (800c8c0 <temperature_out+0xb4>)
 800c854:	21ff      	movs	r1, #255	@ 0xff
 800c856:	9101      	str	r1, [sp, #4]
 800c858:	2100      	movs	r1, #0
 800c85a:	9100      	str	r1, [sp, #0]
 800c85c:	0021      	movs	r1, r4
 800c85e:	f7ff fdb3 	bl	800c3c8 <Paint_DrawChar>
	Paint_DrawChar(big_0.x, big_0.y, str_array[1], &calibri_104pts, BLACK, WHITE);
 800c862:	2343      	movs	r3, #67	@ 0x43
 800c864:	0018      	movs	r0, r3
 800c866:	231e      	movs	r3, #30
 800c868:	001c      	movs	r4, r3
 800c86a:	4b14      	ldr	r3, [pc, #80]	@ (800c8bc <temperature_out+0xb0>)
 800c86c:	785a      	ldrb	r2, [r3, #1]
 800c86e:	4b14      	ldr	r3, [pc, #80]	@ (800c8c0 <temperature_out+0xb4>)
 800c870:	21ff      	movs	r1, #255	@ 0xff
 800c872:	9101      	str	r1, [sp, #4]
 800c874:	2100      	movs	r1, #0
 800c876:	9100      	str	r1, [sp, #0]
 800c878:	0021      	movs	r1, r4
 800c87a:	f7ff fda5 	bl	800c3c8 <Paint_DrawChar>
	Paint_DrawPoint(131, 100, BLACK, DOT_PIXEL_5X5, DOT_FILL_AROUND); //Draw decimal point
 800c87e:	2301      	movs	r3, #1
 800c880:	9300      	str	r3, [sp, #0]
 800c882:	2305      	movs	r3, #5
 800c884:	2200      	movs	r2, #0
 800c886:	2164      	movs	r1, #100	@ 0x64
 800c888:	2083      	movs	r0, #131	@ 0x83
 800c88a:	f7ff fb15 	bl	800beb8 <Paint_DrawPoint>
	Paint_DrawChar(small_0.x, small_0.y, str_array[2], &calibri_80pts, BLACK, WHITE);					
 800c88e:	238e      	movs	r3, #142	@ 0x8e
 800c890:	0018      	movs	r0, r3
 800c892:	232e      	movs	r3, #46	@ 0x2e
 800c894:	001c      	movs	r4, r3
 800c896:	4b09      	ldr	r3, [pc, #36]	@ (800c8bc <temperature_out+0xb0>)
 800c898:	789a      	ldrb	r2, [r3, #2]
 800c89a:	4b0a      	ldr	r3, [pc, #40]	@ (800c8c4 <temperature_out+0xb8>)
 800c89c:	21ff      	movs	r1, #255	@ 0xff
 800c89e:	9101      	str	r1, [sp, #4]
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	9100      	str	r1, [sp, #0]
 800c8a4:	0021      	movs	r1, r4
 800c8a6:	f7ff fd8f 	bl	800c3c8 <Paint_DrawChar>

//	EPD_1IN54_V2_DisplayPart(BlackImage);	// 0.84 sec ms
}
 800c8aa:	46c0      	nop			@ (mov r8, r8)
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	b003      	add	sp, #12
 800c8b0:	bd90      	pop	{r4, r7, pc}
 800c8b2:	46c0      	nop			@ (mov r8, r8)
 800c8b4:	0800fdc4 	.word	0x0800fdc4
 800c8b8:	0800fdd0 	.word	0x0800fdd0
 800c8bc:	200005a0 	.word	0x200005a0
 800c8c0:	20000150 	.word	0x20000150
 800c8c4:	20000170 	.word	0x20000170

0800c8c8 <humidity_out>:


void humidity_out(uint16_t hum){
 800c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ca:	b087      	sub	sp, #28
 800c8cc:	af02      	add	r7, sp, #8
 800c8ce:	0002      	movs	r2, r0
 800c8d0:	1dbb      	adds	r3, r7, #6
 800c8d2:	801a      	strh	r2, [r3, #0]

	printf("**  H out\n");
 800c8d4:	4b1d      	ldr	r3, [pc, #116]	@ (800c94c <humidity_out+0x84>)
 800c8d6:	0018      	movs	r0, r3
 800c8d8:	f7f8 feb4 	bl	8005644 <printf_>
	uint8_t x = 125;
 800c8dc:	240f      	movs	r4, #15
 800c8de:	193b      	adds	r3, r7, r4
 800c8e0:	227d      	movs	r2, #125	@ 0x7d
 800c8e2:	701a      	strb	r2, [r3, #0]
	uint8_t y = 150;
 800c8e4:	250e      	movs	r5, #14
 800c8e6:	197b      	adds	r3, r7, r5
 800c8e8:	2296      	movs	r2, #150	@ 0x96
 800c8ea:	701a      	strb	r2, [r3, #0]
	char pcent = '%';
 800c8ec:	260d      	movs	r6, #13
 800c8ee:	19bb      	adds	r3, r7, r6
 800c8f0:	2225      	movs	r2, #37	@ 0x25
 800c8f2:	701a      	strb	r2, [r3, #0]
	sprintf(str_array, "%2d", hum);
 800c8f4:	1dbb      	adds	r3, r7, #6
 800c8f6:	881a      	ldrh	r2, [r3, #0]
 800c8f8:	4915      	ldr	r1, [pc, #84]	@ (800c950 <humidity_out+0x88>)
 800c8fa:	4b16      	ldr	r3, [pc, #88]	@ (800c954 <humidity_out+0x8c>)
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	f7f8 febf 	bl	8005680 <sprintf_>
	// append % to string
    strncat(str_array, &pcent, 1);
 800c902:	19b9      	adds	r1, r7, r6
 800c904:	4b13      	ldr	r3, [pc, #76]	@ (800c954 <humidity_out+0x8c>)
 800c906:	2201      	movs	r2, #1
 800c908:	0018      	movs	r0, r3
 800c90a:	f001 f92d 	bl	800db68 <strncat>
	
	/******************************************************************************
	void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,tFont* Font, UWORD Color_Foreground, UWORD Color_Background)
	******************************************************************************/

	Paint_ClearWindows(x, y, 200, 197, WHITE);	// 10^1
 800c90e:	193b      	adds	r3, r7, r4
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	b298      	uxth	r0, r3
 800c914:	197b      	adds	r3, r7, r5
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	b299      	uxth	r1, r3
 800c91a:	23ff      	movs	r3, #255	@ 0xff
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	23c5      	movs	r3, #197	@ 0xc5
 800c920:	22c8      	movs	r2, #200	@ 0xc8
 800c922:	f7ff fa7f 	bl	800be24 <Paint_ClearWindows>
	Paint_DrawString_EN(x, y, (char*)str_array, &calibri_36pts, WHITE, BLACK); // 20, 34
 800c926:	193b      	adds	r3, r7, r4
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	b298      	uxth	r0, r3
 800c92c:	197b      	adds	r3, r7, r5
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	b299      	uxth	r1, r3
 800c932:	4b09      	ldr	r3, [pc, #36]	@ (800c958 <humidity_out+0x90>)
 800c934:	4a07      	ldr	r2, [pc, #28]	@ (800c954 <humidity_out+0x8c>)
 800c936:	2400      	movs	r4, #0
 800c938:	9401      	str	r4, [sp, #4]
 800c93a:	24ff      	movs	r4, #255	@ 0xff
 800c93c:	9400      	str	r4, [sp, #0]
 800c93e:	f7ff fe29 	bl	800c594 <Paint_DrawString_EN>

}
 800c942:	46c0      	nop			@ (mov r8, r8)
 800c944:	46bd      	mov	sp, r7
 800c946:	b005      	add	sp, #20
 800c948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c94a:	46c0      	nop			@ (mov r8, r8)
 800c94c:	0800fdd4 	.word	0x0800fdd4
 800c950:	0800fdc0 	.word	0x0800fdc0
 800c954:	200005a0 	.word	0x200005a0
 800c958:	20000168 	.word	0x20000168

0800c95c <ESP_Init>:



//  **************************************************************************************

int ESP_Init(void){ 
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af04      	add	r7, sp, #16
	printf("ESP_Init\n");
 800c962:	4b26      	ldr	r3, [pc, #152]	@ (800c9fc <ESP_Init+0xa0>)
 800c964:	0018      	movs	r0, r3
 800c966:	f7f8 fe6d 	bl	8005644 <printf_>
    DEV_Module_Init();		// DC_L();SPI_CS_H();RST_H(); - set initial values
 800c96a:	f7fe fc5f 	bl	800b22c <DEV_Module_Init>
    EPD_1IN54_V2_Init();	// Reset pin set low, set LUT etc.
 800c96e:	f7fe fdf3 	bl	800b558 <EPD_1IN54_V2_Init>

    //Create a new image cache    
    /* !!!  you have to edit the startup_stm32fxxx.s file and set a heap size = 1400 !!!  */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
 800c972:	1dbb      	adds	r3, r7, #6
 800c974:	4a22      	ldr	r2, [pc, #136]	@ (800ca00 <ESP_Init+0xa4>)
 800c976:	801a      	strh	r2, [r3, #0]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800c978:	1dbb      	adds	r3, r7, #6
 800c97a:	881b      	ldrh	r3, [r3, #0]
 800c97c:	0018      	movs	r0, r3
 800c97e:	f000 faad 	bl	800cedc <malloc>
 800c982:	0003      	movs	r3, r0
 800c984:	001a      	movs	r2, r3
 800c986:	4b1f      	ldr	r3, [pc, #124]	@ (800ca04 <ESP_Init+0xa8>)
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	4b1e      	ldr	r3, [pc, #120]	@ (800ca04 <ESP_Init+0xa8>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d106      	bne.n	800c9a0 <ESP_Init+0x44>
        printf("Failed to apply for black memory...\r\n");
 800c992:	4b1d      	ldr	r3, [pc, #116]	@ (800ca08 <ESP_Init+0xac>)
 800c994:	0018      	movs	r0, r3
 800c996:	f7f8 fe55 	bl	8005644 <printf_>
        return -1;
 800c99a:	2301      	movs	r3, #1
 800c99c:	425b      	negs	r3, r3
 800c99e:	e029      	b.n	800c9f4 <ESP_Init+0x98>
    }
	
	Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0, WHITE);
 800c9a0:	4b18      	ldr	r3, [pc, #96]	@ (800ca04 <ESP_Init+0xa8>)
 800c9a2:	6818      	ldr	r0, [r3, #0]
 800c9a4:	23ff      	movs	r3, #255	@ 0xff
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	22c8      	movs	r2, #200	@ 0xc8
 800c9ac:	21c8      	movs	r1, #200	@ 0xc8
 800c9ae:	f7fe ff91 	bl	800b8d4 <Paint_NewImage>
	
//  	Paint_Clear(WHITE);
    Paint_SelectImage(BlackImage);
 800c9b2:	4b14      	ldr	r3, [pc, #80]	@ (800ca04 <ESP_Init+0xa8>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	0018      	movs	r0, r3
 800c9b8:	f7fe fffa 	bl	800b9b0 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800c9bc:	20ff      	movs	r0, #255	@ 0xff
 800c9be:	f7ff f9a3 	bl	800bd08 <Paint_Clear>
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	9302      	str	r3, [sp, #8]
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	9301      	str	r3, [sp, #4]
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	238c      	movs	r3, #140	@ 0x8c
 800c9d0:	22c6      	movs	r2, #198	@ 0xc6
 800c9d2:	2103      	movs	r1, #3
 800c9d4:	2002      	movs	r0, #2
 800c9d6:	f7ff fc2f 	bl	800c238 <Paint_DrawRectangle>
	
    EPD_1IN54_V2_Display(BlackImage);	// Write data to display's RAM (do you really need it?)
 800c9da:	4b0a      	ldr	r3, [pc, #40]	@ (800ca04 <ESP_Init+0xa8>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	0018      	movs	r0, r3
 800c9e0:	f7fe fe44 	bl	800b66c <EPD_1IN54_V2_Display>
	 
    EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
 800c9e4:	4b07      	ldr	r3, [pc, #28]	@ (800ca04 <ESP_Init+0xa8>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	0018      	movs	r0, r3
 800c9ea:	f7fe fe8e 	bl	800b70a <EPD_1IN54_V2_DisplayPartBaseImage>
	EPD_1IN54_V2_Init_Partial();
 800c9ee:	f7fe fdfb 	bl	800b5e8 <EPD_1IN54_V2_Init_Partial>
	
	return 0;
 800c9f2:	2300      	movs	r3, #0
}
 800c9f4:	0018      	movs	r0, r3
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	b002      	add	sp, #8
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	0800fde0 	.word	0x0800fde0
 800ca00:	00001388 	.word	0x00001388
 800ca04:	2000059c 	.word	0x2000059c
 800ca08:	0800fdec 	.word	0x0800fdec

0800ca0c <final_message>:


void final_message(uint16_t bat_voltage){ 	// sleep
 800ca0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca0e:	b087      	sub	sp, #28
 800ca10:	af02      	add	r7, sp, #8
 800ca12:	0002      	movs	r2, r0
 800ca14:	1dbb      	adds	r3, r7, #6
 800ca16:	801a      	strh	r2, [r3, #0]
	
	ESP_Init();
 800ca18:	f7ff ffa0 	bl	800c95c <ESP_Init>
	uint16_t Xstart = 5;
 800ca1c:	250e      	movs	r5, #14
 800ca1e:	197b      	adds	r3, r7, r5
 800ca20:	2205      	movs	r2, #5
 800ca22:	801a      	strh	r2, [r3, #0]
	uint16_t Ystart = 2;
 800ca24:	260c      	movs	r6, #12
 800ca26:	19bb      	adds	r3, r7, r6
 800ca28:	2202      	movs	r2, #2
 800ca2a:	801a      	strh	r2, [r3, #0]
	
	EPD_1IN54_V2_Init();
 800ca2c:	f7fe fd94 	bl	800b558 <EPD_1IN54_V2_Init>
	Paint_SelectImage(BlackImage);	// Paint.Image = image;
 800ca30:	4b32      	ldr	r3, [pc, #200]	@ (800cafc <final_message+0xf0>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	0018      	movs	r0, r3
 800ca36:	f7fe ffbb 	bl	800b9b0 <Paint_SelectImage>
	Paint_Clear(WHITE);
 800ca3a:	20ff      	movs	r0, #255	@ 0xff
 800ca3c:	f7ff f964 	bl	800bd08 <Paint_Clear>

	sprintf(str_array, "%d", bat_voltage);	
 800ca40:	1dbb      	adds	r3, r7, #6
 800ca42:	881a      	ldrh	r2, [r3, #0]
 800ca44:	492e      	ldr	r1, [pc, #184]	@ (800cb00 <final_message+0xf4>)
 800ca46:	4b2f      	ldr	r3, [pc, #188]	@ (800cb04 <final_message+0xf8>)
 800ca48:	0018      	movs	r0, r3
 800ca4a:	f7f8 fe19 	bl	8005680 <sprintf_>
	Paint_DrawString_EN(Xstart, Ystart, "Vbat:", &calibri_20pts, WHITE, BLACK);			// font size 17,24
 800ca4e:	4c2e      	ldr	r4, [pc, #184]	@ (800cb08 <final_message+0xfc>)
 800ca50:	4a2e      	ldr	r2, [pc, #184]	@ (800cb0c <final_message+0x100>)
 800ca52:	19bb      	adds	r3, r7, r6
 800ca54:	8819      	ldrh	r1, [r3, #0]
 800ca56:	197b      	adds	r3, r7, r5
 800ca58:	8818      	ldrh	r0, [r3, #0]
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	9301      	str	r3, [sp, #4]
 800ca5e:	23ff      	movs	r3, #255	@ 0xff
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	0023      	movs	r3, r4
 800ca64:	f7ff fd96 	bl	800c594 <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart + 7*10, Ystart, str_array, &calibri_20pts, WHITE, BLACK);
 800ca68:	197b      	adds	r3, r7, r5
 800ca6a:	881b      	ldrh	r3, [r3, #0]
 800ca6c:	3346      	adds	r3, #70	@ 0x46
 800ca6e:	b298      	uxth	r0, r3
 800ca70:	4c25      	ldr	r4, [pc, #148]	@ (800cb08 <final_message+0xfc>)
 800ca72:	4a24      	ldr	r2, [pc, #144]	@ (800cb04 <final_message+0xf8>)
 800ca74:	19bb      	adds	r3, r7, r6
 800ca76:	8819      	ldrh	r1, [r3, #0]
 800ca78:	2300      	movs	r3, #0
 800ca7a:	9301      	str	r3, [sp, #4]
 800ca7c:	23ff      	movs	r3, #255	@ 0xff
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	0023      	movs	r3, r4
 800ca82:	f7ff fd87 	bl	800c594 <Paint_DrawString_EN>
	
	Show_RTC_Calendar();
 800ca86:	f000 f849 	bl	800cb1c <Show_RTC_Calendar>
	Paint_DrawString_EN(Xstart, Ystart+ 75, "EndTime:", &calibri_20pts, WHITE, BLACK);
 800ca8a:	19bb      	adds	r3, r7, r6
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	334b      	adds	r3, #75	@ 0x4b
 800ca90:	b299      	uxth	r1, r3
 800ca92:	4c1d      	ldr	r4, [pc, #116]	@ (800cb08 <final_message+0xfc>)
 800ca94:	4a1e      	ldr	r2, [pc, #120]	@ (800cb10 <final_message+0x104>)
 800ca96:	197b      	adds	r3, r7, r5
 800ca98:	8818      	ldrh	r0, [r3, #0]
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	9301      	str	r3, [sp, #4]
 800ca9e:	23ff      	movs	r3, #255	@ 0xff
 800caa0:	9300      	str	r3, [sp, #0]
 800caa2:	0023      	movs	r3, r4
 800caa4:	f7ff fd76 	bl	800c594 <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart, Ystart + 100, aEndTime, &calibri_20pts, WHITE, BLACK);
 800caa8:	19bb      	adds	r3, r7, r6
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	3364      	adds	r3, #100	@ 0x64
 800caae:	b299      	uxth	r1, r3
 800cab0:	4c15      	ldr	r4, [pc, #84]	@ (800cb08 <final_message+0xfc>)
 800cab2:	4a18      	ldr	r2, [pc, #96]	@ (800cb14 <final_message+0x108>)
 800cab4:	197b      	adds	r3, r7, r5
 800cab6:	8818      	ldrh	r0, [r3, #0]
 800cab8:	2300      	movs	r3, #0
 800caba:	9301      	str	r3, [sp, #4]
 800cabc:	23ff      	movs	r3, #255	@ 0xff
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	0023      	movs	r3, r4
 800cac2:	f7ff fd67 	bl	800c594 <Paint_DrawString_EN>
	Paint_DrawString_EN(Xstart + 6*10 + 20, Ystart + 100, aEndDate, &calibri_20pts, WHITE, BLACK);
 800cac6:	197b      	adds	r3, r7, r5
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	3350      	adds	r3, #80	@ 0x50
 800cacc:	b298      	uxth	r0, r3
 800cace:	19bb      	adds	r3, r7, r6
 800cad0:	881b      	ldrh	r3, [r3, #0]
 800cad2:	3364      	adds	r3, #100	@ 0x64
 800cad4:	b299      	uxth	r1, r3
 800cad6:	4b0c      	ldr	r3, [pc, #48]	@ (800cb08 <final_message+0xfc>)
 800cad8:	4a0f      	ldr	r2, [pc, #60]	@ (800cb18 <final_message+0x10c>)
 800cada:	2400      	movs	r4, #0
 800cadc:	9401      	str	r4, [sp, #4]
 800cade:	24ff      	movs	r4, #255	@ 0xff
 800cae0:	9400      	str	r4, [sp, #0]
 800cae2:	f7ff fd57 	bl	800c594 <Paint_DrawString_EN>
			
	EPD_1IN54_V2_Display(BlackImage);
 800cae6:	4b05      	ldr	r3, [pc, #20]	@ (800cafc <final_message+0xf0>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	0018      	movs	r0, r3
 800caec:	f7fe fdbe 	bl	800b66c <EPD_1IN54_V2_Display>
	EPD_1IN54_V2_Sleep();
 800caf0:	f7fe fee4 	bl	800b8bc <EPD_1IN54_V2_Sleep>
}
 800caf4:	46c0      	nop			@ (mov r8, r8)
 800caf6:	46bd      	mov	sp, r7
 800caf8:	b005      	add	sp, #20
 800cafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cafc:	2000059c 	.word	0x2000059c
 800cb00:	0800fe14 	.word	0x0800fe14
 800cb04:	200005a0 	.word	0x200005a0
 800cb08:	20000158 	.word	0x20000158
 800cb0c:	0800fe18 	.word	0x0800fe18
 800cb10:	0800fe20 	.word	0x0800fe20
 800cb14:	20000574 	.word	0x20000574
 800cb18:	20000588 	.word	0x20000588

0800cb1c <Show_RTC_Calendar>:



void Show_RTC_Calendar(void)
{
 800cb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af02      	add	r7, sp, #8
  /* Note: need to convert in decimal value in using __LL_RTC_CONVERT_BCD2BIN helper macro */
  /* Display time Format : hh:mm:ss */
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800cb22:	4b61      	ldr	r3, [pc, #388]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cb24:	0018      	movs	r0, r3
 800cb26:	f7ff fd91 	bl	800c64c <LL_RTC_TIME_GetHour>
 800cb2a:	0003      	movs	r3, r0
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	111b      	asrs	r3, r3, #4
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	220f      	movs	r2, #15
 800cb34:	4013      	ands	r3, r2
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	1c1a      	adds	r2, r3, #0
 800cb3a:	0092      	lsls	r2, r2, #2
 800cb3c:	18d3      	adds	r3, r2, r3
 800cb3e:	18db      	adds	r3, r3, r3
 800cb40:	b2dc      	uxtb	r4, r3
 800cb42:	4b59      	ldr	r3, [pc, #356]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cb44:	0018      	movs	r0, r3
 800cb46:	f7ff fd81 	bl	800c64c <LL_RTC_TIME_GetHour>
 800cb4a:	0003      	movs	r3, r0
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	220f      	movs	r2, #15
 800cb50:	4013      	ands	r3, r2
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	18e3      	adds	r3, r4, r3
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	001d      	movs	r5, r3
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetMinute(RTC)), 
 800cb5a:	4b53      	ldr	r3, [pc, #332]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cb5c:	0018      	movs	r0, r3
 800cb5e:	f7ff fd8b 	bl	800c678 <LL_RTC_TIME_GetMinute>
 800cb62:	0003      	movs	r3, r0
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	111b      	asrs	r3, r3, #4
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	220f      	movs	r2, #15
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	1c1a      	adds	r2, r3, #0
 800cb72:	0092      	lsls	r2, r2, #2
 800cb74:	18d3      	adds	r3, r2, r3
 800cb76:	18db      	adds	r3, r3, r3
 800cb78:	b2dc      	uxtb	r4, r3
 800cb7a:	4b4b      	ldr	r3, [pc, #300]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cb7c:	0018      	movs	r0, r3
 800cb7e:	f7ff fd7b 	bl	800c678 <LL_RTC_TIME_GetMinute>
 800cb82:	0003      	movs	r3, r0
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	220f      	movs	r2, #15
 800cb88:	4013      	ands	r3, r2
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	18e3      	adds	r3, r4, r3
 800cb8e:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800cb90:	001e      	movs	r6, r3
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetSecond(RTC)));
 800cb92:	4b45      	ldr	r3, [pc, #276]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cb94:	0018      	movs	r0, r3
 800cb96:	f7ff fd85 	bl	800c6a4 <LL_RTC_TIME_GetSecond>
 800cb9a:	0003      	movs	r3, r0
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	111b      	asrs	r3, r3, #4
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	220f      	movs	r2, #15
 800cba4:	4013      	ands	r3, r2
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	1c1a      	adds	r2, r3, #0
 800cbaa:	0092      	lsls	r2, r2, #2
 800cbac:	18d3      	adds	r3, r2, r3
 800cbae:	18db      	adds	r3, r3, r3
 800cbb0:	b2dc      	uxtb	r4, r3
 800cbb2:	4b3d      	ldr	r3, [pc, #244]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cbb4:	0018      	movs	r0, r3
 800cbb6:	f7ff fd75 	bl	800c6a4 <LL_RTC_TIME_GetSecond>
 800cbba:	0003      	movs	r3, r0
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	220f      	movs	r2, #15
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	18e3      	adds	r3, r4, r3
 800cbc6:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndTime,"%.2d:%.2d:%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_TIME_GetHour(RTC)), 
 800cbc8:	4938      	ldr	r1, [pc, #224]	@ (800ccac <Show_RTC_Calendar+0x190>)
 800cbca:	4839      	ldr	r0, [pc, #228]	@ (800ccb0 <Show_RTC_Calendar+0x194>)
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	0033      	movs	r3, r6
 800cbd0:	002a      	movs	r2, r5
 800cbd2:	f7f8 fd55 	bl	8005680 <sprintf_>
  
  /* Display date Format : mm-dd-yy */
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800cbd6:	4b34      	ldr	r3, [pc, #208]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cbd8:	0018      	movs	r0, r3
 800cbda:	f7ff fd88 	bl	800c6ee <LL_RTC_DATE_GetMonth>
 800cbde:	0003      	movs	r3, r0
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	111b      	asrs	r3, r3, #4
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	220f      	movs	r2, #15
 800cbe8:	4013      	ands	r3, r2
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	1c1a      	adds	r2, r3, #0
 800cbee:	0092      	lsls	r2, r2, #2
 800cbf0:	18d3      	adds	r3, r2, r3
 800cbf2:	18db      	adds	r3, r3, r3
 800cbf4:	b2dc      	uxtb	r4, r3
 800cbf6:	4b2c      	ldr	r3, [pc, #176]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cbf8:	0018      	movs	r0, r3
 800cbfa:	f7ff fd78 	bl	800c6ee <LL_RTC_DATE_GetMonth>
 800cbfe:	0003      	movs	r3, r0
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	220f      	movs	r2, #15
 800cc04:	4013      	ands	r3, r2
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	18e3      	adds	r3, r4, r3
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	001d      	movs	r5, r3
          __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetDay(RTC)), 
 800cc0e:	4b26      	ldr	r3, [pc, #152]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cc10:	0018      	movs	r0, r3
 800cc12:	f7ff fd82 	bl	800c71a <LL_RTC_DATE_GetDay>
 800cc16:	0003      	movs	r3, r0
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	111b      	asrs	r3, r3, #4
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	220f      	movs	r2, #15
 800cc20:	4013      	ands	r3, r2
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	1c1a      	adds	r2, r3, #0
 800cc26:	0092      	lsls	r2, r2, #2
 800cc28:	18d3      	adds	r3, r2, r3
 800cc2a:	18db      	adds	r3, r3, r3
 800cc2c:	b2dc      	uxtb	r4, r3
 800cc2e:	4b1e      	ldr	r3, [pc, #120]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cc30:	0018      	movs	r0, r3
 800cc32:	f7ff fd72 	bl	800c71a <LL_RTC_DATE_GetDay>
 800cc36:	0003      	movs	r3, r0
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	220f      	movs	r2, #15
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	18e3      	adds	r3, r4, r3
 800cc42:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800cc44:	001e      	movs	r6, r3
          2000 + __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetYear(RTC)));
 800cc46:	4b18      	ldr	r3, [pc, #96]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cc48:	0018      	movs	r0, r3
 800cc4a:	f7ff fd3a 	bl	800c6c2 <LL_RTC_DATE_GetYear>
 800cc4e:	0003      	movs	r3, r0
 800cc50:	b2db      	uxtb	r3, r3
 800cc52:	111b      	asrs	r3, r3, #4
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	220f      	movs	r2, #15
 800cc58:	4013      	ands	r3, r2
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	1c1a      	adds	r2, r3, #0
 800cc5e:	0092      	lsls	r2, r2, #2
 800cc60:	18d3      	adds	r3, r2, r3
 800cc62:	18db      	adds	r3, r3, r3
 800cc64:	b2dc      	uxtb	r4, r3
 800cc66:	4b10      	ldr	r3, [pc, #64]	@ (800cca8 <Show_RTC_Calendar+0x18c>)
 800cc68:	0018      	movs	r0, r3
 800cc6a:	f7ff fd2a 	bl	800c6c2 <LL_RTC_DATE_GetYear>
 800cc6e:	0003      	movs	r3, r0
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	220f      	movs	r2, #15
 800cc74:	4013      	ands	r3, r2
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	18e3      	adds	r3, r4, r3
 800cc7a:	b2db      	uxtb	r3, r3
  sprintf((char*)aEndDate,"%.2d-%.2d-%.2d", __LL_RTC_CONVERT_BCD2BIN(LL_RTC_DATE_GetMonth(RTC)), 
 800cc7c:	22fa      	movs	r2, #250	@ 0xfa
 800cc7e:	00d2      	lsls	r2, r2, #3
 800cc80:	4694      	mov	ip, r2
 800cc82:	4463      	add	r3, ip
 800cc84:	490b      	ldr	r1, [pc, #44]	@ (800ccb4 <Show_RTC_Calendar+0x198>)
 800cc86:	480c      	ldr	r0, [pc, #48]	@ (800ccb8 <Show_RTC_Calendar+0x19c>)
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	0033      	movs	r3, r6
 800cc8c:	002a      	movs	r2, r5
 800cc8e:	f7f8 fcf7 	bl	8005680 <sprintf_>
  printf("%s\t %s\n", aEndTime, aEndDate);
 800cc92:	4a09      	ldr	r2, [pc, #36]	@ (800ccb8 <Show_RTC_Calendar+0x19c>)
 800cc94:	4906      	ldr	r1, [pc, #24]	@ (800ccb0 <Show_RTC_Calendar+0x194>)
 800cc96:	4b09      	ldr	r3, [pc, #36]	@ (800ccbc <Show_RTC_Calendar+0x1a0>)
 800cc98:	0018      	movs	r0, r3
 800cc9a:	f7f8 fcd3 	bl	8005644 <printf_>
  
} 
 800cc9e:	46c0      	nop			@ (mov r8, r8)
 800cca0:	46bd      	mov	sp, r7
 800cca2:	b001      	add	sp, #4
 800cca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca6:	46c0      	nop			@ (mov r8, r8)
 800cca8:	40002800 	.word	0x40002800
 800ccac:	0800fe2c 	.word	0x0800fe2c
 800ccb0:	20000574 	.word	0x20000574
 800ccb4:	0800fe3c 	.word	0x0800fe3c
 800ccb8:	20000588 	.word	0x20000588
 800ccbc:	0800fe4c 	.word	0x0800fe4c

0800ccc0 <ESP_Init_standby>:

//	**************************___ ESP_Init_after_standby ___**********************
int ESP_Init_standby(void){ 
 800ccc0:	b590      	push	{r4, r7, lr}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af04      	add	r7, sp, #16
	printf("ESP_Init_standby\n");
 800ccc6:	4b77      	ldr	r3, [pc, #476]	@ (800cea4 <ESP_Init_standby+0x1e4>)
 800ccc8:	0018      	movs	r0, r3
 800ccca:	f7f8 fcbb 	bl	8005644 <printf_>
    //Create a new image cache    
    /* !!!  you have to edit the startup_stm32fxxx.s file and set a heap size = 1400 !!!  */
    UWORD Imagesize = ((EPD_1IN54_V2_WIDTH % 8 == 0)? (EPD_1IN54_V2_WIDTH / 8 ): (EPD_1IN54_V2_WIDTH / 8 + 1)) * EPD_1IN54_V2_HEIGHT;
 800ccce:	1dbb      	adds	r3, r7, #6
 800ccd0:	4a75      	ldr	r2, [pc, #468]	@ (800cea8 <ESP_Init_standby+0x1e8>)
 800ccd2:	801a      	strh	r2, [r3, #0]
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 800ccd4:	1dbb      	adds	r3, r7, #6
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	0018      	movs	r0, r3
 800ccda:	f000 f8ff 	bl	800cedc <malloc>
 800ccde:	0003      	movs	r3, r0
 800cce0:	001a      	movs	r2, r3
 800cce2:	4b72      	ldr	r3, [pc, #456]	@ (800ceac <ESP_Init_standby+0x1ec>)
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	4b71      	ldr	r3, [pc, #452]	@ (800ceac <ESP_Init_standby+0x1ec>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d106      	bne.n	800ccfc <ESP_Init_standby+0x3c>
        printf("Failed to apply for black memory...\r\n");
 800ccee:	4b70      	ldr	r3, [pc, #448]	@ (800ceb0 <ESP_Init_standby+0x1f0>)
 800ccf0:	0018      	movs	r0, r3
 800ccf2:	f7f8 fca7 	bl	8005644 <printf_>
        return -1;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	425b      	negs	r3, r3
 800ccfa:	e0cf      	b.n	800ce9c <ESP_Init_standby+0x1dc>
    }
		Paint_NewImage(BlackImage, EPD_1IN54_V2_WIDTH, EPD_1IN54_V2_HEIGHT, 0, WHITE);
 800ccfc:	4b6b      	ldr	r3, [pc, #428]	@ (800ceac <ESP_Init_standby+0x1ec>)
 800ccfe:	6818      	ldr	r0, [r3, #0]
 800cd00:	23ff      	movs	r3, #255	@ 0xff
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	2300      	movs	r3, #0
 800cd06:	22c8      	movs	r2, #200	@ 0xc8
 800cd08:	21c8      	movs	r1, #200	@ 0xc8
 800cd0a:	f7fe fde3 	bl	800b8d4 <Paint_NewImage>
		
	// Drawing on the image ======================================================
//    INFO("Drawing\r\n");

    Paint_SelectImage(BlackImage);	// Paint.Image = image;
 800cd0e:	4b67      	ldr	r3, [pc, #412]	@ (800ceac <ESP_Init_standby+0x1ec>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	0018      	movs	r0, r3
 800cd14:	f7fe fe4c 	bl	800b9b0 <Paint_SelectImage>
    Paint_Clear(WHITE);
 800cd18:	20ff      	movs	r0, #255	@ 0xff
 800cd1a:	f7fe fff5 	bl	800bd08 <Paint_Clear>
	Paint_DrawRectangle(2, 3, 198, 140, BLACK, DOT_PIXEL_2X2, DRAW_FILL_EMPTY);
 800cd1e:	2300      	movs	r3, #0
 800cd20:	9302      	str	r3, [sp, #8]
 800cd22:	2302      	movs	r3, #2
 800cd24:	9301      	str	r3, [sp, #4]
 800cd26:	2300      	movs	r3, #0
 800cd28:	9300      	str	r3, [sp, #0]
 800cd2a:	238c      	movs	r3, #140	@ 0x8c
 800cd2c:	22c6      	movs	r2, #198	@ 0xc6
 800cd2e:	2103      	movs	r1, #3
 800cd30:	2002      	movs	r0, #2
 800cd32:	f7ff fa81 	bl	800c238 <Paint_DrawRectangle>
	
// T	
	sprintf(str_array, "%3d", T_old);
 800cd36:	4b5f      	ldr	r3, [pc, #380]	@ (800ceb4 <ESP_Init_standby+0x1f4>)
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	001a      	movs	r2, r3
 800cd3c:	495e      	ldr	r1, [pc, #376]	@ (800ceb8 <ESP_Init_standby+0x1f8>)
 800cd3e:	4b5f      	ldr	r3, [pc, #380]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800cd40:	0018      	movs	r0, r3
 800cd42:	f7f8 fc9d 	bl	8005680 <sprintf_>
	Paint_DrawChar(big_1.x, big_1.y, str_array[0], &calibri_104pts, BLACK, WHITE); // 15 ms
 800cd46:	230a      	movs	r3, #10
 800cd48:	0018      	movs	r0, r3
 800cd4a:	231e      	movs	r3, #30
 800cd4c:	001c      	movs	r4, r3
 800cd4e:	4b5b      	ldr	r3, [pc, #364]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800cd50:	781a      	ldrb	r2, [r3, #0]
 800cd52:	4b5b      	ldr	r3, [pc, #364]	@ (800cec0 <ESP_Init_standby+0x200>)
 800cd54:	21ff      	movs	r1, #255	@ 0xff
 800cd56:	9101      	str	r1, [sp, #4]
 800cd58:	2100      	movs	r1, #0
 800cd5a:	9100      	str	r1, [sp, #0]
 800cd5c:	0021      	movs	r1, r4
 800cd5e:	f7ff fb33 	bl	800c3c8 <Paint_DrawChar>
	Paint_DrawChar(big_0.x, big_0.y, str_array[1], &calibri_104pts, BLACK, WHITE);
 800cd62:	2343      	movs	r3, #67	@ 0x43
 800cd64:	0018      	movs	r0, r3
 800cd66:	231e      	movs	r3, #30
 800cd68:	001c      	movs	r4, r3
 800cd6a:	4b54      	ldr	r3, [pc, #336]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800cd6c:	785a      	ldrb	r2, [r3, #1]
 800cd6e:	4b54      	ldr	r3, [pc, #336]	@ (800cec0 <ESP_Init_standby+0x200>)
 800cd70:	21ff      	movs	r1, #255	@ 0xff
 800cd72:	9101      	str	r1, [sp, #4]
 800cd74:	2100      	movs	r1, #0
 800cd76:	9100      	str	r1, [sp, #0]
 800cd78:	0021      	movs	r1, r4
 800cd7a:	f7ff fb25 	bl	800c3c8 <Paint_DrawChar>
	Paint_DrawPoint(131, 100, BLACK, DOT_PIXEL_5X5, DOT_FILL_AROUND); //Draw decimal point
 800cd7e:	2301      	movs	r3, #1
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	2305      	movs	r3, #5
 800cd84:	2200      	movs	r2, #0
 800cd86:	2164      	movs	r1, #100	@ 0x64
 800cd88:	2083      	movs	r0, #131	@ 0x83
 800cd8a:	f7ff f895 	bl	800beb8 <Paint_DrawPoint>
	Paint_DrawChar(small_0.x, small_0.y, str_array[2], &calibri_80pts, BLACK, WHITE);		
 800cd8e:	238e      	movs	r3, #142	@ 0x8e
 800cd90:	0018      	movs	r0, r3
 800cd92:	232e      	movs	r3, #46	@ 0x2e
 800cd94:	001c      	movs	r4, r3
 800cd96:	4b49      	ldr	r3, [pc, #292]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800cd98:	789a      	ldrb	r2, [r3, #2]
 800cd9a:	4b4a      	ldr	r3, [pc, #296]	@ (800cec4 <ESP_Init_standby+0x204>)
 800cd9c:	21ff      	movs	r1, #255	@ 0xff
 800cd9e:	9101      	str	r1, [sp, #4]
 800cda0:	2100      	movs	r1, #0
 800cda2:	9100      	str	r1, [sp, #0]
 800cda4:	0021      	movs	r1, r4
 800cda6:	f7ff fb0f 	bl	800c3c8 <Paint_DrawChar>
		
// hum
	uint8_t x = 125;
 800cdaa:	1d7b      	adds	r3, r7, #5
 800cdac:	227d      	movs	r2, #125	@ 0x7d
 800cdae:	701a      	strb	r2, [r3, #0]
	uint8_t y = 150;	
 800cdb0:	1d3b      	adds	r3, r7, #4
 800cdb2:	2296      	movs	r2, #150	@ 0x96
 800cdb4:	701a      	strb	r2, [r3, #0]
	char pcent = '%';
 800cdb6:	1cfb      	adds	r3, r7, #3
 800cdb8:	2225      	movs	r2, #37	@ 0x25
 800cdba:	701a      	strb	r2, [r3, #0]
	sprintf(str_array, "%2d", H_old);
 800cdbc:	4b42      	ldr	r3, [pc, #264]	@ (800cec8 <ESP_Init_standby+0x208>)
 800cdbe:	881b      	ldrh	r3, [r3, #0]
 800cdc0:	001a      	movs	r2, r3
 800cdc2:	4942      	ldr	r1, [pc, #264]	@ (800cecc <ESP_Init_standby+0x20c>)
 800cdc4:	4b3d      	ldr	r3, [pc, #244]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800cdc6:	0018      	movs	r0, r3
 800cdc8:	f7f8 fc5a 	bl	8005680 <sprintf_>
	// append % to string
    strncat(str_array, &pcent, 1);
 800cdcc:	1cf9      	adds	r1, r7, #3
 800cdce:	4b3b      	ldr	r3, [pc, #236]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	0018      	movs	r0, r3
 800cdd4:	f000 fec8 	bl	800db68 <strncat>
	Paint_DrawString_EN(x, y, (char*)str_array, &calibri_36pts, WHITE, BLACK); // 20, 34
 800cdd8:	1d7b      	adds	r3, r7, #5
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	b298      	uxth	r0, r3
 800cdde:	1d3b      	adds	r3, r7, #4
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	b299      	uxth	r1, r3
 800cde4:	4b3a      	ldr	r3, [pc, #232]	@ (800ced0 <ESP_Init_standby+0x210>)
 800cde6:	4a35      	ldr	r2, [pc, #212]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800cde8:	2400      	movs	r4, #0
 800cdea:	9401      	str	r4, [sp, #4]
 800cdec:	24ff      	movs	r4, #255	@ 0xff
 800cdee:	9400      	str	r4, [sp, #0]
 800cdf0:	f7ff fbd0 	bl	800c594 <Paint_DrawString_EN>
	
// battery voltage	
		x = 3;
 800cdf4:	1d7b      	adds	r3, r7, #5
 800cdf6:	2203      	movs	r2, #3
 800cdf8:	701a      	strb	r2, [r3, #0]
		y = 160;
 800cdfa:	1d3b      	adds	r3, r7, #4
 800cdfc:	22a0      	movs	r2, #160	@ 0xa0
 800cdfe:	701a      	strb	r2, [r3, #0]
		sprintf(str_array, "%3d", vbat_old);
 800ce00:	4b34      	ldr	r3, [pc, #208]	@ (800ced4 <ESP_Init_standby+0x214>)
 800ce02:	881b      	ldrh	r3, [r3, #0]
 800ce04:	001a      	movs	r2, r3
 800ce06:	492c      	ldr	r1, [pc, #176]	@ (800ceb8 <ESP_Init_standby+0x1f8>)
 800ce08:	4b2c      	ldr	r3, [pc, #176]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800ce0a:	0018      	movs	r0, r3
 800ce0c:	f7f8 fc38 	bl	8005680 <sprintf_>
		
		Paint_ClearWindows(x, y, x+40, y+29, WHITE);			
 800ce10:	1d7b      	adds	r3, r7, #5
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	b298      	uxth	r0, r3
 800ce16:	1d3b      	adds	r3, r7, #4
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	b299      	uxth	r1, r3
 800ce1c:	1d7b      	adds	r3, r7, #5
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	3328      	adds	r3, #40	@ 0x28
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	1d3b      	adds	r3, r7, #4
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	331d      	adds	r3, #29
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	24ff      	movs	r4, #255	@ 0xff
 800ce32:	9400      	str	r4, [sp, #0]
 800ce34:	f7fe fff6 	bl	800be24 <Paint_ClearWindows>
		Paint_DrawChar(x, y, str_array[0], &calibri_24pts, BLACK, WHITE);	// 	12, 29, 8
 800ce38:	1d7b      	adds	r3, r7, #5
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	b298      	uxth	r0, r3
 800ce3e:	1d3b      	adds	r3, r7, #4
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	b299      	uxth	r1, r3
 800ce44:	4b1d      	ldr	r3, [pc, #116]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800ce46:	781a      	ldrb	r2, [r3, #0]
 800ce48:	4b23      	ldr	r3, [pc, #140]	@ (800ced8 <ESP_Init_standby+0x218>)
 800ce4a:	24ff      	movs	r4, #255	@ 0xff
 800ce4c:	9401      	str	r4, [sp, #4]
 800ce4e:	2400      	movs	r4, #0
 800ce50:	9400      	str	r4, [sp, #0]
 800ce52:	f7ff fab9 	bl	800c3c8 <Paint_DrawChar>
		Paint_DrawChar(x+12, y, str_array[1], &calibri_24pts, BLACK, WHITE);	
 800ce56:	1d7b      	adds	r3, r7, #5
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	330c      	adds	r3, #12
 800ce5e:	b298      	uxth	r0, r3
 800ce60:	1d3b      	adds	r3, r7, #4
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	b299      	uxth	r1, r3
 800ce66:	4b15      	ldr	r3, [pc, #84]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800ce68:	785a      	ldrb	r2, [r3, #1]
 800ce6a:	4b1b      	ldr	r3, [pc, #108]	@ (800ced8 <ESP_Init_standby+0x218>)
 800ce6c:	24ff      	movs	r4, #255	@ 0xff
 800ce6e:	9401      	str	r4, [sp, #4]
 800ce70:	2400      	movs	r4, #0
 800ce72:	9400      	str	r4, [sp, #0]
 800ce74:	f7ff faa8 	bl	800c3c8 <Paint_DrawChar>
		Paint_DrawChar(x+12+12, y, str_array[2], &calibri_24pts, BLACK, WHITE);	
 800ce78:	1d7b      	adds	r3, r7, #5
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	3318      	adds	r3, #24
 800ce80:	b298      	uxth	r0, r3
 800ce82:	1d3b      	adds	r3, r7, #4
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	b299      	uxth	r1, r3
 800ce88:	4b0c      	ldr	r3, [pc, #48]	@ (800cebc <ESP_Init_standby+0x1fc>)
 800ce8a:	789a      	ldrb	r2, [r3, #2]
 800ce8c:	4b12      	ldr	r3, [pc, #72]	@ (800ced8 <ESP_Init_standby+0x218>)
 800ce8e:	24ff      	movs	r4, #255	@ 0xff
 800ce90:	9401      	str	r4, [sp, #4]
 800ce92:	2400      	movs	r4, #0
 800ce94:	9400      	str	r4, [sp, #0]
 800ce96:	f7ff fa97 	bl	800c3c8 <Paint_DrawChar>
		
//		EPD_1IN54_V2_Display(BlackImage);		
//		EPD_1IN54_V2_DisplayPartBaseImage(BlackImage);
//		EPD_1IN54_V2_Init_Partial();
		
		return 0;
 800ce9a:	2300      	movs	r3, #0
}
 800ce9c:	0018      	movs	r0, r3
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	b003      	add	sp, #12
 800cea2:	bd90      	pop	{r4, r7, pc}
 800cea4:	0800fe54 	.word	0x0800fe54
 800cea8:	00001388 	.word	0x00001388
 800ceac:	2000059c 	.word	0x2000059c
 800ceb0:	0800fdec 	.word	0x0800fdec
 800ceb4:	2000041a 	.word	0x2000041a
 800ceb8:	0800fdd0 	.word	0x0800fdd0
 800cebc:	200005a0 	.word	0x200005a0
 800cec0:	20000150 	.word	0x20000150
 800cec4:	20000170 	.word	0x20000170
 800cec8:	20000418 	.word	0x20000418
 800cecc:	0800fdc0 	.word	0x0800fdc0
 800ced0:	20000168 	.word	0x20000168
 800ced4:	2000041c 	.word	0x2000041c
 800ced8:	20000160 	.word	0x20000160

0800cedc <malloc>:
 800cedc:	b510      	push	{r4, lr}
 800cede:	4b03      	ldr	r3, [pc, #12]	@ (800ceec <malloc+0x10>)
 800cee0:	0001      	movs	r1, r0
 800cee2:	6818      	ldr	r0, [r3, #0]
 800cee4:	f000 f826 	bl	800cf34 <_malloc_r>
 800cee8:	bd10      	pop	{r4, pc}
 800ceea:	46c0      	nop			@ (mov r8, r8)
 800ceec:	20000184 	.word	0x20000184

0800cef0 <sbrk_aligned>:
 800cef0:	b570      	push	{r4, r5, r6, lr}
 800cef2:	4e0f      	ldr	r6, [pc, #60]	@ (800cf30 <sbrk_aligned+0x40>)
 800cef4:	000d      	movs	r5, r1
 800cef6:	6831      	ldr	r1, [r6, #0]
 800cef8:	0004      	movs	r4, r0
 800cefa:	2900      	cmp	r1, #0
 800cefc:	d102      	bne.n	800cf04 <sbrk_aligned+0x14>
 800cefe:	f000 fe87 	bl	800dc10 <_sbrk_r>
 800cf02:	6030      	str	r0, [r6, #0]
 800cf04:	0029      	movs	r1, r5
 800cf06:	0020      	movs	r0, r4
 800cf08:	f000 fe82 	bl	800dc10 <_sbrk_r>
 800cf0c:	1c43      	adds	r3, r0, #1
 800cf0e:	d103      	bne.n	800cf18 <sbrk_aligned+0x28>
 800cf10:	2501      	movs	r5, #1
 800cf12:	426d      	negs	r5, r5
 800cf14:	0028      	movs	r0, r5
 800cf16:	bd70      	pop	{r4, r5, r6, pc}
 800cf18:	2303      	movs	r3, #3
 800cf1a:	1cc5      	adds	r5, r0, #3
 800cf1c:	439d      	bics	r5, r3
 800cf1e:	42a8      	cmp	r0, r5
 800cf20:	d0f8      	beq.n	800cf14 <sbrk_aligned+0x24>
 800cf22:	1a29      	subs	r1, r5, r0
 800cf24:	0020      	movs	r0, r4
 800cf26:	f000 fe73 	bl	800dc10 <_sbrk_r>
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	d1f2      	bne.n	800cf14 <sbrk_aligned+0x24>
 800cf2e:	e7ef      	b.n	800cf10 <sbrk_aligned+0x20>
 800cf30:	200005a8 	.word	0x200005a8

0800cf34 <_malloc_r>:
 800cf34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf36:	2203      	movs	r2, #3
 800cf38:	1ccb      	adds	r3, r1, #3
 800cf3a:	4393      	bics	r3, r2
 800cf3c:	3308      	adds	r3, #8
 800cf3e:	0005      	movs	r5, r0
 800cf40:	001f      	movs	r7, r3
 800cf42:	2b0c      	cmp	r3, #12
 800cf44:	d234      	bcs.n	800cfb0 <_malloc_r+0x7c>
 800cf46:	270c      	movs	r7, #12
 800cf48:	42b9      	cmp	r1, r7
 800cf4a:	d833      	bhi.n	800cfb4 <_malloc_r+0x80>
 800cf4c:	0028      	movs	r0, r5
 800cf4e:	f000 f871 	bl	800d034 <__malloc_lock>
 800cf52:	4e37      	ldr	r6, [pc, #220]	@ (800d030 <_malloc_r+0xfc>)
 800cf54:	6833      	ldr	r3, [r6, #0]
 800cf56:	001c      	movs	r4, r3
 800cf58:	2c00      	cmp	r4, #0
 800cf5a:	d12f      	bne.n	800cfbc <_malloc_r+0x88>
 800cf5c:	0039      	movs	r1, r7
 800cf5e:	0028      	movs	r0, r5
 800cf60:	f7ff ffc6 	bl	800cef0 <sbrk_aligned>
 800cf64:	0004      	movs	r4, r0
 800cf66:	1c43      	adds	r3, r0, #1
 800cf68:	d15f      	bne.n	800d02a <_malloc_r+0xf6>
 800cf6a:	6834      	ldr	r4, [r6, #0]
 800cf6c:	9400      	str	r4, [sp, #0]
 800cf6e:	9b00      	ldr	r3, [sp, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d14a      	bne.n	800d00a <_malloc_r+0xd6>
 800cf74:	2c00      	cmp	r4, #0
 800cf76:	d052      	beq.n	800d01e <_malloc_r+0xea>
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	0028      	movs	r0, r5
 800cf7c:	18e3      	adds	r3, r4, r3
 800cf7e:	9900      	ldr	r1, [sp, #0]
 800cf80:	9301      	str	r3, [sp, #4]
 800cf82:	f000 fe45 	bl	800dc10 <_sbrk_r>
 800cf86:	9b01      	ldr	r3, [sp, #4]
 800cf88:	4283      	cmp	r3, r0
 800cf8a:	d148      	bne.n	800d01e <_malloc_r+0xea>
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	0028      	movs	r0, r5
 800cf90:	1aff      	subs	r7, r7, r3
 800cf92:	0039      	movs	r1, r7
 800cf94:	f7ff ffac 	bl	800cef0 <sbrk_aligned>
 800cf98:	3001      	adds	r0, #1
 800cf9a:	d040      	beq.n	800d01e <_malloc_r+0xea>
 800cf9c:	6823      	ldr	r3, [r4, #0]
 800cf9e:	19db      	adds	r3, r3, r7
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	6833      	ldr	r3, [r6, #0]
 800cfa4:	685a      	ldr	r2, [r3, #4]
 800cfa6:	2a00      	cmp	r2, #0
 800cfa8:	d133      	bne.n	800d012 <_malloc_r+0xde>
 800cfaa:	9b00      	ldr	r3, [sp, #0]
 800cfac:	6033      	str	r3, [r6, #0]
 800cfae:	e019      	b.n	800cfe4 <_malloc_r+0xb0>
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	dac9      	bge.n	800cf48 <_malloc_r+0x14>
 800cfb4:	230c      	movs	r3, #12
 800cfb6:	602b      	str	r3, [r5, #0]
 800cfb8:	2000      	movs	r0, #0
 800cfba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cfbc:	6821      	ldr	r1, [r4, #0]
 800cfbe:	1bc9      	subs	r1, r1, r7
 800cfc0:	d420      	bmi.n	800d004 <_malloc_r+0xd0>
 800cfc2:	290b      	cmp	r1, #11
 800cfc4:	d90a      	bls.n	800cfdc <_malloc_r+0xa8>
 800cfc6:	19e2      	adds	r2, r4, r7
 800cfc8:	6027      	str	r7, [r4, #0]
 800cfca:	42a3      	cmp	r3, r4
 800cfcc:	d104      	bne.n	800cfd8 <_malloc_r+0xa4>
 800cfce:	6032      	str	r2, [r6, #0]
 800cfd0:	6863      	ldr	r3, [r4, #4]
 800cfd2:	6011      	str	r1, [r2, #0]
 800cfd4:	6053      	str	r3, [r2, #4]
 800cfd6:	e005      	b.n	800cfe4 <_malloc_r+0xb0>
 800cfd8:	605a      	str	r2, [r3, #4]
 800cfda:	e7f9      	b.n	800cfd0 <_malloc_r+0x9c>
 800cfdc:	6862      	ldr	r2, [r4, #4]
 800cfde:	42a3      	cmp	r3, r4
 800cfe0:	d10e      	bne.n	800d000 <_malloc_r+0xcc>
 800cfe2:	6032      	str	r2, [r6, #0]
 800cfe4:	0028      	movs	r0, r5
 800cfe6:	f000 f82d 	bl	800d044 <__malloc_unlock>
 800cfea:	0020      	movs	r0, r4
 800cfec:	2207      	movs	r2, #7
 800cfee:	300b      	adds	r0, #11
 800cff0:	1d23      	adds	r3, r4, #4
 800cff2:	4390      	bics	r0, r2
 800cff4:	1ac2      	subs	r2, r0, r3
 800cff6:	4298      	cmp	r0, r3
 800cff8:	d0df      	beq.n	800cfba <_malloc_r+0x86>
 800cffa:	1a1b      	subs	r3, r3, r0
 800cffc:	50a3      	str	r3, [r4, r2]
 800cffe:	e7dc      	b.n	800cfba <_malloc_r+0x86>
 800d000:	605a      	str	r2, [r3, #4]
 800d002:	e7ef      	b.n	800cfe4 <_malloc_r+0xb0>
 800d004:	0023      	movs	r3, r4
 800d006:	6864      	ldr	r4, [r4, #4]
 800d008:	e7a6      	b.n	800cf58 <_malloc_r+0x24>
 800d00a:	9c00      	ldr	r4, [sp, #0]
 800d00c:	6863      	ldr	r3, [r4, #4]
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	e7ad      	b.n	800cf6e <_malloc_r+0x3a>
 800d012:	001a      	movs	r2, r3
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	42a3      	cmp	r3, r4
 800d018:	d1fb      	bne.n	800d012 <_malloc_r+0xde>
 800d01a:	2300      	movs	r3, #0
 800d01c:	e7da      	b.n	800cfd4 <_malloc_r+0xa0>
 800d01e:	230c      	movs	r3, #12
 800d020:	0028      	movs	r0, r5
 800d022:	602b      	str	r3, [r5, #0]
 800d024:	f000 f80e 	bl	800d044 <__malloc_unlock>
 800d028:	e7c6      	b.n	800cfb8 <_malloc_r+0x84>
 800d02a:	6007      	str	r7, [r0, #0]
 800d02c:	e7da      	b.n	800cfe4 <_malloc_r+0xb0>
 800d02e:	46c0      	nop			@ (mov r8, r8)
 800d030:	200005ac 	.word	0x200005ac

0800d034 <__malloc_lock>:
 800d034:	b510      	push	{r4, lr}
 800d036:	4802      	ldr	r0, [pc, #8]	@ (800d040 <__malloc_lock+0xc>)
 800d038:	f000 fe3b 	bl	800dcb2 <__retarget_lock_acquire_recursive>
 800d03c:	bd10      	pop	{r4, pc}
 800d03e:	46c0      	nop			@ (mov r8, r8)
 800d040:	200006f0 	.word	0x200006f0

0800d044 <__malloc_unlock>:
 800d044:	b510      	push	{r4, lr}
 800d046:	4802      	ldr	r0, [pc, #8]	@ (800d050 <__malloc_unlock+0xc>)
 800d048:	f000 fe34 	bl	800dcb4 <__retarget_lock_release_recursive>
 800d04c:	bd10      	pop	{r4, pc}
 800d04e:	46c0      	nop			@ (mov r8, r8)
 800d050:	200006f0 	.word	0x200006f0

0800d054 <__cvt>:
 800d054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d056:	001f      	movs	r7, r3
 800d058:	2300      	movs	r3, #0
 800d05a:	0016      	movs	r6, r2
 800d05c:	b08b      	sub	sp, #44	@ 0x2c
 800d05e:	429f      	cmp	r7, r3
 800d060:	da04      	bge.n	800d06c <__cvt+0x18>
 800d062:	2180      	movs	r1, #128	@ 0x80
 800d064:	0609      	lsls	r1, r1, #24
 800d066:	187b      	adds	r3, r7, r1
 800d068:	001f      	movs	r7, r3
 800d06a:	232d      	movs	r3, #45	@ 0x2d
 800d06c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d06e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d070:	7013      	strb	r3, [r2, #0]
 800d072:	2320      	movs	r3, #32
 800d074:	2203      	movs	r2, #3
 800d076:	439d      	bics	r5, r3
 800d078:	2d46      	cmp	r5, #70	@ 0x46
 800d07a:	d007      	beq.n	800d08c <__cvt+0x38>
 800d07c:	002b      	movs	r3, r5
 800d07e:	3b45      	subs	r3, #69	@ 0x45
 800d080:	4259      	negs	r1, r3
 800d082:	414b      	adcs	r3, r1
 800d084:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d086:	3a01      	subs	r2, #1
 800d088:	18cb      	adds	r3, r1, r3
 800d08a:	9310      	str	r3, [sp, #64]	@ 0x40
 800d08c:	ab09      	add	r3, sp, #36	@ 0x24
 800d08e:	9304      	str	r3, [sp, #16]
 800d090:	ab08      	add	r3, sp, #32
 800d092:	9303      	str	r3, [sp, #12]
 800d094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d096:	9200      	str	r2, [sp, #0]
 800d098:	9302      	str	r3, [sp, #8]
 800d09a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d09c:	0032      	movs	r2, r6
 800d09e:	9301      	str	r3, [sp, #4]
 800d0a0:	003b      	movs	r3, r7
 800d0a2:	f000 fea1 	bl	800dde8 <_dtoa_r>
 800d0a6:	0004      	movs	r4, r0
 800d0a8:	2d47      	cmp	r5, #71	@ 0x47
 800d0aa:	d11b      	bne.n	800d0e4 <__cvt+0x90>
 800d0ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d0ae:	07db      	lsls	r3, r3, #31
 800d0b0:	d511      	bpl.n	800d0d6 <__cvt+0x82>
 800d0b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0b4:	18c3      	adds	r3, r0, r3
 800d0b6:	9307      	str	r3, [sp, #28]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	0030      	movs	r0, r6
 800d0be:	0039      	movs	r1, r7
 800d0c0:	f7f3 f9c4 	bl	800044c <__aeabi_dcmpeq>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d001      	beq.n	800d0cc <__cvt+0x78>
 800d0c8:	9b07      	ldr	r3, [sp, #28]
 800d0ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0cc:	2230      	movs	r2, #48	@ 0x30
 800d0ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0d0:	9907      	ldr	r1, [sp, #28]
 800d0d2:	428b      	cmp	r3, r1
 800d0d4:	d320      	bcc.n	800d118 <__cvt+0xc4>
 800d0d6:	0020      	movs	r0, r4
 800d0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0da:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d0dc:	1b1b      	subs	r3, r3, r4
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	b00b      	add	sp, #44	@ 0x2c
 800d0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0e6:	18c3      	adds	r3, r0, r3
 800d0e8:	9307      	str	r3, [sp, #28]
 800d0ea:	2d46      	cmp	r5, #70	@ 0x46
 800d0ec:	d1e4      	bne.n	800d0b8 <__cvt+0x64>
 800d0ee:	7803      	ldrb	r3, [r0, #0]
 800d0f0:	2b30      	cmp	r3, #48	@ 0x30
 800d0f2:	d10c      	bne.n	800d10e <__cvt+0xba>
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	0030      	movs	r0, r6
 800d0fa:	0039      	movs	r1, r7
 800d0fc:	f7f3 f9a6 	bl	800044c <__aeabi_dcmpeq>
 800d100:	2800      	cmp	r0, #0
 800d102:	d104      	bne.n	800d10e <__cvt+0xba>
 800d104:	2301      	movs	r3, #1
 800d106:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800d108:	1a9b      	subs	r3, r3, r2
 800d10a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d10c:	6013      	str	r3, [r2, #0]
 800d10e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d110:	9a07      	ldr	r2, [sp, #28]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	18d3      	adds	r3, r2, r3
 800d116:	e7ce      	b.n	800d0b6 <__cvt+0x62>
 800d118:	1c59      	adds	r1, r3, #1
 800d11a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d11c:	701a      	strb	r2, [r3, #0]
 800d11e:	e7d6      	b.n	800d0ce <__cvt+0x7a>

0800d120 <__exponent>:
 800d120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d122:	232b      	movs	r3, #43	@ 0x2b
 800d124:	0005      	movs	r5, r0
 800d126:	000c      	movs	r4, r1
 800d128:	b085      	sub	sp, #20
 800d12a:	7002      	strb	r2, [r0, #0]
 800d12c:	2900      	cmp	r1, #0
 800d12e:	da01      	bge.n	800d134 <__exponent+0x14>
 800d130:	424c      	negs	r4, r1
 800d132:	3302      	adds	r3, #2
 800d134:	706b      	strb	r3, [r5, #1]
 800d136:	2c09      	cmp	r4, #9
 800d138:	dd2c      	ble.n	800d194 <__exponent+0x74>
 800d13a:	ab02      	add	r3, sp, #8
 800d13c:	1dde      	adds	r6, r3, #7
 800d13e:	0020      	movs	r0, r4
 800d140:	210a      	movs	r1, #10
 800d142:	f7f3 f96d 	bl	8000420 <__aeabi_idivmod>
 800d146:	0037      	movs	r7, r6
 800d148:	3130      	adds	r1, #48	@ 0x30
 800d14a:	3e01      	subs	r6, #1
 800d14c:	0020      	movs	r0, r4
 800d14e:	7031      	strb	r1, [r6, #0]
 800d150:	210a      	movs	r1, #10
 800d152:	9401      	str	r4, [sp, #4]
 800d154:	f7f3 f87e 	bl	8000254 <__divsi3>
 800d158:	9b01      	ldr	r3, [sp, #4]
 800d15a:	0004      	movs	r4, r0
 800d15c:	2b63      	cmp	r3, #99	@ 0x63
 800d15e:	dcee      	bgt.n	800d13e <__exponent+0x1e>
 800d160:	1eba      	subs	r2, r7, #2
 800d162:	1ca8      	adds	r0, r5, #2
 800d164:	0001      	movs	r1, r0
 800d166:	0013      	movs	r3, r2
 800d168:	3430      	adds	r4, #48	@ 0x30
 800d16a:	7014      	strb	r4, [r2, #0]
 800d16c:	ac02      	add	r4, sp, #8
 800d16e:	3407      	adds	r4, #7
 800d170:	429c      	cmp	r4, r3
 800d172:	d80a      	bhi.n	800d18a <__exponent+0x6a>
 800d174:	2300      	movs	r3, #0
 800d176:	42a2      	cmp	r2, r4
 800d178:	d803      	bhi.n	800d182 <__exponent+0x62>
 800d17a:	3309      	adds	r3, #9
 800d17c:	aa02      	add	r2, sp, #8
 800d17e:	189b      	adds	r3, r3, r2
 800d180:	1bdb      	subs	r3, r3, r7
 800d182:	18c0      	adds	r0, r0, r3
 800d184:	1b40      	subs	r0, r0, r5
 800d186:	b005      	add	sp, #20
 800d188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d18a:	781c      	ldrb	r4, [r3, #0]
 800d18c:	3301      	adds	r3, #1
 800d18e:	700c      	strb	r4, [r1, #0]
 800d190:	3101      	adds	r1, #1
 800d192:	e7eb      	b.n	800d16c <__exponent+0x4c>
 800d194:	2330      	movs	r3, #48	@ 0x30
 800d196:	18e4      	adds	r4, r4, r3
 800d198:	70ab      	strb	r3, [r5, #2]
 800d19a:	1d28      	adds	r0, r5, #4
 800d19c:	70ec      	strb	r4, [r5, #3]
 800d19e:	e7f1      	b.n	800d184 <__exponent+0x64>

0800d1a0 <_printf_float>:
 800d1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1a2:	b097      	sub	sp, #92	@ 0x5c
 800d1a4:	000d      	movs	r5, r1
 800d1a6:	920a      	str	r2, [sp, #40]	@ 0x28
 800d1a8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800d1aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1ac:	9009      	str	r0, [sp, #36]	@ 0x24
 800d1ae:	f000 fcf1 	bl	800db94 <_localeconv_r>
 800d1b2:	6803      	ldr	r3, [r0, #0]
 800d1b4:	0018      	movs	r0, r3
 800d1b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800d1b8:	f7f2 ffa6 	bl	8000108 <strlen>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d1c0:	9314      	str	r3, [sp, #80]	@ 0x50
 800d1c2:	7e2b      	ldrb	r3, [r5, #24]
 800d1c4:	2207      	movs	r2, #7
 800d1c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800d1c8:	682b      	ldr	r3, [r5, #0]
 800d1ca:	930e      	str	r3, [sp, #56]	@ 0x38
 800d1cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	05c9      	lsls	r1, r1, #23
 800d1d2:	d545      	bpl.n	800d260 <_printf_float+0xc0>
 800d1d4:	189b      	adds	r3, r3, r2
 800d1d6:	4393      	bics	r3, r2
 800d1d8:	001a      	movs	r2, r3
 800d1da:	3208      	adds	r2, #8
 800d1dc:	6022      	str	r2, [r4, #0]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	681e      	ldr	r6, [r3, #0]
 800d1e2:	685f      	ldr	r7, [r3, #4]
 800d1e4:	007b      	lsls	r3, r7, #1
 800d1e6:	085b      	lsrs	r3, r3, #1
 800d1e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d1ea:	9610      	str	r6, [sp, #64]	@ 0x40
 800d1ec:	64ae      	str	r6, [r5, #72]	@ 0x48
 800d1ee:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800d1f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d1f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d1f4:	4ba7      	ldr	r3, [pc, #668]	@ (800d494 <_printf_float+0x2f4>)
 800d1f6:	4252      	negs	r2, r2
 800d1f8:	f7f5 f88a 	bl	8002310 <__aeabi_dcmpun>
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d131      	bne.n	800d264 <_printf_float+0xc4>
 800d200:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d202:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800d204:	2201      	movs	r2, #1
 800d206:	4ba3      	ldr	r3, [pc, #652]	@ (800d494 <_printf_float+0x2f4>)
 800d208:	4252      	negs	r2, r2
 800d20a:	f7f3 f92f 	bl	800046c <__aeabi_dcmple>
 800d20e:	2800      	cmp	r0, #0
 800d210:	d128      	bne.n	800d264 <_printf_float+0xc4>
 800d212:	2200      	movs	r2, #0
 800d214:	2300      	movs	r3, #0
 800d216:	0030      	movs	r0, r6
 800d218:	0039      	movs	r1, r7
 800d21a:	f7f3 f91d 	bl	8000458 <__aeabi_dcmplt>
 800d21e:	2800      	cmp	r0, #0
 800d220:	d003      	beq.n	800d22a <_printf_float+0x8a>
 800d222:	002b      	movs	r3, r5
 800d224:	222d      	movs	r2, #45	@ 0x2d
 800d226:	3343      	adds	r3, #67	@ 0x43
 800d228:	701a      	strb	r2, [r3, #0]
 800d22a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d22c:	4f9a      	ldr	r7, [pc, #616]	@ (800d498 <_printf_float+0x2f8>)
 800d22e:	2b47      	cmp	r3, #71	@ 0x47
 800d230:	d900      	bls.n	800d234 <_printf_float+0x94>
 800d232:	4f9a      	ldr	r7, [pc, #616]	@ (800d49c <_printf_float+0x2fc>)
 800d234:	2303      	movs	r3, #3
 800d236:	2400      	movs	r4, #0
 800d238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d23a:	612b      	str	r3, [r5, #16]
 800d23c:	3301      	adds	r3, #1
 800d23e:	439a      	bics	r2, r3
 800d240:	602a      	str	r2, [r5, #0]
 800d242:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d244:	0029      	movs	r1, r5
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d24a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d24c:	aa15      	add	r2, sp, #84	@ 0x54
 800d24e:	f000 f9e5 	bl	800d61c <_printf_common>
 800d252:	3001      	adds	r0, #1
 800d254:	d000      	beq.n	800d258 <_printf_float+0xb8>
 800d256:	e09f      	b.n	800d398 <_printf_float+0x1f8>
 800d258:	2001      	movs	r0, #1
 800d25a:	4240      	negs	r0, r0
 800d25c:	b017      	add	sp, #92	@ 0x5c
 800d25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d260:	3307      	adds	r3, #7
 800d262:	e7b8      	b.n	800d1d6 <_printf_float+0x36>
 800d264:	0032      	movs	r2, r6
 800d266:	003b      	movs	r3, r7
 800d268:	0030      	movs	r0, r6
 800d26a:	0039      	movs	r1, r7
 800d26c:	f7f5 f850 	bl	8002310 <__aeabi_dcmpun>
 800d270:	2800      	cmp	r0, #0
 800d272:	d00b      	beq.n	800d28c <_printf_float+0xec>
 800d274:	2f00      	cmp	r7, #0
 800d276:	da03      	bge.n	800d280 <_printf_float+0xe0>
 800d278:	002b      	movs	r3, r5
 800d27a:	222d      	movs	r2, #45	@ 0x2d
 800d27c:	3343      	adds	r3, #67	@ 0x43
 800d27e:	701a      	strb	r2, [r3, #0]
 800d280:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d282:	4f87      	ldr	r7, [pc, #540]	@ (800d4a0 <_printf_float+0x300>)
 800d284:	2b47      	cmp	r3, #71	@ 0x47
 800d286:	d9d5      	bls.n	800d234 <_printf_float+0x94>
 800d288:	4f86      	ldr	r7, [pc, #536]	@ (800d4a4 <_printf_float+0x304>)
 800d28a:	e7d3      	b.n	800d234 <_printf_float+0x94>
 800d28c:	2220      	movs	r2, #32
 800d28e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d290:	686b      	ldr	r3, [r5, #4]
 800d292:	4394      	bics	r4, r2
 800d294:	1c5a      	adds	r2, r3, #1
 800d296:	d146      	bne.n	800d326 <_printf_float+0x186>
 800d298:	3307      	adds	r3, #7
 800d29a:	606b      	str	r3, [r5, #4]
 800d29c:	2380      	movs	r3, #128	@ 0x80
 800d29e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2a0:	00db      	lsls	r3, r3, #3
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	602b      	str	r3, [r5, #0]
 800d2a8:	9206      	str	r2, [sp, #24]
 800d2aa:	aa14      	add	r2, sp, #80	@ 0x50
 800d2ac:	9205      	str	r2, [sp, #20]
 800d2ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d2b0:	a90a      	add	r1, sp, #40	@ 0x28
 800d2b2:	9204      	str	r2, [sp, #16]
 800d2b4:	aa13      	add	r2, sp, #76	@ 0x4c
 800d2b6:	9203      	str	r2, [sp, #12]
 800d2b8:	2223      	movs	r2, #35	@ 0x23
 800d2ba:	1852      	adds	r2, r2, r1
 800d2bc:	9202      	str	r2, [sp, #8]
 800d2be:	9301      	str	r3, [sp, #4]
 800d2c0:	686b      	ldr	r3, [r5, #4]
 800d2c2:	0032      	movs	r2, r6
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2c8:	003b      	movs	r3, r7
 800d2ca:	f7ff fec3 	bl	800d054 <__cvt>
 800d2ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d2d0:	0007      	movs	r7, r0
 800d2d2:	2c47      	cmp	r4, #71	@ 0x47
 800d2d4:	d12d      	bne.n	800d332 <_printf_float+0x192>
 800d2d6:	1cd3      	adds	r3, r2, #3
 800d2d8:	db02      	blt.n	800d2e0 <_printf_float+0x140>
 800d2da:	686b      	ldr	r3, [r5, #4]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	dd48      	ble.n	800d372 <_printf_float+0x1d2>
 800d2e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d2e4:	3b02      	subs	r3, #2
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d2ea:	0028      	movs	r0, r5
 800d2ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d2ee:	3901      	subs	r1, #1
 800d2f0:	3050      	adds	r0, #80	@ 0x50
 800d2f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d2f4:	f7ff ff14 	bl	800d120 <__exponent>
 800d2f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d2fa:	0004      	movs	r4, r0
 800d2fc:	1813      	adds	r3, r2, r0
 800d2fe:	612b      	str	r3, [r5, #16]
 800d300:	2a01      	cmp	r2, #1
 800d302:	dc02      	bgt.n	800d30a <_printf_float+0x16a>
 800d304:	682a      	ldr	r2, [r5, #0]
 800d306:	07d2      	lsls	r2, r2, #31
 800d308:	d501      	bpl.n	800d30e <_printf_float+0x16e>
 800d30a:	3301      	adds	r3, #1
 800d30c:	612b      	str	r3, [r5, #16]
 800d30e:	2323      	movs	r3, #35	@ 0x23
 800d310:	aa0a      	add	r2, sp, #40	@ 0x28
 800d312:	189b      	adds	r3, r3, r2
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d100      	bne.n	800d31c <_printf_float+0x17c>
 800d31a:	e792      	b.n	800d242 <_printf_float+0xa2>
 800d31c:	002b      	movs	r3, r5
 800d31e:	222d      	movs	r2, #45	@ 0x2d
 800d320:	3343      	adds	r3, #67	@ 0x43
 800d322:	701a      	strb	r2, [r3, #0]
 800d324:	e78d      	b.n	800d242 <_printf_float+0xa2>
 800d326:	2c47      	cmp	r4, #71	@ 0x47
 800d328:	d1b8      	bne.n	800d29c <_printf_float+0xfc>
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1b6      	bne.n	800d29c <_printf_float+0xfc>
 800d32e:	3301      	adds	r3, #1
 800d330:	e7b3      	b.n	800d29a <_printf_float+0xfa>
 800d332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d334:	0011      	movs	r1, r2
 800d336:	2b65      	cmp	r3, #101	@ 0x65
 800d338:	d9d7      	bls.n	800d2ea <_printf_float+0x14a>
 800d33a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d33c:	2b66      	cmp	r3, #102	@ 0x66
 800d33e:	d11a      	bne.n	800d376 <_printf_float+0x1d6>
 800d340:	686b      	ldr	r3, [r5, #4]
 800d342:	2a00      	cmp	r2, #0
 800d344:	dd09      	ble.n	800d35a <_printf_float+0x1ba>
 800d346:	612a      	str	r2, [r5, #16]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d102      	bne.n	800d352 <_printf_float+0x1b2>
 800d34c:	6829      	ldr	r1, [r5, #0]
 800d34e:	07c9      	lsls	r1, r1, #31
 800d350:	d50b      	bpl.n	800d36a <_printf_float+0x1ca>
 800d352:	3301      	adds	r3, #1
 800d354:	189b      	adds	r3, r3, r2
 800d356:	612b      	str	r3, [r5, #16]
 800d358:	e007      	b.n	800d36a <_printf_float+0x1ca>
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d103      	bne.n	800d366 <_printf_float+0x1c6>
 800d35e:	2201      	movs	r2, #1
 800d360:	6829      	ldr	r1, [r5, #0]
 800d362:	4211      	tst	r1, r2
 800d364:	d000      	beq.n	800d368 <_printf_float+0x1c8>
 800d366:	1c9a      	adds	r2, r3, #2
 800d368:	612a      	str	r2, [r5, #16]
 800d36a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d36c:	2400      	movs	r4, #0
 800d36e:	65ab      	str	r3, [r5, #88]	@ 0x58
 800d370:	e7cd      	b.n	800d30e <_printf_float+0x16e>
 800d372:	2367      	movs	r3, #103	@ 0x67
 800d374:	930c      	str	r3, [sp, #48]	@ 0x30
 800d376:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d378:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d37a:	4299      	cmp	r1, r3
 800d37c:	db06      	blt.n	800d38c <_printf_float+0x1ec>
 800d37e:	682b      	ldr	r3, [r5, #0]
 800d380:	6129      	str	r1, [r5, #16]
 800d382:	07db      	lsls	r3, r3, #31
 800d384:	d5f1      	bpl.n	800d36a <_printf_float+0x1ca>
 800d386:	3101      	adds	r1, #1
 800d388:	6129      	str	r1, [r5, #16]
 800d38a:	e7ee      	b.n	800d36a <_printf_float+0x1ca>
 800d38c:	2201      	movs	r2, #1
 800d38e:	2900      	cmp	r1, #0
 800d390:	dce0      	bgt.n	800d354 <_printf_float+0x1b4>
 800d392:	1892      	adds	r2, r2, r2
 800d394:	1a52      	subs	r2, r2, r1
 800d396:	e7dd      	b.n	800d354 <_printf_float+0x1b4>
 800d398:	682a      	ldr	r2, [r5, #0]
 800d39a:	0553      	lsls	r3, r2, #21
 800d39c:	d408      	bmi.n	800d3b0 <_printf_float+0x210>
 800d39e:	692b      	ldr	r3, [r5, #16]
 800d3a0:	003a      	movs	r2, r7
 800d3a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d3a8:	47a0      	blx	r4
 800d3aa:	3001      	adds	r0, #1
 800d3ac:	d129      	bne.n	800d402 <_printf_float+0x262>
 800d3ae:	e753      	b.n	800d258 <_printf_float+0xb8>
 800d3b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3b2:	2b65      	cmp	r3, #101	@ 0x65
 800d3b4:	d800      	bhi.n	800d3b8 <_printf_float+0x218>
 800d3b6:	e0da      	b.n	800d56e <_printf_float+0x3ce>
 800d3b8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d3ba:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d3bc:	2200      	movs	r2, #0
 800d3be:	2300      	movs	r3, #0
 800d3c0:	f7f3 f844 	bl	800044c <__aeabi_dcmpeq>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d033      	beq.n	800d430 <_printf_float+0x290>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	4a37      	ldr	r2, [pc, #220]	@ (800d4a8 <_printf_float+0x308>)
 800d3cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3d0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d3d2:	47a0      	blx	r4
 800d3d4:	3001      	adds	r0, #1
 800d3d6:	d100      	bne.n	800d3da <_printf_float+0x23a>
 800d3d8:	e73e      	b.n	800d258 <_printf_float+0xb8>
 800d3da:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d3dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3de:	42b3      	cmp	r3, r6
 800d3e0:	db02      	blt.n	800d3e8 <_printf_float+0x248>
 800d3e2:	682b      	ldr	r3, [r5, #0]
 800d3e4:	07db      	lsls	r3, r3, #31
 800d3e6:	d50c      	bpl.n	800d402 <_printf_float+0x262>
 800d3e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d3ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3f2:	47a0      	blx	r4
 800d3f4:	2400      	movs	r4, #0
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	d100      	bne.n	800d3fc <_printf_float+0x25c>
 800d3fa:	e72d      	b.n	800d258 <_printf_float+0xb8>
 800d3fc:	1e73      	subs	r3, r6, #1
 800d3fe:	42a3      	cmp	r3, r4
 800d400:	dc0a      	bgt.n	800d418 <_printf_float+0x278>
 800d402:	682b      	ldr	r3, [r5, #0]
 800d404:	079b      	lsls	r3, r3, #30
 800d406:	d500      	bpl.n	800d40a <_printf_float+0x26a>
 800d408:	e105      	b.n	800d616 <_printf_float+0x476>
 800d40a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d40c:	68e8      	ldr	r0, [r5, #12]
 800d40e:	4298      	cmp	r0, r3
 800d410:	db00      	blt.n	800d414 <_printf_float+0x274>
 800d412:	e723      	b.n	800d25c <_printf_float+0xbc>
 800d414:	0018      	movs	r0, r3
 800d416:	e721      	b.n	800d25c <_printf_float+0xbc>
 800d418:	002a      	movs	r2, r5
 800d41a:	2301      	movs	r3, #1
 800d41c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d41e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d420:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d422:	321a      	adds	r2, #26
 800d424:	47b8      	blx	r7
 800d426:	3001      	adds	r0, #1
 800d428:	d100      	bne.n	800d42c <_printf_float+0x28c>
 800d42a:	e715      	b.n	800d258 <_printf_float+0xb8>
 800d42c:	3401      	adds	r4, #1
 800d42e:	e7e5      	b.n	800d3fc <_printf_float+0x25c>
 800d430:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d432:	2b00      	cmp	r3, #0
 800d434:	dc3a      	bgt.n	800d4ac <_printf_float+0x30c>
 800d436:	2301      	movs	r3, #1
 800d438:	4a1b      	ldr	r2, [pc, #108]	@ (800d4a8 <_printf_float+0x308>)
 800d43a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d43c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d43e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d440:	47a0      	blx	r4
 800d442:	3001      	adds	r0, #1
 800d444:	d100      	bne.n	800d448 <_printf_float+0x2a8>
 800d446:	e707      	b.n	800d258 <_printf_float+0xb8>
 800d448:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800d44a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d44c:	4333      	orrs	r3, r6
 800d44e:	d102      	bne.n	800d456 <_printf_float+0x2b6>
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	07db      	lsls	r3, r3, #31
 800d454:	d5d5      	bpl.n	800d402 <_printf_float+0x262>
 800d456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d458:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d45a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d45c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d45e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d460:	47a0      	blx	r4
 800d462:	2300      	movs	r3, #0
 800d464:	3001      	adds	r0, #1
 800d466:	d100      	bne.n	800d46a <_printf_float+0x2ca>
 800d468:	e6f6      	b.n	800d258 <_printf_float+0xb8>
 800d46a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d46c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d46e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d470:	425b      	negs	r3, r3
 800d472:	4293      	cmp	r3, r2
 800d474:	dc01      	bgt.n	800d47a <_printf_float+0x2da>
 800d476:	0033      	movs	r3, r6
 800d478:	e792      	b.n	800d3a0 <_printf_float+0x200>
 800d47a:	002a      	movs	r2, r5
 800d47c:	2301      	movs	r3, #1
 800d47e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d480:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d482:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d484:	321a      	adds	r2, #26
 800d486:	47a0      	blx	r4
 800d488:	3001      	adds	r0, #1
 800d48a:	d100      	bne.n	800d48e <_printf_float+0x2ee>
 800d48c:	e6e4      	b.n	800d258 <_printf_float+0xb8>
 800d48e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d490:	3301      	adds	r3, #1
 800d492:	e7ea      	b.n	800d46a <_printf_float+0x2ca>
 800d494:	7fefffff 	.word	0x7fefffff
 800d498:	0801b458 	.word	0x0801b458
 800d49c:	0801b45c 	.word	0x0801b45c
 800d4a0:	0801b460 	.word	0x0801b460
 800d4a4:	0801b464 	.word	0x0801b464
 800d4a8:	0801b468 	.word	0x0801b468
 800d4ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d4ae:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d4b0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d4b2:	429e      	cmp	r6, r3
 800d4b4:	dd00      	ble.n	800d4b8 <_printf_float+0x318>
 800d4b6:	001e      	movs	r6, r3
 800d4b8:	2e00      	cmp	r6, #0
 800d4ba:	dc31      	bgt.n	800d520 <_printf_float+0x380>
 800d4bc:	43f3      	mvns	r3, r6
 800d4be:	2400      	movs	r4, #0
 800d4c0:	17db      	asrs	r3, r3, #31
 800d4c2:	4033      	ands	r3, r6
 800d4c4:	930e      	str	r3, [sp, #56]	@ 0x38
 800d4c6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800d4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ca:	1af3      	subs	r3, r6, r3
 800d4cc:	42a3      	cmp	r3, r4
 800d4ce:	dc30      	bgt.n	800d532 <_printf_float+0x392>
 800d4d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d4d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	dc38      	bgt.n	800d54a <_printf_float+0x3aa>
 800d4d8:	682b      	ldr	r3, [r5, #0]
 800d4da:	07db      	lsls	r3, r3, #31
 800d4dc:	d435      	bmi.n	800d54a <_printf_float+0x3aa>
 800d4de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d4e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d4e4:	1b9b      	subs	r3, r3, r6
 800d4e6:	1b14      	subs	r4, r2, r4
 800d4e8:	429c      	cmp	r4, r3
 800d4ea:	dd00      	ble.n	800d4ee <_printf_float+0x34e>
 800d4ec:	001c      	movs	r4, r3
 800d4ee:	2c00      	cmp	r4, #0
 800d4f0:	dc34      	bgt.n	800d55c <_printf_float+0x3bc>
 800d4f2:	43e3      	mvns	r3, r4
 800d4f4:	2600      	movs	r6, #0
 800d4f6:	17db      	asrs	r3, r3, #31
 800d4f8:	401c      	ands	r4, r3
 800d4fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d4fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	1b1b      	subs	r3, r3, r4
 800d502:	42b3      	cmp	r3, r6
 800d504:	dc00      	bgt.n	800d508 <_printf_float+0x368>
 800d506:	e77c      	b.n	800d402 <_printf_float+0x262>
 800d508:	002a      	movs	r2, r5
 800d50a:	2301      	movs	r3, #1
 800d50c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d50e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d510:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d512:	321a      	adds	r2, #26
 800d514:	47b8      	blx	r7
 800d516:	3001      	adds	r0, #1
 800d518:	d100      	bne.n	800d51c <_printf_float+0x37c>
 800d51a:	e69d      	b.n	800d258 <_printf_float+0xb8>
 800d51c:	3601      	adds	r6, #1
 800d51e:	e7ec      	b.n	800d4fa <_printf_float+0x35a>
 800d520:	0033      	movs	r3, r6
 800d522:	003a      	movs	r2, r7
 800d524:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d528:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d52a:	47a0      	blx	r4
 800d52c:	3001      	adds	r0, #1
 800d52e:	d1c5      	bne.n	800d4bc <_printf_float+0x31c>
 800d530:	e692      	b.n	800d258 <_printf_float+0xb8>
 800d532:	002a      	movs	r2, r5
 800d534:	2301      	movs	r3, #1
 800d536:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d538:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d53a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d53c:	321a      	adds	r2, #26
 800d53e:	47b0      	blx	r6
 800d540:	3001      	adds	r0, #1
 800d542:	d100      	bne.n	800d546 <_printf_float+0x3a6>
 800d544:	e688      	b.n	800d258 <_printf_float+0xb8>
 800d546:	3401      	adds	r4, #1
 800d548:	e7bd      	b.n	800d4c6 <_printf_float+0x326>
 800d54a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d54c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d54e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d550:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d552:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800d554:	47a0      	blx	r4
 800d556:	3001      	adds	r0, #1
 800d558:	d1c1      	bne.n	800d4de <_printf_float+0x33e>
 800d55a:	e67d      	b.n	800d258 <_printf_float+0xb8>
 800d55c:	19ba      	adds	r2, r7, r6
 800d55e:	0023      	movs	r3, r4
 800d560:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d564:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d566:	47b0      	blx	r6
 800d568:	3001      	adds	r0, #1
 800d56a:	d1c2      	bne.n	800d4f2 <_printf_float+0x352>
 800d56c:	e674      	b.n	800d258 <_printf_float+0xb8>
 800d56e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d570:	930c      	str	r3, [sp, #48]	@ 0x30
 800d572:	2b01      	cmp	r3, #1
 800d574:	dc02      	bgt.n	800d57c <_printf_float+0x3dc>
 800d576:	2301      	movs	r3, #1
 800d578:	421a      	tst	r2, r3
 800d57a:	d039      	beq.n	800d5f0 <_printf_float+0x450>
 800d57c:	2301      	movs	r3, #1
 800d57e:	003a      	movs	r2, r7
 800d580:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d582:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d584:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d586:	47b0      	blx	r6
 800d588:	3001      	adds	r0, #1
 800d58a:	d100      	bne.n	800d58e <_printf_float+0x3ee>
 800d58c:	e664      	b.n	800d258 <_printf_float+0xb8>
 800d58e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d590:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d592:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d594:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d596:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d598:	47b0      	blx	r6
 800d59a:	3001      	adds	r0, #1
 800d59c:	d100      	bne.n	800d5a0 <_printf_float+0x400>
 800d59e:	e65b      	b.n	800d258 <_printf_float+0xb8>
 800d5a0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800d5a2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d5a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f7f2 ff4d 	bl	800044c <__aeabi_dcmpeq>
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	d11a      	bne.n	800d5ec <_printf_float+0x44c>
 800d5b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5b8:	1c7a      	adds	r2, r7, #1
 800d5ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d5bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5be:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d5c0:	47b0      	blx	r6
 800d5c2:	3001      	adds	r0, #1
 800d5c4:	d10e      	bne.n	800d5e4 <_printf_float+0x444>
 800d5c6:	e647      	b.n	800d258 <_printf_float+0xb8>
 800d5c8:	002a      	movs	r2, r5
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d5ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5d0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d5d2:	321a      	adds	r2, #26
 800d5d4:	47b8      	blx	r7
 800d5d6:	3001      	adds	r0, #1
 800d5d8:	d100      	bne.n	800d5dc <_printf_float+0x43c>
 800d5da:	e63d      	b.n	800d258 <_printf_float+0xb8>
 800d5dc:	3601      	adds	r6, #1
 800d5de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5e0:	429e      	cmp	r6, r3
 800d5e2:	dbf1      	blt.n	800d5c8 <_printf_float+0x428>
 800d5e4:	002a      	movs	r2, r5
 800d5e6:	0023      	movs	r3, r4
 800d5e8:	3250      	adds	r2, #80	@ 0x50
 800d5ea:	e6da      	b.n	800d3a2 <_printf_float+0x202>
 800d5ec:	2600      	movs	r6, #0
 800d5ee:	e7f6      	b.n	800d5de <_printf_float+0x43e>
 800d5f0:	003a      	movs	r2, r7
 800d5f2:	e7e2      	b.n	800d5ba <_printf_float+0x41a>
 800d5f4:	002a      	movs	r2, r5
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d5fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5fc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d5fe:	3219      	adds	r2, #25
 800d600:	47b0      	blx	r6
 800d602:	3001      	adds	r0, #1
 800d604:	d100      	bne.n	800d608 <_printf_float+0x468>
 800d606:	e627      	b.n	800d258 <_printf_float+0xb8>
 800d608:	3401      	adds	r4, #1
 800d60a:	68eb      	ldr	r3, [r5, #12]
 800d60c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d60e:	1a9b      	subs	r3, r3, r2
 800d610:	42a3      	cmp	r3, r4
 800d612:	dcef      	bgt.n	800d5f4 <_printf_float+0x454>
 800d614:	e6f9      	b.n	800d40a <_printf_float+0x26a>
 800d616:	2400      	movs	r4, #0
 800d618:	e7f7      	b.n	800d60a <_printf_float+0x46a>
 800d61a:	46c0      	nop			@ (mov r8, r8)

0800d61c <_printf_common>:
 800d61c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d61e:	0016      	movs	r6, r2
 800d620:	9301      	str	r3, [sp, #4]
 800d622:	688a      	ldr	r2, [r1, #8]
 800d624:	690b      	ldr	r3, [r1, #16]
 800d626:	000c      	movs	r4, r1
 800d628:	9000      	str	r0, [sp, #0]
 800d62a:	4293      	cmp	r3, r2
 800d62c:	da00      	bge.n	800d630 <_printf_common+0x14>
 800d62e:	0013      	movs	r3, r2
 800d630:	0022      	movs	r2, r4
 800d632:	6033      	str	r3, [r6, #0]
 800d634:	3243      	adds	r2, #67	@ 0x43
 800d636:	7812      	ldrb	r2, [r2, #0]
 800d638:	2a00      	cmp	r2, #0
 800d63a:	d001      	beq.n	800d640 <_printf_common+0x24>
 800d63c:	3301      	adds	r3, #1
 800d63e:	6033      	str	r3, [r6, #0]
 800d640:	6823      	ldr	r3, [r4, #0]
 800d642:	069b      	lsls	r3, r3, #26
 800d644:	d502      	bpl.n	800d64c <_printf_common+0x30>
 800d646:	6833      	ldr	r3, [r6, #0]
 800d648:	3302      	adds	r3, #2
 800d64a:	6033      	str	r3, [r6, #0]
 800d64c:	6822      	ldr	r2, [r4, #0]
 800d64e:	2306      	movs	r3, #6
 800d650:	0015      	movs	r5, r2
 800d652:	401d      	ands	r5, r3
 800d654:	421a      	tst	r2, r3
 800d656:	d027      	beq.n	800d6a8 <_printf_common+0x8c>
 800d658:	0023      	movs	r3, r4
 800d65a:	3343      	adds	r3, #67	@ 0x43
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	1e5a      	subs	r2, r3, #1
 800d660:	4193      	sbcs	r3, r2
 800d662:	6822      	ldr	r2, [r4, #0]
 800d664:	0692      	lsls	r2, r2, #26
 800d666:	d430      	bmi.n	800d6ca <_printf_common+0xae>
 800d668:	0022      	movs	r2, r4
 800d66a:	9901      	ldr	r1, [sp, #4]
 800d66c:	9800      	ldr	r0, [sp, #0]
 800d66e:	9d08      	ldr	r5, [sp, #32]
 800d670:	3243      	adds	r2, #67	@ 0x43
 800d672:	47a8      	blx	r5
 800d674:	3001      	adds	r0, #1
 800d676:	d025      	beq.n	800d6c4 <_printf_common+0xa8>
 800d678:	2206      	movs	r2, #6
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	2500      	movs	r5, #0
 800d67e:	4013      	ands	r3, r2
 800d680:	2b04      	cmp	r3, #4
 800d682:	d105      	bne.n	800d690 <_printf_common+0x74>
 800d684:	6833      	ldr	r3, [r6, #0]
 800d686:	68e5      	ldr	r5, [r4, #12]
 800d688:	1aed      	subs	r5, r5, r3
 800d68a:	43eb      	mvns	r3, r5
 800d68c:	17db      	asrs	r3, r3, #31
 800d68e:	401d      	ands	r5, r3
 800d690:	68a3      	ldr	r3, [r4, #8]
 800d692:	6922      	ldr	r2, [r4, #16]
 800d694:	4293      	cmp	r3, r2
 800d696:	dd01      	ble.n	800d69c <_printf_common+0x80>
 800d698:	1a9b      	subs	r3, r3, r2
 800d69a:	18ed      	adds	r5, r5, r3
 800d69c:	2600      	movs	r6, #0
 800d69e:	42b5      	cmp	r5, r6
 800d6a0:	d120      	bne.n	800d6e4 <_printf_common+0xc8>
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	e010      	b.n	800d6c8 <_printf_common+0xac>
 800d6a6:	3501      	adds	r5, #1
 800d6a8:	68e3      	ldr	r3, [r4, #12]
 800d6aa:	6832      	ldr	r2, [r6, #0]
 800d6ac:	1a9b      	subs	r3, r3, r2
 800d6ae:	42ab      	cmp	r3, r5
 800d6b0:	ddd2      	ble.n	800d658 <_printf_common+0x3c>
 800d6b2:	0022      	movs	r2, r4
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	9901      	ldr	r1, [sp, #4]
 800d6b8:	9800      	ldr	r0, [sp, #0]
 800d6ba:	9f08      	ldr	r7, [sp, #32]
 800d6bc:	3219      	adds	r2, #25
 800d6be:	47b8      	blx	r7
 800d6c0:	3001      	adds	r0, #1
 800d6c2:	d1f0      	bne.n	800d6a6 <_printf_common+0x8a>
 800d6c4:	2001      	movs	r0, #1
 800d6c6:	4240      	negs	r0, r0
 800d6c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6ca:	2030      	movs	r0, #48	@ 0x30
 800d6cc:	18e1      	adds	r1, r4, r3
 800d6ce:	3143      	adds	r1, #67	@ 0x43
 800d6d0:	7008      	strb	r0, [r1, #0]
 800d6d2:	0021      	movs	r1, r4
 800d6d4:	1c5a      	adds	r2, r3, #1
 800d6d6:	3145      	adds	r1, #69	@ 0x45
 800d6d8:	7809      	ldrb	r1, [r1, #0]
 800d6da:	18a2      	adds	r2, r4, r2
 800d6dc:	3243      	adds	r2, #67	@ 0x43
 800d6de:	3302      	adds	r3, #2
 800d6e0:	7011      	strb	r1, [r2, #0]
 800d6e2:	e7c1      	b.n	800d668 <_printf_common+0x4c>
 800d6e4:	0022      	movs	r2, r4
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	9901      	ldr	r1, [sp, #4]
 800d6ea:	9800      	ldr	r0, [sp, #0]
 800d6ec:	9f08      	ldr	r7, [sp, #32]
 800d6ee:	321a      	adds	r2, #26
 800d6f0:	47b8      	blx	r7
 800d6f2:	3001      	adds	r0, #1
 800d6f4:	d0e6      	beq.n	800d6c4 <_printf_common+0xa8>
 800d6f6:	3601      	adds	r6, #1
 800d6f8:	e7d1      	b.n	800d69e <_printf_common+0x82>
	...

0800d6fc <_printf_i>:
 800d6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6fe:	b08b      	sub	sp, #44	@ 0x2c
 800d700:	9206      	str	r2, [sp, #24]
 800d702:	000a      	movs	r2, r1
 800d704:	3243      	adds	r2, #67	@ 0x43
 800d706:	9307      	str	r3, [sp, #28]
 800d708:	9005      	str	r0, [sp, #20]
 800d70a:	9203      	str	r2, [sp, #12]
 800d70c:	7e0a      	ldrb	r2, [r1, #24]
 800d70e:	000c      	movs	r4, r1
 800d710:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d712:	2a78      	cmp	r2, #120	@ 0x78
 800d714:	d809      	bhi.n	800d72a <_printf_i+0x2e>
 800d716:	2a62      	cmp	r2, #98	@ 0x62
 800d718:	d80b      	bhi.n	800d732 <_printf_i+0x36>
 800d71a:	2a00      	cmp	r2, #0
 800d71c:	d100      	bne.n	800d720 <_printf_i+0x24>
 800d71e:	e0bc      	b.n	800d89a <_printf_i+0x19e>
 800d720:	497b      	ldr	r1, [pc, #492]	@ (800d910 <_printf_i+0x214>)
 800d722:	9104      	str	r1, [sp, #16]
 800d724:	2a58      	cmp	r2, #88	@ 0x58
 800d726:	d100      	bne.n	800d72a <_printf_i+0x2e>
 800d728:	e090      	b.n	800d84c <_printf_i+0x150>
 800d72a:	0025      	movs	r5, r4
 800d72c:	3542      	adds	r5, #66	@ 0x42
 800d72e:	702a      	strb	r2, [r5, #0]
 800d730:	e022      	b.n	800d778 <_printf_i+0x7c>
 800d732:	0010      	movs	r0, r2
 800d734:	3863      	subs	r0, #99	@ 0x63
 800d736:	2815      	cmp	r0, #21
 800d738:	d8f7      	bhi.n	800d72a <_printf_i+0x2e>
 800d73a:	f7f2 fcf7 	bl	800012c <__gnu_thumb1_case_shi>
 800d73e:	0016      	.short	0x0016
 800d740:	fff6001f 	.word	0xfff6001f
 800d744:	fff6fff6 	.word	0xfff6fff6
 800d748:	001ffff6 	.word	0x001ffff6
 800d74c:	fff6fff6 	.word	0xfff6fff6
 800d750:	fff6fff6 	.word	0xfff6fff6
 800d754:	003600a1 	.word	0x003600a1
 800d758:	fff60080 	.word	0xfff60080
 800d75c:	00b2fff6 	.word	0x00b2fff6
 800d760:	0036fff6 	.word	0x0036fff6
 800d764:	fff6fff6 	.word	0xfff6fff6
 800d768:	0084      	.short	0x0084
 800d76a:	0025      	movs	r5, r4
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	3542      	adds	r5, #66	@ 0x42
 800d770:	1d11      	adds	r1, r2, #4
 800d772:	6019      	str	r1, [r3, #0]
 800d774:	6813      	ldr	r3, [r2, #0]
 800d776:	702b      	strb	r3, [r5, #0]
 800d778:	2301      	movs	r3, #1
 800d77a:	e0a0      	b.n	800d8be <_printf_i+0x1c2>
 800d77c:	6818      	ldr	r0, [r3, #0]
 800d77e:	6809      	ldr	r1, [r1, #0]
 800d780:	1d02      	adds	r2, r0, #4
 800d782:	060d      	lsls	r5, r1, #24
 800d784:	d50b      	bpl.n	800d79e <_printf_i+0xa2>
 800d786:	6806      	ldr	r6, [r0, #0]
 800d788:	601a      	str	r2, [r3, #0]
 800d78a:	2e00      	cmp	r6, #0
 800d78c:	da03      	bge.n	800d796 <_printf_i+0x9a>
 800d78e:	232d      	movs	r3, #45	@ 0x2d
 800d790:	9a03      	ldr	r2, [sp, #12]
 800d792:	4276      	negs	r6, r6
 800d794:	7013      	strb	r3, [r2, #0]
 800d796:	4b5e      	ldr	r3, [pc, #376]	@ (800d910 <_printf_i+0x214>)
 800d798:	270a      	movs	r7, #10
 800d79a:	9304      	str	r3, [sp, #16]
 800d79c:	e018      	b.n	800d7d0 <_printf_i+0xd4>
 800d79e:	6806      	ldr	r6, [r0, #0]
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	0649      	lsls	r1, r1, #25
 800d7a4:	d5f1      	bpl.n	800d78a <_printf_i+0x8e>
 800d7a6:	b236      	sxth	r6, r6
 800d7a8:	e7ef      	b.n	800d78a <_printf_i+0x8e>
 800d7aa:	6808      	ldr	r0, [r1, #0]
 800d7ac:	6819      	ldr	r1, [r3, #0]
 800d7ae:	c940      	ldmia	r1!, {r6}
 800d7b0:	0605      	lsls	r5, r0, #24
 800d7b2:	d402      	bmi.n	800d7ba <_printf_i+0xbe>
 800d7b4:	0640      	lsls	r0, r0, #25
 800d7b6:	d500      	bpl.n	800d7ba <_printf_i+0xbe>
 800d7b8:	b2b6      	uxth	r6, r6
 800d7ba:	6019      	str	r1, [r3, #0]
 800d7bc:	4b54      	ldr	r3, [pc, #336]	@ (800d910 <_printf_i+0x214>)
 800d7be:	270a      	movs	r7, #10
 800d7c0:	9304      	str	r3, [sp, #16]
 800d7c2:	2a6f      	cmp	r2, #111	@ 0x6f
 800d7c4:	d100      	bne.n	800d7c8 <_printf_i+0xcc>
 800d7c6:	3f02      	subs	r7, #2
 800d7c8:	0023      	movs	r3, r4
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	3343      	adds	r3, #67	@ 0x43
 800d7ce:	701a      	strb	r2, [r3, #0]
 800d7d0:	6863      	ldr	r3, [r4, #4]
 800d7d2:	60a3      	str	r3, [r4, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	db03      	blt.n	800d7e0 <_printf_i+0xe4>
 800d7d8:	2104      	movs	r1, #4
 800d7da:	6822      	ldr	r2, [r4, #0]
 800d7dc:	438a      	bics	r2, r1
 800d7de:	6022      	str	r2, [r4, #0]
 800d7e0:	2e00      	cmp	r6, #0
 800d7e2:	d102      	bne.n	800d7ea <_printf_i+0xee>
 800d7e4:	9d03      	ldr	r5, [sp, #12]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00c      	beq.n	800d804 <_printf_i+0x108>
 800d7ea:	9d03      	ldr	r5, [sp, #12]
 800d7ec:	0030      	movs	r0, r6
 800d7ee:	0039      	movs	r1, r7
 800d7f0:	f7f2 fd2c 	bl	800024c <__aeabi_uidivmod>
 800d7f4:	9b04      	ldr	r3, [sp, #16]
 800d7f6:	3d01      	subs	r5, #1
 800d7f8:	5c5b      	ldrb	r3, [r3, r1]
 800d7fa:	702b      	strb	r3, [r5, #0]
 800d7fc:	0033      	movs	r3, r6
 800d7fe:	0006      	movs	r6, r0
 800d800:	429f      	cmp	r7, r3
 800d802:	d9f3      	bls.n	800d7ec <_printf_i+0xf0>
 800d804:	2f08      	cmp	r7, #8
 800d806:	d109      	bne.n	800d81c <_printf_i+0x120>
 800d808:	6823      	ldr	r3, [r4, #0]
 800d80a:	07db      	lsls	r3, r3, #31
 800d80c:	d506      	bpl.n	800d81c <_printf_i+0x120>
 800d80e:	6862      	ldr	r2, [r4, #4]
 800d810:	6923      	ldr	r3, [r4, #16]
 800d812:	429a      	cmp	r2, r3
 800d814:	dc02      	bgt.n	800d81c <_printf_i+0x120>
 800d816:	2330      	movs	r3, #48	@ 0x30
 800d818:	3d01      	subs	r5, #1
 800d81a:	702b      	strb	r3, [r5, #0]
 800d81c:	9b03      	ldr	r3, [sp, #12]
 800d81e:	1b5b      	subs	r3, r3, r5
 800d820:	6123      	str	r3, [r4, #16]
 800d822:	9b07      	ldr	r3, [sp, #28]
 800d824:	0021      	movs	r1, r4
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	9805      	ldr	r0, [sp, #20]
 800d82a:	9b06      	ldr	r3, [sp, #24]
 800d82c:	aa09      	add	r2, sp, #36	@ 0x24
 800d82e:	f7ff fef5 	bl	800d61c <_printf_common>
 800d832:	3001      	adds	r0, #1
 800d834:	d148      	bne.n	800d8c8 <_printf_i+0x1cc>
 800d836:	2001      	movs	r0, #1
 800d838:	4240      	negs	r0, r0
 800d83a:	b00b      	add	sp, #44	@ 0x2c
 800d83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d83e:	2220      	movs	r2, #32
 800d840:	6809      	ldr	r1, [r1, #0]
 800d842:	430a      	orrs	r2, r1
 800d844:	6022      	str	r2, [r4, #0]
 800d846:	2278      	movs	r2, #120	@ 0x78
 800d848:	4932      	ldr	r1, [pc, #200]	@ (800d914 <_printf_i+0x218>)
 800d84a:	9104      	str	r1, [sp, #16]
 800d84c:	0021      	movs	r1, r4
 800d84e:	3145      	adds	r1, #69	@ 0x45
 800d850:	700a      	strb	r2, [r1, #0]
 800d852:	6819      	ldr	r1, [r3, #0]
 800d854:	6822      	ldr	r2, [r4, #0]
 800d856:	c940      	ldmia	r1!, {r6}
 800d858:	0610      	lsls	r0, r2, #24
 800d85a:	d402      	bmi.n	800d862 <_printf_i+0x166>
 800d85c:	0650      	lsls	r0, r2, #25
 800d85e:	d500      	bpl.n	800d862 <_printf_i+0x166>
 800d860:	b2b6      	uxth	r6, r6
 800d862:	6019      	str	r1, [r3, #0]
 800d864:	07d3      	lsls	r3, r2, #31
 800d866:	d502      	bpl.n	800d86e <_printf_i+0x172>
 800d868:	2320      	movs	r3, #32
 800d86a:	4313      	orrs	r3, r2
 800d86c:	6023      	str	r3, [r4, #0]
 800d86e:	2e00      	cmp	r6, #0
 800d870:	d001      	beq.n	800d876 <_printf_i+0x17a>
 800d872:	2710      	movs	r7, #16
 800d874:	e7a8      	b.n	800d7c8 <_printf_i+0xcc>
 800d876:	2220      	movs	r2, #32
 800d878:	6823      	ldr	r3, [r4, #0]
 800d87a:	4393      	bics	r3, r2
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	e7f8      	b.n	800d872 <_printf_i+0x176>
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	680d      	ldr	r5, [r1, #0]
 800d884:	1d10      	adds	r0, r2, #4
 800d886:	6949      	ldr	r1, [r1, #20]
 800d888:	6018      	str	r0, [r3, #0]
 800d88a:	6813      	ldr	r3, [r2, #0]
 800d88c:	062e      	lsls	r6, r5, #24
 800d88e:	d501      	bpl.n	800d894 <_printf_i+0x198>
 800d890:	6019      	str	r1, [r3, #0]
 800d892:	e002      	b.n	800d89a <_printf_i+0x19e>
 800d894:	066d      	lsls	r5, r5, #25
 800d896:	d5fb      	bpl.n	800d890 <_printf_i+0x194>
 800d898:	8019      	strh	r1, [r3, #0]
 800d89a:	2300      	movs	r3, #0
 800d89c:	9d03      	ldr	r5, [sp, #12]
 800d89e:	6123      	str	r3, [r4, #16]
 800d8a0:	e7bf      	b.n	800d822 <_printf_i+0x126>
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	1d11      	adds	r1, r2, #4
 800d8a6:	6019      	str	r1, [r3, #0]
 800d8a8:	6815      	ldr	r5, [r2, #0]
 800d8aa:	2100      	movs	r1, #0
 800d8ac:	0028      	movs	r0, r5
 800d8ae:	6862      	ldr	r2, [r4, #4]
 800d8b0:	f000 fa01 	bl	800dcb6 <memchr>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d001      	beq.n	800d8bc <_printf_i+0x1c0>
 800d8b8:	1b40      	subs	r0, r0, r5
 800d8ba:	6060      	str	r0, [r4, #4]
 800d8bc:	6863      	ldr	r3, [r4, #4]
 800d8be:	6123      	str	r3, [r4, #16]
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	9a03      	ldr	r2, [sp, #12]
 800d8c4:	7013      	strb	r3, [r2, #0]
 800d8c6:	e7ac      	b.n	800d822 <_printf_i+0x126>
 800d8c8:	002a      	movs	r2, r5
 800d8ca:	6923      	ldr	r3, [r4, #16]
 800d8cc:	9906      	ldr	r1, [sp, #24]
 800d8ce:	9805      	ldr	r0, [sp, #20]
 800d8d0:	9d07      	ldr	r5, [sp, #28]
 800d8d2:	47a8      	blx	r5
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d0ae      	beq.n	800d836 <_printf_i+0x13a>
 800d8d8:	6823      	ldr	r3, [r4, #0]
 800d8da:	079b      	lsls	r3, r3, #30
 800d8dc:	d415      	bmi.n	800d90a <_printf_i+0x20e>
 800d8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8e0:	68e0      	ldr	r0, [r4, #12]
 800d8e2:	4298      	cmp	r0, r3
 800d8e4:	daa9      	bge.n	800d83a <_printf_i+0x13e>
 800d8e6:	0018      	movs	r0, r3
 800d8e8:	e7a7      	b.n	800d83a <_printf_i+0x13e>
 800d8ea:	0022      	movs	r2, r4
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	9906      	ldr	r1, [sp, #24]
 800d8f0:	9805      	ldr	r0, [sp, #20]
 800d8f2:	9e07      	ldr	r6, [sp, #28]
 800d8f4:	3219      	adds	r2, #25
 800d8f6:	47b0      	blx	r6
 800d8f8:	3001      	adds	r0, #1
 800d8fa:	d09c      	beq.n	800d836 <_printf_i+0x13a>
 800d8fc:	3501      	adds	r5, #1
 800d8fe:	68e3      	ldr	r3, [r4, #12]
 800d900:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d902:	1a9b      	subs	r3, r3, r2
 800d904:	42ab      	cmp	r3, r5
 800d906:	dcf0      	bgt.n	800d8ea <_printf_i+0x1ee>
 800d908:	e7e9      	b.n	800d8de <_printf_i+0x1e2>
 800d90a:	2500      	movs	r5, #0
 800d90c:	e7f7      	b.n	800d8fe <_printf_i+0x202>
 800d90e:	46c0      	nop			@ (mov r8, r8)
 800d910:	0801b46a 	.word	0x0801b46a
 800d914:	0801b47b 	.word	0x0801b47b

0800d918 <std>:
 800d918:	2300      	movs	r3, #0
 800d91a:	b510      	push	{r4, lr}
 800d91c:	0004      	movs	r4, r0
 800d91e:	6003      	str	r3, [r0, #0]
 800d920:	6043      	str	r3, [r0, #4]
 800d922:	6083      	str	r3, [r0, #8]
 800d924:	8181      	strh	r1, [r0, #12]
 800d926:	6643      	str	r3, [r0, #100]	@ 0x64
 800d928:	81c2      	strh	r2, [r0, #14]
 800d92a:	6103      	str	r3, [r0, #16]
 800d92c:	6143      	str	r3, [r0, #20]
 800d92e:	6183      	str	r3, [r0, #24]
 800d930:	0019      	movs	r1, r3
 800d932:	2208      	movs	r2, #8
 800d934:	305c      	adds	r0, #92	@ 0x5c
 800d936:	f000 f90f 	bl	800db58 <memset>
 800d93a:	4b0b      	ldr	r3, [pc, #44]	@ (800d968 <std+0x50>)
 800d93c:	6224      	str	r4, [r4, #32]
 800d93e:	6263      	str	r3, [r4, #36]	@ 0x24
 800d940:	4b0a      	ldr	r3, [pc, #40]	@ (800d96c <std+0x54>)
 800d942:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d944:	4b0a      	ldr	r3, [pc, #40]	@ (800d970 <std+0x58>)
 800d946:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d948:	4b0a      	ldr	r3, [pc, #40]	@ (800d974 <std+0x5c>)
 800d94a:	6323      	str	r3, [r4, #48]	@ 0x30
 800d94c:	4b0a      	ldr	r3, [pc, #40]	@ (800d978 <std+0x60>)
 800d94e:	429c      	cmp	r4, r3
 800d950:	d005      	beq.n	800d95e <std+0x46>
 800d952:	4b0a      	ldr	r3, [pc, #40]	@ (800d97c <std+0x64>)
 800d954:	429c      	cmp	r4, r3
 800d956:	d002      	beq.n	800d95e <std+0x46>
 800d958:	4b09      	ldr	r3, [pc, #36]	@ (800d980 <std+0x68>)
 800d95a:	429c      	cmp	r4, r3
 800d95c:	d103      	bne.n	800d966 <std+0x4e>
 800d95e:	0020      	movs	r0, r4
 800d960:	3058      	adds	r0, #88	@ 0x58
 800d962:	f000 f9a5 	bl	800dcb0 <__retarget_lock_init_recursive>
 800d966:	bd10      	pop	{r4, pc}
 800d968:	0800dac1 	.word	0x0800dac1
 800d96c:	0800dae9 	.word	0x0800dae9
 800d970:	0800db21 	.word	0x0800db21
 800d974:	0800db4d 	.word	0x0800db4d
 800d978:	200005b0 	.word	0x200005b0
 800d97c:	20000618 	.word	0x20000618
 800d980:	20000680 	.word	0x20000680

0800d984 <stdio_exit_handler>:
 800d984:	b510      	push	{r4, lr}
 800d986:	4a03      	ldr	r2, [pc, #12]	@ (800d994 <stdio_exit_handler+0x10>)
 800d988:	4903      	ldr	r1, [pc, #12]	@ (800d998 <stdio_exit_handler+0x14>)
 800d98a:	4804      	ldr	r0, [pc, #16]	@ (800d99c <stdio_exit_handler+0x18>)
 800d98c:	f000 f87c 	bl	800da88 <_fwalk_sglue>
 800d990:	bd10      	pop	{r4, pc}
 800d992:	46c0      	nop			@ (mov r8, r8)
 800d994:	20000178 	.word	0x20000178
 800d998:	0800f541 	.word	0x0800f541
 800d99c:	20000188 	.word	0x20000188

0800d9a0 <cleanup_stdio>:
 800d9a0:	6841      	ldr	r1, [r0, #4]
 800d9a2:	4b0b      	ldr	r3, [pc, #44]	@ (800d9d0 <cleanup_stdio+0x30>)
 800d9a4:	b510      	push	{r4, lr}
 800d9a6:	0004      	movs	r4, r0
 800d9a8:	4299      	cmp	r1, r3
 800d9aa:	d001      	beq.n	800d9b0 <cleanup_stdio+0x10>
 800d9ac:	f001 fdc8 	bl	800f540 <_fflush_r>
 800d9b0:	68a1      	ldr	r1, [r4, #8]
 800d9b2:	4b08      	ldr	r3, [pc, #32]	@ (800d9d4 <cleanup_stdio+0x34>)
 800d9b4:	4299      	cmp	r1, r3
 800d9b6:	d002      	beq.n	800d9be <cleanup_stdio+0x1e>
 800d9b8:	0020      	movs	r0, r4
 800d9ba:	f001 fdc1 	bl	800f540 <_fflush_r>
 800d9be:	68e1      	ldr	r1, [r4, #12]
 800d9c0:	4b05      	ldr	r3, [pc, #20]	@ (800d9d8 <cleanup_stdio+0x38>)
 800d9c2:	4299      	cmp	r1, r3
 800d9c4:	d002      	beq.n	800d9cc <cleanup_stdio+0x2c>
 800d9c6:	0020      	movs	r0, r4
 800d9c8:	f001 fdba 	bl	800f540 <_fflush_r>
 800d9cc:	bd10      	pop	{r4, pc}
 800d9ce:	46c0      	nop			@ (mov r8, r8)
 800d9d0:	200005b0 	.word	0x200005b0
 800d9d4:	20000618 	.word	0x20000618
 800d9d8:	20000680 	.word	0x20000680

0800d9dc <global_stdio_init.part.0>:
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	4b09      	ldr	r3, [pc, #36]	@ (800da04 <global_stdio_init.part.0+0x28>)
 800d9e0:	4a09      	ldr	r2, [pc, #36]	@ (800da08 <global_stdio_init.part.0+0x2c>)
 800d9e2:	2104      	movs	r1, #4
 800d9e4:	601a      	str	r2, [r3, #0]
 800d9e6:	4809      	ldr	r0, [pc, #36]	@ (800da0c <global_stdio_init.part.0+0x30>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f7ff ff95 	bl	800d918 <std>
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	2109      	movs	r1, #9
 800d9f2:	4807      	ldr	r0, [pc, #28]	@ (800da10 <global_stdio_init.part.0+0x34>)
 800d9f4:	f7ff ff90 	bl	800d918 <std>
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	2112      	movs	r1, #18
 800d9fc:	4805      	ldr	r0, [pc, #20]	@ (800da14 <global_stdio_init.part.0+0x38>)
 800d9fe:	f7ff ff8b 	bl	800d918 <std>
 800da02:	bd10      	pop	{r4, pc}
 800da04:	200006e8 	.word	0x200006e8
 800da08:	0800d985 	.word	0x0800d985
 800da0c:	200005b0 	.word	0x200005b0
 800da10:	20000618 	.word	0x20000618
 800da14:	20000680 	.word	0x20000680

0800da18 <__sfp_lock_acquire>:
 800da18:	b510      	push	{r4, lr}
 800da1a:	4802      	ldr	r0, [pc, #8]	@ (800da24 <__sfp_lock_acquire+0xc>)
 800da1c:	f000 f949 	bl	800dcb2 <__retarget_lock_acquire_recursive>
 800da20:	bd10      	pop	{r4, pc}
 800da22:	46c0      	nop			@ (mov r8, r8)
 800da24:	200006f1 	.word	0x200006f1

0800da28 <__sfp_lock_release>:
 800da28:	b510      	push	{r4, lr}
 800da2a:	4802      	ldr	r0, [pc, #8]	@ (800da34 <__sfp_lock_release+0xc>)
 800da2c:	f000 f942 	bl	800dcb4 <__retarget_lock_release_recursive>
 800da30:	bd10      	pop	{r4, pc}
 800da32:	46c0      	nop			@ (mov r8, r8)
 800da34:	200006f1 	.word	0x200006f1

0800da38 <__sinit>:
 800da38:	b510      	push	{r4, lr}
 800da3a:	0004      	movs	r4, r0
 800da3c:	f7ff ffec 	bl	800da18 <__sfp_lock_acquire>
 800da40:	6a23      	ldr	r3, [r4, #32]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d002      	beq.n	800da4c <__sinit+0x14>
 800da46:	f7ff ffef 	bl	800da28 <__sfp_lock_release>
 800da4a:	bd10      	pop	{r4, pc}
 800da4c:	4b04      	ldr	r3, [pc, #16]	@ (800da60 <__sinit+0x28>)
 800da4e:	6223      	str	r3, [r4, #32]
 800da50:	4b04      	ldr	r3, [pc, #16]	@ (800da64 <__sinit+0x2c>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d1f6      	bne.n	800da46 <__sinit+0xe>
 800da58:	f7ff ffc0 	bl	800d9dc <global_stdio_init.part.0>
 800da5c:	e7f3      	b.n	800da46 <__sinit+0xe>
 800da5e:	46c0      	nop			@ (mov r8, r8)
 800da60:	0800d9a1 	.word	0x0800d9a1
 800da64:	200006e8 	.word	0x200006e8

0800da68 <fiprintf>:
 800da68:	b40e      	push	{r1, r2, r3}
 800da6a:	b517      	push	{r0, r1, r2, r4, lr}
 800da6c:	4c05      	ldr	r4, [pc, #20]	@ (800da84 <fiprintf+0x1c>)
 800da6e:	ab05      	add	r3, sp, #20
 800da70:	cb04      	ldmia	r3!, {r2}
 800da72:	0001      	movs	r1, r0
 800da74:	6820      	ldr	r0, [r4, #0]
 800da76:	9301      	str	r3, [sp, #4]
 800da78:	f001 fbc0 	bl	800f1fc <_vfiprintf_r>
 800da7c:	bc1e      	pop	{r1, r2, r3, r4}
 800da7e:	bc08      	pop	{r3}
 800da80:	b003      	add	sp, #12
 800da82:	4718      	bx	r3
 800da84:	20000184 	.word	0x20000184

0800da88 <_fwalk_sglue>:
 800da88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da8a:	0014      	movs	r4, r2
 800da8c:	2600      	movs	r6, #0
 800da8e:	9000      	str	r0, [sp, #0]
 800da90:	9101      	str	r1, [sp, #4]
 800da92:	68a5      	ldr	r5, [r4, #8]
 800da94:	6867      	ldr	r7, [r4, #4]
 800da96:	3f01      	subs	r7, #1
 800da98:	d504      	bpl.n	800daa4 <_fwalk_sglue+0x1c>
 800da9a:	6824      	ldr	r4, [r4, #0]
 800da9c:	2c00      	cmp	r4, #0
 800da9e:	d1f8      	bne.n	800da92 <_fwalk_sglue+0xa>
 800daa0:	0030      	movs	r0, r6
 800daa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800daa4:	89ab      	ldrh	r3, [r5, #12]
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d908      	bls.n	800dabc <_fwalk_sglue+0x34>
 800daaa:	220e      	movs	r2, #14
 800daac:	5eab      	ldrsh	r3, [r5, r2]
 800daae:	3301      	adds	r3, #1
 800dab0:	d004      	beq.n	800dabc <_fwalk_sglue+0x34>
 800dab2:	0029      	movs	r1, r5
 800dab4:	9800      	ldr	r0, [sp, #0]
 800dab6:	9b01      	ldr	r3, [sp, #4]
 800dab8:	4798      	blx	r3
 800daba:	4306      	orrs	r6, r0
 800dabc:	3568      	adds	r5, #104	@ 0x68
 800dabe:	e7ea      	b.n	800da96 <_fwalk_sglue+0xe>

0800dac0 <__sread>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	000c      	movs	r4, r1
 800dac4:	250e      	movs	r5, #14
 800dac6:	5f49      	ldrsh	r1, [r1, r5]
 800dac8:	f000 f88e 	bl	800dbe8 <_read_r>
 800dacc:	2800      	cmp	r0, #0
 800dace:	db03      	blt.n	800dad8 <__sread+0x18>
 800dad0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800dad2:	181b      	adds	r3, r3, r0
 800dad4:	6563      	str	r3, [r4, #84]	@ 0x54
 800dad6:	bd70      	pop	{r4, r5, r6, pc}
 800dad8:	89a3      	ldrh	r3, [r4, #12]
 800dada:	4a02      	ldr	r2, [pc, #8]	@ (800dae4 <__sread+0x24>)
 800dadc:	4013      	ands	r3, r2
 800dade:	81a3      	strh	r3, [r4, #12]
 800dae0:	e7f9      	b.n	800dad6 <__sread+0x16>
 800dae2:	46c0      	nop			@ (mov r8, r8)
 800dae4:	ffffefff 	.word	0xffffefff

0800dae8 <__swrite>:
 800dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daea:	001f      	movs	r7, r3
 800daec:	898b      	ldrh	r3, [r1, #12]
 800daee:	0005      	movs	r5, r0
 800daf0:	000c      	movs	r4, r1
 800daf2:	0016      	movs	r6, r2
 800daf4:	05db      	lsls	r3, r3, #23
 800daf6:	d505      	bpl.n	800db04 <__swrite+0x1c>
 800daf8:	230e      	movs	r3, #14
 800dafa:	5ec9      	ldrsh	r1, [r1, r3]
 800dafc:	2200      	movs	r2, #0
 800dafe:	2302      	movs	r3, #2
 800db00:	f000 f85e 	bl	800dbc0 <_lseek_r>
 800db04:	89a3      	ldrh	r3, [r4, #12]
 800db06:	4a05      	ldr	r2, [pc, #20]	@ (800db1c <__swrite+0x34>)
 800db08:	0028      	movs	r0, r5
 800db0a:	4013      	ands	r3, r2
 800db0c:	81a3      	strh	r3, [r4, #12]
 800db0e:	0032      	movs	r2, r6
 800db10:	230e      	movs	r3, #14
 800db12:	5ee1      	ldrsh	r1, [r4, r3]
 800db14:	003b      	movs	r3, r7
 800db16:	f000 f88d 	bl	800dc34 <_write_r>
 800db1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db1c:	ffffefff 	.word	0xffffefff

0800db20 <__sseek>:
 800db20:	b570      	push	{r4, r5, r6, lr}
 800db22:	000c      	movs	r4, r1
 800db24:	250e      	movs	r5, #14
 800db26:	5f49      	ldrsh	r1, [r1, r5]
 800db28:	f000 f84a 	bl	800dbc0 <_lseek_r>
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	1c42      	adds	r2, r0, #1
 800db30:	d103      	bne.n	800db3a <__sseek+0x1a>
 800db32:	4a05      	ldr	r2, [pc, #20]	@ (800db48 <__sseek+0x28>)
 800db34:	4013      	ands	r3, r2
 800db36:	81a3      	strh	r3, [r4, #12]
 800db38:	bd70      	pop	{r4, r5, r6, pc}
 800db3a:	2280      	movs	r2, #128	@ 0x80
 800db3c:	0152      	lsls	r2, r2, #5
 800db3e:	4313      	orrs	r3, r2
 800db40:	81a3      	strh	r3, [r4, #12]
 800db42:	6560      	str	r0, [r4, #84]	@ 0x54
 800db44:	e7f8      	b.n	800db38 <__sseek+0x18>
 800db46:	46c0      	nop			@ (mov r8, r8)
 800db48:	ffffefff 	.word	0xffffefff

0800db4c <__sclose>:
 800db4c:	b510      	push	{r4, lr}
 800db4e:	230e      	movs	r3, #14
 800db50:	5ec9      	ldrsh	r1, [r1, r3]
 800db52:	f000 f823 	bl	800db9c <_close_r>
 800db56:	bd10      	pop	{r4, pc}

0800db58 <memset>:
 800db58:	0003      	movs	r3, r0
 800db5a:	1882      	adds	r2, r0, r2
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d100      	bne.n	800db62 <memset+0xa>
 800db60:	4770      	bx	lr
 800db62:	7019      	strb	r1, [r3, #0]
 800db64:	3301      	adds	r3, #1
 800db66:	e7f9      	b.n	800db5c <memset+0x4>

0800db68 <strncat>:
 800db68:	0003      	movs	r3, r0
 800db6a:	b510      	push	{r4, lr}
 800db6c:	781c      	ldrb	r4, [r3, #0]
 800db6e:	2c00      	cmp	r4, #0
 800db70:	d107      	bne.n	800db82 <strncat+0x1a>
 800db72:	3a01      	subs	r2, #1
 800db74:	1c54      	adds	r4, r2, #1
 800db76:	d003      	beq.n	800db80 <strncat+0x18>
 800db78:	780c      	ldrb	r4, [r1, #0]
 800db7a:	701c      	strb	r4, [r3, #0]
 800db7c:	2c00      	cmp	r4, #0
 800db7e:	d102      	bne.n	800db86 <strncat+0x1e>
 800db80:	bd10      	pop	{r4, pc}
 800db82:	3301      	adds	r3, #1
 800db84:	e7f2      	b.n	800db6c <strncat+0x4>
 800db86:	2a00      	cmp	r2, #0
 800db88:	d100      	bne.n	800db8c <strncat+0x24>
 800db8a:	705a      	strb	r2, [r3, #1]
 800db8c:	3301      	adds	r3, #1
 800db8e:	3101      	adds	r1, #1
 800db90:	e7ef      	b.n	800db72 <strncat+0xa>
	...

0800db94 <_localeconv_r>:
 800db94:	4800      	ldr	r0, [pc, #0]	@ (800db98 <_localeconv_r+0x4>)
 800db96:	4770      	bx	lr
 800db98:	200002c4 	.word	0x200002c4

0800db9c <_close_r>:
 800db9c:	2300      	movs	r3, #0
 800db9e:	b570      	push	{r4, r5, r6, lr}
 800dba0:	4d06      	ldr	r5, [pc, #24]	@ (800dbbc <_close_r+0x20>)
 800dba2:	0004      	movs	r4, r0
 800dba4:	0008      	movs	r0, r1
 800dba6:	602b      	str	r3, [r5, #0]
 800dba8:	f7f8 f80a 	bl	8005bc0 <_close>
 800dbac:	1c43      	adds	r3, r0, #1
 800dbae:	d103      	bne.n	800dbb8 <_close_r+0x1c>
 800dbb0:	682b      	ldr	r3, [r5, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d000      	beq.n	800dbb8 <_close_r+0x1c>
 800dbb6:	6023      	str	r3, [r4, #0]
 800dbb8:	bd70      	pop	{r4, r5, r6, pc}
 800dbba:	46c0      	nop			@ (mov r8, r8)
 800dbbc:	200006ec 	.word	0x200006ec

0800dbc0 <_lseek_r>:
 800dbc0:	b570      	push	{r4, r5, r6, lr}
 800dbc2:	0004      	movs	r4, r0
 800dbc4:	0008      	movs	r0, r1
 800dbc6:	0011      	movs	r1, r2
 800dbc8:	001a      	movs	r2, r3
 800dbca:	2300      	movs	r3, #0
 800dbcc:	4d05      	ldr	r5, [pc, #20]	@ (800dbe4 <_lseek_r+0x24>)
 800dbce:	602b      	str	r3, [r5, #0]
 800dbd0:	f7f8 f817 	bl	8005c02 <_lseek>
 800dbd4:	1c43      	adds	r3, r0, #1
 800dbd6:	d103      	bne.n	800dbe0 <_lseek_r+0x20>
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d000      	beq.n	800dbe0 <_lseek_r+0x20>
 800dbde:	6023      	str	r3, [r4, #0]
 800dbe0:	bd70      	pop	{r4, r5, r6, pc}
 800dbe2:	46c0      	nop			@ (mov r8, r8)
 800dbe4:	200006ec 	.word	0x200006ec

0800dbe8 <_read_r>:
 800dbe8:	b570      	push	{r4, r5, r6, lr}
 800dbea:	0004      	movs	r4, r0
 800dbec:	0008      	movs	r0, r1
 800dbee:	0011      	movs	r1, r2
 800dbf0:	001a      	movs	r2, r3
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	4d05      	ldr	r5, [pc, #20]	@ (800dc0c <_read_r+0x24>)
 800dbf6:	602b      	str	r3, [r5, #0]
 800dbf8:	f7f7 ffa9 	bl	8005b4e <_read>
 800dbfc:	1c43      	adds	r3, r0, #1
 800dbfe:	d103      	bne.n	800dc08 <_read_r+0x20>
 800dc00:	682b      	ldr	r3, [r5, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d000      	beq.n	800dc08 <_read_r+0x20>
 800dc06:	6023      	str	r3, [r4, #0]
 800dc08:	bd70      	pop	{r4, r5, r6, pc}
 800dc0a:	46c0      	nop			@ (mov r8, r8)
 800dc0c:	200006ec 	.word	0x200006ec

0800dc10 <_sbrk_r>:
 800dc10:	2300      	movs	r3, #0
 800dc12:	b570      	push	{r4, r5, r6, lr}
 800dc14:	4d06      	ldr	r5, [pc, #24]	@ (800dc30 <_sbrk_r+0x20>)
 800dc16:	0004      	movs	r4, r0
 800dc18:	0008      	movs	r0, r1
 800dc1a:	602b      	str	r3, [r5, #0]
 800dc1c:	f7f7 fffc 	bl	8005c18 <_sbrk>
 800dc20:	1c43      	adds	r3, r0, #1
 800dc22:	d103      	bne.n	800dc2c <_sbrk_r+0x1c>
 800dc24:	682b      	ldr	r3, [r5, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d000      	beq.n	800dc2c <_sbrk_r+0x1c>
 800dc2a:	6023      	str	r3, [r4, #0]
 800dc2c:	bd70      	pop	{r4, r5, r6, pc}
 800dc2e:	46c0      	nop			@ (mov r8, r8)
 800dc30:	200006ec 	.word	0x200006ec

0800dc34 <_write_r>:
 800dc34:	b570      	push	{r4, r5, r6, lr}
 800dc36:	0004      	movs	r4, r0
 800dc38:	0008      	movs	r0, r1
 800dc3a:	0011      	movs	r1, r2
 800dc3c:	001a      	movs	r2, r3
 800dc3e:	2300      	movs	r3, #0
 800dc40:	4d05      	ldr	r5, [pc, #20]	@ (800dc58 <_write_r+0x24>)
 800dc42:	602b      	str	r3, [r5, #0]
 800dc44:	f7f7 ffa0 	bl	8005b88 <_write>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d103      	bne.n	800dc54 <_write_r+0x20>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d000      	beq.n	800dc54 <_write_r+0x20>
 800dc52:	6023      	str	r3, [r4, #0]
 800dc54:	bd70      	pop	{r4, r5, r6, pc}
 800dc56:	46c0      	nop			@ (mov r8, r8)
 800dc58:	200006ec 	.word	0x200006ec

0800dc5c <__errno>:
 800dc5c:	4b01      	ldr	r3, [pc, #4]	@ (800dc64 <__errno+0x8>)
 800dc5e:	6818      	ldr	r0, [r3, #0]
 800dc60:	4770      	bx	lr
 800dc62:	46c0      	nop			@ (mov r8, r8)
 800dc64:	20000184 	.word	0x20000184

0800dc68 <__libc_init_array>:
 800dc68:	b570      	push	{r4, r5, r6, lr}
 800dc6a:	2600      	movs	r6, #0
 800dc6c:	4c0c      	ldr	r4, [pc, #48]	@ (800dca0 <__libc_init_array+0x38>)
 800dc6e:	4d0d      	ldr	r5, [pc, #52]	@ (800dca4 <__libc_init_array+0x3c>)
 800dc70:	1b64      	subs	r4, r4, r5
 800dc72:	10a4      	asrs	r4, r4, #2
 800dc74:	42a6      	cmp	r6, r4
 800dc76:	d109      	bne.n	800dc8c <__libc_init_array+0x24>
 800dc78:	2600      	movs	r6, #0
 800dc7a:	f001 fe81 	bl	800f980 <_init>
 800dc7e:	4c0a      	ldr	r4, [pc, #40]	@ (800dca8 <__libc_init_array+0x40>)
 800dc80:	4d0a      	ldr	r5, [pc, #40]	@ (800dcac <__libc_init_array+0x44>)
 800dc82:	1b64      	subs	r4, r4, r5
 800dc84:	10a4      	asrs	r4, r4, #2
 800dc86:	42a6      	cmp	r6, r4
 800dc88:	d105      	bne.n	800dc96 <__libc_init_array+0x2e>
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}
 800dc8c:	00b3      	lsls	r3, r6, #2
 800dc8e:	58eb      	ldr	r3, [r5, r3]
 800dc90:	4798      	blx	r3
 800dc92:	3601      	adds	r6, #1
 800dc94:	e7ee      	b.n	800dc74 <__libc_init_array+0xc>
 800dc96:	00b3      	lsls	r3, r6, #2
 800dc98:	58eb      	ldr	r3, [r5, r3]
 800dc9a:	4798      	blx	r3
 800dc9c:	3601      	adds	r6, #1
 800dc9e:	e7f2      	b.n	800dc86 <__libc_init_array+0x1e>
 800dca0:	0801b7d0 	.word	0x0801b7d0
 800dca4:	0801b7d0 	.word	0x0801b7d0
 800dca8:	0801b7d4 	.word	0x0801b7d4
 800dcac:	0801b7d0 	.word	0x0801b7d0

0800dcb0 <__retarget_lock_init_recursive>:
 800dcb0:	4770      	bx	lr

0800dcb2 <__retarget_lock_acquire_recursive>:
 800dcb2:	4770      	bx	lr

0800dcb4 <__retarget_lock_release_recursive>:
 800dcb4:	4770      	bx	lr

0800dcb6 <memchr>:
 800dcb6:	b2c9      	uxtb	r1, r1
 800dcb8:	1882      	adds	r2, r0, r2
 800dcba:	4290      	cmp	r0, r2
 800dcbc:	d101      	bne.n	800dcc2 <memchr+0xc>
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	4770      	bx	lr
 800dcc2:	7803      	ldrb	r3, [r0, #0]
 800dcc4:	428b      	cmp	r3, r1
 800dcc6:	d0fb      	beq.n	800dcc0 <memchr+0xa>
 800dcc8:	3001      	adds	r0, #1
 800dcca:	e7f6      	b.n	800dcba <memchr+0x4>

0800dccc <quorem>:
 800dccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcce:	6902      	ldr	r2, [r0, #16]
 800dcd0:	690f      	ldr	r7, [r1, #16]
 800dcd2:	b087      	sub	sp, #28
 800dcd4:	0006      	movs	r6, r0
 800dcd6:	000b      	movs	r3, r1
 800dcd8:	2000      	movs	r0, #0
 800dcda:	9102      	str	r1, [sp, #8]
 800dcdc:	42ba      	cmp	r2, r7
 800dcde:	db6d      	blt.n	800ddbc <quorem+0xf0>
 800dce0:	3f01      	subs	r7, #1
 800dce2:	00bc      	lsls	r4, r7, #2
 800dce4:	3314      	adds	r3, #20
 800dce6:	9305      	str	r3, [sp, #20]
 800dce8:	191b      	adds	r3, r3, r4
 800dcea:	9303      	str	r3, [sp, #12]
 800dcec:	0033      	movs	r3, r6
 800dcee:	3314      	adds	r3, #20
 800dcf0:	191c      	adds	r4, r3, r4
 800dcf2:	9301      	str	r3, [sp, #4]
 800dcf4:	6823      	ldr	r3, [r4, #0]
 800dcf6:	9304      	str	r3, [sp, #16]
 800dcf8:	9b03      	ldr	r3, [sp, #12]
 800dcfa:	9804      	ldr	r0, [sp, #16]
 800dcfc:	681d      	ldr	r5, [r3, #0]
 800dcfe:	3501      	adds	r5, #1
 800dd00:	0029      	movs	r1, r5
 800dd02:	f7f2 fa1d 	bl	8000140 <__udivsi3>
 800dd06:	9b04      	ldr	r3, [sp, #16]
 800dd08:	9000      	str	r0, [sp, #0]
 800dd0a:	42ab      	cmp	r3, r5
 800dd0c:	d32b      	bcc.n	800dd66 <quorem+0x9a>
 800dd0e:	9b05      	ldr	r3, [sp, #20]
 800dd10:	9d01      	ldr	r5, [sp, #4]
 800dd12:	469c      	mov	ip, r3
 800dd14:	2300      	movs	r3, #0
 800dd16:	9305      	str	r3, [sp, #20]
 800dd18:	9304      	str	r3, [sp, #16]
 800dd1a:	4662      	mov	r2, ip
 800dd1c:	ca08      	ldmia	r2!, {r3}
 800dd1e:	6828      	ldr	r0, [r5, #0]
 800dd20:	4694      	mov	ip, r2
 800dd22:	9a00      	ldr	r2, [sp, #0]
 800dd24:	b299      	uxth	r1, r3
 800dd26:	4351      	muls	r1, r2
 800dd28:	9a05      	ldr	r2, [sp, #20]
 800dd2a:	0c1b      	lsrs	r3, r3, #16
 800dd2c:	1889      	adds	r1, r1, r2
 800dd2e:	9a00      	ldr	r2, [sp, #0]
 800dd30:	4353      	muls	r3, r2
 800dd32:	0c0a      	lsrs	r2, r1, #16
 800dd34:	189b      	adds	r3, r3, r2
 800dd36:	0c1a      	lsrs	r2, r3, #16
 800dd38:	b289      	uxth	r1, r1
 800dd3a:	9205      	str	r2, [sp, #20]
 800dd3c:	b282      	uxth	r2, r0
 800dd3e:	1a52      	subs	r2, r2, r1
 800dd40:	9904      	ldr	r1, [sp, #16]
 800dd42:	0c00      	lsrs	r0, r0, #16
 800dd44:	1852      	adds	r2, r2, r1
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	1411      	asrs	r1, r2, #16
 800dd4a:	1ac3      	subs	r3, r0, r3
 800dd4c:	185b      	adds	r3, r3, r1
 800dd4e:	1419      	asrs	r1, r3, #16
 800dd50:	b292      	uxth	r2, r2
 800dd52:	041b      	lsls	r3, r3, #16
 800dd54:	431a      	orrs	r2, r3
 800dd56:	9b03      	ldr	r3, [sp, #12]
 800dd58:	9104      	str	r1, [sp, #16]
 800dd5a:	c504      	stmia	r5!, {r2}
 800dd5c:	4563      	cmp	r3, ip
 800dd5e:	d2dc      	bcs.n	800dd1a <quorem+0x4e>
 800dd60:	6823      	ldr	r3, [r4, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d030      	beq.n	800ddc8 <quorem+0xfc>
 800dd66:	0030      	movs	r0, r6
 800dd68:	9902      	ldr	r1, [sp, #8]
 800dd6a:	f001 f909 	bl	800ef80 <__mcmp>
 800dd6e:	2800      	cmp	r0, #0
 800dd70:	db23      	blt.n	800ddba <quorem+0xee>
 800dd72:	0034      	movs	r4, r6
 800dd74:	2500      	movs	r5, #0
 800dd76:	9902      	ldr	r1, [sp, #8]
 800dd78:	3414      	adds	r4, #20
 800dd7a:	3114      	adds	r1, #20
 800dd7c:	6823      	ldr	r3, [r4, #0]
 800dd7e:	c901      	ldmia	r1!, {r0}
 800dd80:	9302      	str	r3, [sp, #8]
 800dd82:	466b      	mov	r3, sp
 800dd84:	891b      	ldrh	r3, [r3, #8]
 800dd86:	b282      	uxth	r2, r0
 800dd88:	1a9a      	subs	r2, r3, r2
 800dd8a:	9b02      	ldr	r3, [sp, #8]
 800dd8c:	1952      	adds	r2, r2, r5
 800dd8e:	0c00      	lsrs	r0, r0, #16
 800dd90:	0c1b      	lsrs	r3, r3, #16
 800dd92:	1a1b      	subs	r3, r3, r0
 800dd94:	1410      	asrs	r0, r2, #16
 800dd96:	181b      	adds	r3, r3, r0
 800dd98:	141d      	asrs	r5, r3, #16
 800dd9a:	b292      	uxth	r2, r2
 800dd9c:	041b      	lsls	r3, r3, #16
 800dd9e:	431a      	orrs	r2, r3
 800dda0:	9b03      	ldr	r3, [sp, #12]
 800dda2:	c404      	stmia	r4!, {r2}
 800dda4:	428b      	cmp	r3, r1
 800dda6:	d2e9      	bcs.n	800dd7c <quorem+0xb0>
 800dda8:	9a01      	ldr	r2, [sp, #4]
 800ddaa:	00bb      	lsls	r3, r7, #2
 800ddac:	18d3      	adds	r3, r2, r3
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	2a00      	cmp	r2, #0
 800ddb2:	d013      	beq.n	800dddc <quorem+0x110>
 800ddb4:	9b00      	ldr	r3, [sp, #0]
 800ddb6:	3301      	adds	r3, #1
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	9800      	ldr	r0, [sp, #0]
 800ddbc:	b007      	add	sp, #28
 800ddbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddc0:	6823      	ldr	r3, [r4, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d104      	bne.n	800ddd0 <quorem+0x104>
 800ddc6:	3f01      	subs	r7, #1
 800ddc8:	9b01      	ldr	r3, [sp, #4]
 800ddca:	3c04      	subs	r4, #4
 800ddcc:	42a3      	cmp	r3, r4
 800ddce:	d3f7      	bcc.n	800ddc0 <quorem+0xf4>
 800ddd0:	6137      	str	r7, [r6, #16]
 800ddd2:	e7c8      	b.n	800dd66 <quorem+0x9a>
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	2a00      	cmp	r2, #0
 800ddd8:	d104      	bne.n	800dde4 <quorem+0x118>
 800ddda:	3f01      	subs	r7, #1
 800dddc:	9a01      	ldr	r2, [sp, #4]
 800ddde:	3b04      	subs	r3, #4
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d3f7      	bcc.n	800ddd4 <quorem+0x108>
 800dde4:	6137      	str	r7, [r6, #16]
 800dde6:	e7e5      	b.n	800ddb4 <quorem+0xe8>

0800dde8 <_dtoa_r>:
 800dde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddea:	0014      	movs	r4, r2
 800ddec:	001d      	movs	r5, r3
 800ddee:	69c6      	ldr	r6, [r0, #28]
 800ddf0:	b09d      	sub	sp, #116	@ 0x74
 800ddf2:	940a      	str	r4, [sp, #40]	@ 0x28
 800ddf4:	950b      	str	r5, [sp, #44]	@ 0x2c
 800ddf6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800ddf8:	9003      	str	r0, [sp, #12]
 800ddfa:	2e00      	cmp	r6, #0
 800ddfc:	d10f      	bne.n	800de1e <_dtoa_r+0x36>
 800ddfe:	2010      	movs	r0, #16
 800de00:	f7ff f86c 	bl	800cedc <malloc>
 800de04:	9b03      	ldr	r3, [sp, #12]
 800de06:	1e02      	subs	r2, r0, #0
 800de08:	61d8      	str	r0, [r3, #28]
 800de0a:	d104      	bne.n	800de16 <_dtoa_r+0x2e>
 800de0c:	21ef      	movs	r1, #239	@ 0xef
 800de0e:	4bc7      	ldr	r3, [pc, #796]	@ (800e12c <_dtoa_r+0x344>)
 800de10:	48c7      	ldr	r0, [pc, #796]	@ (800e130 <_dtoa_r+0x348>)
 800de12:	f001 fc6b 	bl	800f6ec <__assert_func>
 800de16:	6046      	str	r6, [r0, #4]
 800de18:	6086      	str	r6, [r0, #8]
 800de1a:	6006      	str	r6, [r0, #0]
 800de1c:	60c6      	str	r6, [r0, #12]
 800de1e:	9b03      	ldr	r3, [sp, #12]
 800de20:	69db      	ldr	r3, [r3, #28]
 800de22:	6819      	ldr	r1, [r3, #0]
 800de24:	2900      	cmp	r1, #0
 800de26:	d00b      	beq.n	800de40 <_dtoa_r+0x58>
 800de28:	685a      	ldr	r2, [r3, #4]
 800de2a:	2301      	movs	r3, #1
 800de2c:	4093      	lsls	r3, r2
 800de2e:	604a      	str	r2, [r1, #4]
 800de30:	608b      	str	r3, [r1, #8]
 800de32:	9803      	ldr	r0, [sp, #12]
 800de34:	f000 fe5a 	bl	800eaec <_Bfree>
 800de38:	2200      	movs	r2, #0
 800de3a:	9b03      	ldr	r3, [sp, #12]
 800de3c:	69db      	ldr	r3, [r3, #28]
 800de3e:	601a      	str	r2, [r3, #0]
 800de40:	2d00      	cmp	r5, #0
 800de42:	da1e      	bge.n	800de82 <_dtoa_r+0x9a>
 800de44:	2301      	movs	r3, #1
 800de46:	603b      	str	r3, [r7, #0]
 800de48:	006b      	lsls	r3, r5, #1
 800de4a:	085b      	lsrs	r3, r3, #1
 800de4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de4e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800de50:	4bb8      	ldr	r3, [pc, #736]	@ (800e134 <_dtoa_r+0x34c>)
 800de52:	4ab8      	ldr	r2, [pc, #736]	@ (800e134 <_dtoa_r+0x34c>)
 800de54:	403b      	ands	r3, r7
 800de56:	4293      	cmp	r3, r2
 800de58:	d116      	bne.n	800de88 <_dtoa_r+0xa0>
 800de5a:	4bb7      	ldr	r3, [pc, #732]	@ (800e138 <_dtoa_r+0x350>)
 800de5c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800de5e:	6013      	str	r3, [r2, #0]
 800de60:	033b      	lsls	r3, r7, #12
 800de62:	0b1b      	lsrs	r3, r3, #12
 800de64:	4323      	orrs	r3, r4
 800de66:	d101      	bne.n	800de6c <_dtoa_r+0x84>
 800de68:	f000 fd83 	bl	800e972 <_dtoa_r+0xb8a>
 800de6c:	4bb3      	ldr	r3, [pc, #716]	@ (800e13c <_dtoa_r+0x354>)
 800de6e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800de70:	9308      	str	r3, [sp, #32]
 800de72:	2a00      	cmp	r2, #0
 800de74:	d002      	beq.n	800de7c <_dtoa_r+0x94>
 800de76:	4bb2      	ldr	r3, [pc, #712]	@ (800e140 <_dtoa_r+0x358>)
 800de78:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800de7a:	6013      	str	r3, [r2, #0]
 800de7c:	9808      	ldr	r0, [sp, #32]
 800de7e:	b01d      	add	sp, #116	@ 0x74
 800de80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de82:	2300      	movs	r3, #0
 800de84:	603b      	str	r3, [r7, #0]
 800de86:	e7e2      	b.n	800de4e <_dtoa_r+0x66>
 800de88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de8c:	9212      	str	r2, [sp, #72]	@ 0x48
 800de8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800de90:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800de92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800de94:	2200      	movs	r2, #0
 800de96:	2300      	movs	r3, #0
 800de98:	f7f2 fad8 	bl	800044c <__aeabi_dcmpeq>
 800de9c:	1e06      	subs	r6, r0, #0
 800de9e:	d00b      	beq.n	800deb8 <_dtoa_r+0xd0>
 800dea0:	2301      	movs	r3, #1
 800dea2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800dea4:	6013      	str	r3, [r2, #0]
 800dea6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <_dtoa_r+0xca>
 800deac:	4ba5      	ldr	r3, [pc, #660]	@ (800e144 <_dtoa_r+0x35c>)
 800deae:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800deb0:	6013      	str	r3, [r2, #0]
 800deb2:	4ba5      	ldr	r3, [pc, #660]	@ (800e148 <_dtoa_r+0x360>)
 800deb4:	9308      	str	r3, [sp, #32]
 800deb6:	e7e1      	b.n	800de7c <_dtoa_r+0x94>
 800deb8:	ab1a      	add	r3, sp, #104	@ 0x68
 800deba:	9301      	str	r3, [sp, #4]
 800debc:	ab1b      	add	r3, sp, #108	@ 0x6c
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	9803      	ldr	r0, [sp, #12]
 800dec2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dec4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dec6:	f001 f911 	bl	800f0ec <__d2b>
 800deca:	007a      	lsls	r2, r7, #1
 800decc:	9005      	str	r0, [sp, #20]
 800dece:	0d52      	lsrs	r2, r2, #21
 800ded0:	d100      	bne.n	800ded4 <_dtoa_r+0xec>
 800ded2:	e07b      	b.n	800dfcc <_dtoa_r+0x1e4>
 800ded4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ded6:	9618      	str	r6, [sp, #96]	@ 0x60
 800ded8:	0319      	lsls	r1, r3, #12
 800deda:	4b9c      	ldr	r3, [pc, #624]	@ (800e14c <_dtoa_r+0x364>)
 800dedc:	0b09      	lsrs	r1, r1, #12
 800dede:	430b      	orrs	r3, r1
 800dee0:	499b      	ldr	r1, [pc, #620]	@ (800e150 <_dtoa_r+0x368>)
 800dee2:	1857      	adds	r7, r2, r1
 800dee4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800dee6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800dee8:	0019      	movs	r1, r3
 800deea:	2200      	movs	r2, #0
 800deec:	4b99      	ldr	r3, [pc, #612]	@ (800e154 <_dtoa_r+0x36c>)
 800deee:	f7f3 fe73 	bl	8001bd8 <__aeabi_dsub>
 800def2:	4a99      	ldr	r2, [pc, #612]	@ (800e158 <_dtoa_r+0x370>)
 800def4:	4b99      	ldr	r3, [pc, #612]	@ (800e15c <_dtoa_r+0x374>)
 800def6:	f7f3 fba7 	bl	8001648 <__aeabi_dmul>
 800defa:	4a99      	ldr	r2, [pc, #612]	@ (800e160 <_dtoa_r+0x378>)
 800defc:	4b99      	ldr	r3, [pc, #612]	@ (800e164 <_dtoa_r+0x37c>)
 800defe:	f7f2 fbfb 	bl	80006f8 <__aeabi_dadd>
 800df02:	0004      	movs	r4, r0
 800df04:	0038      	movs	r0, r7
 800df06:	000d      	movs	r5, r1
 800df08:	f7f4 fa60 	bl	80023cc <__aeabi_i2d>
 800df0c:	4a96      	ldr	r2, [pc, #600]	@ (800e168 <_dtoa_r+0x380>)
 800df0e:	4b97      	ldr	r3, [pc, #604]	@ (800e16c <_dtoa_r+0x384>)
 800df10:	f7f3 fb9a 	bl	8001648 <__aeabi_dmul>
 800df14:	0002      	movs	r2, r0
 800df16:	000b      	movs	r3, r1
 800df18:	0020      	movs	r0, r4
 800df1a:	0029      	movs	r1, r5
 800df1c:	f7f2 fbec 	bl	80006f8 <__aeabi_dadd>
 800df20:	0004      	movs	r4, r0
 800df22:	000d      	movs	r5, r1
 800df24:	f7f4 fa16 	bl	8002354 <__aeabi_d2iz>
 800df28:	2200      	movs	r2, #0
 800df2a:	9004      	str	r0, [sp, #16]
 800df2c:	2300      	movs	r3, #0
 800df2e:	0020      	movs	r0, r4
 800df30:	0029      	movs	r1, r5
 800df32:	f7f2 fa91 	bl	8000458 <__aeabi_dcmplt>
 800df36:	2800      	cmp	r0, #0
 800df38:	d00b      	beq.n	800df52 <_dtoa_r+0x16a>
 800df3a:	9804      	ldr	r0, [sp, #16]
 800df3c:	f7f4 fa46 	bl	80023cc <__aeabi_i2d>
 800df40:	002b      	movs	r3, r5
 800df42:	0022      	movs	r2, r4
 800df44:	f7f2 fa82 	bl	800044c <__aeabi_dcmpeq>
 800df48:	4243      	negs	r3, r0
 800df4a:	4158      	adcs	r0, r3
 800df4c:	9b04      	ldr	r3, [sp, #16]
 800df4e:	1a1b      	subs	r3, r3, r0
 800df50:	9304      	str	r3, [sp, #16]
 800df52:	2301      	movs	r3, #1
 800df54:	9315      	str	r3, [sp, #84]	@ 0x54
 800df56:	9b04      	ldr	r3, [sp, #16]
 800df58:	2b16      	cmp	r3, #22
 800df5a:	d810      	bhi.n	800df7e <_dtoa_r+0x196>
 800df5c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800df5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800df60:	9a04      	ldr	r2, [sp, #16]
 800df62:	4b83      	ldr	r3, [pc, #524]	@ (800e170 <_dtoa_r+0x388>)
 800df64:	00d2      	lsls	r2, r2, #3
 800df66:	189b      	adds	r3, r3, r2
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	f7f2 fa74 	bl	8000458 <__aeabi_dcmplt>
 800df70:	2800      	cmp	r0, #0
 800df72:	d047      	beq.n	800e004 <_dtoa_r+0x21c>
 800df74:	9b04      	ldr	r3, [sp, #16]
 800df76:	3b01      	subs	r3, #1
 800df78:	9304      	str	r3, [sp, #16]
 800df7a:	2300      	movs	r3, #0
 800df7c:	9315      	str	r3, [sp, #84]	@ 0x54
 800df7e:	2200      	movs	r2, #0
 800df80:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800df82:	9206      	str	r2, [sp, #24]
 800df84:	1bdb      	subs	r3, r3, r7
 800df86:	1e5a      	subs	r2, r3, #1
 800df88:	d53e      	bpl.n	800e008 <_dtoa_r+0x220>
 800df8a:	2201      	movs	r2, #1
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	9306      	str	r3, [sp, #24]
 800df90:	2300      	movs	r3, #0
 800df92:	930d      	str	r3, [sp, #52]	@ 0x34
 800df94:	9b04      	ldr	r3, [sp, #16]
 800df96:	2b00      	cmp	r3, #0
 800df98:	db38      	blt.n	800e00c <_dtoa_r+0x224>
 800df9a:	9a04      	ldr	r2, [sp, #16]
 800df9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df9e:	4694      	mov	ip, r2
 800dfa0:	4463      	add	r3, ip
 800dfa2:	930d      	str	r3, [sp, #52]	@ 0x34
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	9214      	str	r2, [sp, #80]	@ 0x50
 800dfa8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dfaa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dfac:	2401      	movs	r4, #1
 800dfae:	2b09      	cmp	r3, #9
 800dfb0:	d867      	bhi.n	800e082 <_dtoa_r+0x29a>
 800dfb2:	2b05      	cmp	r3, #5
 800dfb4:	dd02      	ble.n	800dfbc <_dtoa_r+0x1d4>
 800dfb6:	2400      	movs	r4, #0
 800dfb8:	3b04      	subs	r3, #4
 800dfba:	9322      	str	r3, [sp, #136]	@ 0x88
 800dfbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dfbe:	1e98      	subs	r0, r3, #2
 800dfc0:	2803      	cmp	r0, #3
 800dfc2:	d867      	bhi.n	800e094 <_dtoa_r+0x2ac>
 800dfc4:	f7f2 f8a8 	bl	8000118 <__gnu_thumb1_case_uqi>
 800dfc8:	5b383a2b 	.word	0x5b383a2b
 800dfcc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800dfce:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800dfd0:	18f6      	adds	r6, r6, r3
 800dfd2:	4b68      	ldr	r3, [pc, #416]	@ (800e174 <_dtoa_r+0x38c>)
 800dfd4:	18f2      	adds	r2, r6, r3
 800dfd6:	2a20      	cmp	r2, #32
 800dfd8:	dd0f      	ble.n	800dffa <_dtoa_r+0x212>
 800dfda:	2340      	movs	r3, #64	@ 0x40
 800dfdc:	1a9b      	subs	r3, r3, r2
 800dfde:	409f      	lsls	r7, r3
 800dfe0:	4b65      	ldr	r3, [pc, #404]	@ (800e178 <_dtoa_r+0x390>)
 800dfe2:	0038      	movs	r0, r7
 800dfe4:	18f3      	adds	r3, r6, r3
 800dfe6:	40dc      	lsrs	r4, r3
 800dfe8:	4320      	orrs	r0, r4
 800dfea:	f7f4 fa1d 	bl	8002428 <__aeabi_ui2d>
 800dfee:	2201      	movs	r2, #1
 800dff0:	4b62      	ldr	r3, [pc, #392]	@ (800e17c <_dtoa_r+0x394>)
 800dff2:	1e77      	subs	r7, r6, #1
 800dff4:	18cb      	adds	r3, r1, r3
 800dff6:	9218      	str	r2, [sp, #96]	@ 0x60
 800dff8:	e776      	b.n	800dee8 <_dtoa_r+0x100>
 800dffa:	2320      	movs	r3, #32
 800dffc:	0020      	movs	r0, r4
 800dffe:	1a9b      	subs	r3, r3, r2
 800e000:	4098      	lsls	r0, r3
 800e002:	e7f2      	b.n	800dfea <_dtoa_r+0x202>
 800e004:	9015      	str	r0, [sp, #84]	@ 0x54
 800e006:	e7ba      	b.n	800df7e <_dtoa_r+0x196>
 800e008:	920d      	str	r2, [sp, #52]	@ 0x34
 800e00a:	e7c3      	b.n	800df94 <_dtoa_r+0x1ac>
 800e00c:	9b06      	ldr	r3, [sp, #24]
 800e00e:	9a04      	ldr	r2, [sp, #16]
 800e010:	1a9b      	subs	r3, r3, r2
 800e012:	9306      	str	r3, [sp, #24]
 800e014:	4253      	negs	r3, r2
 800e016:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e018:	2300      	movs	r3, #0
 800e01a:	9314      	str	r3, [sp, #80]	@ 0x50
 800e01c:	e7c5      	b.n	800dfaa <_dtoa_r+0x1c2>
 800e01e:	2300      	movs	r3, #0
 800e020:	9310      	str	r3, [sp, #64]	@ 0x40
 800e022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e024:	930e      	str	r3, [sp, #56]	@ 0x38
 800e026:	9309      	str	r3, [sp, #36]	@ 0x24
 800e028:	2b00      	cmp	r3, #0
 800e02a:	dc13      	bgt.n	800e054 <_dtoa_r+0x26c>
 800e02c:	2301      	movs	r3, #1
 800e02e:	001a      	movs	r2, r3
 800e030:	930e      	str	r3, [sp, #56]	@ 0x38
 800e032:	9309      	str	r3, [sp, #36]	@ 0x24
 800e034:	9223      	str	r2, [sp, #140]	@ 0x8c
 800e036:	e00d      	b.n	800e054 <_dtoa_r+0x26c>
 800e038:	2301      	movs	r3, #1
 800e03a:	e7f1      	b.n	800e020 <_dtoa_r+0x238>
 800e03c:	2300      	movs	r3, #0
 800e03e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e040:	9310      	str	r3, [sp, #64]	@ 0x40
 800e042:	4694      	mov	ip, r2
 800e044:	9b04      	ldr	r3, [sp, #16]
 800e046:	4463      	add	r3, ip
 800e048:	930e      	str	r3, [sp, #56]	@ 0x38
 800e04a:	3301      	adds	r3, #1
 800e04c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e04e:	2b00      	cmp	r3, #0
 800e050:	dc00      	bgt.n	800e054 <_dtoa_r+0x26c>
 800e052:	2301      	movs	r3, #1
 800e054:	9a03      	ldr	r2, [sp, #12]
 800e056:	2100      	movs	r1, #0
 800e058:	69d0      	ldr	r0, [r2, #28]
 800e05a:	2204      	movs	r2, #4
 800e05c:	0015      	movs	r5, r2
 800e05e:	3514      	adds	r5, #20
 800e060:	429d      	cmp	r5, r3
 800e062:	d91b      	bls.n	800e09c <_dtoa_r+0x2b4>
 800e064:	6041      	str	r1, [r0, #4]
 800e066:	9803      	ldr	r0, [sp, #12]
 800e068:	f000 fcfc 	bl	800ea64 <_Balloc>
 800e06c:	9008      	str	r0, [sp, #32]
 800e06e:	2800      	cmp	r0, #0
 800e070:	d117      	bne.n	800e0a2 <_dtoa_r+0x2ba>
 800e072:	21b0      	movs	r1, #176	@ 0xb0
 800e074:	4b42      	ldr	r3, [pc, #264]	@ (800e180 <_dtoa_r+0x398>)
 800e076:	482e      	ldr	r0, [pc, #184]	@ (800e130 <_dtoa_r+0x348>)
 800e078:	9a08      	ldr	r2, [sp, #32]
 800e07a:	31ff      	adds	r1, #255	@ 0xff
 800e07c:	e6c9      	b.n	800de12 <_dtoa_r+0x2a>
 800e07e:	2301      	movs	r3, #1
 800e080:	e7dd      	b.n	800e03e <_dtoa_r+0x256>
 800e082:	2300      	movs	r3, #0
 800e084:	9410      	str	r4, [sp, #64]	@ 0x40
 800e086:	9322      	str	r3, [sp, #136]	@ 0x88
 800e088:	3b01      	subs	r3, #1
 800e08a:	930e      	str	r3, [sp, #56]	@ 0x38
 800e08c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e08e:	2200      	movs	r2, #0
 800e090:	3313      	adds	r3, #19
 800e092:	e7cf      	b.n	800e034 <_dtoa_r+0x24c>
 800e094:	2301      	movs	r3, #1
 800e096:	9310      	str	r3, [sp, #64]	@ 0x40
 800e098:	3b02      	subs	r3, #2
 800e09a:	e7f6      	b.n	800e08a <_dtoa_r+0x2a2>
 800e09c:	3101      	adds	r1, #1
 800e09e:	0052      	lsls	r2, r2, #1
 800e0a0:	e7dc      	b.n	800e05c <_dtoa_r+0x274>
 800e0a2:	9b03      	ldr	r3, [sp, #12]
 800e0a4:	9a08      	ldr	r2, [sp, #32]
 800e0a6:	69db      	ldr	r3, [r3, #28]
 800e0a8:	601a      	str	r2, [r3, #0]
 800e0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ac:	2b0e      	cmp	r3, #14
 800e0ae:	d900      	bls.n	800e0b2 <_dtoa_r+0x2ca>
 800e0b0:	e0d9      	b.n	800e266 <_dtoa_r+0x47e>
 800e0b2:	2c00      	cmp	r4, #0
 800e0b4:	d100      	bne.n	800e0b8 <_dtoa_r+0x2d0>
 800e0b6:	e0d6      	b.n	800e266 <_dtoa_r+0x47e>
 800e0b8:	9b04      	ldr	r3, [sp, #16]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	dd64      	ble.n	800e188 <_dtoa_r+0x3a0>
 800e0be:	210f      	movs	r1, #15
 800e0c0:	9a04      	ldr	r2, [sp, #16]
 800e0c2:	4b2b      	ldr	r3, [pc, #172]	@ (800e170 <_dtoa_r+0x388>)
 800e0c4:	400a      	ands	r2, r1
 800e0c6:	00d2      	lsls	r2, r2, #3
 800e0c8:	189b      	adds	r3, r3, r2
 800e0ca:	681e      	ldr	r6, [r3, #0]
 800e0cc:	685f      	ldr	r7, [r3, #4]
 800e0ce:	9b04      	ldr	r3, [sp, #16]
 800e0d0:	2402      	movs	r4, #2
 800e0d2:	111d      	asrs	r5, r3, #4
 800e0d4:	05db      	lsls	r3, r3, #23
 800e0d6:	d50a      	bpl.n	800e0ee <_dtoa_r+0x306>
 800e0d8:	4b2a      	ldr	r3, [pc, #168]	@ (800e184 <_dtoa_r+0x39c>)
 800e0da:	400d      	ands	r5, r1
 800e0dc:	6a1a      	ldr	r2, [r3, #32]
 800e0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e0e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e0e4:	f7f2 fe6c 	bl	8000dc0 <__aeabi_ddiv>
 800e0e8:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e0ec:	3401      	adds	r4, #1
 800e0ee:	4b25      	ldr	r3, [pc, #148]	@ (800e184 <_dtoa_r+0x39c>)
 800e0f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800e0f2:	2d00      	cmp	r5, #0
 800e0f4:	d108      	bne.n	800e108 <_dtoa_r+0x320>
 800e0f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e0f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e0fa:	0032      	movs	r2, r6
 800e0fc:	003b      	movs	r3, r7
 800e0fe:	f7f2 fe5f 	bl	8000dc0 <__aeabi_ddiv>
 800e102:	900a      	str	r0, [sp, #40]	@ 0x28
 800e104:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e106:	e05a      	b.n	800e1be <_dtoa_r+0x3d6>
 800e108:	2301      	movs	r3, #1
 800e10a:	421d      	tst	r5, r3
 800e10c:	d009      	beq.n	800e122 <_dtoa_r+0x33a>
 800e10e:	18e4      	adds	r4, r4, r3
 800e110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e112:	0030      	movs	r0, r6
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	0039      	movs	r1, r7
 800e11a:	f7f3 fa95 	bl	8001648 <__aeabi_dmul>
 800e11e:	0006      	movs	r6, r0
 800e120:	000f      	movs	r7, r1
 800e122:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e124:	106d      	asrs	r5, r5, #1
 800e126:	3308      	adds	r3, #8
 800e128:	e7e2      	b.n	800e0f0 <_dtoa_r+0x308>
 800e12a:	46c0      	nop			@ (mov r8, r8)
 800e12c:	0801b499 	.word	0x0801b499
 800e130:	0801b4b0 	.word	0x0801b4b0
 800e134:	7ff00000 	.word	0x7ff00000
 800e138:	0000270f 	.word	0x0000270f
 800e13c:	0801b495 	.word	0x0801b495
 800e140:	0801b498 	.word	0x0801b498
 800e144:	0801b469 	.word	0x0801b469
 800e148:	0801b468 	.word	0x0801b468
 800e14c:	3ff00000 	.word	0x3ff00000
 800e150:	fffffc01 	.word	0xfffffc01
 800e154:	3ff80000 	.word	0x3ff80000
 800e158:	636f4361 	.word	0x636f4361
 800e15c:	3fd287a7 	.word	0x3fd287a7
 800e160:	8b60c8b3 	.word	0x8b60c8b3
 800e164:	3fc68a28 	.word	0x3fc68a28
 800e168:	509f79fb 	.word	0x509f79fb
 800e16c:	3fd34413 	.word	0x3fd34413
 800e170:	0801b5a8 	.word	0x0801b5a8
 800e174:	00000432 	.word	0x00000432
 800e178:	00000412 	.word	0x00000412
 800e17c:	fe100000 	.word	0xfe100000
 800e180:	0801b508 	.word	0x0801b508
 800e184:	0801b580 	.word	0x0801b580
 800e188:	9b04      	ldr	r3, [sp, #16]
 800e18a:	2402      	movs	r4, #2
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d016      	beq.n	800e1be <_dtoa_r+0x3d6>
 800e190:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800e192:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800e194:	220f      	movs	r2, #15
 800e196:	425d      	negs	r5, r3
 800e198:	402a      	ands	r2, r5
 800e19a:	4bd7      	ldr	r3, [pc, #860]	@ (800e4f8 <_dtoa_r+0x710>)
 800e19c:	00d2      	lsls	r2, r2, #3
 800e19e:	189b      	adds	r3, r3, r2
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	f7f3 fa50 	bl	8001648 <__aeabi_dmul>
 800e1a8:	2701      	movs	r7, #1
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e1b0:	4ed2      	ldr	r6, [pc, #840]	@ (800e4fc <_dtoa_r+0x714>)
 800e1b2:	112d      	asrs	r5, r5, #4
 800e1b4:	2d00      	cmp	r5, #0
 800e1b6:	d000      	beq.n	800e1ba <_dtoa_r+0x3d2>
 800e1b8:	e0ba      	b.n	800e330 <_dtoa_r+0x548>
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d1a1      	bne.n	800e102 <_dtoa_r+0x31a>
 800e1be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e1c0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e1c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d100      	bne.n	800e1ca <_dtoa_r+0x3e2>
 800e1c8:	e0bd      	b.n	800e346 <_dtoa_r+0x55e>
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	0030      	movs	r0, r6
 800e1ce:	0039      	movs	r1, r7
 800e1d0:	4bcb      	ldr	r3, [pc, #812]	@ (800e500 <_dtoa_r+0x718>)
 800e1d2:	f7f2 f941 	bl	8000458 <__aeabi_dcmplt>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d100      	bne.n	800e1dc <_dtoa_r+0x3f4>
 800e1da:	e0b4      	b.n	800e346 <_dtoa_r+0x55e>
 800e1dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d100      	bne.n	800e1e4 <_dtoa_r+0x3fc>
 800e1e2:	e0b0      	b.n	800e346 <_dtoa_r+0x55e>
 800e1e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	dd39      	ble.n	800e25e <_dtoa_r+0x476>
 800e1ea:	9b04      	ldr	r3, [sp, #16]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800e1f2:	0030      	movs	r0, r6
 800e1f4:	4bc3      	ldr	r3, [pc, #780]	@ (800e504 <_dtoa_r+0x71c>)
 800e1f6:	0039      	movs	r1, r7
 800e1f8:	f7f3 fa26 	bl	8001648 <__aeabi_dmul>
 800e1fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e202:	3401      	adds	r4, #1
 800e204:	0020      	movs	r0, r4
 800e206:	9311      	str	r3, [sp, #68]	@ 0x44
 800e208:	f7f4 f8e0 	bl	80023cc <__aeabi_i2d>
 800e20c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e20e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e210:	f7f3 fa1a 	bl	8001648 <__aeabi_dmul>
 800e214:	4bbc      	ldr	r3, [pc, #752]	@ (800e508 <_dtoa_r+0x720>)
 800e216:	2200      	movs	r2, #0
 800e218:	f7f2 fa6e 	bl	80006f8 <__aeabi_dadd>
 800e21c:	4bbb      	ldr	r3, [pc, #748]	@ (800e50c <_dtoa_r+0x724>)
 800e21e:	0006      	movs	r6, r0
 800e220:	18cf      	adds	r7, r1, r3
 800e222:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e224:	2b00      	cmp	r3, #0
 800e226:	d000      	beq.n	800e22a <_dtoa_r+0x442>
 800e228:	e091      	b.n	800e34e <_dtoa_r+0x566>
 800e22a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e22c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e22e:	2200      	movs	r2, #0
 800e230:	4bb7      	ldr	r3, [pc, #732]	@ (800e510 <_dtoa_r+0x728>)
 800e232:	f7f3 fcd1 	bl	8001bd8 <__aeabi_dsub>
 800e236:	0032      	movs	r2, r6
 800e238:	003b      	movs	r3, r7
 800e23a:	0004      	movs	r4, r0
 800e23c:	000d      	movs	r5, r1
 800e23e:	f7f2 f91f 	bl	8000480 <__aeabi_dcmpgt>
 800e242:	2800      	cmp	r0, #0
 800e244:	d000      	beq.n	800e248 <_dtoa_r+0x460>
 800e246:	e29d      	b.n	800e784 <_dtoa_r+0x99c>
 800e248:	2180      	movs	r1, #128	@ 0x80
 800e24a:	0609      	lsls	r1, r1, #24
 800e24c:	187b      	adds	r3, r7, r1
 800e24e:	0032      	movs	r2, r6
 800e250:	0020      	movs	r0, r4
 800e252:	0029      	movs	r1, r5
 800e254:	f7f2 f900 	bl	8000458 <__aeabi_dcmplt>
 800e258:	2800      	cmp	r0, #0
 800e25a:	d000      	beq.n	800e25e <_dtoa_r+0x476>
 800e25c:	e130      	b.n	800e4c0 <_dtoa_r+0x6d8>
 800e25e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e260:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800e262:	930a      	str	r3, [sp, #40]	@ 0x28
 800e264:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e266:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e268:	2b00      	cmp	r3, #0
 800e26a:	da00      	bge.n	800e26e <_dtoa_r+0x486>
 800e26c:	e177      	b.n	800e55e <_dtoa_r+0x776>
 800e26e:	9a04      	ldr	r2, [sp, #16]
 800e270:	2a0e      	cmp	r2, #14
 800e272:	dd00      	ble.n	800e276 <_dtoa_r+0x48e>
 800e274:	e173      	b.n	800e55e <_dtoa_r+0x776>
 800e276:	4ba0      	ldr	r3, [pc, #640]	@ (800e4f8 <_dtoa_r+0x710>)
 800e278:	00d2      	lsls	r2, r2, #3
 800e27a:	189b      	adds	r3, r3, r2
 800e27c:	685c      	ldr	r4, [r3, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	9306      	str	r3, [sp, #24]
 800e282:	9407      	str	r4, [sp, #28]
 800e284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e286:	2b00      	cmp	r3, #0
 800e288:	da03      	bge.n	800e292 <_dtoa_r+0x4aa>
 800e28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	dc00      	bgt.n	800e292 <_dtoa_r+0x4aa>
 800e290:	e106      	b.n	800e4a0 <_dtoa_r+0x6b8>
 800e292:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e294:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800e296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e298:	9d08      	ldr	r5, [sp, #32]
 800e29a:	3b01      	subs	r3, #1
 800e29c:	195b      	adds	r3, r3, r5
 800e29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2a0:	9a06      	ldr	r2, [sp, #24]
 800e2a2:	9b07      	ldr	r3, [sp, #28]
 800e2a4:	0030      	movs	r0, r6
 800e2a6:	0039      	movs	r1, r7
 800e2a8:	f7f2 fd8a 	bl	8000dc0 <__aeabi_ddiv>
 800e2ac:	f7f4 f852 	bl	8002354 <__aeabi_d2iz>
 800e2b0:	9009      	str	r0, [sp, #36]	@ 0x24
 800e2b2:	f7f4 f88b 	bl	80023cc <__aeabi_i2d>
 800e2b6:	9a06      	ldr	r2, [sp, #24]
 800e2b8:	9b07      	ldr	r3, [sp, #28]
 800e2ba:	f7f3 f9c5 	bl	8001648 <__aeabi_dmul>
 800e2be:	0002      	movs	r2, r0
 800e2c0:	000b      	movs	r3, r1
 800e2c2:	0030      	movs	r0, r6
 800e2c4:	0039      	movs	r1, r7
 800e2c6:	f7f3 fc87 	bl	8001bd8 <__aeabi_dsub>
 800e2ca:	002b      	movs	r3, r5
 800e2cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2ce:	3501      	adds	r5, #1
 800e2d0:	3230      	adds	r2, #48	@ 0x30
 800e2d2:	701a      	strb	r2, [r3, #0]
 800e2d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2d6:	002c      	movs	r4, r5
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d000      	beq.n	800e2de <_dtoa_r+0x4f6>
 800e2dc:	e131      	b.n	800e542 <_dtoa_r+0x75a>
 800e2de:	0002      	movs	r2, r0
 800e2e0:	000b      	movs	r3, r1
 800e2e2:	f7f2 fa09 	bl	80006f8 <__aeabi_dadd>
 800e2e6:	9a06      	ldr	r2, [sp, #24]
 800e2e8:	9b07      	ldr	r3, [sp, #28]
 800e2ea:	0006      	movs	r6, r0
 800e2ec:	000f      	movs	r7, r1
 800e2ee:	f7f2 f8c7 	bl	8000480 <__aeabi_dcmpgt>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	d000      	beq.n	800e2f8 <_dtoa_r+0x510>
 800e2f6:	e10f      	b.n	800e518 <_dtoa_r+0x730>
 800e2f8:	9a06      	ldr	r2, [sp, #24]
 800e2fa:	9b07      	ldr	r3, [sp, #28]
 800e2fc:	0030      	movs	r0, r6
 800e2fe:	0039      	movs	r1, r7
 800e300:	f7f2 f8a4 	bl	800044c <__aeabi_dcmpeq>
 800e304:	2800      	cmp	r0, #0
 800e306:	d003      	beq.n	800e310 <_dtoa_r+0x528>
 800e308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e30a:	07dd      	lsls	r5, r3, #31
 800e30c:	d500      	bpl.n	800e310 <_dtoa_r+0x528>
 800e30e:	e103      	b.n	800e518 <_dtoa_r+0x730>
 800e310:	9905      	ldr	r1, [sp, #20]
 800e312:	9803      	ldr	r0, [sp, #12]
 800e314:	f000 fbea 	bl	800eaec <_Bfree>
 800e318:	2300      	movs	r3, #0
 800e31a:	7023      	strb	r3, [r4, #0]
 800e31c:	9b04      	ldr	r3, [sp, #16]
 800e31e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e320:	3301      	adds	r3, #1
 800e322:	6013      	str	r3, [r2, #0]
 800e324:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800e326:	2b00      	cmp	r3, #0
 800e328:	d100      	bne.n	800e32c <_dtoa_r+0x544>
 800e32a:	e5a7      	b.n	800de7c <_dtoa_r+0x94>
 800e32c:	601c      	str	r4, [r3, #0]
 800e32e:	e5a5      	b.n	800de7c <_dtoa_r+0x94>
 800e330:	423d      	tst	r5, r7
 800e332:	d005      	beq.n	800e340 <_dtoa_r+0x558>
 800e334:	6832      	ldr	r2, [r6, #0]
 800e336:	6873      	ldr	r3, [r6, #4]
 800e338:	f7f3 f986 	bl	8001648 <__aeabi_dmul>
 800e33c:	003b      	movs	r3, r7
 800e33e:	3401      	adds	r4, #1
 800e340:	106d      	asrs	r5, r5, #1
 800e342:	3608      	adds	r6, #8
 800e344:	e736      	b.n	800e1b4 <_dtoa_r+0x3cc>
 800e346:	9b04      	ldr	r3, [sp, #16]
 800e348:	930c      	str	r3, [sp, #48]	@ 0x30
 800e34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e34c:	e75a      	b.n	800e204 <_dtoa_r+0x41c>
 800e34e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e350:	4b69      	ldr	r3, [pc, #420]	@ (800e4f8 <_dtoa_r+0x710>)
 800e352:	3a01      	subs	r2, #1
 800e354:	00d2      	lsls	r2, r2, #3
 800e356:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e358:	189b      	adds	r3, r3, r2
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	2900      	cmp	r1, #0
 800e360:	d04c      	beq.n	800e3fc <_dtoa_r+0x614>
 800e362:	2000      	movs	r0, #0
 800e364:	496b      	ldr	r1, [pc, #428]	@ (800e514 <_dtoa_r+0x72c>)
 800e366:	f7f2 fd2b 	bl	8000dc0 <__aeabi_ddiv>
 800e36a:	0032      	movs	r2, r6
 800e36c:	003b      	movs	r3, r7
 800e36e:	f7f3 fc33 	bl	8001bd8 <__aeabi_dsub>
 800e372:	9a08      	ldr	r2, [sp, #32]
 800e374:	0006      	movs	r6, r0
 800e376:	4694      	mov	ip, r2
 800e378:	000f      	movs	r7, r1
 800e37a:	9b08      	ldr	r3, [sp, #32]
 800e37c:	9316      	str	r3, [sp, #88]	@ 0x58
 800e37e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e380:	4463      	add	r3, ip
 800e382:	9311      	str	r3, [sp, #68]	@ 0x44
 800e384:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e386:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e388:	f7f3 ffe4 	bl	8002354 <__aeabi_d2iz>
 800e38c:	0005      	movs	r5, r0
 800e38e:	f7f4 f81d 	bl	80023cc <__aeabi_i2d>
 800e392:	0002      	movs	r2, r0
 800e394:	000b      	movs	r3, r1
 800e396:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e398:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e39a:	f7f3 fc1d 	bl	8001bd8 <__aeabi_dsub>
 800e39e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e3a0:	3530      	adds	r5, #48	@ 0x30
 800e3a2:	1c5c      	adds	r4, r3, #1
 800e3a4:	701d      	strb	r5, [r3, #0]
 800e3a6:	0032      	movs	r2, r6
 800e3a8:	003b      	movs	r3, r7
 800e3aa:	900a      	str	r0, [sp, #40]	@ 0x28
 800e3ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e3ae:	f7f2 f853 	bl	8000458 <__aeabi_dcmplt>
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d16a      	bne.n	800e48c <_dtoa_r+0x6a4>
 800e3b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e3b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	4950      	ldr	r1, [pc, #320]	@ (800e500 <_dtoa_r+0x718>)
 800e3be:	f7f3 fc0b 	bl	8001bd8 <__aeabi_dsub>
 800e3c2:	0032      	movs	r2, r6
 800e3c4:	003b      	movs	r3, r7
 800e3c6:	f7f2 f847 	bl	8000458 <__aeabi_dcmplt>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d000      	beq.n	800e3d0 <_dtoa_r+0x5e8>
 800e3ce:	e0a5      	b.n	800e51c <_dtoa_r+0x734>
 800e3d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e3d2:	42a3      	cmp	r3, r4
 800e3d4:	d100      	bne.n	800e3d8 <_dtoa_r+0x5f0>
 800e3d6:	e742      	b.n	800e25e <_dtoa_r+0x476>
 800e3d8:	2200      	movs	r2, #0
 800e3da:	0030      	movs	r0, r6
 800e3dc:	0039      	movs	r1, r7
 800e3de:	4b49      	ldr	r3, [pc, #292]	@ (800e504 <_dtoa_r+0x71c>)
 800e3e0:	f7f3 f932 	bl	8001648 <__aeabi_dmul>
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	0006      	movs	r6, r0
 800e3e8:	000f      	movs	r7, r1
 800e3ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e3ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3ee:	4b45      	ldr	r3, [pc, #276]	@ (800e504 <_dtoa_r+0x71c>)
 800e3f0:	f7f3 f92a 	bl	8001648 <__aeabi_dmul>
 800e3f4:	9416      	str	r4, [sp, #88]	@ 0x58
 800e3f6:	900a      	str	r0, [sp, #40]	@ 0x28
 800e3f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e3fa:	e7c3      	b.n	800e384 <_dtoa_r+0x59c>
 800e3fc:	0030      	movs	r0, r6
 800e3fe:	0039      	movs	r1, r7
 800e400:	f7f3 f922 	bl	8001648 <__aeabi_dmul>
 800e404:	9d08      	ldr	r5, [sp, #32]
 800e406:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e408:	002b      	movs	r3, r5
 800e40a:	4694      	mov	ip, r2
 800e40c:	9016      	str	r0, [sp, #88]	@ 0x58
 800e40e:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e410:	4463      	add	r3, ip
 800e412:	9319      	str	r3, [sp, #100]	@ 0x64
 800e414:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e416:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e418:	f7f3 ff9c 	bl	8002354 <__aeabi_d2iz>
 800e41c:	0004      	movs	r4, r0
 800e41e:	f7f3 ffd5 	bl	80023cc <__aeabi_i2d>
 800e422:	000b      	movs	r3, r1
 800e424:	0002      	movs	r2, r0
 800e426:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e42a:	f7f3 fbd5 	bl	8001bd8 <__aeabi_dsub>
 800e42e:	3430      	adds	r4, #48	@ 0x30
 800e430:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e432:	702c      	strb	r4, [r5, #0]
 800e434:	3501      	adds	r5, #1
 800e436:	0006      	movs	r6, r0
 800e438:	000f      	movs	r7, r1
 800e43a:	42ab      	cmp	r3, r5
 800e43c:	d129      	bne.n	800e492 <_dtoa_r+0x6aa>
 800e43e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800e440:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800e442:	9b08      	ldr	r3, [sp, #32]
 800e444:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800e446:	469c      	mov	ip, r3
 800e448:	2200      	movs	r2, #0
 800e44a:	4b32      	ldr	r3, [pc, #200]	@ (800e514 <_dtoa_r+0x72c>)
 800e44c:	4464      	add	r4, ip
 800e44e:	f7f2 f953 	bl	80006f8 <__aeabi_dadd>
 800e452:	0002      	movs	r2, r0
 800e454:	000b      	movs	r3, r1
 800e456:	0030      	movs	r0, r6
 800e458:	0039      	movs	r1, r7
 800e45a:	f7f2 f811 	bl	8000480 <__aeabi_dcmpgt>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d15c      	bne.n	800e51c <_dtoa_r+0x734>
 800e462:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e464:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e466:	2000      	movs	r0, #0
 800e468:	492a      	ldr	r1, [pc, #168]	@ (800e514 <_dtoa_r+0x72c>)
 800e46a:	f7f3 fbb5 	bl	8001bd8 <__aeabi_dsub>
 800e46e:	0002      	movs	r2, r0
 800e470:	000b      	movs	r3, r1
 800e472:	0030      	movs	r0, r6
 800e474:	0039      	movs	r1, r7
 800e476:	f7f1 ffef 	bl	8000458 <__aeabi_dcmplt>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d100      	bne.n	800e480 <_dtoa_r+0x698>
 800e47e:	e6ee      	b.n	800e25e <_dtoa_r+0x476>
 800e480:	0023      	movs	r3, r4
 800e482:	3c01      	subs	r4, #1
 800e484:	7822      	ldrb	r2, [r4, #0]
 800e486:	2a30      	cmp	r2, #48	@ 0x30
 800e488:	d0fa      	beq.n	800e480 <_dtoa_r+0x698>
 800e48a:	001c      	movs	r4, r3
 800e48c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e48e:	9304      	str	r3, [sp, #16]
 800e490:	e73e      	b.n	800e310 <_dtoa_r+0x528>
 800e492:	2200      	movs	r2, #0
 800e494:	4b1b      	ldr	r3, [pc, #108]	@ (800e504 <_dtoa_r+0x71c>)
 800e496:	f7f3 f8d7 	bl	8001648 <__aeabi_dmul>
 800e49a:	900a      	str	r0, [sp, #40]	@ 0x28
 800e49c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e49e:	e7b9      	b.n	800e414 <_dtoa_r+0x62c>
 800e4a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10c      	bne.n	800e4c0 <_dtoa_r+0x6d8>
 800e4a6:	9806      	ldr	r0, [sp, #24]
 800e4a8:	9907      	ldr	r1, [sp, #28]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	4b18      	ldr	r3, [pc, #96]	@ (800e510 <_dtoa_r+0x728>)
 800e4ae:	f7f3 f8cb 	bl	8001648 <__aeabi_dmul>
 800e4b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4b6:	f7f1 ffed 	bl	8000494 <__aeabi_dcmpge>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d100      	bne.n	800e4c0 <_dtoa_r+0x6d8>
 800e4be:	e164      	b.n	800e78a <_dtoa_r+0x9a2>
 800e4c0:	2600      	movs	r6, #0
 800e4c2:	0037      	movs	r7, r6
 800e4c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e4c6:	9c08      	ldr	r4, [sp, #32]
 800e4c8:	43db      	mvns	r3, r3
 800e4ca:	930c      	str	r3, [sp, #48]	@ 0x30
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	9304      	str	r3, [sp, #16]
 800e4d0:	0031      	movs	r1, r6
 800e4d2:	9803      	ldr	r0, [sp, #12]
 800e4d4:	f000 fb0a 	bl	800eaec <_Bfree>
 800e4d8:	2f00      	cmp	r7, #0
 800e4da:	d0d7      	beq.n	800e48c <_dtoa_r+0x6a4>
 800e4dc:	9b04      	ldr	r3, [sp, #16]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d005      	beq.n	800e4ee <_dtoa_r+0x706>
 800e4e2:	42bb      	cmp	r3, r7
 800e4e4:	d003      	beq.n	800e4ee <_dtoa_r+0x706>
 800e4e6:	0019      	movs	r1, r3
 800e4e8:	9803      	ldr	r0, [sp, #12]
 800e4ea:	f000 faff 	bl	800eaec <_Bfree>
 800e4ee:	0039      	movs	r1, r7
 800e4f0:	9803      	ldr	r0, [sp, #12]
 800e4f2:	f000 fafb 	bl	800eaec <_Bfree>
 800e4f6:	e7c9      	b.n	800e48c <_dtoa_r+0x6a4>
 800e4f8:	0801b5a8 	.word	0x0801b5a8
 800e4fc:	0801b580 	.word	0x0801b580
 800e500:	3ff00000 	.word	0x3ff00000
 800e504:	40240000 	.word	0x40240000
 800e508:	401c0000 	.word	0x401c0000
 800e50c:	fcc00000 	.word	0xfcc00000
 800e510:	40140000 	.word	0x40140000
 800e514:	3fe00000 	.word	0x3fe00000
 800e518:	9b04      	ldr	r3, [sp, #16]
 800e51a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e51c:	0023      	movs	r3, r4
 800e51e:	001c      	movs	r4, r3
 800e520:	3b01      	subs	r3, #1
 800e522:	781a      	ldrb	r2, [r3, #0]
 800e524:	2a39      	cmp	r2, #57	@ 0x39
 800e526:	d108      	bne.n	800e53a <_dtoa_r+0x752>
 800e528:	9a08      	ldr	r2, [sp, #32]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d1f7      	bne.n	800e51e <_dtoa_r+0x736>
 800e52e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e530:	9908      	ldr	r1, [sp, #32]
 800e532:	3201      	adds	r2, #1
 800e534:	920c      	str	r2, [sp, #48]	@ 0x30
 800e536:	2230      	movs	r2, #48	@ 0x30
 800e538:	700a      	strb	r2, [r1, #0]
 800e53a:	781a      	ldrb	r2, [r3, #0]
 800e53c:	3201      	adds	r2, #1
 800e53e:	701a      	strb	r2, [r3, #0]
 800e540:	e7a4      	b.n	800e48c <_dtoa_r+0x6a4>
 800e542:	2200      	movs	r2, #0
 800e544:	4bc6      	ldr	r3, [pc, #792]	@ (800e860 <_dtoa_r+0xa78>)
 800e546:	f7f3 f87f 	bl	8001648 <__aeabi_dmul>
 800e54a:	2200      	movs	r2, #0
 800e54c:	2300      	movs	r3, #0
 800e54e:	0006      	movs	r6, r0
 800e550:	000f      	movs	r7, r1
 800e552:	f7f1 ff7b 	bl	800044c <__aeabi_dcmpeq>
 800e556:	2800      	cmp	r0, #0
 800e558:	d100      	bne.n	800e55c <_dtoa_r+0x774>
 800e55a:	e6a1      	b.n	800e2a0 <_dtoa_r+0x4b8>
 800e55c:	e6d8      	b.n	800e310 <_dtoa_r+0x528>
 800e55e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800e560:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e562:	9c06      	ldr	r4, [sp, #24]
 800e564:	2f00      	cmp	r7, #0
 800e566:	d014      	beq.n	800e592 <_dtoa_r+0x7aa>
 800e568:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e56a:	2a01      	cmp	r2, #1
 800e56c:	dd00      	ble.n	800e570 <_dtoa_r+0x788>
 800e56e:	e0c8      	b.n	800e702 <_dtoa_r+0x91a>
 800e570:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800e572:	2a00      	cmp	r2, #0
 800e574:	d100      	bne.n	800e578 <_dtoa_r+0x790>
 800e576:	e0be      	b.n	800e6f6 <_dtoa_r+0x90e>
 800e578:	4aba      	ldr	r2, [pc, #744]	@ (800e864 <_dtoa_r+0xa7c>)
 800e57a:	189b      	adds	r3, r3, r2
 800e57c:	9a06      	ldr	r2, [sp, #24]
 800e57e:	2101      	movs	r1, #1
 800e580:	18d2      	adds	r2, r2, r3
 800e582:	9206      	str	r2, [sp, #24]
 800e584:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e586:	9803      	ldr	r0, [sp, #12]
 800e588:	18d3      	adds	r3, r2, r3
 800e58a:	930d      	str	r3, [sp, #52]	@ 0x34
 800e58c:	f000 fb66 	bl	800ec5c <__i2b>
 800e590:	0007      	movs	r7, r0
 800e592:	2c00      	cmp	r4, #0
 800e594:	d00e      	beq.n	800e5b4 <_dtoa_r+0x7cc>
 800e596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e598:	2b00      	cmp	r3, #0
 800e59a:	dd0b      	ble.n	800e5b4 <_dtoa_r+0x7cc>
 800e59c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e59e:	0023      	movs	r3, r4
 800e5a0:	4294      	cmp	r4, r2
 800e5a2:	dd00      	ble.n	800e5a6 <_dtoa_r+0x7be>
 800e5a4:	0013      	movs	r3, r2
 800e5a6:	9a06      	ldr	r2, [sp, #24]
 800e5a8:	1ae4      	subs	r4, r4, r3
 800e5aa:	1ad2      	subs	r2, r2, r3
 800e5ac:	9206      	str	r2, [sp, #24]
 800e5ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	930d      	str	r3, [sp, #52]	@ 0x34
 800e5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d01f      	beq.n	800e5fa <_dtoa_r+0x812>
 800e5ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d100      	bne.n	800e5c2 <_dtoa_r+0x7da>
 800e5c0:	e0b5      	b.n	800e72e <_dtoa_r+0x946>
 800e5c2:	2d00      	cmp	r5, #0
 800e5c4:	d010      	beq.n	800e5e8 <_dtoa_r+0x800>
 800e5c6:	0039      	movs	r1, r7
 800e5c8:	002a      	movs	r2, r5
 800e5ca:	9803      	ldr	r0, [sp, #12]
 800e5cc:	f000 fc10 	bl	800edf0 <__pow5mult>
 800e5d0:	9a05      	ldr	r2, [sp, #20]
 800e5d2:	0001      	movs	r1, r0
 800e5d4:	0007      	movs	r7, r0
 800e5d6:	9803      	ldr	r0, [sp, #12]
 800e5d8:	f000 fb58 	bl	800ec8c <__multiply>
 800e5dc:	0006      	movs	r6, r0
 800e5de:	9905      	ldr	r1, [sp, #20]
 800e5e0:	9803      	ldr	r0, [sp, #12]
 800e5e2:	f000 fa83 	bl	800eaec <_Bfree>
 800e5e6:	9605      	str	r6, [sp, #20]
 800e5e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ea:	1b5a      	subs	r2, r3, r5
 800e5ec:	42ab      	cmp	r3, r5
 800e5ee:	d004      	beq.n	800e5fa <_dtoa_r+0x812>
 800e5f0:	9905      	ldr	r1, [sp, #20]
 800e5f2:	9803      	ldr	r0, [sp, #12]
 800e5f4:	f000 fbfc 	bl	800edf0 <__pow5mult>
 800e5f8:	9005      	str	r0, [sp, #20]
 800e5fa:	2101      	movs	r1, #1
 800e5fc:	9803      	ldr	r0, [sp, #12]
 800e5fe:	f000 fb2d 	bl	800ec5c <__i2b>
 800e602:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e604:	0006      	movs	r6, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d100      	bne.n	800e60c <_dtoa_r+0x824>
 800e60a:	e1bc      	b.n	800e986 <_dtoa_r+0xb9e>
 800e60c:	001a      	movs	r2, r3
 800e60e:	0001      	movs	r1, r0
 800e610:	9803      	ldr	r0, [sp, #12]
 800e612:	f000 fbed 	bl	800edf0 <__pow5mult>
 800e616:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e618:	0006      	movs	r6, r0
 800e61a:	2500      	movs	r5, #0
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	dc16      	bgt.n	800e64e <_dtoa_r+0x866>
 800e620:	2500      	movs	r5, #0
 800e622:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e624:	42ab      	cmp	r3, r5
 800e626:	d10e      	bne.n	800e646 <_dtoa_r+0x85e>
 800e628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e62a:	031b      	lsls	r3, r3, #12
 800e62c:	42ab      	cmp	r3, r5
 800e62e:	d10a      	bne.n	800e646 <_dtoa_r+0x85e>
 800e630:	4b8d      	ldr	r3, [pc, #564]	@ (800e868 <_dtoa_r+0xa80>)
 800e632:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e634:	4213      	tst	r3, r2
 800e636:	d006      	beq.n	800e646 <_dtoa_r+0x85e>
 800e638:	9b06      	ldr	r3, [sp, #24]
 800e63a:	3501      	adds	r5, #1
 800e63c:	3301      	adds	r3, #1
 800e63e:	9306      	str	r3, [sp, #24]
 800e640:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e642:	3301      	adds	r3, #1
 800e644:	930d      	str	r3, [sp, #52]	@ 0x34
 800e646:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e648:	2001      	movs	r0, #1
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d008      	beq.n	800e660 <_dtoa_r+0x878>
 800e64e:	6933      	ldr	r3, [r6, #16]
 800e650:	3303      	adds	r3, #3
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	18f3      	adds	r3, r6, r3
 800e656:	6858      	ldr	r0, [r3, #4]
 800e658:	f000 fab0 	bl	800ebbc <__hi0bits>
 800e65c:	2320      	movs	r3, #32
 800e65e:	1a18      	subs	r0, r3, r0
 800e660:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e662:	1818      	adds	r0, r3, r0
 800e664:	0002      	movs	r2, r0
 800e666:	231f      	movs	r3, #31
 800e668:	401a      	ands	r2, r3
 800e66a:	4218      	tst	r0, r3
 800e66c:	d065      	beq.n	800e73a <_dtoa_r+0x952>
 800e66e:	3301      	adds	r3, #1
 800e670:	1a9b      	subs	r3, r3, r2
 800e672:	2b04      	cmp	r3, #4
 800e674:	dd5d      	ble.n	800e732 <_dtoa_r+0x94a>
 800e676:	231c      	movs	r3, #28
 800e678:	1a9b      	subs	r3, r3, r2
 800e67a:	9a06      	ldr	r2, [sp, #24]
 800e67c:	18e4      	adds	r4, r4, r3
 800e67e:	18d2      	adds	r2, r2, r3
 800e680:	9206      	str	r2, [sp, #24]
 800e682:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e684:	18d3      	adds	r3, r2, r3
 800e686:	930d      	str	r3, [sp, #52]	@ 0x34
 800e688:	9b06      	ldr	r3, [sp, #24]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	dd05      	ble.n	800e69a <_dtoa_r+0x8b2>
 800e68e:	001a      	movs	r2, r3
 800e690:	9905      	ldr	r1, [sp, #20]
 800e692:	9803      	ldr	r0, [sp, #12]
 800e694:	f000 fc08 	bl	800eea8 <__lshift>
 800e698:	9005      	str	r0, [sp, #20]
 800e69a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	dd05      	ble.n	800e6ac <_dtoa_r+0x8c4>
 800e6a0:	0031      	movs	r1, r6
 800e6a2:	001a      	movs	r2, r3
 800e6a4:	9803      	ldr	r0, [sp, #12]
 800e6a6:	f000 fbff 	bl	800eea8 <__lshift>
 800e6aa:	0006      	movs	r6, r0
 800e6ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d045      	beq.n	800e73e <_dtoa_r+0x956>
 800e6b2:	0031      	movs	r1, r6
 800e6b4:	9805      	ldr	r0, [sp, #20]
 800e6b6:	f000 fc63 	bl	800ef80 <__mcmp>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	da3f      	bge.n	800e73e <_dtoa_r+0x956>
 800e6be:	9b04      	ldr	r3, [sp, #16]
 800e6c0:	220a      	movs	r2, #10
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6c6:	9905      	ldr	r1, [sp, #20]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	9803      	ldr	r0, [sp, #12]
 800e6cc:	f000 fa32 	bl	800eb34 <__multadd>
 800e6d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e6d2:	9005      	str	r0, [sp, #20]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d100      	bne.n	800e6da <_dtoa_r+0x8f2>
 800e6d8:	e15c      	b.n	800e994 <_dtoa_r+0xbac>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	0039      	movs	r1, r7
 800e6de:	220a      	movs	r2, #10
 800e6e0:	9803      	ldr	r0, [sp, #12]
 800e6e2:	f000 fa27 	bl	800eb34 <__multadd>
 800e6e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6e8:	0007      	movs	r7, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	dc55      	bgt.n	800e79a <_dtoa_r+0x9b2>
 800e6ee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e6f0:	2b02      	cmp	r3, #2
 800e6f2:	dc2d      	bgt.n	800e750 <_dtoa_r+0x968>
 800e6f4:	e051      	b.n	800e79a <_dtoa_r+0x9b2>
 800e6f6:	2336      	movs	r3, #54	@ 0x36
 800e6f8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e6fa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800e6fc:	9c06      	ldr	r4, [sp, #24]
 800e6fe:	1a9b      	subs	r3, r3, r2
 800e700:	e73c      	b.n	800e57c <_dtoa_r+0x794>
 800e702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e704:	1e5d      	subs	r5, r3, #1
 800e706:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e708:	42ab      	cmp	r3, r5
 800e70a:	db08      	blt.n	800e71e <_dtoa_r+0x936>
 800e70c:	1b5d      	subs	r5, r3, r5
 800e70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e710:	9c06      	ldr	r4, [sp, #24]
 800e712:	2b00      	cmp	r3, #0
 800e714:	db00      	blt.n	800e718 <_dtoa_r+0x930>
 800e716:	e731      	b.n	800e57c <_dtoa_r+0x794>
 800e718:	1ae4      	subs	r4, r4, r3
 800e71a:	2300      	movs	r3, #0
 800e71c:	e72e      	b.n	800e57c <_dtoa_r+0x794>
 800e71e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e720:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e722:	1aeb      	subs	r3, r5, r3
 800e724:	18d3      	adds	r3, r2, r3
 800e726:	950f      	str	r5, [sp, #60]	@ 0x3c
 800e728:	9314      	str	r3, [sp, #80]	@ 0x50
 800e72a:	2500      	movs	r5, #0
 800e72c:	e7ef      	b.n	800e70e <_dtoa_r+0x926>
 800e72e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e730:	e75e      	b.n	800e5f0 <_dtoa_r+0x808>
 800e732:	2b04      	cmp	r3, #4
 800e734:	d0a8      	beq.n	800e688 <_dtoa_r+0x8a0>
 800e736:	331c      	adds	r3, #28
 800e738:	e79f      	b.n	800e67a <_dtoa_r+0x892>
 800e73a:	0013      	movs	r3, r2
 800e73c:	e7fb      	b.n	800e736 <_dtoa_r+0x94e>
 800e73e:	9b04      	ldr	r3, [sp, #16]
 800e740:	930c      	str	r3, [sp, #48]	@ 0x30
 800e742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e744:	930e      	str	r3, [sp, #56]	@ 0x38
 800e746:	2b00      	cmp	r3, #0
 800e748:	dc23      	bgt.n	800e792 <_dtoa_r+0x9aa>
 800e74a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e74c:	2b02      	cmp	r3, #2
 800e74e:	dd20      	ble.n	800e792 <_dtoa_r+0x9aa>
 800e750:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e752:	2b00      	cmp	r3, #0
 800e754:	d000      	beq.n	800e758 <_dtoa_r+0x970>
 800e756:	e6b5      	b.n	800e4c4 <_dtoa_r+0x6dc>
 800e758:	0031      	movs	r1, r6
 800e75a:	2205      	movs	r2, #5
 800e75c:	9803      	ldr	r0, [sp, #12]
 800e75e:	f000 f9e9 	bl	800eb34 <__multadd>
 800e762:	0006      	movs	r6, r0
 800e764:	0001      	movs	r1, r0
 800e766:	9805      	ldr	r0, [sp, #20]
 800e768:	f000 fc0a 	bl	800ef80 <__mcmp>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	dc00      	bgt.n	800e772 <_dtoa_r+0x98a>
 800e770:	e6a8      	b.n	800e4c4 <_dtoa_r+0x6dc>
 800e772:	9b08      	ldr	r3, [sp, #32]
 800e774:	9a08      	ldr	r2, [sp, #32]
 800e776:	1c5c      	adds	r4, r3, #1
 800e778:	2331      	movs	r3, #49	@ 0x31
 800e77a:	7013      	strb	r3, [r2, #0]
 800e77c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e77e:	3301      	adds	r3, #1
 800e780:	930c      	str	r3, [sp, #48]	@ 0x30
 800e782:	e6a3      	b.n	800e4cc <_dtoa_r+0x6e4>
 800e784:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800e786:	0037      	movs	r7, r6
 800e788:	e7f3      	b.n	800e772 <_dtoa_r+0x98a>
 800e78a:	9b04      	ldr	r3, [sp, #16]
 800e78c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800e78e:	930c      	str	r3, [sp, #48]	@ 0x30
 800e790:	e7f9      	b.n	800e786 <_dtoa_r+0x99e>
 800e792:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e794:	2b00      	cmp	r3, #0
 800e796:	d100      	bne.n	800e79a <_dtoa_r+0x9b2>
 800e798:	e100      	b.n	800e99c <_dtoa_r+0xbb4>
 800e79a:	2c00      	cmp	r4, #0
 800e79c:	dd05      	ble.n	800e7aa <_dtoa_r+0x9c2>
 800e79e:	0039      	movs	r1, r7
 800e7a0:	0022      	movs	r2, r4
 800e7a2:	9803      	ldr	r0, [sp, #12]
 800e7a4:	f000 fb80 	bl	800eea8 <__lshift>
 800e7a8:	0007      	movs	r7, r0
 800e7aa:	0038      	movs	r0, r7
 800e7ac:	2d00      	cmp	r5, #0
 800e7ae:	d018      	beq.n	800e7e2 <_dtoa_r+0x9fa>
 800e7b0:	6879      	ldr	r1, [r7, #4]
 800e7b2:	9803      	ldr	r0, [sp, #12]
 800e7b4:	f000 f956 	bl	800ea64 <_Balloc>
 800e7b8:	1e04      	subs	r4, r0, #0
 800e7ba:	d105      	bne.n	800e7c8 <_dtoa_r+0x9e0>
 800e7bc:	0022      	movs	r2, r4
 800e7be:	4b2b      	ldr	r3, [pc, #172]	@ (800e86c <_dtoa_r+0xa84>)
 800e7c0:	482b      	ldr	r0, [pc, #172]	@ (800e870 <_dtoa_r+0xa88>)
 800e7c2:	492c      	ldr	r1, [pc, #176]	@ (800e874 <_dtoa_r+0xa8c>)
 800e7c4:	f7ff fb25 	bl	800de12 <_dtoa_r+0x2a>
 800e7c8:	0039      	movs	r1, r7
 800e7ca:	693a      	ldr	r2, [r7, #16]
 800e7cc:	310c      	adds	r1, #12
 800e7ce:	3202      	adds	r2, #2
 800e7d0:	0092      	lsls	r2, r2, #2
 800e7d2:	300c      	adds	r0, #12
 800e7d4:	f000 ff80 	bl	800f6d8 <memcpy>
 800e7d8:	2201      	movs	r2, #1
 800e7da:	0021      	movs	r1, r4
 800e7dc:	9803      	ldr	r0, [sp, #12]
 800e7de:	f000 fb63 	bl	800eea8 <__lshift>
 800e7e2:	9b08      	ldr	r3, [sp, #32]
 800e7e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7e6:	9306      	str	r3, [sp, #24]
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	189b      	adds	r3, r3, r2
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	9704      	str	r7, [sp, #16]
 800e7f0:	0007      	movs	r7, r0
 800e7f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7f6:	4013      	ands	r3, r2
 800e7f8:	930e      	str	r3, [sp, #56]	@ 0x38
 800e7fa:	0031      	movs	r1, r6
 800e7fc:	9805      	ldr	r0, [sp, #20]
 800e7fe:	f7ff fa65 	bl	800dccc <quorem>
 800e802:	9904      	ldr	r1, [sp, #16]
 800e804:	0005      	movs	r5, r0
 800e806:	900a      	str	r0, [sp, #40]	@ 0x28
 800e808:	9805      	ldr	r0, [sp, #20]
 800e80a:	f000 fbb9 	bl	800ef80 <__mcmp>
 800e80e:	003a      	movs	r2, r7
 800e810:	900d      	str	r0, [sp, #52]	@ 0x34
 800e812:	0031      	movs	r1, r6
 800e814:	9803      	ldr	r0, [sp, #12]
 800e816:	f000 fbcf 	bl	800efb8 <__mdiff>
 800e81a:	2201      	movs	r2, #1
 800e81c:	68c3      	ldr	r3, [r0, #12]
 800e81e:	0004      	movs	r4, r0
 800e820:	3530      	adds	r5, #48	@ 0x30
 800e822:	9209      	str	r2, [sp, #36]	@ 0x24
 800e824:	2b00      	cmp	r3, #0
 800e826:	d104      	bne.n	800e832 <_dtoa_r+0xa4a>
 800e828:	0001      	movs	r1, r0
 800e82a:	9805      	ldr	r0, [sp, #20]
 800e82c:	f000 fba8 	bl	800ef80 <__mcmp>
 800e830:	9009      	str	r0, [sp, #36]	@ 0x24
 800e832:	0021      	movs	r1, r4
 800e834:	9803      	ldr	r0, [sp, #12]
 800e836:	f000 f959 	bl	800eaec <_Bfree>
 800e83a:	9b06      	ldr	r3, [sp, #24]
 800e83c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e83e:	1c5c      	adds	r4, r3, #1
 800e840:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e842:	4313      	orrs	r3, r2
 800e844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e846:	4313      	orrs	r3, r2
 800e848:	d116      	bne.n	800e878 <_dtoa_r+0xa90>
 800e84a:	2d39      	cmp	r5, #57	@ 0x39
 800e84c:	d02f      	beq.n	800e8ae <_dtoa_r+0xac6>
 800e84e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e850:	2b00      	cmp	r3, #0
 800e852:	dd01      	ble.n	800e858 <_dtoa_r+0xa70>
 800e854:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e856:	3531      	adds	r5, #49	@ 0x31
 800e858:	9b06      	ldr	r3, [sp, #24]
 800e85a:	701d      	strb	r5, [r3, #0]
 800e85c:	e638      	b.n	800e4d0 <_dtoa_r+0x6e8>
 800e85e:	46c0      	nop			@ (mov r8, r8)
 800e860:	40240000 	.word	0x40240000
 800e864:	00000433 	.word	0x00000433
 800e868:	7ff00000 	.word	0x7ff00000
 800e86c:	0801b508 	.word	0x0801b508
 800e870:	0801b4b0 	.word	0x0801b4b0
 800e874:	000002ef 	.word	0x000002ef
 800e878:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	db04      	blt.n	800e888 <_dtoa_r+0xaa0>
 800e87e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e880:	4313      	orrs	r3, r2
 800e882:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e884:	4313      	orrs	r3, r2
 800e886:	d11e      	bne.n	800e8c6 <_dtoa_r+0xade>
 800e888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	dde4      	ble.n	800e858 <_dtoa_r+0xa70>
 800e88e:	9905      	ldr	r1, [sp, #20]
 800e890:	2201      	movs	r2, #1
 800e892:	9803      	ldr	r0, [sp, #12]
 800e894:	f000 fb08 	bl	800eea8 <__lshift>
 800e898:	0031      	movs	r1, r6
 800e89a:	9005      	str	r0, [sp, #20]
 800e89c:	f000 fb70 	bl	800ef80 <__mcmp>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	dc02      	bgt.n	800e8aa <_dtoa_r+0xac2>
 800e8a4:	d1d8      	bne.n	800e858 <_dtoa_r+0xa70>
 800e8a6:	07eb      	lsls	r3, r5, #31
 800e8a8:	d5d6      	bpl.n	800e858 <_dtoa_r+0xa70>
 800e8aa:	2d39      	cmp	r5, #57	@ 0x39
 800e8ac:	d1d2      	bne.n	800e854 <_dtoa_r+0xa6c>
 800e8ae:	2339      	movs	r3, #57	@ 0x39
 800e8b0:	9a06      	ldr	r2, [sp, #24]
 800e8b2:	7013      	strb	r3, [r2, #0]
 800e8b4:	0023      	movs	r3, r4
 800e8b6:	001c      	movs	r4, r3
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	781a      	ldrb	r2, [r3, #0]
 800e8bc:	2a39      	cmp	r2, #57	@ 0x39
 800e8be:	d04f      	beq.n	800e960 <_dtoa_r+0xb78>
 800e8c0:	3201      	adds	r2, #1
 800e8c2:	701a      	strb	r2, [r3, #0]
 800e8c4:	e604      	b.n	800e4d0 <_dtoa_r+0x6e8>
 800e8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	dd03      	ble.n	800e8d4 <_dtoa_r+0xaec>
 800e8cc:	2d39      	cmp	r5, #57	@ 0x39
 800e8ce:	d0ee      	beq.n	800e8ae <_dtoa_r+0xac6>
 800e8d0:	3501      	adds	r5, #1
 800e8d2:	e7c1      	b.n	800e858 <_dtoa_r+0xa70>
 800e8d4:	9b06      	ldr	r3, [sp, #24]
 800e8d6:	9a06      	ldr	r2, [sp, #24]
 800e8d8:	701d      	strb	r5, [r3, #0]
 800e8da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d02a      	beq.n	800e936 <_dtoa_r+0xb4e>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	220a      	movs	r2, #10
 800e8e4:	9905      	ldr	r1, [sp, #20]
 800e8e6:	9803      	ldr	r0, [sp, #12]
 800e8e8:	f000 f924 	bl	800eb34 <__multadd>
 800e8ec:	9b04      	ldr	r3, [sp, #16]
 800e8ee:	9005      	str	r0, [sp, #20]
 800e8f0:	42bb      	cmp	r3, r7
 800e8f2:	d109      	bne.n	800e908 <_dtoa_r+0xb20>
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	220a      	movs	r2, #10
 800e8f8:	9904      	ldr	r1, [sp, #16]
 800e8fa:	9803      	ldr	r0, [sp, #12]
 800e8fc:	f000 f91a 	bl	800eb34 <__multadd>
 800e900:	9004      	str	r0, [sp, #16]
 800e902:	0007      	movs	r7, r0
 800e904:	9406      	str	r4, [sp, #24]
 800e906:	e778      	b.n	800e7fa <_dtoa_r+0xa12>
 800e908:	9904      	ldr	r1, [sp, #16]
 800e90a:	2300      	movs	r3, #0
 800e90c:	220a      	movs	r2, #10
 800e90e:	9803      	ldr	r0, [sp, #12]
 800e910:	f000 f910 	bl	800eb34 <__multadd>
 800e914:	2300      	movs	r3, #0
 800e916:	9004      	str	r0, [sp, #16]
 800e918:	220a      	movs	r2, #10
 800e91a:	0039      	movs	r1, r7
 800e91c:	9803      	ldr	r0, [sp, #12]
 800e91e:	f000 f909 	bl	800eb34 <__multadd>
 800e922:	e7ee      	b.n	800e902 <_dtoa_r+0xb1a>
 800e924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e926:	2401      	movs	r4, #1
 800e928:	2b00      	cmp	r3, #0
 800e92a:	dd00      	ble.n	800e92e <_dtoa_r+0xb46>
 800e92c:	001c      	movs	r4, r3
 800e92e:	9b08      	ldr	r3, [sp, #32]
 800e930:	191c      	adds	r4, r3, r4
 800e932:	2300      	movs	r3, #0
 800e934:	9304      	str	r3, [sp, #16]
 800e936:	9905      	ldr	r1, [sp, #20]
 800e938:	2201      	movs	r2, #1
 800e93a:	9803      	ldr	r0, [sp, #12]
 800e93c:	f000 fab4 	bl	800eea8 <__lshift>
 800e940:	0031      	movs	r1, r6
 800e942:	9005      	str	r0, [sp, #20]
 800e944:	f000 fb1c 	bl	800ef80 <__mcmp>
 800e948:	2800      	cmp	r0, #0
 800e94a:	dcb3      	bgt.n	800e8b4 <_dtoa_r+0xacc>
 800e94c:	d101      	bne.n	800e952 <_dtoa_r+0xb6a>
 800e94e:	07ed      	lsls	r5, r5, #31
 800e950:	d4b0      	bmi.n	800e8b4 <_dtoa_r+0xacc>
 800e952:	0023      	movs	r3, r4
 800e954:	001c      	movs	r4, r3
 800e956:	3b01      	subs	r3, #1
 800e958:	781a      	ldrb	r2, [r3, #0]
 800e95a:	2a30      	cmp	r2, #48	@ 0x30
 800e95c:	d0fa      	beq.n	800e954 <_dtoa_r+0xb6c>
 800e95e:	e5b7      	b.n	800e4d0 <_dtoa_r+0x6e8>
 800e960:	9a08      	ldr	r2, [sp, #32]
 800e962:	429a      	cmp	r2, r3
 800e964:	d1a7      	bne.n	800e8b6 <_dtoa_r+0xace>
 800e966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e968:	3301      	adds	r3, #1
 800e96a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e96c:	2331      	movs	r3, #49	@ 0x31
 800e96e:	7013      	strb	r3, [r2, #0]
 800e970:	e5ae      	b.n	800e4d0 <_dtoa_r+0x6e8>
 800e972:	4b15      	ldr	r3, [pc, #84]	@ (800e9c8 <_dtoa_r+0xbe0>)
 800e974:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800e976:	9308      	str	r3, [sp, #32]
 800e978:	4b14      	ldr	r3, [pc, #80]	@ (800e9cc <_dtoa_r+0xbe4>)
 800e97a:	2a00      	cmp	r2, #0
 800e97c:	d001      	beq.n	800e982 <_dtoa_r+0xb9a>
 800e97e:	f7ff fa7b 	bl	800de78 <_dtoa_r+0x90>
 800e982:	f7ff fa7b 	bl	800de7c <_dtoa_r+0x94>
 800e986:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800e988:	2b01      	cmp	r3, #1
 800e98a:	dc00      	bgt.n	800e98e <_dtoa_r+0xba6>
 800e98c:	e648      	b.n	800e620 <_dtoa_r+0x838>
 800e98e:	2001      	movs	r0, #1
 800e990:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e992:	e665      	b.n	800e660 <_dtoa_r+0x878>
 800e994:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e996:	2b00      	cmp	r3, #0
 800e998:	dc00      	bgt.n	800e99c <_dtoa_r+0xbb4>
 800e99a:	e6d6      	b.n	800e74a <_dtoa_r+0x962>
 800e99c:	2400      	movs	r4, #0
 800e99e:	0031      	movs	r1, r6
 800e9a0:	9805      	ldr	r0, [sp, #20]
 800e9a2:	f7ff f993 	bl	800dccc <quorem>
 800e9a6:	9b08      	ldr	r3, [sp, #32]
 800e9a8:	3030      	adds	r0, #48	@ 0x30
 800e9aa:	5518      	strb	r0, [r3, r4]
 800e9ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9ae:	3401      	adds	r4, #1
 800e9b0:	0005      	movs	r5, r0
 800e9b2:	429c      	cmp	r4, r3
 800e9b4:	dab6      	bge.n	800e924 <_dtoa_r+0xb3c>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	220a      	movs	r2, #10
 800e9ba:	9905      	ldr	r1, [sp, #20]
 800e9bc:	9803      	ldr	r0, [sp, #12]
 800e9be:	f000 f8b9 	bl	800eb34 <__multadd>
 800e9c2:	9005      	str	r0, [sp, #20]
 800e9c4:	e7eb      	b.n	800e99e <_dtoa_r+0xbb6>
 800e9c6:	46c0      	nop			@ (mov r8, r8)
 800e9c8:	0801b48c 	.word	0x0801b48c
 800e9cc:	0801b494 	.word	0x0801b494

0800e9d0 <_free_r>:
 800e9d0:	b570      	push	{r4, r5, r6, lr}
 800e9d2:	0005      	movs	r5, r0
 800e9d4:	1e0c      	subs	r4, r1, #0
 800e9d6:	d010      	beq.n	800e9fa <_free_r+0x2a>
 800e9d8:	3c04      	subs	r4, #4
 800e9da:	6823      	ldr	r3, [r4, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	da00      	bge.n	800e9e2 <_free_r+0x12>
 800e9e0:	18e4      	adds	r4, r4, r3
 800e9e2:	0028      	movs	r0, r5
 800e9e4:	f7fe fb26 	bl	800d034 <__malloc_lock>
 800e9e8:	4a1d      	ldr	r2, [pc, #116]	@ (800ea60 <_free_r+0x90>)
 800e9ea:	6813      	ldr	r3, [r2, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d105      	bne.n	800e9fc <_free_r+0x2c>
 800e9f0:	6063      	str	r3, [r4, #4]
 800e9f2:	6014      	str	r4, [r2, #0]
 800e9f4:	0028      	movs	r0, r5
 800e9f6:	f7fe fb25 	bl	800d044 <__malloc_unlock>
 800e9fa:	bd70      	pop	{r4, r5, r6, pc}
 800e9fc:	42a3      	cmp	r3, r4
 800e9fe:	d908      	bls.n	800ea12 <_free_r+0x42>
 800ea00:	6820      	ldr	r0, [r4, #0]
 800ea02:	1821      	adds	r1, r4, r0
 800ea04:	428b      	cmp	r3, r1
 800ea06:	d1f3      	bne.n	800e9f0 <_free_r+0x20>
 800ea08:	6819      	ldr	r1, [r3, #0]
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	1809      	adds	r1, r1, r0
 800ea0e:	6021      	str	r1, [r4, #0]
 800ea10:	e7ee      	b.n	800e9f0 <_free_r+0x20>
 800ea12:	001a      	movs	r2, r3
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d001      	beq.n	800ea1e <_free_r+0x4e>
 800ea1a:	42a3      	cmp	r3, r4
 800ea1c:	d9f9      	bls.n	800ea12 <_free_r+0x42>
 800ea1e:	6811      	ldr	r1, [r2, #0]
 800ea20:	1850      	adds	r0, r2, r1
 800ea22:	42a0      	cmp	r0, r4
 800ea24:	d10b      	bne.n	800ea3e <_free_r+0x6e>
 800ea26:	6820      	ldr	r0, [r4, #0]
 800ea28:	1809      	adds	r1, r1, r0
 800ea2a:	1850      	adds	r0, r2, r1
 800ea2c:	6011      	str	r1, [r2, #0]
 800ea2e:	4283      	cmp	r3, r0
 800ea30:	d1e0      	bne.n	800e9f4 <_free_r+0x24>
 800ea32:	6818      	ldr	r0, [r3, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	1841      	adds	r1, r0, r1
 800ea38:	6011      	str	r1, [r2, #0]
 800ea3a:	6053      	str	r3, [r2, #4]
 800ea3c:	e7da      	b.n	800e9f4 <_free_r+0x24>
 800ea3e:	42a0      	cmp	r0, r4
 800ea40:	d902      	bls.n	800ea48 <_free_r+0x78>
 800ea42:	230c      	movs	r3, #12
 800ea44:	602b      	str	r3, [r5, #0]
 800ea46:	e7d5      	b.n	800e9f4 <_free_r+0x24>
 800ea48:	6820      	ldr	r0, [r4, #0]
 800ea4a:	1821      	adds	r1, r4, r0
 800ea4c:	428b      	cmp	r3, r1
 800ea4e:	d103      	bne.n	800ea58 <_free_r+0x88>
 800ea50:	6819      	ldr	r1, [r3, #0]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	1809      	adds	r1, r1, r0
 800ea56:	6021      	str	r1, [r4, #0]
 800ea58:	6063      	str	r3, [r4, #4]
 800ea5a:	6054      	str	r4, [r2, #4]
 800ea5c:	e7ca      	b.n	800e9f4 <_free_r+0x24>
 800ea5e:	46c0      	nop			@ (mov r8, r8)
 800ea60:	200005ac 	.word	0x200005ac

0800ea64 <_Balloc>:
 800ea64:	b570      	push	{r4, r5, r6, lr}
 800ea66:	69c5      	ldr	r5, [r0, #28]
 800ea68:	0006      	movs	r6, r0
 800ea6a:	000c      	movs	r4, r1
 800ea6c:	2d00      	cmp	r5, #0
 800ea6e:	d10e      	bne.n	800ea8e <_Balloc+0x2a>
 800ea70:	2010      	movs	r0, #16
 800ea72:	f7fe fa33 	bl	800cedc <malloc>
 800ea76:	1e02      	subs	r2, r0, #0
 800ea78:	61f0      	str	r0, [r6, #28]
 800ea7a:	d104      	bne.n	800ea86 <_Balloc+0x22>
 800ea7c:	216b      	movs	r1, #107	@ 0x6b
 800ea7e:	4b19      	ldr	r3, [pc, #100]	@ (800eae4 <_Balloc+0x80>)
 800ea80:	4819      	ldr	r0, [pc, #100]	@ (800eae8 <_Balloc+0x84>)
 800ea82:	f000 fe33 	bl	800f6ec <__assert_func>
 800ea86:	6045      	str	r5, [r0, #4]
 800ea88:	6085      	str	r5, [r0, #8]
 800ea8a:	6005      	str	r5, [r0, #0]
 800ea8c:	60c5      	str	r5, [r0, #12]
 800ea8e:	69f5      	ldr	r5, [r6, #28]
 800ea90:	68eb      	ldr	r3, [r5, #12]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d013      	beq.n	800eabe <_Balloc+0x5a>
 800ea96:	69f3      	ldr	r3, [r6, #28]
 800ea98:	00a2      	lsls	r2, r4, #2
 800ea9a:	68db      	ldr	r3, [r3, #12]
 800ea9c:	189b      	adds	r3, r3, r2
 800ea9e:	6818      	ldr	r0, [r3, #0]
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d118      	bne.n	800ead6 <_Balloc+0x72>
 800eaa4:	2101      	movs	r1, #1
 800eaa6:	000d      	movs	r5, r1
 800eaa8:	40a5      	lsls	r5, r4
 800eaaa:	1d6a      	adds	r2, r5, #5
 800eaac:	0030      	movs	r0, r6
 800eaae:	0092      	lsls	r2, r2, #2
 800eab0:	f000 fe3a 	bl	800f728 <_calloc_r>
 800eab4:	2800      	cmp	r0, #0
 800eab6:	d00c      	beq.n	800ead2 <_Balloc+0x6e>
 800eab8:	6044      	str	r4, [r0, #4]
 800eaba:	6085      	str	r5, [r0, #8]
 800eabc:	e00d      	b.n	800eada <_Balloc+0x76>
 800eabe:	2221      	movs	r2, #33	@ 0x21
 800eac0:	2104      	movs	r1, #4
 800eac2:	0030      	movs	r0, r6
 800eac4:	f000 fe30 	bl	800f728 <_calloc_r>
 800eac8:	69f3      	ldr	r3, [r6, #28]
 800eaca:	60e8      	str	r0, [r5, #12]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d1e1      	bne.n	800ea96 <_Balloc+0x32>
 800ead2:	2000      	movs	r0, #0
 800ead4:	bd70      	pop	{r4, r5, r6, pc}
 800ead6:	6802      	ldr	r2, [r0, #0]
 800ead8:	601a      	str	r2, [r3, #0]
 800eada:	2300      	movs	r3, #0
 800eadc:	6103      	str	r3, [r0, #16]
 800eade:	60c3      	str	r3, [r0, #12]
 800eae0:	e7f8      	b.n	800ead4 <_Balloc+0x70>
 800eae2:	46c0      	nop			@ (mov r8, r8)
 800eae4:	0801b499 	.word	0x0801b499
 800eae8:	0801b519 	.word	0x0801b519

0800eaec <_Bfree>:
 800eaec:	b570      	push	{r4, r5, r6, lr}
 800eaee:	69c6      	ldr	r6, [r0, #28]
 800eaf0:	0005      	movs	r5, r0
 800eaf2:	000c      	movs	r4, r1
 800eaf4:	2e00      	cmp	r6, #0
 800eaf6:	d10e      	bne.n	800eb16 <_Bfree+0x2a>
 800eaf8:	2010      	movs	r0, #16
 800eafa:	f7fe f9ef 	bl	800cedc <malloc>
 800eafe:	1e02      	subs	r2, r0, #0
 800eb00:	61e8      	str	r0, [r5, #28]
 800eb02:	d104      	bne.n	800eb0e <_Bfree+0x22>
 800eb04:	218f      	movs	r1, #143	@ 0x8f
 800eb06:	4b09      	ldr	r3, [pc, #36]	@ (800eb2c <_Bfree+0x40>)
 800eb08:	4809      	ldr	r0, [pc, #36]	@ (800eb30 <_Bfree+0x44>)
 800eb0a:	f000 fdef 	bl	800f6ec <__assert_func>
 800eb0e:	6046      	str	r6, [r0, #4]
 800eb10:	6086      	str	r6, [r0, #8]
 800eb12:	6006      	str	r6, [r0, #0]
 800eb14:	60c6      	str	r6, [r0, #12]
 800eb16:	2c00      	cmp	r4, #0
 800eb18:	d007      	beq.n	800eb2a <_Bfree+0x3e>
 800eb1a:	69eb      	ldr	r3, [r5, #28]
 800eb1c:	6862      	ldr	r2, [r4, #4]
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	0092      	lsls	r2, r2, #2
 800eb22:	189b      	adds	r3, r3, r2
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	6022      	str	r2, [r4, #0]
 800eb28:	601c      	str	r4, [r3, #0]
 800eb2a:	bd70      	pop	{r4, r5, r6, pc}
 800eb2c:	0801b499 	.word	0x0801b499
 800eb30:	0801b519 	.word	0x0801b519

0800eb34 <__multadd>:
 800eb34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb36:	000f      	movs	r7, r1
 800eb38:	9001      	str	r0, [sp, #4]
 800eb3a:	000c      	movs	r4, r1
 800eb3c:	001e      	movs	r6, r3
 800eb3e:	2000      	movs	r0, #0
 800eb40:	690d      	ldr	r5, [r1, #16]
 800eb42:	3714      	adds	r7, #20
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	3001      	adds	r0, #1
 800eb48:	b299      	uxth	r1, r3
 800eb4a:	4351      	muls	r1, r2
 800eb4c:	0c1b      	lsrs	r3, r3, #16
 800eb4e:	4353      	muls	r3, r2
 800eb50:	1989      	adds	r1, r1, r6
 800eb52:	0c0e      	lsrs	r6, r1, #16
 800eb54:	199b      	adds	r3, r3, r6
 800eb56:	0c1e      	lsrs	r6, r3, #16
 800eb58:	b289      	uxth	r1, r1
 800eb5a:	041b      	lsls	r3, r3, #16
 800eb5c:	185b      	adds	r3, r3, r1
 800eb5e:	c708      	stmia	r7!, {r3}
 800eb60:	4285      	cmp	r5, r0
 800eb62:	dcef      	bgt.n	800eb44 <__multadd+0x10>
 800eb64:	2e00      	cmp	r6, #0
 800eb66:	d022      	beq.n	800ebae <__multadd+0x7a>
 800eb68:	68a3      	ldr	r3, [r4, #8]
 800eb6a:	42ab      	cmp	r3, r5
 800eb6c:	dc19      	bgt.n	800eba2 <__multadd+0x6e>
 800eb6e:	6861      	ldr	r1, [r4, #4]
 800eb70:	9801      	ldr	r0, [sp, #4]
 800eb72:	3101      	adds	r1, #1
 800eb74:	f7ff ff76 	bl	800ea64 <_Balloc>
 800eb78:	1e07      	subs	r7, r0, #0
 800eb7a:	d105      	bne.n	800eb88 <__multadd+0x54>
 800eb7c:	003a      	movs	r2, r7
 800eb7e:	21ba      	movs	r1, #186	@ 0xba
 800eb80:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb4 <__multadd+0x80>)
 800eb82:	480d      	ldr	r0, [pc, #52]	@ (800ebb8 <__multadd+0x84>)
 800eb84:	f000 fdb2 	bl	800f6ec <__assert_func>
 800eb88:	0021      	movs	r1, r4
 800eb8a:	6922      	ldr	r2, [r4, #16]
 800eb8c:	310c      	adds	r1, #12
 800eb8e:	3202      	adds	r2, #2
 800eb90:	0092      	lsls	r2, r2, #2
 800eb92:	300c      	adds	r0, #12
 800eb94:	f000 fda0 	bl	800f6d8 <memcpy>
 800eb98:	0021      	movs	r1, r4
 800eb9a:	9801      	ldr	r0, [sp, #4]
 800eb9c:	f7ff ffa6 	bl	800eaec <_Bfree>
 800eba0:	003c      	movs	r4, r7
 800eba2:	1d2b      	adds	r3, r5, #4
 800eba4:	009b      	lsls	r3, r3, #2
 800eba6:	18e3      	adds	r3, r4, r3
 800eba8:	3501      	adds	r5, #1
 800ebaa:	605e      	str	r6, [r3, #4]
 800ebac:	6125      	str	r5, [r4, #16]
 800ebae:	0020      	movs	r0, r4
 800ebb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ebb2:	46c0      	nop			@ (mov r8, r8)
 800ebb4:	0801b508 	.word	0x0801b508
 800ebb8:	0801b519 	.word	0x0801b519

0800ebbc <__hi0bits>:
 800ebbc:	2280      	movs	r2, #128	@ 0x80
 800ebbe:	0003      	movs	r3, r0
 800ebc0:	0252      	lsls	r2, r2, #9
 800ebc2:	2000      	movs	r0, #0
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d201      	bcs.n	800ebcc <__hi0bits+0x10>
 800ebc8:	041b      	lsls	r3, r3, #16
 800ebca:	3010      	adds	r0, #16
 800ebcc:	2280      	movs	r2, #128	@ 0x80
 800ebce:	0452      	lsls	r2, r2, #17
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d201      	bcs.n	800ebd8 <__hi0bits+0x1c>
 800ebd4:	3008      	adds	r0, #8
 800ebd6:	021b      	lsls	r3, r3, #8
 800ebd8:	2280      	movs	r2, #128	@ 0x80
 800ebda:	0552      	lsls	r2, r2, #21
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d201      	bcs.n	800ebe4 <__hi0bits+0x28>
 800ebe0:	3004      	adds	r0, #4
 800ebe2:	011b      	lsls	r3, r3, #4
 800ebe4:	2280      	movs	r2, #128	@ 0x80
 800ebe6:	05d2      	lsls	r2, r2, #23
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d201      	bcs.n	800ebf0 <__hi0bits+0x34>
 800ebec:	3002      	adds	r0, #2
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	db03      	blt.n	800ebfc <__hi0bits+0x40>
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	4213      	tst	r3, r2
 800ebf8:	d100      	bne.n	800ebfc <__hi0bits+0x40>
 800ebfa:	2020      	movs	r0, #32
 800ebfc:	4770      	bx	lr

0800ebfe <__lo0bits>:
 800ebfe:	6803      	ldr	r3, [r0, #0]
 800ec00:	0001      	movs	r1, r0
 800ec02:	2207      	movs	r2, #7
 800ec04:	0018      	movs	r0, r3
 800ec06:	4010      	ands	r0, r2
 800ec08:	4213      	tst	r3, r2
 800ec0a:	d00d      	beq.n	800ec28 <__lo0bits+0x2a>
 800ec0c:	3a06      	subs	r2, #6
 800ec0e:	2000      	movs	r0, #0
 800ec10:	4213      	tst	r3, r2
 800ec12:	d105      	bne.n	800ec20 <__lo0bits+0x22>
 800ec14:	3002      	adds	r0, #2
 800ec16:	4203      	tst	r3, r0
 800ec18:	d003      	beq.n	800ec22 <__lo0bits+0x24>
 800ec1a:	40d3      	lsrs	r3, r2
 800ec1c:	0010      	movs	r0, r2
 800ec1e:	600b      	str	r3, [r1, #0]
 800ec20:	4770      	bx	lr
 800ec22:	089b      	lsrs	r3, r3, #2
 800ec24:	600b      	str	r3, [r1, #0]
 800ec26:	e7fb      	b.n	800ec20 <__lo0bits+0x22>
 800ec28:	b29a      	uxth	r2, r3
 800ec2a:	2a00      	cmp	r2, #0
 800ec2c:	d101      	bne.n	800ec32 <__lo0bits+0x34>
 800ec2e:	2010      	movs	r0, #16
 800ec30:	0c1b      	lsrs	r3, r3, #16
 800ec32:	b2da      	uxtb	r2, r3
 800ec34:	2a00      	cmp	r2, #0
 800ec36:	d101      	bne.n	800ec3c <__lo0bits+0x3e>
 800ec38:	3008      	adds	r0, #8
 800ec3a:	0a1b      	lsrs	r3, r3, #8
 800ec3c:	071a      	lsls	r2, r3, #28
 800ec3e:	d101      	bne.n	800ec44 <__lo0bits+0x46>
 800ec40:	3004      	adds	r0, #4
 800ec42:	091b      	lsrs	r3, r3, #4
 800ec44:	079a      	lsls	r2, r3, #30
 800ec46:	d101      	bne.n	800ec4c <__lo0bits+0x4e>
 800ec48:	3002      	adds	r0, #2
 800ec4a:	089b      	lsrs	r3, r3, #2
 800ec4c:	07da      	lsls	r2, r3, #31
 800ec4e:	d4e9      	bmi.n	800ec24 <__lo0bits+0x26>
 800ec50:	3001      	adds	r0, #1
 800ec52:	085b      	lsrs	r3, r3, #1
 800ec54:	d1e6      	bne.n	800ec24 <__lo0bits+0x26>
 800ec56:	2020      	movs	r0, #32
 800ec58:	e7e2      	b.n	800ec20 <__lo0bits+0x22>
	...

0800ec5c <__i2b>:
 800ec5c:	b510      	push	{r4, lr}
 800ec5e:	000c      	movs	r4, r1
 800ec60:	2101      	movs	r1, #1
 800ec62:	f7ff feff 	bl	800ea64 <_Balloc>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d107      	bne.n	800ec7a <__i2b+0x1e>
 800ec6a:	2146      	movs	r1, #70	@ 0x46
 800ec6c:	4c05      	ldr	r4, [pc, #20]	@ (800ec84 <__i2b+0x28>)
 800ec6e:	0002      	movs	r2, r0
 800ec70:	4b05      	ldr	r3, [pc, #20]	@ (800ec88 <__i2b+0x2c>)
 800ec72:	0020      	movs	r0, r4
 800ec74:	31ff      	adds	r1, #255	@ 0xff
 800ec76:	f000 fd39 	bl	800f6ec <__assert_func>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	6144      	str	r4, [r0, #20]
 800ec7e:	6103      	str	r3, [r0, #16]
 800ec80:	bd10      	pop	{r4, pc}
 800ec82:	46c0      	nop			@ (mov r8, r8)
 800ec84:	0801b519 	.word	0x0801b519
 800ec88:	0801b508 	.word	0x0801b508

0800ec8c <__multiply>:
 800ec8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec8e:	0014      	movs	r4, r2
 800ec90:	690a      	ldr	r2, [r1, #16]
 800ec92:	6923      	ldr	r3, [r4, #16]
 800ec94:	000d      	movs	r5, r1
 800ec96:	b08b      	sub	sp, #44	@ 0x2c
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	db02      	blt.n	800eca2 <__multiply+0x16>
 800ec9c:	0023      	movs	r3, r4
 800ec9e:	000c      	movs	r4, r1
 800eca0:	001d      	movs	r5, r3
 800eca2:	6927      	ldr	r7, [r4, #16]
 800eca4:	692e      	ldr	r6, [r5, #16]
 800eca6:	6861      	ldr	r1, [r4, #4]
 800eca8:	19bb      	adds	r3, r7, r6
 800ecaa:	9303      	str	r3, [sp, #12]
 800ecac:	68a3      	ldr	r3, [r4, #8]
 800ecae:	19ba      	adds	r2, r7, r6
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	da00      	bge.n	800ecb6 <__multiply+0x2a>
 800ecb4:	3101      	adds	r1, #1
 800ecb6:	f7ff fed5 	bl	800ea64 <_Balloc>
 800ecba:	9002      	str	r0, [sp, #8]
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d106      	bne.n	800ecce <__multiply+0x42>
 800ecc0:	21b1      	movs	r1, #177	@ 0xb1
 800ecc2:	4b49      	ldr	r3, [pc, #292]	@ (800ede8 <__multiply+0x15c>)
 800ecc4:	4849      	ldr	r0, [pc, #292]	@ (800edec <__multiply+0x160>)
 800ecc6:	9a02      	ldr	r2, [sp, #8]
 800ecc8:	0049      	lsls	r1, r1, #1
 800ecca:	f000 fd0f 	bl	800f6ec <__assert_func>
 800ecce:	9b02      	ldr	r3, [sp, #8]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	3314      	adds	r3, #20
 800ecd4:	469c      	mov	ip, r3
 800ecd6:	19bb      	adds	r3, r7, r6
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4463      	add	r3, ip
 800ecdc:	9304      	str	r3, [sp, #16]
 800ecde:	4663      	mov	r3, ip
 800ece0:	9904      	ldr	r1, [sp, #16]
 800ece2:	428b      	cmp	r3, r1
 800ece4:	d32a      	bcc.n	800ed3c <__multiply+0xb0>
 800ece6:	0023      	movs	r3, r4
 800ece8:	00bf      	lsls	r7, r7, #2
 800ecea:	3314      	adds	r3, #20
 800ecec:	3514      	adds	r5, #20
 800ecee:	9308      	str	r3, [sp, #32]
 800ecf0:	00b6      	lsls	r6, r6, #2
 800ecf2:	19db      	adds	r3, r3, r7
 800ecf4:	9305      	str	r3, [sp, #20]
 800ecf6:	19ab      	adds	r3, r5, r6
 800ecf8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecfa:	2304      	movs	r3, #4
 800ecfc:	9306      	str	r3, [sp, #24]
 800ecfe:	0023      	movs	r3, r4
 800ed00:	9a05      	ldr	r2, [sp, #20]
 800ed02:	3315      	adds	r3, #21
 800ed04:	9501      	str	r5, [sp, #4]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d305      	bcc.n	800ed16 <__multiply+0x8a>
 800ed0a:	1b13      	subs	r3, r2, r4
 800ed0c:	3b15      	subs	r3, #21
 800ed0e:	089b      	lsrs	r3, r3, #2
 800ed10:	3301      	adds	r3, #1
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	9306      	str	r3, [sp, #24]
 800ed16:	9b01      	ldr	r3, [sp, #4]
 800ed18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d310      	bcc.n	800ed40 <__multiply+0xb4>
 800ed1e:	9b03      	ldr	r3, [sp, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	dd05      	ble.n	800ed30 <__multiply+0xa4>
 800ed24:	9b04      	ldr	r3, [sp, #16]
 800ed26:	3b04      	subs	r3, #4
 800ed28:	9304      	str	r3, [sp, #16]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d056      	beq.n	800edde <__multiply+0x152>
 800ed30:	9b02      	ldr	r3, [sp, #8]
 800ed32:	9a03      	ldr	r2, [sp, #12]
 800ed34:	0018      	movs	r0, r3
 800ed36:	611a      	str	r2, [r3, #16]
 800ed38:	b00b      	add	sp, #44	@ 0x2c
 800ed3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed3c:	c304      	stmia	r3!, {r2}
 800ed3e:	e7cf      	b.n	800ece0 <__multiply+0x54>
 800ed40:	9b01      	ldr	r3, [sp, #4]
 800ed42:	6818      	ldr	r0, [r3, #0]
 800ed44:	b280      	uxth	r0, r0
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d01e      	beq.n	800ed88 <__multiply+0xfc>
 800ed4a:	4667      	mov	r7, ip
 800ed4c:	2500      	movs	r5, #0
 800ed4e:	9e08      	ldr	r6, [sp, #32]
 800ed50:	ce02      	ldmia	r6!, {r1}
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	9307      	str	r3, [sp, #28]
 800ed56:	b28b      	uxth	r3, r1
 800ed58:	4343      	muls	r3, r0
 800ed5a:	001a      	movs	r2, r3
 800ed5c:	466b      	mov	r3, sp
 800ed5e:	0c09      	lsrs	r1, r1, #16
 800ed60:	8b9b      	ldrh	r3, [r3, #28]
 800ed62:	4341      	muls	r1, r0
 800ed64:	18d3      	adds	r3, r2, r3
 800ed66:	9a07      	ldr	r2, [sp, #28]
 800ed68:	195b      	adds	r3, r3, r5
 800ed6a:	0c12      	lsrs	r2, r2, #16
 800ed6c:	1889      	adds	r1, r1, r2
 800ed6e:	0c1a      	lsrs	r2, r3, #16
 800ed70:	188a      	adds	r2, r1, r2
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	0c15      	lsrs	r5, r2, #16
 800ed76:	0412      	lsls	r2, r2, #16
 800ed78:	431a      	orrs	r2, r3
 800ed7a:	9b05      	ldr	r3, [sp, #20]
 800ed7c:	c704      	stmia	r7!, {r2}
 800ed7e:	42b3      	cmp	r3, r6
 800ed80:	d8e6      	bhi.n	800ed50 <__multiply+0xc4>
 800ed82:	4663      	mov	r3, ip
 800ed84:	9a06      	ldr	r2, [sp, #24]
 800ed86:	509d      	str	r5, [r3, r2]
 800ed88:	9b01      	ldr	r3, [sp, #4]
 800ed8a:	6818      	ldr	r0, [r3, #0]
 800ed8c:	0c00      	lsrs	r0, r0, #16
 800ed8e:	d020      	beq.n	800edd2 <__multiply+0x146>
 800ed90:	4663      	mov	r3, ip
 800ed92:	0025      	movs	r5, r4
 800ed94:	4661      	mov	r1, ip
 800ed96:	2700      	movs	r7, #0
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	3514      	adds	r5, #20
 800ed9c:	682a      	ldr	r2, [r5, #0]
 800ed9e:	680e      	ldr	r6, [r1, #0]
 800eda0:	b292      	uxth	r2, r2
 800eda2:	4342      	muls	r2, r0
 800eda4:	0c36      	lsrs	r6, r6, #16
 800eda6:	1992      	adds	r2, r2, r6
 800eda8:	19d2      	adds	r2, r2, r7
 800edaa:	0416      	lsls	r6, r2, #16
 800edac:	b29b      	uxth	r3, r3
 800edae:	431e      	orrs	r6, r3
 800edb0:	600e      	str	r6, [r1, #0]
 800edb2:	cd40      	ldmia	r5!, {r6}
 800edb4:	684b      	ldr	r3, [r1, #4]
 800edb6:	0c36      	lsrs	r6, r6, #16
 800edb8:	4346      	muls	r6, r0
 800edba:	b29b      	uxth	r3, r3
 800edbc:	0c12      	lsrs	r2, r2, #16
 800edbe:	18f3      	adds	r3, r6, r3
 800edc0:	189b      	adds	r3, r3, r2
 800edc2:	9a05      	ldr	r2, [sp, #20]
 800edc4:	0c1f      	lsrs	r7, r3, #16
 800edc6:	3104      	adds	r1, #4
 800edc8:	42aa      	cmp	r2, r5
 800edca:	d8e7      	bhi.n	800ed9c <__multiply+0x110>
 800edcc:	4662      	mov	r2, ip
 800edce:	9906      	ldr	r1, [sp, #24]
 800edd0:	5053      	str	r3, [r2, r1]
 800edd2:	9b01      	ldr	r3, [sp, #4]
 800edd4:	3304      	adds	r3, #4
 800edd6:	9301      	str	r3, [sp, #4]
 800edd8:	2304      	movs	r3, #4
 800edda:	449c      	add	ip, r3
 800eddc:	e79b      	b.n	800ed16 <__multiply+0x8a>
 800edde:	9b03      	ldr	r3, [sp, #12]
 800ede0:	3b01      	subs	r3, #1
 800ede2:	9303      	str	r3, [sp, #12]
 800ede4:	e79b      	b.n	800ed1e <__multiply+0x92>
 800ede6:	46c0      	nop			@ (mov r8, r8)
 800ede8:	0801b508 	.word	0x0801b508
 800edec:	0801b519 	.word	0x0801b519

0800edf0 <__pow5mult>:
 800edf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edf2:	2303      	movs	r3, #3
 800edf4:	0015      	movs	r5, r2
 800edf6:	0007      	movs	r7, r0
 800edf8:	000e      	movs	r6, r1
 800edfa:	401a      	ands	r2, r3
 800edfc:	421d      	tst	r5, r3
 800edfe:	d008      	beq.n	800ee12 <__pow5mult+0x22>
 800ee00:	4925      	ldr	r1, [pc, #148]	@ (800ee98 <__pow5mult+0xa8>)
 800ee02:	3a01      	subs	r2, #1
 800ee04:	0092      	lsls	r2, r2, #2
 800ee06:	5852      	ldr	r2, [r2, r1]
 800ee08:	2300      	movs	r3, #0
 800ee0a:	0031      	movs	r1, r6
 800ee0c:	f7ff fe92 	bl	800eb34 <__multadd>
 800ee10:	0006      	movs	r6, r0
 800ee12:	10ad      	asrs	r5, r5, #2
 800ee14:	d03d      	beq.n	800ee92 <__pow5mult+0xa2>
 800ee16:	69fc      	ldr	r4, [r7, #28]
 800ee18:	2c00      	cmp	r4, #0
 800ee1a:	d10f      	bne.n	800ee3c <__pow5mult+0x4c>
 800ee1c:	2010      	movs	r0, #16
 800ee1e:	f7fe f85d 	bl	800cedc <malloc>
 800ee22:	1e02      	subs	r2, r0, #0
 800ee24:	61f8      	str	r0, [r7, #28]
 800ee26:	d105      	bne.n	800ee34 <__pow5mult+0x44>
 800ee28:	21b4      	movs	r1, #180	@ 0xb4
 800ee2a:	4b1c      	ldr	r3, [pc, #112]	@ (800ee9c <__pow5mult+0xac>)
 800ee2c:	481c      	ldr	r0, [pc, #112]	@ (800eea0 <__pow5mult+0xb0>)
 800ee2e:	31ff      	adds	r1, #255	@ 0xff
 800ee30:	f000 fc5c 	bl	800f6ec <__assert_func>
 800ee34:	6044      	str	r4, [r0, #4]
 800ee36:	6084      	str	r4, [r0, #8]
 800ee38:	6004      	str	r4, [r0, #0]
 800ee3a:	60c4      	str	r4, [r0, #12]
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	689c      	ldr	r4, [r3, #8]
 800ee40:	9301      	str	r3, [sp, #4]
 800ee42:	2c00      	cmp	r4, #0
 800ee44:	d108      	bne.n	800ee58 <__pow5mult+0x68>
 800ee46:	0038      	movs	r0, r7
 800ee48:	4916      	ldr	r1, [pc, #88]	@ (800eea4 <__pow5mult+0xb4>)
 800ee4a:	f7ff ff07 	bl	800ec5c <__i2b>
 800ee4e:	9b01      	ldr	r3, [sp, #4]
 800ee50:	0004      	movs	r4, r0
 800ee52:	6098      	str	r0, [r3, #8]
 800ee54:	2300      	movs	r3, #0
 800ee56:	6003      	str	r3, [r0, #0]
 800ee58:	2301      	movs	r3, #1
 800ee5a:	421d      	tst	r5, r3
 800ee5c:	d00a      	beq.n	800ee74 <__pow5mult+0x84>
 800ee5e:	0031      	movs	r1, r6
 800ee60:	0022      	movs	r2, r4
 800ee62:	0038      	movs	r0, r7
 800ee64:	f7ff ff12 	bl	800ec8c <__multiply>
 800ee68:	0031      	movs	r1, r6
 800ee6a:	9001      	str	r0, [sp, #4]
 800ee6c:	0038      	movs	r0, r7
 800ee6e:	f7ff fe3d 	bl	800eaec <_Bfree>
 800ee72:	9e01      	ldr	r6, [sp, #4]
 800ee74:	106d      	asrs	r5, r5, #1
 800ee76:	d00c      	beq.n	800ee92 <__pow5mult+0xa2>
 800ee78:	6820      	ldr	r0, [r4, #0]
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	d107      	bne.n	800ee8e <__pow5mult+0x9e>
 800ee7e:	0022      	movs	r2, r4
 800ee80:	0021      	movs	r1, r4
 800ee82:	0038      	movs	r0, r7
 800ee84:	f7ff ff02 	bl	800ec8c <__multiply>
 800ee88:	2300      	movs	r3, #0
 800ee8a:	6020      	str	r0, [r4, #0]
 800ee8c:	6003      	str	r3, [r0, #0]
 800ee8e:	0004      	movs	r4, r0
 800ee90:	e7e2      	b.n	800ee58 <__pow5mult+0x68>
 800ee92:	0030      	movs	r0, r6
 800ee94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee96:	46c0      	nop			@ (mov r8, r8)
 800ee98:	0801b574 	.word	0x0801b574
 800ee9c:	0801b499 	.word	0x0801b499
 800eea0:	0801b519 	.word	0x0801b519
 800eea4:	00000271 	.word	0x00000271

0800eea8 <__lshift>:
 800eea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeaa:	000c      	movs	r4, r1
 800eeac:	0016      	movs	r6, r2
 800eeae:	6923      	ldr	r3, [r4, #16]
 800eeb0:	1157      	asrs	r7, r2, #5
 800eeb2:	b085      	sub	sp, #20
 800eeb4:	18fb      	adds	r3, r7, r3
 800eeb6:	9301      	str	r3, [sp, #4]
 800eeb8:	3301      	adds	r3, #1
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	6849      	ldr	r1, [r1, #4]
 800eebe:	68a3      	ldr	r3, [r4, #8]
 800eec0:	9002      	str	r0, [sp, #8]
 800eec2:	9a00      	ldr	r2, [sp, #0]
 800eec4:	4293      	cmp	r3, r2
 800eec6:	db10      	blt.n	800eeea <__lshift+0x42>
 800eec8:	9802      	ldr	r0, [sp, #8]
 800eeca:	f7ff fdcb 	bl	800ea64 <_Balloc>
 800eece:	2300      	movs	r3, #0
 800eed0:	0001      	movs	r1, r0
 800eed2:	0005      	movs	r5, r0
 800eed4:	001a      	movs	r2, r3
 800eed6:	3114      	adds	r1, #20
 800eed8:	4298      	cmp	r0, r3
 800eeda:	d10c      	bne.n	800eef6 <__lshift+0x4e>
 800eedc:	21ef      	movs	r1, #239	@ 0xef
 800eede:	002a      	movs	r2, r5
 800eee0:	4b25      	ldr	r3, [pc, #148]	@ (800ef78 <__lshift+0xd0>)
 800eee2:	4826      	ldr	r0, [pc, #152]	@ (800ef7c <__lshift+0xd4>)
 800eee4:	0049      	lsls	r1, r1, #1
 800eee6:	f000 fc01 	bl	800f6ec <__assert_func>
 800eeea:	3101      	adds	r1, #1
 800eeec:	005b      	lsls	r3, r3, #1
 800eeee:	e7e8      	b.n	800eec2 <__lshift+0x1a>
 800eef0:	0098      	lsls	r0, r3, #2
 800eef2:	500a      	str	r2, [r1, r0]
 800eef4:	3301      	adds	r3, #1
 800eef6:	42bb      	cmp	r3, r7
 800eef8:	dbfa      	blt.n	800eef0 <__lshift+0x48>
 800eefa:	43fb      	mvns	r3, r7
 800eefc:	17db      	asrs	r3, r3, #31
 800eefe:	401f      	ands	r7, r3
 800ef00:	00bf      	lsls	r7, r7, #2
 800ef02:	0023      	movs	r3, r4
 800ef04:	201f      	movs	r0, #31
 800ef06:	19c9      	adds	r1, r1, r7
 800ef08:	0037      	movs	r7, r6
 800ef0a:	6922      	ldr	r2, [r4, #16]
 800ef0c:	3314      	adds	r3, #20
 800ef0e:	0092      	lsls	r2, r2, #2
 800ef10:	189a      	adds	r2, r3, r2
 800ef12:	4007      	ands	r7, r0
 800ef14:	4206      	tst	r6, r0
 800ef16:	d029      	beq.n	800ef6c <__lshift+0xc4>
 800ef18:	3001      	adds	r0, #1
 800ef1a:	1bc0      	subs	r0, r0, r7
 800ef1c:	9003      	str	r0, [sp, #12]
 800ef1e:	468c      	mov	ip, r1
 800ef20:	2000      	movs	r0, #0
 800ef22:	681e      	ldr	r6, [r3, #0]
 800ef24:	40be      	lsls	r6, r7
 800ef26:	4306      	orrs	r6, r0
 800ef28:	4660      	mov	r0, ip
 800ef2a:	c040      	stmia	r0!, {r6}
 800ef2c:	4684      	mov	ip, r0
 800ef2e:	9e03      	ldr	r6, [sp, #12]
 800ef30:	cb01      	ldmia	r3!, {r0}
 800ef32:	40f0      	lsrs	r0, r6
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d8f4      	bhi.n	800ef22 <__lshift+0x7a>
 800ef38:	0026      	movs	r6, r4
 800ef3a:	3615      	adds	r6, #21
 800ef3c:	2304      	movs	r3, #4
 800ef3e:	42b2      	cmp	r2, r6
 800ef40:	d304      	bcc.n	800ef4c <__lshift+0xa4>
 800ef42:	1b13      	subs	r3, r2, r4
 800ef44:	3b15      	subs	r3, #21
 800ef46:	089b      	lsrs	r3, r3, #2
 800ef48:	3301      	adds	r3, #1
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	50c8      	str	r0, [r1, r3]
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d002      	beq.n	800ef58 <__lshift+0xb0>
 800ef52:	9b01      	ldr	r3, [sp, #4]
 800ef54:	3302      	adds	r3, #2
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	9b00      	ldr	r3, [sp, #0]
 800ef5a:	9802      	ldr	r0, [sp, #8]
 800ef5c:	3b01      	subs	r3, #1
 800ef5e:	0021      	movs	r1, r4
 800ef60:	612b      	str	r3, [r5, #16]
 800ef62:	f7ff fdc3 	bl	800eaec <_Bfree>
 800ef66:	0028      	movs	r0, r5
 800ef68:	b005      	add	sp, #20
 800ef6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef6c:	cb01      	ldmia	r3!, {r0}
 800ef6e:	c101      	stmia	r1!, {r0}
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d8fb      	bhi.n	800ef6c <__lshift+0xc4>
 800ef74:	e7f0      	b.n	800ef58 <__lshift+0xb0>
 800ef76:	46c0      	nop			@ (mov r8, r8)
 800ef78:	0801b508 	.word	0x0801b508
 800ef7c:	0801b519 	.word	0x0801b519

0800ef80 <__mcmp>:
 800ef80:	b530      	push	{r4, r5, lr}
 800ef82:	690b      	ldr	r3, [r1, #16]
 800ef84:	6904      	ldr	r4, [r0, #16]
 800ef86:	0002      	movs	r2, r0
 800ef88:	1ae0      	subs	r0, r4, r3
 800ef8a:	429c      	cmp	r4, r3
 800ef8c:	d10f      	bne.n	800efae <__mcmp+0x2e>
 800ef8e:	3214      	adds	r2, #20
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	3114      	adds	r1, #20
 800ef94:	0014      	movs	r4, r2
 800ef96:	18c9      	adds	r1, r1, r3
 800ef98:	18d2      	adds	r2, r2, r3
 800ef9a:	3a04      	subs	r2, #4
 800ef9c:	3904      	subs	r1, #4
 800ef9e:	6815      	ldr	r5, [r2, #0]
 800efa0:	680b      	ldr	r3, [r1, #0]
 800efa2:	429d      	cmp	r5, r3
 800efa4:	d004      	beq.n	800efb0 <__mcmp+0x30>
 800efa6:	2001      	movs	r0, #1
 800efa8:	429d      	cmp	r5, r3
 800efaa:	d200      	bcs.n	800efae <__mcmp+0x2e>
 800efac:	3802      	subs	r0, #2
 800efae:	bd30      	pop	{r4, r5, pc}
 800efb0:	4294      	cmp	r4, r2
 800efb2:	d3f2      	bcc.n	800ef9a <__mcmp+0x1a>
 800efb4:	e7fb      	b.n	800efae <__mcmp+0x2e>
	...

0800efb8 <__mdiff>:
 800efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efba:	000c      	movs	r4, r1
 800efbc:	b087      	sub	sp, #28
 800efbe:	9000      	str	r0, [sp, #0]
 800efc0:	0011      	movs	r1, r2
 800efc2:	0020      	movs	r0, r4
 800efc4:	0017      	movs	r7, r2
 800efc6:	f7ff ffdb 	bl	800ef80 <__mcmp>
 800efca:	1e05      	subs	r5, r0, #0
 800efcc:	d110      	bne.n	800eff0 <__mdiff+0x38>
 800efce:	0001      	movs	r1, r0
 800efd0:	9800      	ldr	r0, [sp, #0]
 800efd2:	f7ff fd47 	bl	800ea64 <_Balloc>
 800efd6:	1e02      	subs	r2, r0, #0
 800efd8:	d104      	bne.n	800efe4 <__mdiff+0x2c>
 800efda:	4b40      	ldr	r3, [pc, #256]	@ (800f0dc <__mdiff+0x124>)
 800efdc:	4840      	ldr	r0, [pc, #256]	@ (800f0e0 <__mdiff+0x128>)
 800efde:	4941      	ldr	r1, [pc, #260]	@ (800f0e4 <__mdiff+0x12c>)
 800efe0:	f000 fb84 	bl	800f6ec <__assert_func>
 800efe4:	2301      	movs	r3, #1
 800efe6:	6145      	str	r5, [r0, #20]
 800efe8:	6103      	str	r3, [r0, #16]
 800efea:	0010      	movs	r0, r2
 800efec:	b007      	add	sp, #28
 800efee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eff0:	2600      	movs	r6, #0
 800eff2:	42b0      	cmp	r0, r6
 800eff4:	da03      	bge.n	800effe <__mdiff+0x46>
 800eff6:	0023      	movs	r3, r4
 800eff8:	003c      	movs	r4, r7
 800effa:	001f      	movs	r7, r3
 800effc:	3601      	adds	r6, #1
 800effe:	6861      	ldr	r1, [r4, #4]
 800f000:	9800      	ldr	r0, [sp, #0]
 800f002:	f7ff fd2f 	bl	800ea64 <_Balloc>
 800f006:	1e02      	subs	r2, r0, #0
 800f008:	d103      	bne.n	800f012 <__mdiff+0x5a>
 800f00a:	4b34      	ldr	r3, [pc, #208]	@ (800f0dc <__mdiff+0x124>)
 800f00c:	4834      	ldr	r0, [pc, #208]	@ (800f0e0 <__mdiff+0x128>)
 800f00e:	4936      	ldr	r1, [pc, #216]	@ (800f0e8 <__mdiff+0x130>)
 800f010:	e7e6      	b.n	800efe0 <__mdiff+0x28>
 800f012:	6923      	ldr	r3, [r4, #16]
 800f014:	3414      	adds	r4, #20
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	18e3      	adds	r3, r4, r3
 800f01c:	0021      	movs	r1, r4
 800f01e:	9401      	str	r4, [sp, #4]
 800f020:	003c      	movs	r4, r7
 800f022:	9302      	str	r3, [sp, #8]
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	3414      	adds	r4, #20
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	18e3      	adds	r3, r4, r3
 800f02c:	9303      	str	r3, [sp, #12]
 800f02e:	0003      	movs	r3, r0
 800f030:	60c6      	str	r6, [r0, #12]
 800f032:	468c      	mov	ip, r1
 800f034:	2000      	movs	r0, #0
 800f036:	3314      	adds	r3, #20
 800f038:	9304      	str	r3, [sp, #16]
 800f03a:	9305      	str	r3, [sp, #20]
 800f03c:	4663      	mov	r3, ip
 800f03e:	cb20      	ldmia	r3!, {r5}
 800f040:	b2a9      	uxth	r1, r5
 800f042:	000e      	movs	r6, r1
 800f044:	469c      	mov	ip, r3
 800f046:	cc08      	ldmia	r4!, {r3}
 800f048:	0c2d      	lsrs	r5, r5, #16
 800f04a:	b299      	uxth	r1, r3
 800f04c:	1a71      	subs	r1, r6, r1
 800f04e:	1809      	adds	r1, r1, r0
 800f050:	0c1b      	lsrs	r3, r3, #16
 800f052:	1408      	asrs	r0, r1, #16
 800f054:	1aeb      	subs	r3, r5, r3
 800f056:	181b      	adds	r3, r3, r0
 800f058:	1418      	asrs	r0, r3, #16
 800f05a:	b289      	uxth	r1, r1
 800f05c:	041b      	lsls	r3, r3, #16
 800f05e:	4319      	orrs	r1, r3
 800f060:	9b05      	ldr	r3, [sp, #20]
 800f062:	c302      	stmia	r3!, {r1}
 800f064:	9305      	str	r3, [sp, #20]
 800f066:	9b03      	ldr	r3, [sp, #12]
 800f068:	42a3      	cmp	r3, r4
 800f06a:	d8e7      	bhi.n	800f03c <__mdiff+0x84>
 800f06c:	0039      	movs	r1, r7
 800f06e:	9c03      	ldr	r4, [sp, #12]
 800f070:	3115      	adds	r1, #21
 800f072:	2304      	movs	r3, #4
 800f074:	428c      	cmp	r4, r1
 800f076:	d304      	bcc.n	800f082 <__mdiff+0xca>
 800f078:	1be3      	subs	r3, r4, r7
 800f07a:	3b15      	subs	r3, #21
 800f07c:	089b      	lsrs	r3, r3, #2
 800f07e:	3301      	adds	r3, #1
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	9901      	ldr	r1, [sp, #4]
 800f084:	18cd      	adds	r5, r1, r3
 800f086:	9904      	ldr	r1, [sp, #16]
 800f088:	002e      	movs	r6, r5
 800f08a:	18cb      	adds	r3, r1, r3
 800f08c:	001f      	movs	r7, r3
 800f08e:	9902      	ldr	r1, [sp, #8]
 800f090:	428e      	cmp	r6, r1
 800f092:	d311      	bcc.n	800f0b8 <__mdiff+0x100>
 800f094:	9c02      	ldr	r4, [sp, #8]
 800f096:	1ee9      	subs	r1, r5, #3
 800f098:	2000      	movs	r0, #0
 800f09a:	428c      	cmp	r4, r1
 800f09c:	d304      	bcc.n	800f0a8 <__mdiff+0xf0>
 800f09e:	0021      	movs	r1, r4
 800f0a0:	3103      	adds	r1, #3
 800f0a2:	1b49      	subs	r1, r1, r5
 800f0a4:	0889      	lsrs	r1, r1, #2
 800f0a6:	0088      	lsls	r0, r1, #2
 800f0a8:	181b      	adds	r3, r3, r0
 800f0aa:	3b04      	subs	r3, #4
 800f0ac:	6819      	ldr	r1, [r3, #0]
 800f0ae:	2900      	cmp	r1, #0
 800f0b0:	d010      	beq.n	800f0d4 <__mdiff+0x11c>
 800f0b2:	9b00      	ldr	r3, [sp, #0]
 800f0b4:	6113      	str	r3, [r2, #16]
 800f0b6:	e798      	b.n	800efea <__mdiff+0x32>
 800f0b8:	4684      	mov	ip, r0
 800f0ba:	ce02      	ldmia	r6!, {r1}
 800f0bc:	b288      	uxth	r0, r1
 800f0be:	4460      	add	r0, ip
 800f0c0:	1400      	asrs	r0, r0, #16
 800f0c2:	0c0c      	lsrs	r4, r1, #16
 800f0c4:	1904      	adds	r4, r0, r4
 800f0c6:	4461      	add	r1, ip
 800f0c8:	1420      	asrs	r0, r4, #16
 800f0ca:	b289      	uxth	r1, r1
 800f0cc:	0424      	lsls	r4, r4, #16
 800f0ce:	4321      	orrs	r1, r4
 800f0d0:	c702      	stmia	r7!, {r1}
 800f0d2:	e7dc      	b.n	800f08e <__mdiff+0xd6>
 800f0d4:	9900      	ldr	r1, [sp, #0]
 800f0d6:	3901      	subs	r1, #1
 800f0d8:	9100      	str	r1, [sp, #0]
 800f0da:	e7e6      	b.n	800f0aa <__mdiff+0xf2>
 800f0dc:	0801b508 	.word	0x0801b508
 800f0e0:	0801b519 	.word	0x0801b519
 800f0e4:	00000237 	.word	0x00000237
 800f0e8:	00000245 	.word	0x00000245

0800f0ec <__d2b>:
 800f0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0ee:	2101      	movs	r1, #1
 800f0f0:	0016      	movs	r6, r2
 800f0f2:	001f      	movs	r7, r3
 800f0f4:	f7ff fcb6 	bl	800ea64 <_Balloc>
 800f0f8:	1e04      	subs	r4, r0, #0
 800f0fa:	d105      	bne.n	800f108 <__d2b+0x1c>
 800f0fc:	0022      	movs	r2, r4
 800f0fe:	4b25      	ldr	r3, [pc, #148]	@ (800f194 <__d2b+0xa8>)
 800f100:	4825      	ldr	r0, [pc, #148]	@ (800f198 <__d2b+0xac>)
 800f102:	4926      	ldr	r1, [pc, #152]	@ (800f19c <__d2b+0xb0>)
 800f104:	f000 faf2 	bl	800f6ec <__assert_func>
 800f108:	033b      	lsls	r3, r7, #12
 800f10a:	007d      	lsls	r5, r7, #1
 800f10c:	0b1b      	lsrs	r3, r3, #12
 800f10e:	0d6d      	lsrs	r5, r5, #21
 800f110:	d002      	beq.n	800f118 <__d2b+0x2c>
 800f112:	2280      	movs	r2, #128	@ 0x80
 800f114:	0352      	lsls	r2, r2, #13
 800f116:	4313      	orrs	r3, r2
 800f118:	9301      	str	r3, [sp, #4]
 800f11a:	2e00      	cmp	r6, #0
 800f11c:	d025      	beq.n	800f16a <__d2b+0x7e>
 800f11e:	4668      	mov	r0, sp
 800f120:	9600      	str	r6, [sp, #0]
 800f122:	f7ff fd6c 	bl	800ebfe <__lo0bits>
 800f126:	9b01      	ldr	r3, [sp, #4]
 800f128:	9900      	ldr	r1, [sp, #0]
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d01b      	beq.n	800f166 <__d2b+0x7a>
 800f12e:	2220      	movs	r2, #32
 800f130:	001e      	movs	r6, r3
 800f132:	1a12      	subs	r2, r2, r0
 800f134:	4096      	lsls	r6, r2
 800f136:	0032      	movs	r2, r6
 800f138:	40c3      	lsrs	r3, r0
 800f13a:	430a      	orrs	r2, r1
 800f13c:	6162      	str	r2, [r4, #20]
 800f13e:	9301      	str	r3, [sp, #4]
 800f140:	9e01      	ldr	r6, [sp, #4]
 800f142:	61a6      	str	r6, [r4, #24]
 800f144:	1e73      	subs	r3, r6, #1
 800f146:	419e      	sbcs	r6, r3
 800f148:	3601      	adds	r6, #1
 800f14a:	6126      	str	r6, [r4, #16]
 800f14c:	2d00      	cmp	r5, #0
 800f14e:	d014      	beq.n	800f17a <__d2b+0x8e>
 800f150:	2635      	movs	r6, #53	@ 0x35
 800f152:	4b13      	ldr	r3, [pc, #76]	@ (800f1a0 <__d2b+0xb4>)
 800f154:	18ed      	adds	r5, r5, r3
 800f156:	9b08      	ldr	r3, [sp, #32]
 800f158:	182d      	adds	r5, r5, r0
 800f15a:	601d      	str	r5, [r3, #0]
 800f15c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f15e:	1a36      	subs	r6, r6, r0
 800f160:	601e      	str	r6, [r3, #0]
 800f162:	0020      	movs	r0, r4
 800f164:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f166:	6161      	str	r1, [r4, #20]
 800f168:	e7ea      	b.n	800f140 <__d2b+0x54>
 800f16a:	a801      	add	r0, sp, #4
 800f16c:	f7ff fd47 	bl	800ebfe <__lo0bits>
 800f170:	9b01      	ldr	r3, [sp, #4]
 800f172:	2601      	movs	r6, #1
 800f174:	6163      	str	r3, [r4, #20]
 800f176:	3020      	adds	r0, #32
 800f178:	e7e7      	b.n	800f14a <__d2b+0x5e>
 800f17a:	4b0a      	ldr	r3, [pc, #40]	@ (800f1a4 <__d2b+0xb8>)
 800f17c:	18c0      	adds	r0, r0, r3
 800f17e:	9b08      	ldr	r3, [sp, #32]
 800f180:	6018      	str	r0, [r3, #0]
 800f182:	4b09      	ldr	r3, [pc, #36]	@ (800f1a8 <__d2b+0xbc>)
 800f184:	18f3      	adds	r3, r6, r3
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	18e3      	adds	r3, r4, r3
 800f18a:	6958      	ldr	r0, [r3, #20]
 800f18c:	f7ff fd16 	bl	800ebbc <__hi0bits>
 800f190:	0176      	lsls	r6, r6, #5
 800f192:	e7e3      	b.n	800f15c <__d2b+0x70>
 800f194:	0801b508 	.word	0x0801b508
 800f198:	0801b519 	.word	0x0801b519
 800f19c:	0000030f 	.word	0x0000030f
 800f1a0:	fffffbcd 	.word	0xfffffbcd
 800f1a4:	fffffbce 	.word	0xfffffbce
 800f1a8:	3fffffff 	.word	0x3fffffff

0800f1ac <__sfputc_r>:
 800f1ac:	6893      	ldr	r3, [r2, #8]
 800f1ae:	b510      	push	{r4, lr}
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	6093      	str	r3, [r2, #8]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	da04      	bge.n	800f1c2 <__sfputc_r+0x16>
 800f1b8:	6994      	ldr	r4, [r2, #24]
 800f1ba:	42a3      	cmp	r3, r4
 800f1bc:	db07      	blt.n	800f1ce <__sfputc_r+0x22>
 800f1be:	290a      	cmp	r1, #10
 800f1c0:	d005      	beq.n	800f1ce <__sfputc_r+0x22>
 800f1c2:	6813      	ldr	r3, [r2, #0]
 800f1c4:	1c58      	adds	r0, r3, #1
 800f1c6:	6010      	str	r0, [r2, #0]
 800f1c8:	7019      	strb	r1, [r3, #0]
 800f1ca:	0008      	movs	r0, r1
 800f1cc:	bd10      	pop	{r4, pc}
 800f1ce:	f000 f9e2 	bl	800f596 <__swbuf_r>
 800f1d2:	0001      	movs	r1, r0
 800f1d4:	e7f9      	b.n	800f1ca <__sfputc_r+0x1e>

0800f1d6 <__sfputs_r>:
 800f1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d8:	0006      	movs	r6, r0
 800f1da:	000f      	movs	r7, r1
 800f1dc:	0014      	movs	r4, r2
 800f1de:	18d5      	adds	r5, r2, r3
 800f1e0:	42ac      	cmp	r4, r5
 800f1e2:	d101      	bne.n	800f1e8 <__sfputs_r+0x12>
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	e007      	b.n	800f1f8 <__sfputs_r+0x22>
 800f1e8:	7821      	ldrb	r1, [r4, #0]
 800f1ea:	003a      	movs	r2, r7
 800f1ec:	0030      	movs	r0, r6
 800f1ee:	f7ff ffdd 	bl	800f1ac <__sfputc_r>
 800f1f2:	3401      	adds	r4, #1
 800f1f4:	1c43      	adds	r3, r0, #1
 800f1f6:	d1f3      	bne.n	800f1e0 <__sfputs_r+0xa>
 800f1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1fc <_vfiprintf_r>:
 800f1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1fe:	b0a1      	sub	sp, #132	@ 0x84
 800f200:	000f      	movs	r7, r1
 800f202:	0015      	movs	r5, r2
 800f204:	001e      	movs	r6, r3
 800f206:	9003      	str	r0, [sp, #12]
 800f208:	2800      	cmp	r0, #0
 800f20a:	d004      	beq.n	800f216 <_vfiprintf_r+0x1a>
 800f20c:	6a03      	ldr	r3, [r0, #32]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d101      	bne.n	800f216 <_vfiprintf_r+0x1a>
 800f212:	f7fe fc11 	bl	800da38 <__sinit>
 800f216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f218:	07db      	lsls	r3, r3, #31
 800f21a:	d405      	bmi.n	800f228 <_vfiprintf_r+0x2c>
 800f21c:	89bb      	ldrh	r3, [r7, #12]
 800f21e:	059b      	lsls	r3, r3, #22
 800f220:	d402      	bmi.n	800f228 <_vfiprintf_r+0x2c>
 800f222:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f224:	f7fe fd45 	bl	800dcb2 <__retarget_lock_acquire_recursive>
 800f228:	89bb      	ldrh	r3, [r7, #12]
 800f22a:	071b      	lsls	r3, r3, #28
 800f22c:	d502      	bpl.n	800f234 <_vfiprintf_r+0x38>
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d113      	bne.n	800f25c <_vfiprintf_r+0x60>
 800f234:	0039      	movs	r1, r7
 800f236:	9803      	ldr	r0, [sp, #12]
 800f238:	f000 f9f0 	bl	800f61c <__swsetup_r>
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d00d      	beq.n	800f25c <_vfiprintf_r+0x60>
 800f240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f242:	07db      	lsls	r3, r3, #31
 800f244:	d503      	bpl.n	800f24e <_vfiprintf_r+0x52>
 800f246:	2001      	movs	r0, #1
 800f248:	4240      	negs	r0, r0
 800f24a:	b021      	add	sp, #132	@ 0x84
 800f24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f24e:	89bb      	ldrh	r3, [r7, #12]
 800f250:	059b      	lsls	r3, r3, #22
 800f252:	d4f8      	bmi.n	800f246 <_vfiprintf_r+0x4a>
 800f254:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f256:	f7fe fd2d 	bl	800dcb4 <__retarget_lock_release_recursive>
 800f25a:	e7f4      	b.n	800f246 <_vfiprintf_r+0x4a>
 800f25c:	2300      	movs	r3, #0
 800f25e:	ac08      	add	r4, sp, #32
 800f260:	6163      	str	r3, [r4, #20]
 800f262:	3320      	adds	r3, #32
 800f264:	7663      	strb	r3, [r4, #25]
 800f266:	3310      	adds	r3, #16
 800f268:	76a3      	strb	r3, [r4, #26]
 800f26a:	9607      	str	r6, [sp, #28]
 800f26c:	002e      	movs	r6, r5
 800f26e:	7833      	ldrb	r3, [r6, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <_vfiprintf_r+0x7c>
 800f274:	2b25      	cmp	r3, #37	@ 0x25
 800f276:	d148      	bne.n	800f30a <_vfiprintf_r+0x10e>
 800f278:	1b73      	subs	r3, r6, r5
 800f27a:	9305      	str	r3, [sp, #20]
 800f27c:	42ae      	cmp	r6, r5
 800f27e:	d00b      	beq.n	800f298 <_vfiprintf_r+0x9c>
 800f280:	002a      	movs	r2, r5
 800f282:	0039      	movs	r1, r7
 800f284:	9803      	ldr	r0, [sp, #12]
 800f286:	f7ff ffa6 	bl	800f1d6 <__sfputs_r>
 800f28a:	3001      	adds	r0, #1
 800f28c:	d100      	bne.n	800f290 <_vfiprintf_r+0x94>
 800f28e:	e0ae      	b.n	800f3ee <_vfiprintf_r+0x1f2>
 800f290:	6963      	ldr	r3, [r4, #20]
 800f292:	9a05      	ldr	r2, [sp, #20]
 800f294:	189b      	adds	r3, r3, r2
 800f296:	6163      	str	r3, [r4, #20]
 800f298:	7833      	ldrb	r3, [r6, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d100      	bne.n	800f2a0 <_vfiprintf_r+0xa4>
 800f29e:	e0a6      	b.n	800f3ee <_vfiprintf_r+0x1f2>
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	4252      	negs	r2, r2
 800f2a6:	6062      	str	r2, [r4, #4]
 800f2a8:	a904      	add	r1, sp, #16
 800f2aa:	3254      	adds	r2, #84	@ 0x54
 800f2ac:	1852      	adds	r2, r2, r1
 800f2ae:	1c75      	adds	r5, r6, #1
 800f2b0:	6023      	str	r3, [r4, #0]
 800f2b2:	60e3      	str	r3, [r4, #12]
 800f2b4:	60a3      	str	r3, [r4, #8]
 800f2b6:	7013      	strb	r3, [r2, #0]
 800f2b8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800f2ba:	4b59      	ldr	r3, [pc, #356]	@ (800f420 <_vfiprintf_r+0x224>)
 800f2bc:	2205      	movs	r2, #5
 800f2be:	0018      	movs	r0, r3
 800f2c0:	7829      	ldrb	r1, [r5, #0]
 800f2c2:	9305      	str	r3, [sp, #20]
 800f2c4:	f7fe fcf7 	bl	800dcb6 <memchr>
 800f2c8:	1c6e      	adds	r6, r5, #1
 800f2ca:	2800      	cmp	r0, #0
 800f2cc:	d11f      	bne.n	800f30e <_vfiprintf_r+0x112>
 800f2ce:	6822      	ldr	r2, [r4, #0]
 800f2d0:	06d3      	lsls	r3, r2, #27
 800f2d2:	d504      	bpl.n	800f2de <_vfiprintf_r+0xe2>
 800f2d4:	2353      	movs	r3, #83	@ 0x53
 800f2d6:	a904      	add	r1, sp, #16
 800f2d8:	185b      	adds	r3, r3, r1
 800f2da:	2120      	movs	r1, #32
 800f2dc:	7019      	strb	r1, [r3, #0]
 800f2de:	0713      	lsls	r3, r2, #28
 800f2e0:	d504      	bpl.n	800f2ec <_vfiprintf_r+0xf0>
 800f2e2:	2353      	movs	r3, #83	@ 0x53
 800f2e4:	a904      	add	r1, sp, #16
 800f2e6:	185b      	adds	r3, r3, r1
 800f2e8:	212b      	movs	r1, #43	@ 0x2b
 800f2ea:	7019      	strb	r1, [r3, #0]
 800f2ec:	782b      	ldrb	r3, [r5, #0]
 800f2ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2f0:	d016      	beq.n	800f320 <_vfiprintf_r+0x124>
 800f2f2:	002e      	movs	r6, r5
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	200a      	movs	r0, #10
 800f2f8:	68e3      	ldr	r3, [r4, #12]
 800f2fa:	7832      	ldrb	r2, [r6, #0]
 800f2fc:	1c75      	adds	r5, r6, #1
 800f2fe:	3a30      	subs	r2, #48	@ 0x30
 800f300:	2a09      	cmp	r2, #9
 800f302:	d950      	bls.n	800f3a6 <_vfiprintf_r+0x1aa>
 800f304:	2900      	cmp	r1, #0
 800f306:	d111      	bne.n	800f32c <_vfiprintf_r+0x130>
 800f308:	e017      	b.n	800f33a <_vfiprintf_r+0x13e>
 800f30a:	3601      	adds	r6, #1
 800f30c:	e7af      	b.n	800f26e <_vfiprintf_r+0x72>
 800f30e:	9b05      	ldr	r3, [sp, #20]
 800f310:	6822      	ldr	r2, [r4, #0]
 800f312:	1ac0      	subs	r0, r0, r3
 800f314:	2301      	movs	r3, #1
 800f316:	4083      	lsls	r3, r0
 800f318:	4313      	orrs	r3, r2
 800f31a:	0035      	movs	r5, r6
 800f31c:	6023      	str	r3, [r4, #0]
 800f31e:	e7cc      	b.n	800f2ba <_vfiprintf_r+0xbe>
 800f320:	9b07      	ldr	r3, [sp, #28]
 800f322:	1d19      	adds	r1, r3, #4
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	9107      	str	r1, [sp, #28]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	db01      	blt.n	800f330 <_vfiprintf_r+0x134>
 800f32c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f32e:	e004      	b.n	800f33a <_vfiprintf_r+0x13e>
 800f330:	425b      	negs	r3, r3
 800f332:	60e3      	str	r3, [r4, #12]
 800f334:	2302      	movs	r3, #2
 800f336:	4313      	orrs	r3, r2
 800f338:	6023      	str	r3, [r4, #0]
 800f33a:	7833      	ldrb	r3, [r6, #0]
 800f33c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f33e:	d10c      	bne.n	800f35a <_vfiprintf_r+0x15e>
 800f340:	7873      	ldrb	r3, [r6, #1]
 800f342:	2b2a      	cmp	r3, #42	@ 0x2a
 800f344:	d134      	bne.n	800f3b0 <_vfiprintf_r+0x1b4>
 800f346:	9b07      	ldr	r3, [sp, #28]
 800f348:	3602      	adds	r6, #2
 800f34a:	1d1a      	adds	r2, r3, #4
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	9207      	str	r2, [sp, #28]
 800f350:	2b00      	cmp	r3, #0
 800f352:	da01      	bge.n	800f358 <_vfiprintf_r+0x15c>
 800f354:	2301      	movs	r3, #1
 800f356:	425b      	negs	r3, r3
 800f358:	9309      	str	r3, [sp, #36]	@ 0x24
 800f35a:	4d32      	ldr	r5, [pc, #200]	@ (800f424 <_vfiprintf_r+0x228>)
 800f35c:	2203      	movs	r2, #3
 800f35e:	0028      	movs	r0, r5
 800f360:	7831      	ldrb	r1, [r6, #0]
 800f362:	f7fe fca8 	bl	800dcb6 <memchr>
 800f366:	2800      	cmp	r0, #0
 800f368:	d006      	beq.n	800f378 <_vfiprintf_r+0x17c>
 800f36a:	2340      	movs	r3, #64	@ 0x40
 800f36c:	1b40      	subs	r0, r0, r5
 800f36e:	4083      	lsls	r3, r0
 800f370:	6822      	ldr	r2, [r4, #0]
 800f372:	3601      	adds	r6, #1
 800f374:	4313      	orrs	r3, r2
 800f376:	6023      	str	r3, [r4, #0]
 800f378:	7831      	ldrb	r1, [r6, #0]
 800f37a:	2206      	movs	r2, #6
 800f37c:	482a      	ldr	r0, [pc, #168]	@ (800f428 <_vfiprintf_r+0x22c>)
 800f37e:	1c75      	adds	r5, r6, #1
 800f380:	7621      	strb	r1, [r4, #24]
 800f382:	f7fe fc98 	bl	800dcb6 <memchr>
 800f386:	2800      	cmp	r0, #0
 800f388:	d040      	beq.n	800f40c <_vfiprintf_r+0x210>
 800f38a:	4b28      	ldr	r3, [pc, #160]	@ (800f42c <_vfiprintf_r+0x230>)
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d122      	bne.n	800f3d6 <_vfiprintf_r+0x1da>
 800f390:	2207      	movs	r2, #7
 800f392:	9b07      	ldr	r3, [sp, #28]
 800f394:	3307      	adds	r3, #7
 800f396:	4393      	bics	r3, r2
 800f398:	3308      	adds	r3, #8
 800f39a:	9307      	str	r3, [sp, #28]
 800f39c:	6963      	ldr	r3, [r4, #20]
 800f39e:	9a04      	ldr	r2, [sp, #16]
 800f3a0:	189b      	adds	r3, r3, r2
 800f3a2:	6163      	str	r3, [r4, #20]
 800f3a4:	e762      	b.n	800f26c <_vfiprintf_r+0x70>
 800f3a6:	4343      	muls	r3, r0
 800f3a8:	002e      	movs	r6, r5
 800f3aa:	2101      	movs	r1, #1
 800f3ac:	189b      	adds	r3, r3, r2
 800f3ae:	e7a4      	b.n	800f2fa <_vfiprintf_r+0xfe>
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	200a      	movs	r0, #10
 800f3b4:	0019      	movs	r1, r3
 800f3b6:	3601      	adds	r6, #1
 800f3b8:	6063      	str	r3, [r4, #4]
 800f3ba:	7832      	ldrb	r2, [r6, #0]
 800f3bc:	1c75      	adds	r5, r6, #1
 800f3be:	3a30      	subs	r2, #48	@ 0x30
 800f3c0:	2a09      	cmp	r2, #9
 800f3c2:	d903      	bls.n	800f3cc <_vfiprintf_r+0x1d0>
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d0c8      	beq.n	800f35a <_vfiprintf_r+0x15e>
 800f3c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800f3ca:	e7c6      	b.n	800f35a <_vfiprintf_r+0x15e>
 800f3cc:	4341      	muls	r1, r0
 800f3ce:	002e      	movs	r6, r5
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	1889      	adds	r1, r1, r2
 800f3d4:	e7f1      	b.n	800f3ba <_vfiprintf_r+0x1be>
 800f3d6:	aa07      	add	r2, sp, #28
 800f3d8:	9200      	str	r2, [sp, #0]
 800f3da:	0021      	movs	r1, r4
 800f3dc:	003a      	movs	r2, r7
 800f3de:	4b14      	ldr	r3, [pc, #80]	@ (800f430 <_vfiprintf_r+0x234>)
 800f3e0:	9803      	ldr	r0, [sp, #12]
 800f3e2:	f7fd fedd 	bl	800d1a0 <_printf_float>
 800f3e6:	9004      	str	r0, [sp, #16]
 800f3e8:	9b04      	ldr	r3, [sp, #16]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	d1d6      	bne.n	800f39c <_vfiprintf_r+0x1a0>
 800f3ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3f0:	07db      	lsls	r3, r3, #31
 800f3f2:	d405      	bmi.n	800f400 <_vfiprintf_r+0x204>
 800f3f4:	89bb      	ldrh	r3, [r7, #12]
 800f3f6:	059b      	lsls	r3, r3, #22
 800f3f8:	d402      	bmi.n	800f400 <_vfiprintf_r+0x204>
 800f3fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f3fc:	f7fe fc5a 	bl	800dcb4 <__retarget_lock_release_recursive>
 800f400:	89bb      	ldrh	r3, [r7, #12]
 800f402:	065b      	lsls	r3, r3, #25
 800f404:	d500      	bpl.n	800f408 <_vfiprintf_r+0x20c>
 800f406:	e71e      	b.n	800f246 <_vfiprintf_r+0x4a>
 800f408:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800f40a:	e71e      	b.n	800f24a <_vfiprintf_r+0x4e>
 800f40c:	aa07      	add	r2, sp, #28
 800f40e:	9200      	str	r2, [sp, #0]
 800f410:	0021      	movs	r1, r4
 800f412:	003a      	movs	r2, r7
 800f414:	4b06      	ldr	r3, [pc, #24]	@ (800f430 <_vfiprintf_r+0x234>)
 800f416:	9803      	ldr	r0, [sp, #12]
 800f418:	f7fe f970 	bl	800d6fc <_printf_i>
 800f41c:	e7e3      	b.n	800f3e6 <_vfiprintf_r+0x1ea>
 800f41e:	46c0      	nop			@ (mov r8, r8)
 800f420:	0801b670 	.word	0x0801b670
 800f424:	0801b676 	.word	0x0801b676
 800f428:	0801b67a 	.word	0x0801b67a
 800f42c:	0800d1a1 	.word	0x0800d1a1
 800f430:	0800f1d7 	.word	0x0800f1d7

0800f434 <__sflush_r>:
 800f434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f436:	220c      	movs	r2, #12
 800f438:	5e8b      	ldrsh	r3, [r1, r2]
 800f43a:	0005      	movs	r5, r0
 800f43c:	000c      	movs	r4, r1
 800f43e:	071a      	lsls	r2, r3, #28
 800f440:	d456      	bmi.n	800f4f0 <__sflush_r+0xbc>
 800f442:	684a      	ldr	r2, [r1, #4]
 800f444:	2a00      	cmp	r2, #0
 800f446:	dc02      	bgt.n	800f44e <__sflush_r+0x1a>
 800f448:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800f44a:	2a00      	cmp	r2, #0
 800f44c:	dd4e      	ble.n	800f4ec <__sflush_r+0xb8>
 800f44e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f450:	2f00      	cmp	r7, #0
 800f452:	d04b      	beq.n	800f4ec <__sflush_r+0xb8>
 800f454:	2200      	movs	r2, #0
 800f456:	2080      	movs	r0, #128	@ 0x80
 800f458:	682e      	ldr	r6, [r5, #0]
 800f45a:	602a      	str	r2, [r5, #0]
 800f45c:	001a      	movs	r2, r3
 800f45e:	0140      	lsls	r0, r0, #5
 800f460:	6a21      	ldr	r1, [r4, #32]
 800f462:	4002      	ands	r2, r0
 800f464:	4203      	tst	r3, r0
 800f466:	d033      	beq.n	800f4d0 <__sflush_r+0x9c>
 800f468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f46a:	89a3      	ldrh	r3, [r4, #12]
 800f46c:	075b      	lsls	r3, r3, #29
 800f46e:	d506      	bpl.n	800f47e <__sflush_r+0x4a>
 800f470:	6863      	ldr	r3, [r4, #4]
 800f472:	1ad2      	subs	r2, r2, r3
 800f474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <__sflush_r+0x4a>
 800f47a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f47c:	1ad2      	subs	r2, r2, r3
 800f47e:	2300      	movs	r3, #0
 800f480:	0028      	movs	r0, r5
 800f482:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800f484:	6a21      	ldr	r1, [r4, #32]
 800f486:	47b8      	blx	r7
 800f488:	89a2      	ldrh	r2, [r4, #12]
 800f48a:	1c43      	adds	r3, r0, #1
 800f48c:	d106      	bne.n	800f49c <__sflush_r+0x68>
 800f48e:	6829      	ldr	r1, [r5, #0]
 800f490:	291d      	cmp	r1, #29
 800f492:	d846      	bhi.n	800f522 <__sflush_r+0xee>
 800f494:	4b29      	ldr	r3, [pc, #164]	@ (800f53c <__sflush_r+0x108>)
 800f496:	410b      	asrs	r3, r1
 800f498:	07db      	lsls	r3, r3, #31
 800f49a:	d442      	bmi.n	800f522 <__sflush_r+0xee>
 800f49c:	2300      	movs	r3, #0
 800f49e:	6063      	str	r3, [r4, #4]
 800f4a0:	6923      	ldr	r3, [r4, #16]
 800f4a2:	6023      	str	r3, [r4, #0]
 800f4a4:	04d2      	lsls	r2, r2, #19
 800f4a6:	d505      	bpl.n	800f4b4 <__sflush_r+0x80>
 800f4a8:	1c43      	adds	r3, r0, #1
 800f4aa:	d102      	bne.n	800f4b2 <__sflush_r+0x7e>
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d100      	bne.n	800f4b4 <__sflush_r+0x80>
 800f4b2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f4b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4b6:	602e      	str	r6, [r5, #0]
 800f4b8:	2900      	cmp	r1, #0
 800f4ba:	d017      	beq.n	800f4ec <__sflush_r+0xb8>
 800f4bc:	0023      	movs	r3, r4
 800f4be:	3344      	adds	r3, #68	@ 0x44
 800f4c0:	4299      	cmp	r1, r3
 800f4c2:	d002      	beq.n	800f4ca <__sflush_r+0x96>
 800f4c4:	0028      	movs	r0, r5
 800f4c6:	f7ff fa83 	bl	800e9d0 <_free_r>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4ce:	e00d      	b.n	800f4ec <__sflush_r+0xb8>
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	0028      	movs	r0, r5
 800f4d4:	47b8      	blx	r7
 800f4d6:	0002      	movs	r2, r0
 800f4d8:	1c43      	adds	r3, r0, #1
 800f4da:	d1c6      	bne.n	800f46a <__sflush_r+0x36>
 800f4dc:	682b      	ldr	r3, [r5, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d0c3      	beq.n	800f46a <__sflush_r+0x36>
 800f4e2:	2b1d      	cmp	r3, #29
 800f4e4:	d001      	beq.n	800f4ea <__sflush_r+0xb6>
 800f4e6:	2b16      	cmp	r3, #22
 800f4e8:	d11a      	bne.n	800f520 <__sflush_r+0xec>
 800f4ea:	602e      	str	r6, [r5, #0]
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	e01e      	b.n	800f52e <__sflush_r+0xfa>
 800f4f0:	690e      	ldr	r6, [r1, #16]
 800f4f2:	2e00      	cmp	r6, #0
 800f4f4:	d0fa      	beq.n	800f4ec <__sflush_r+0xb8>
 800f4f6:	680f      	ldr	r7, [r1, #0]
 800f4f8:	600e      	str	r6, [r1, #0]
 800f4fa:	1bba      	subs	r2, r7, r6
 800f4fc:	9201      	str	r2, [sp, #4]
 800f4fe:	2200      	movs	r2, #0
 800f500:	079b      	lsls	r3, r3, #30
 800f502:	d100      	bne.n	800f506 <__sflush_r+0xd2>
 800f504:	694a      	ldr	r2, [r1, #20]
 800f506:	60a2      	str	r2, [r4, #8]
 800f508:	9b01      	ldr	r3, [sp, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	ddee      	ble.n	800f4ec <__sflush_r+0xb8>
 800f50e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f510:	0032      	movs	r2, r6
 800f512:	001f      	movs	r7, r3
 800f514:	0028      	movs	r0, r5
 800f516:	9b01      	ldr	r3, [sp, #4]
 800f518:	6a21      	ldr	r1, [r4, #32]
 800f51a:	47b8      	blx	r7
 800f51c:	2800      	cmp	r0, #0
 800f51e:	dc07      	bgt.n	800f530 <__sflush_r+0xfc>
 800f520:	89a2      	ldrh	r2, [r4, #12]
 800f522:	2340      	movs	r3, #64	@ 0x40
 800f524:	2001      	movs	r0, #1
 800f526:	4313      	orrs	r3, r2
 800f528:	b21b      	sxth	r3, r3
 800f52a:	81a3      	strh	r3, [r4, #12]
 800f52c:	4240      	negs	r0, r0
 800f52e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f530:	9b01      	ldr	r3, [sp, #4]
 800f532:	1836      	adds	r6, r6, r0
 800f534:	1a1b      	subs	r3, r3, r0
 800f536:	9301      	str	r3, [sp, #4]
 800f538:	e7e6      	b.n	800f508 <__sflush_r+0xd4>
 800f53a:	46c0      	nop			@ (mov r8, r8)
 800f53c:	dfbffffe 	.word	0xdfbffffe

0800f540 <_fflush_r>:
 800f540:	690b      	ldr	r3, [r1, #16]
 800f542:	b570      	push	{r4, r5, r6, lr}
 800f544:	0005      	movs	r5, r0
 800f546:	000c      	movs	r4, r1
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d102      	bne.n	800f552 <_fflush_r+0x12>
 800f54c:	2500      	movs	r5, #0
 800f54e:	0028      	movs	r0, r5
 800f550:	bd70      	pop	{r4, r5, r6, pc}
 800f552:	2800      	cmp	r0, #0
 800f554:	d004      	beq.n	800f560 <_fflush_r+0x20>
 800f556:	6a03      	ldr	r3, [r0, #32]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d101      	bne.n	800f560 <_fflush_r+0x20>
 800f55c:	f7fe fa6c 	bl	800da38 <__sinit>
 800f560:	220c      	movs	r2, #12
 800f562:	5ea3      	ldrsh	r3, [r4, r2]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d0f1      	beq.n	800f54c <_fflush_r+0xc>
 800f568:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f56a:	07d2      	lsls	r2, r2, #31
 800f56c:	d404      	bmi.n	800f578 <_fflush_r+0x38>
 800f56e:	059b      	lsls	r3, r3, #22
 800f570:	d402      	bmi.n	800f578 <_fflush_r+0x38>
 800f572:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f574:	f7fe fb9d 	bl	800dcb2 <__retarget_lock_acquire_recursive>
 800f578:	0028      	movs	r0, r5
 800f57a:	0021      	movs	r1, r4
 800f57c:	f7ff ff5a 	bl	800f434 <__sflush_r>
 800f580:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f582:	0005      	movs	r5, r0
 800f584:	07db      	lsls	r3, r3, #31
 800f586:	d4e2      	bmi.n	800f54e <_fflush_r+0xe>
 800f588:	89a3      	ldrh	r3, [r4, #12]
 800f58a:	059b      	lsls	r3, r3, #22
 800f58c:	d4df      	bmi.n	800f54e <_fflush_r+0xe>
 800f58e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f590:	f7fe fb90 	bl	800dcb4 <__retarget_lock_release_recursive>
 800f594:	e7db      	b.n	800f54e <_fflush_r+0xe>

0800f596 <__swbuf_r>:
 800f596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f598:	0006      	movs	r6, r0
 800f59a:	000d      	movs	r5, r1
 800f59c:	0014      	movs	r4, r2
 800f59e:	2800      	cmp	r0, #0
 800f5a0:	d004      	beq.n	800f5ac <__swbuf_r+0x16>
 800f5a2:	6a03      	ldr	r3, [r0, #32]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d101      	bne.n	800f5ac <__swbuf_r+0x16>
 800f5a8:	f7fe fa46 	bl	800da38 <__sinit>
 800f5ac:	69a3      	ldr	r3, [r4, #24]
 800f5ae:	60a3      	str	r3, [r4, #8]
 800f5b0:	89a3      	ldrh	r3, [r4, #12]
 800f5b2:	071b      	lsls	r3, r3, #28
 800f5b4:	d502      	bpl.n	800f5bc <__swbuf_r+0x26>
 800f5b6:	6923      	ldr	r3, [r4, #16]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d109      	bne.n	800f5d0 <__swbuf_r+0x3a>
 800f5bc:	0021      	movs	r1, r4
 800f5be:	0030      	movs	r0, r6
 800f5c0:	f000 f82c 	bl	800f61c <__swsetup_r>
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	d003      	beq.n	800f5d0 <__swbuf_r+0x3a>
 800f5c8:	2501      	movs	r5, #1
 800f5ca:	426d      	negs	r5, r5
 800f5cc:	0028      	movs	r0, r5
 800f5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5d0:	6923      	ldr	r3, [r4, #16]
 800f5d2:	6820      	ldr	r0, [r4, #0]
 800f5d4:	b2ef      	uxtb	r7, r5
 800f5d6:	1ac0      	subs	r0, r0, r3
 800f5d8:	6963      	ldr	r3, [r4, #20]
 800f5da:	b2ed      	uxtb	r5, r5
 800f5dc:	4283      	cmp	r3, r0
 800f5de:	dc05      	bgt.n	800f5ec <__swbuf_r+0x56>
 800f5e0:	0021      	movs	r1, r4
 800f5e2:	0030      	movs	r0, r6
 800f5e4:	f7ff ffac 	bl	800f540 <_fflush_r>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	d1ed      	bne.n	800f5c8 <__swbuf_r+0x32>
 800f5ec:	68a3      	ldr	r3, [r4, #8]
 800f5ee:	3001      	adds	r0, #1
 800f5f0:	3b01      	subs	r3, #1
 800f5f2:	60a3      	str	r3, [r4, #8]
 800f5f4:	6823      	ldr	r3, [r4, #0]
 800f5f6:	1c5a      	adds	r2, r3, #1
 800f5f8:	6022      	str	r2, [r4, #0]
 800f5fa:	701f      	strb	r7, [r3, #0]
 800f5fc:	6963      	ldr	r3, [r4, #20]
 800f5fe:	4283      	cmp	r3, r0
 800f600:	d004      	beq.n	800f60c <__swbuf_r+0x76>
 800f602:	89a3      	ldrh	r3, [r4, #12]
 800f604:	07db      	lsls	r3, r3, #31
 800f606:	d5e1      	bpl.n	800f5cc <__swbuf_r+0x36>
 800f608:	2d0a      	cmp	r5, #10
 800f60a:	d1df      	bne.n	800f5cc <__swbuf_r+0x36>
 800f60c:	0021      	movs	r1, r4
 800f60e:	0030      	movs	r0, r6
 800f610:	f7ff ff96 	bl	800f540 <_fflush_r>
 800f614:	2800      	cmp	r0, #0
 800f616:	d0d9      	beq.n	800f5cc <__swbuf_r+0x36>
 800f618:	e7d6      	b.n	800f5c8 <__swbuf_r+0x32>
	...

0800f61c <__swsetup_r>:
 800f61c:	4b2d      	ldr	r3, [pc, #180]	@ (800f6d4 <__swsetup_r+0xb8>)
 800f61e:	b570      	push	{r4, r5, r6, lr}
 800f620:	0005      	movs	r5, r0
 800f622:	6818      	ldr	r0, [r3, #0]
 800f624:	000c      	movs	r4, r1
 800f626:	2800      	cmp	r0, #0
 800f628:	d004      	beq.n	800f634 <__swsetup_r+0x18>
 800f62a:	6a03      	ldr	r3, [r0, #32]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d101      	bne.n	800f634 <__swsetup_r+0x18>
 800f630:	f7fe fa02 	bl	800da38 <__sinit>
 800f634:	230c      	movs	r3, #12
 800f636:	5ee2      	ldrsh	r2, [r4, r3]
 800f638:	0713      	lsls	r3, r2, #28
 800f63a:	d423      	bmi.n	800f684 <__swsetup_r+0x68>
 800f63c:	06d3      	lsls	r3, r2, #27
 800f63e:	d407      	bmi.n	800f650 <__swsetup_r+0x34>
 800f640:	2309      	movs	r3, #9
 800f642:	602b      	str	r3, [r5, #0]
 800f644:	2340      	movs	r3, #64	@ 0x40
 800f646:	2001      	movs	r0, #1
 800f648:	4313      	orrs	r3, r2
 800f64a:	81a3      	strh	r3, [r4, #12]
 800f64c:	4240      	negs	r0, r0
 800f64e:	e03a      	b.n	800f6c6 <__swsetup_r+0xaa>
 800f650:	0752      	lsls	r2, r2, #29
 800f652:	d513      	bpl.n	800f67c <__swsetup_r+0x60>
 800f654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f656:	2900      	cmp	r1, #0
 800f658:	d008      	beq.n	800f66c <__swsetup_r+0x50>
 800f65a:	0023      	movs	r3, r4
 800f65c:	3344      	adds	r3, #68	@ 0x44
 800f65e:	4299      	cmp	r1, r3
 800f660:	d002      	beq.n	800f668 <__swsetup_r+0x4c>
 800f662:	0028      	movs	r0, r5
 800f664:	f7ff f9b4 	bl	800e9d0 <_free_r>
 800f668:	2300      	movs	r3, #0
 800f66a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f66c:	2224      	movs	r2, #36	@ 0x24
 800f66e:	89a3      	ldrh	r3, [r4, #12]
 800f670:	4393      	bics	r3, r2
 800f672:	81a3      	strh	r3, [r4, #12]
 800f674:	2300      	movs	r3, #0
 800f676:	6063      	str	r3, [r4, #4]
 800f678:	6923      	ldr	r3, [r4, #16]
 800f67a:	6023      	str	r3, [r4, #0]
 800f67c:	2308      	movs	r3, #8
 800f67e:	89a2      	ldrh	r2, [r4, #12]
 800f680:	4313      	orrs	r3, r2
 800f682:	81a3      	strh	r3, [r4, #12]
 800f684:	6923      	ldr	r3, [r4, #16]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d10b      	bne.n	800f6a2 <__swsetup_r+0x86>
 800f68a:	21a0      	movs	r1, #160	@ 0xa0
 800f68c:	2280      	movs	r2, #128	@ 0x80
 800f68e:	89a3      	ldrh	r3, [r4, #12]
 800f690:	0089      	lsls	r1, r1, #2
 800f692:	0092      	lsls	r2, r2, #2
 800f694:	400b      	ands	r3, r1
 800f696:	4293      	cmp	r3, r2
 800f698:	d003      	beq.n	800f6a2 <__swsetup_r+0x86>
 800f69a:	0021      	movs	r1, r4
 800f69c:	0028      	movs	r0, r5
 800f69e:	f000 f8b9 	bl	800f814 <__smakebuf_r>
 800f6a2:	230c      	movs	r3, #12
 800f6a4:	5ee2      	ldrsh	r2, [r4, r3]
 800f6a6:	2101      	movs	r1, #1
 800f6a8:	0013      	movs	r3, r2
 800f6aa:	400b      	ands	r3, r1
 800f6ac:	420a      	tst	r2, r1
 800f6ae:	d00b      	beq.n	800f6c8 <__swsetup_r+0xac>
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	60a3      	str	r3, [r4, #8]
 800f6b4:	6963      	ldr	r3, [r4, #20]
 800f6b6:	425b      	negs	r3, r3
 800f6b8:	61a3      	str	r3, [r4, #24]
 800f6ba:	2000      	movs	r0, #0
 800f6bc:	6923      	ldr	r3, [r4, #16]
 800f6be:	4283      	cmp	r3, r0
 800f6c0:	d101      	bne.n	800f6c6 <__swsetup_r+0xaa>
 800f6c2:	0613      	lsls	r3, r2, #24
 800f6c4:	d4be      	bmi.n	800f644 <__swsetup_r+0x28>
 800f6c6:	bd70      	pop	{r4, r5, r6, pc}
 800f6c8:	0791      	lsls	r1, r2, #30
 800f6ca:	d400      	bmi.n	800f6ce <__swsetup_r+0xb2>
 800f6cc:	6963      	ldr	r3, [r4, #20]
 800f6ce:	60a3      	str	r3, [r4, #8]
 800f6d0:	e7f3      	b.n	800f6ba <__swsetup_r+0x9e>
 800f6d2:	46c0      	nop			@ (mov r8, r8)
 800f6d4:	20000184 	.word	0x20000184

0800f6d8 <memcpy>:
 800f6d8:	2300      	movs	r3, #0
 800f6da:	b510      	push	{r4, lr}
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d100      	bne.n	800f6e2 <memcpy+0xa>
 800f6e0:	bd10      	pop	{r4, pc}
 800f6e2:	5ccc      	ldrb	r4, [r1, r3]
 800f6e4:	54c4      	strb	r4, [r0, r3]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	e7f8      	b.n	800f6dc <memcpy+0x4>
	...

0800f6ec <__assert_func>:
 800f6ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f6ee:	0014      	movs	r4, r2
 800f6f0:	001a      	movs	r2, r3
 800f6f2:	4b09      	ldr	r3, [pc, #36]	@ (800f718 <__assert_func+0x2c>)
 800f6f4:	0005      	movs	r5, r0
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	000e      	movs	r6, r1
 800f6fa:	68d8      	ldr	r0, [r3, #12]
 800f6fc:	4b07      	ldr	r3, [pc, #28]	@ (800f71c <__assert_func+0x30>)
 800f6fe:	2c00      	cmp	r4, #0
 800f700:	d101      	bne.n	800f706 <__assert_func+0x1a>
 800f702:	4b07      	ldr	r3, [pc, #28]	@ (800f720 <__assert_func+0x34>)
 800f704:	001c      	movs	r4, r3
 800f706:	4907      	ldr	r1, [pc, #28]	@ (800f724 <__assert_func+0x38>)
 800f708:	9301      	str	r3, [sp, #4]
 800f70a:	9402      	str	r4, [sp, #8]
 800f70c:	002b      	movs	r3, r5
 800f70e:	9600      	str	r6, [sp, #0]
 800f710:	f7fe f9aa 	bl	800da68 <fiprintf>
 800f714:	f000 f8e4 	bl	800f8e0 <abort>
 800f718:	20000184 	.word	0x20000184
 800f71c:	0801b68b 	.word	0x0801b68b
 800f720:	0801b6c6 	.word	0x0801b6c6
 800f724:	0801b698 	.word	0x0801b698

0800f728 <_calloc_r>:
 800f728:	b570      	push	{r4, r5, r6, lr}
 800f72a:	0c0b      	lsrs	r3, r1, #16
 800f72c:	0c15      	lsrs	r5, r2, #16
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d11e      	bne.n	800f770 <_calloc_r+0x48>
 800f732:	2d00      	cmp	r5, #0
 800f734:	d10c      	bne.n	800f750 <_calloc_r+0x28>
 800f736:	b289      	uxth	r1, r1
 800f738:	b294      	uxth	r4, r2
 800f73a:	434c      	muls	r4, r1
 800f73c:	0021      	movs	r1, r4
 800f73e:	f7fd fbf9 	bl	800cf34 <_malloc_r>
 800f742:	1e05      	subs	r5, r0, #0
 800f744:	d01a      	beq.n	800f77c <_calloc_r+0x54>
 800f746:	0022      	movs	r2, r4
 800f748:	2100      	movs	r1, #0
 800f74a:	f7fe fa05 	bl	800db58 <memset>
 800f74e:	e016      	b.n	800f77e <_calloc_r+0x56>
 800f750:	1c2b      	adds	r3, r5, #0
 800f752:	1c0c      	adds	r4, r1, #0
 800f754:	b289      	uxth	r1, r1
 800f756:	b292      	uxth	r2, r2
 800f758:	434a      	muls	r2, r1
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	b2a1      	uxth	r1, r4
 800f75e:	4359      	muls	r1, r3
 800f760:	0c14      	lsrs	r4, r2, #16
 800f762:	190c      	adds	r4, r1, r4
 800f764:	0c23      	lsrs	r3, r4, #16
 800f766:	d107      	bne.n	800f778 <_calloc_r+0x50>
 800f768:	0424      	lsls	r4, r4, #16
 800f76a:	b292      	uxth	r2, r2
 800f76c:	4314      	orrs	r4, r2
 800f76e:	e7e5      	b.n	800f73c <_calloc_r+0x14>
 800f770:	2d00      	cmp	r5, #0
 800f772:	d101      	bne.n	800f778 <_calloc_r+0x50>
 800f774:	1c14      	adds	r4, r2, #0
 800f776:	e7ed      	b.n	800f754 <_calloc_r+0x2c>
 800f778:	230c      	movs	r3, #12
 800f77a:	6003      	str	r3, [r0, #0]
 800f77c:	2500      	movs	r5, #0
 800f77e:	0028      	movs	r0, r5
 800f780:	bd70      	pop	{r4, r5, r6, pc}

0800f782 <__ascii_mbtowc>:
 800f782:	b082      	sub	sp, #8
 800f784:	2900      	cmp	r1, #0
 800f786:	d100      	bne.n	800f78a <__ascii_mbtowc+0x8>
 800f788:	a901      	add	r1, sp, #4
 800f78a:	1e10      	subs	r0, r2, #0
 800f78c:	d006      	beq.n	800f79c <__ascii_mbtowc+0x1a>
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d006      	beq.n	800f7a0 <__ascii_mbtowc+0x1e>
 800f792:	7813      	ldrb	r3, [r2, #0]
 800f794:	600b      	str	r3, [r1, #0]
 800f796:	7810      	ldrb	r0, [r2, #0]
 800f798:	1e43      	subs	r3, r0, #1
 800f79a:	4198      	sbcs	r0, r3
 800f79c:	b002      	add	sp, #8
 800f79e:	4770      	bx	lr
 800f7a0:	2002      	movs	r0, #2
 800f7a2:	4240      	negs	r0, r0
 800f7a4:	e7fa      	b.n	800f79c <__ascii_mbtowc+0x1a>

0800f7a6 <__ascii_wctomb>:
 800f7a6:	0003      	movs	r3, r0
 800f7a8:	1e08      	subs	r0, r1, #0
 800f7aa:	d005      	beq.n	800f7b8 <__ascii_wctomb+0x12>
 800f7ac:	2aff      	cmp	r2, #255	@ 0xff
 800f7ae:	d904      	bls.n	800f7ba <__ascii_wctomb+0x14>
 800f7b0:	228a      	movs	r2, #138	@ 0x8a
 800f7b2:	2001      	movs	r0, #1
 800f7b4:	601a      	str	r2, [r3, #0]
 800f7b6:	4240      	negs	r0, r0
 800f7b8:	4770      	bx	lr
 800f7ba:	2001      	movs	r0, #1
 800f7bc:	700a      	strb	r2, [r1, #0]
 800f7be:	e7fb      	b.n	800f7b8 <__ascii_wctomb+0x12>

0800f7c0 <__swhatbuf_r>:
 800f7c0:	b570      	push	{r4, r5, r6, lr}
 800f7c2:	000e      	movs	r6, r1
 800f7c4:	001d      	movs	r5, r3
 800f7c6:	230e      	movs	r3, #14
 800f7c8:	5ec9      	ldrsh	r1, [r1, r3]
 800f7ca:	0014      	movs	r4, r2
 800f7cc:	b096      	sub	sp, #88	@ 0x58
 800f7ce:	2900      	cmp	r1, #0
 800f7d0:	da0c      	bge.n	800f7ec <__swhatbuf_r+0x2c>
 800f7d2:	89b2      	ldrh	r2, [r6, #12]
 800f7d4:	2380      	movs	r3, #128	@ 0x80
 800f7d6:	0011      	movs	r1, r2
 800f7d8:	4019      	ands	r1, r3
 800f7da:	421a      	tst	r2, r3
 800f7dc:	d114      	bne.n	800f808 <__swhatbuf_r+0x48>
 800f7de:	2380      	movs	r3, #128	@ 0x80
 800f7e0:	00db      	lsls	r3, r3, #3
 800f7e2:	2000      	movs	r0, #0
 800f7e4:	6029      	str	r1, [r5, #0]
 800f7e6:	6023      	str	r3, [r4, #0]
 800f7e8:	b016      	add	sp, #88	@ 0x58
 800f7ea:	bd70      	pop	{r4, r5, r6, pc}
 800f7ec:	466a      	mov	r2, sp
 800f7ee:	f000 f853 	bl	800f898 <_fstat_r>
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	dbed      	blt.n	800f7d2 <__swhatbuf_r+0x12>
 800f7f6:	23f0      	movs	r3, #240	@ 0xf0
 800f7f8:	9901      	ldr	r1, [sp, #4]
 800f7fa:	021b      	lsls	r3, r3, #8
 800f7fc:	4019      	ands	r1, r3
 800f7fe:	4b04      	ldr	r3, [pc, #16]	@ (800f810 <__swhatbuf_r+0x50>)
 800f800:	18c9      	adds	r1, r1, r3
 800f802:	424b      	negs	r3, r1
 800f804:	4159      	adcs	r1, r3
 800f806:	e7ea      	b.n	800f7de <__swhatbuf_r+0x1e>
 800f808:	2100      	movs	r1, #0
 800f80a:	2340      	movs	r3, #64	@ 0x40
 800f80c:	e7e9      	b.n	800f7e2 <__swhatbuf_r+0x22>
 800f80e:	46c0      	nop			@ (mov r8, r8)
 800f810:	ffffe000 	.word	0xffffe000

0800f814 <__smakebuf_r>:
 800f814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f816:	2602      	movs	r6, #2
 800f818:	898b      	ldrh	r3, [r1, #12]
 800f81a:	0005      	movs	r5, r0
 800f81c:	000c      	movs	r4, r1
 800f81e:	b085      	sub	sp, #20
 800f820:	4233      	tst	r3, r6
 800f822:	d007      	beq.n	800f834 <__smakebuf_r+0x20>
 800f824:	0023      	movs	r3, r4
 800f826:	3347      	adds	r3, #71	@ 0x47
 800f828:	6023      	str	r3, [r4, #0]
 800f82a:	6123      	str	r3, [r4, #16]
 800f82c:	2301      	movs	r3, #1
 800f82e:	6163      	str	r3, [r4, #20]
 800f830:	b005      	add	sp, #20
 800f832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f834:	ab03      	add	r3, sp, #12
 800f836:	aa02      	add	r2, sp, #8
 800f838:	f7ff ffc2 	bl	800f7c0 <__swhatbuf_r>
 800f83c:	9f02      	ldr	r7, [sp, #8]
 800f83e:	9001      	str	r0, [sp, #4]
 800f840:	0039      	movs	r1, r7
 800f842:	0028      	movs	r0, r5
 800f844:	f7fd fb76 	bl	800cf34 <_malloc_r>
 800f848:	2800      	cmp	r0, #0
 800f84a:	d108      	bne.n	800f85e <__smakebuf_r+0x4a>
 800f84c:	220c      	movs	r2, #12
 800f84e:	5ea3      	ldrsh	r3, [r4, r2]
 800f850:	059a      	lsls	r2, r3, #22
 800f852:	d4ed      	bmi.n	800f830 <__smakebuf_r+0x1c>
 800f854:	2203      	movs	r2, #3
 800f856:	4393      	bics	r3, r2
 800f858:	431e      	orrs	r6, r3
 800f85a:	81a6      	strh	r6, [r4, #12]
 800f85c:	e7e2      	b.n	800f824 <__smakebuf_r+0x10>
 800f85e:	2380      	movs	r3, #128	@ 0x80
 800f860:	89a2      	ldrh	r2, [r4, #12]
 800f862:	6020      	str	r0, [r4, #0]
 800f864:	4313      	orrs	r3, r2
 800f866:	81a3      	strh	r3, [r4, #12]
 800f868:	9b03      	ldr	r3, [sp, #12]
 800f86a:	6120      	str	r0, [r4, #16]
 800f86c:	6167      	str	r7, [r4, #20]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00c      	beq.n	800f88c <__smakebuf_r+0x78>
 800f872:	0028      	movs	r0, r5
 800f874:	230e      	movs	r3, #14
 800f876:	5ee1      	ldrsh	r1, [r4, r3]
 800f878:	f000 f820 	bl	800f8bc <_isatty_r>
 800f87c:	2800      	cmp	r0, #0
 800f87e:	d005      	beq.n	800f88c <__smakebuf_r+0x78>
 800f880:	2303      	movs	r3, #3
 800f882:	89a2      	ldrh	r2, [r4, #12]
 800f884:	439a      	bics	r2, r3
 800f886:	3b02      	subs	r3, #2
 800f888:	4313      	orrs	r3, r2
 800f88a:	81a3      	strh	r3, [r4, #12]
 800f88c:	89a3      	ldrh	r3, [r4, #12]
 800f88e:	9a01      	ldr	r2, [sp, #4]
 800f890:	4313      	orrs	r3, r2
 800f892:	81a3      	strh	r3, [r4, #12]
 800f894:	e7cc      	b.n	800f830 <__smakebuf_r+0x1c>
	...

0800f898 <_fstat_r>:
 800f898:	2300      	movs	r3, #0
 800f89a:	b570      	push	{r4, r5, r6, lr}
 800f89c:	4d06      	ldr	r5, [pc, #24]	@ (800f8b8 <_fstat_r+0x20>)
 800f89e:	0004      	movs	r4, r0
 800f8a0:	0008      	movs	r0, r1
 800f8a2:	0011      	movs	r1, r2
 800f8a4:	602b      	str	r3, [r5, #0]
 800f8a6:	f7f6 f995 	bl	8005bd4 <_fstat>
 800f8aa:	1c43      	adds	r3, r0, #1
 800f8ac:	d103      	bne.n	800f8b6 <_fstat_r+0x1e>
 800f8ae:	682b      	ldr	r3, [r5, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d000      	beq.n	800f8b6 <_fstat_r+0x1e>
 800f8b4:	6023      	str	r3, [r4, #0]
 800f8b6:	bd70      	pop	{r4, r5, r6, pc}
 800f8b8:	200006ec 	.word	0x200006ec

0800f8bc <_isatty_r>:
 800f8bc:	2300      	movs	r3, #0
 800f8be:	b570      	push	{r4, r5, r6, lr}
 800f8c0:	4d06      	ldr	r5, [pc, #24]	@ (800f8dc <_isatty_r+0x20>)
 800f8c2:	0004      	movs	r4, r0
 800f8c4:	0008      	movs	r0, r1
 800f8c6:	602b      	str	r3, [r5, #0]
 800f8c8:	f7f6 f992 	bl	8005bf0 <_isatty>
 800f8cc:	1c43      	adds	r3, r0, #1
 800f8ce:	d103      	bne.n	800f8d8 <_isatty_r+0x1c>
 800f8d0:	682b      	ldr	r3, [r5, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d000      	beq.n	800f8d8 <_isatty_r+0x1c>
 800f8d6:	6023      	str	r3, [r4, #0]
 800f8d8:	bd70      	pop	{r4, r5, r6, pc}
 800f8da:	46c0      	nop			@ (mov r8, r8)
 800f8dc:	200006ec 	.word	0x200006ec

0800f8e0 <abort>:
 800f8e0:	2006      	movs	r0, #6
 800f8e2:	b510      	push	{r4, lr}
 800f8e4:	f000 f82c 	bl	800f940 <raise>
 800f8e8:	2001      	movs	r0, #1
 800f8ea:	f7f6 f923 	bl	8005b34 <_exit>

0800f8ee <_raise_r>:
 800f8ee:	b570      	push	{r4, r5, r6, lr}
 800f8f0:	0004      	movs	r4, r0
 800f8f2:	000d      	movs	r5, r1
 800f8f4:	291f      	cmp	r1, #31
 800f8f6:	d904      	bls.n	800f902 <_raise_r+0x14>
 800f8f8:	2316      	movs	r3, #22
 800f8fa:	6003      	str	r3, [r0, #0]
 800f8fc:	2001      	movs	r0, #1
 800f8fe:	4240      	negs	r0, r0
 800f900:	bd70      	pop	{r4, r5, r6, pc}
 800f902:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f904:	2b00      	cmp	r3, #0
 800f906:	d004      	beq.n	800f912 <_raise_r+0x24>
 800f908:	008a      	lsls	r2, r1, #2
 800f90a:	189b      	adds	r3, r3, r2
 800f90c:	681a      	ldr	r2, [r3, #0]
 800f90e:	2a00      	cmp	r2, #0
 800f910:	d108      	bne.n	800f924 <_raise_r+0x36>
 800f912:	0020      	movs	r0, r4
 800f914:	f000 f830 	bl	800f978 <_getpid_r>
 800f918:	002a      	movs	r2, r5
 800f91a:	0001      	movs	r1, r0
 800f91c:	0020      	movs	r0, r4
 800f91e:	f000 f819 	bl	800f954 <_kill_r>
 800f922:	e7ed      	b.n	800f900 <_raise_r+0x12>
 800f924:	2a01      	cmp	r2, #1
 800f926:	d009      	beq.n	800f93c <_raise_r+0x4e>
 800f928:	1c51      	adds	r1, r2, #1
 800f92a:	d103      	bne.n	800f934 <_raise_r+0x46>
 800f92c:	2316      	movs	r3, #22
 800f92e:	6003      	str	r3, [r0, #0]
 800f930:	2001      	movs	r0, #1
 800f932:	e7e5      	b.n	800f900 <_raise_r+0x12>
 800f934:	2100      	movs	r1, #0
 800f936:	0028      	movs	r0, r5
 800f938:	6019      	str	r1, [r3, #0]
 800f93a:	4790      	blx	r2
 800f93c:	2000      	movs	r0, #0
 800f93e:	e7df      	b.n	800f900 <_raise_r+0x12>

0800f940 <raise>:
 800f940:	b510      	push	{r4, lr}
 800f942:	4b03      	ldr	r3, [pc, #12]	@ (800f950 <raise+0x10>)
 800f944:	0001      	movs	r1, r0
 800f946:	6818      	ldr	r0, [r3, #0]
 800f948:	f7ff ffd1 	bl	800f8ee <_raise_r>
 800f94c:	bd10      	pop	{r4, pc}
 800f94e:	46c0      	nop			@ (mov r8, r8)
 800f950:	20000184 	.word	0x20000184

0800f954 <_kill_r>:
 800f954:	2300      	movs	r3, #0
 800f956:	b570      	push	{r4, r5, r6, lr}
 800f958:	4d06      	ldr	r5, [pc, #24]	@ (800f974 <_kill_r+0x20>)
 800f95a:	0004      	movs	r4, r0
 800f95c:	0008      	movs	r0, r1
 800f95e:	0011      	movs	r1, r2
 800f960:	602b      	str	r3, [r5, #0]
 800f962:	f7f6 f8d7 	bl	8005b14 <_kill>
 800f966:	1c43      	adds	r3, r0, #1
 800f968:	d103      	bne.n	800f972 <_kill_r+0x1e>
 800f96a:	682b      	ldr	r3, [r5, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d000      	beq.n	800f972 <_kill_r+0x1e>
 800f970:	6023      	str	r3, [r4, #0]
 800f972:	bd70      	pop	{r4, r5, r6, pc}
 800f974:	200006ec 	.word	0x200006ec

0800f978 <_getpid_r>:
 800f978:	b510      	push	{r4, lr}
 800f97a:	f7f6 f8c5 	bl	8005b08 <_getpid>
 800f97e:	bd10      	pop	{r4, pc}

0800f980 <_init>:
 800f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f982:	46c0      	nop			@ (mov r8, r8)
 800f984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f986:	bc08      	pop	{r3}
 800f988:	469e      	mov	lr, r3
 800f98a:	4770      	bx	lr

0800f98c <_fini>:
 800f98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98e:	46c0      	nop			@ (mov r8, r8)
 800f990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f992:	bc08      	pop	{r3}
 800f994:	469e      	mov	lr, r3
 800f996:	4770      	bx	lr
