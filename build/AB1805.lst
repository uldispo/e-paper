ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"AB1805.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/AB1805.c"
  18              		.section	.text.SPI1_SendByte,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	SPI1_SendByte:
  25              	.LFB623:
   1:Core/Src/AB1805.c **** #include "AB1805.h"
   2:Core/Src/AB1805.c **** #include <stdint.h>
   3:Core/Src/AB1805.c **** #include "printf.h"
   4:Core/Src/AB1805.c **** #include "stm32u0xx_ll_spi.h"
   5:Core/Src/AB1805.c **** #include "main.h"
   6:Core/Src/AB1805.c **** extern SPI_HandleTypeDef hspi1;
   7:Core/Src/AB1805.c **** 
   8:Core/Src/AB1805.c **** inline static uint8_t read_rtc_register(uint8_t reg_addr);
   9:Core/Src/AB1805.c **** inline static uint8_t write_rtc_register(uint8_t rtc_register, uint8_t data);
  10:Core/Src/AB1805.c **** static inline uint32_t utils_enter_critical_section(void);
  11:Core/Src/AB1805.c **** static inline void utils_exit_critical_section(uint32_t primask_bit);
  12:Core/Src/AB1805.c **** #define AB1815_SPI_READ(offset) (127 & offset)
  13:Core/Src/AB1805.c **** #define AB1815_SPI_WRITE(offset) (128 | offset)
  14:Core/Src/AB1805.c **** #define DEBUG_SIO
  15:Core/Src/AB1805.c **** // data
  16:Core/Src/AB1805.c **** volatile uint8_t _year;
  17:Core/Src/AB1805.c **** volatile uint8_t _month;
  18:Core/Src/AB1805.c **** volatile uint8_t _date;
  19:Core/Src/AB1805.c **** volatile uint8_t _weekday;
  20:Core/Src/AB1805.c **** volatile uint8_t _hour;
  21:Core/Src/AB1805.c **** volatile uint8_t _minute;
  22:Core/Src/AB1805.c **** volatile uint8_t _second;
  23:Core/Src/AB1805.c **** volatile uint8_t _hundredth;
  24:Core/Src/AB1805.c **** 
  25:Core/Src/AB1805.c **** volatile uint8_t _alarm_year;
  26:Core/Src/AB1805.c **** volatile uint8_t _alarm_month;
  27:Core/Src/AB1805.c **** volatile uint8_t _alarm_date;
  28:Core/Src/AB1805.c **** volatile uint8_t _alarm_weekday;
  29:Core/Src/AB1805.c **** volatile uint8_t _alarm_hour;
  30:Core/Src/AB1805.c **** volatile uint8_t _alarm_minute;
  31:Core/Src/AB1805.c **** volatile uint8_t _alarm_second;
  32:Core/Src/AB1805.c **** char data_time_string[CONST_DATE_TIME_STRING_LEN];
  33:Core/Src/AB1805.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 2


  34:Core/Src/AB1805.c **** uint8_t _status;
  35:Core/Src/AB1805.c **** uint8_t _control1;
  36:Core/Src/AB1805.c **** uint8_t _control2;
  37:Core/Src/AB1805.c **** uint8_t _interrupt;
  38:Core/Src/AB1805.c **** uint8_t _sleep_mode;
  39:Core/Src/AB1805.c **** uint8_t _timer_control_mode;
  40:Core/Src/AB1805.c **** uint8_t _outcontrol;
  41:Core/Src/AB1805.c **** uint8_t _osc_control;
  42:Core/Src/AB1805.c **** uint8_t _wdt_register;
  43:Core/Src/AB1805.c **** 
  44:Core/Src/AB1805.c **** void spi_select_slave(bool select) // 1 = high, 0 = low
  45:Core/Src/AB1805.c **** {
  46:Core/Src/AB1805.c ****   if (select)
  47:Core/Src/AB1805.c ****   {
  48:Core/Src/AB1805.c ****     RTC_H();
  49:Core/Src/AB1805.c ****   }
  50:Core/Src/AB1805.c ****   else
  51:Core/Src/AB1805.c ****   {
  52:Core/Src/AB1805.c ****     RTC_L();
  53:Core/Src/AB1805.c ****   }
  54:Core/Src/AB1805.c **** }
  55:Core/Src/AB1805.c **** 
  56:Core/Src/AB1805.c **** uint8_t get_rtc_data(const uint8_t rtc_register, const uint8_t register_mask)
  57:Core/Src/AB1805.c **** {
  58:Core/Src/AB1805.c ****   return (read_rtc_register(rtc_register) & register_mask);
  59:Core/Src/AB1805.c **** }
  60:Core/Src/AB1805.c **** 
  61:Core/Src/AB1805.c **** uint8_t get_hundredths(void)
  62:Core/Src/AB1805.c **** {
  63:Core/Src/AB1805.c ****   return get_rtc_data(HUNDRETH_REGISTER, 0xFF);
  64:Core/Src/AB1805.c **** }
  65:Core/Src/AB1805.c **** 
  66:Core/Src/AB1805.c **** uint8_t get_second(void)
  67:Core/Src/AB1805.c **** {
  68:Core/Src/AB1805.c ****   return get_rtc_data(SECOND_REGISTER, SECOND_MASK);
  69:Core/Src/AB1805.c **** }
  70:Core/Src/AB1805.c **** 
  71:Core/Src/AB1805.c **** uint8_t get_minute(void)
  72:Core/Src/AB1805.c **** {
  73:Core/Src/AB1805.c ****   return get_rtc_data(MINUTE_REGISTER, MINUTE_MASK);
  74:Core/Src/AB1805.c **** }
  75:Core/Src/AB1805.c **** 
  76:Core/Src/AB1805.c **** uint8_t get_hour(void)
  77:Core/Src/AB1805.c **** {
  78:Core/Src/AB1805.c ****   return get_rtc_data(HOUR_REGISTER, HOUR_24_MASK);
  79:Core/Src/AB1805.c **** }
  80:Core/Src/AB1805.c **** 
  81:Core/Src/AB1805.c **** uint8_t get_weekday(void)
  82:Core/Src/AB1805.c **** {
  83:Core/Src/AB1805.c ****   return get_rtc_data(WEEKDAY_REGISTER, DAY_MASK);
  84:Core/Src/AB1805.c **** }
  85:Core/Src/AB1805.c **** 
  86:Core/Src/AB1805.c **** uint8_t get_date(void)
  87:Core/Src/AB1805.c **** {
  88:Core/Src/AB1805.c ****   return get_rtc_data(DATE_REGISTER, DATE_MASK);
  89:Core/Src/AB1805.c **** }
  90:Core/Src/AB1805.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 3


  91:Core/Src/AB1805.c **** uint8_t get_month(void)
  92:Core/Src/AB1805.c **** {
  93:Core/Src/AB1805.c ****   return get_rtc_data(MONTH_REGISTER, MONTH_MASK);
  94:Core/Src/AB1805.c **** }
  95:Core/Src/AB1805.c **** 
  96:Core/Src/AB1805.c **** uint8_t get_year(void)
  97:Core/Src/AB1805.c **** {
  98:Core/Src/AB1805.c ****   return get_rtc_data(YEAR_REGISTER, YEAR_MASK);
  99:Core/Src/AB1805.c **** }
 100:Core/Src/AB1805.c **** 
 101:Core/Src/AB1805.c **** void get_datetime(void)
 102:Core/Src/AB1805.c **** {
 103:Core/Src/AB1805.c ****   // rtc_check_valid();
 104:Core/Src/AB1805.c ****   //_hundredths = get_hundredths();
 105:Core/Src/AB1805.c ****   _second = get_second();
 106:Core/Src/AB1805.c ****   _minute = get_minute();
 107:Core/Src/AB1805.c ****   _hour = get_hour();
 108:Core/Src/AB1805.c ****   _weekday = get_weekday();
 109:Core/Src/AB1805.c ****   _date = get_date();
 110:Core/Src/AB1805.c ****   _month = get_month();
 111:Core/Src/AB1805.c ****   _year = get_year();
 112:Core/Src/AB1805.c **** }
 113:Core/Src/AB1805.c **** 
 114:Core/Src/AB1805.c **** uint8_t get_second_alarm(void)
 115:Core/Src/AB1805.c **** {
 116:Core/Src/AB1805.c ****   _alarm_second = get_rtc_data(SECOND_ALARM_REGISTER, SECOND_ALARM_MASK);
 117:Core/Src/AB1805.c ****   return _alarm_second;
 118:Core/Src/AB1805.c **** }
 119:Core/Src/AB1805.c **** 
 120:Core/Src/AB1805.c **** uint8_t get_minute_alarm(void)
 121:Core/Src/AB1805.c **** {
 122:Core/Src/AB1805.c ****   _alarm_minute = get_rtc_data(MINUTE_ALARM_REGISTER, MINUTE_ALARM_MASK);
 123:Core/Src/AB1805.c ****   return _alarm_minute;
 124:Core/Src/AB1805.c **** }
 125:Core/Src/AB1805.c **** 
 126:Core/Src/AB1805.c **** uint8_t get_hour_alarm(void)
 127:Core/Src/AB1805.c **** {
 128:Core/Src/AB1805.c ****   _alarm_hour = get_rtc_data(HOUR_ALARM_REGISTER, HOUR_24_ALARM_MASK);
 129:Core/Src/AB1805.c ****   return _alarm_hour;
 130:Core/Src/AB1805.c **** }
 131:Core/Src/AB1805.c **** 
 132:Core/Src/AB1805.c **** uint8_t get_weekday_alarm(void)
 133:Core/Src/AB1805.c **** {
 134:Core/Src/AB1805.c ****   _alarm_weekday = get_rtc_data(WEEKDAY_ALARM_REGISTER, WEEKDAY_ALARM_MASK);
 135:Core/Src/AB1805.c ****   return _alarm_weekday;
 136:Core/Src/AB1805.c **** }
 137:Core/Src/AB1805.c **** 
 138:Core/Src/AB1805.c **** uint8_t get_date_alarm(void)
 139:Core/Src/AB1805.c **** {
 140:Core/Src/AB1805.c ****   _alarm_date = get_rtc_data(DATE_ALARM_REGISTER, DATE_ALARM_MASK);
 141:Core/Src/AB1805.c ****   return _alarm_date;
 142:Core/Src/AB1805.c **** }
 143:Core/Src/AB1805.c **** 
 144:Core/Src/AB1805.c **** uint8_t get_month_alarm(void)
 145:Core/Src/AB1805.c **** {
 146:Core/Src/AB1805.c ****   _alarm_month = get_rtc_data(MONTH_ALARM_REGISTER, MONTH_ALARM_MASK);
 147:Core/Src/AB1805.c ****   return _alarm_month;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 4


 148:Core/Src/AB1805.c **** }
 149:Core/Src/AB1805.c **** 
 150:Core/Src/AB1805.c **** void set_second(const uint8_t value)
 151:Core/Src/AB1805.c **** {
 152:Core/Src/AB1805.c ****   _second = value % MAX_SECOND;
 153:Core/Src/AB1805.c ****   write_rtc_register(SECOND_REGISTER, _second);
 154:Core/Src/AB1805.c **** }
 155:Core/Src/AB1805.c **** 
 156:Core/Src/AB1805.c **** void set_minute(const uint8_t value)
 157:Core/Src/AB1805.c **** {
 158:Core/Src/AB1805.c ****   _minute = value % MAX_MINUTE;
 159:Core/Src/AB1805.c ****   write_rtc_register(MINUTE_REGISTER, _minute);
 160:Core/Src/AB1805.c **** }
 161:Core/Src/AB1805.c **** 
 162:Core/Src/AB1805.c **** void set_hour(const uint8_t value)
 163:Core/Src/AB1805.c **** {
 164:Core/Src/AB1805.c ****   _hour = value % MAX_HOURS;
 165:Core/Src/AB1805.c ****   write_rtc_register(HOUR_REGISTER, _hour);
 166:Core/Src/AB1805.c **** }
 167:Core/Src/AB1805.c **** 
 168:Core/Src/AB1805.c **** void set_weekday(const uint8_t value)
 169:Core/Src/AB1805.c **** {
 170:Core/Src/AB1805.c ****   _weekday = value % MAX_DAY;
 171:Core/Src/AB1805.c ****   write_rtc_register(WEEKDAY_REGISTER, _weekday);
 172:Core/Src/AB1805.c **** }
 173:Core/Src/AB1805.c **** 
 174:Core/Src/AB1805.c **** void set_date(const uint8_t value)
 175:Core/Src/AB1805.c **** {
 176:Core/Src/AB1805.c ****   _date = value % MAX_DATE;
 177:Core/Src/AB1805.c ****   write_rtc_register(DATE_REGISTER, _date);
 178:Core/Src/AB1805.c **** }
 179:Core/Src/AB1805.c **** 
 180:Core/Src/AB1805.c **** void set_month(const uint8_t value)
 181:Core/Src/AB1805.c **** {
 182:Core/Src/AB1805.c ****   _month = value % MAX_MONTH;
 183:Core/Src/AB1805.c ****   write_rtc_register(MONTH_REGISTER, _month);
 184:Core/Src/AB1805.c **** }
 185:Core/Src/AB1805.c **** 
 186:Core/Src/AB1805.c **** void set_year(const uint8_t value)
 187:Core/Src/AB1805.c **** {
 188:Core/Src/AB1805.c ****   _year = value % MAX_YEAR;
 189:Core/Src/AB1805.c ****   write_rtc_register(YEAR_REGISTER, value);
 190:Core/Src/AB1805.c **** }
 191:Core/Src/AB1805.c **** 
 192:Core/Src/AB1805.c **** void set_datetime(uint8_t year, uint8_t month, uint8_t date, uint8_t weekday, uint8_t hour, uint8_t
 193:Core/Src/AB1805.c **** {
 194:Core/Src/AB1805.c ****   set_year(year);
 195:Core/Src/AB1805.c ****   set_month(month);
 196:Core/Src/AB1805.c ****   set_date(date);
 197:Core/Src/AB1805.c ****   set_weekday(weekday);
 198:Core/Src/AB1805.c ****   set_hour(hour);
 199:Core/Src/AB1805.c ****   set_minute(minutes);
 200:Core/Src/AB1805.c ****   set_second(seconds);
 201:Core/Src/AB1805.c **** }
 202:Core/Src/AB1805.c **** 
 203:Core/Src/AB1805.c **** void set_datetime_alarm_month(uint8_t month, uint8_t date, uint8_t hour, uint8_t minutes, uint8_t s
 204:Core/Src/AB1805.c **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 5


 205:Core/Src/AB1805.c ****   set_month_alarm(month);
 206:Core/Src/AB1805.c ****   set_date_alarm(date);
 207:Core/Src/AB1805.c ****   set_hour_alarm(hour);
 208:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 209:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 210:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_YEAR);
 211:Core/Src/AB1805.c **** }
 212:Core/Src/AB1805.c **** 
 213:Core/Src/AB1805.c **** void set_datetime_alarm_date(uint8_t date, uint8_t hour, uint8_t minutes, uint8_t seconds)
 214:Core/Src/AB1805.c **** {
 215:Core/Src/AB1805.c ****   set_date_alarm(date);
 216:Core/Src/AB1805.c ****   set_hour_alarm(hour);
 217:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 218:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 219:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_MONTH);
 220:Core/Src/AB1805.c **** }
 221:Core/Src/AB1805.c **** 
 222:Core/Src/AB1805.c **** void set_week_alarm(uint8_t weekday, uint8_t hour, uint8_t minutes, uint8_t seconds)
 223:Core/Src/AB1805.c **** {
 224:Core/Src/AB1805.c ****   set_weekday_alarm(weekday);
 225:Core/Src/AB1805.c ****   set_hour_alarm(hour);
 226:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 227:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 228:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_WEEK);
 229:Core/Src/AB1805.c **** }
 230:Core/Src/AB1805.c **** 
 231:Core/Src/AB1805.c **** void set_datetime_alarm_hour(uint8_t hour, uint8_t minutes, uint8_t seconds)
 232:Core/Src/AB1805.c **** {
 233:Core/Src/AB1805.c ****   set_hour_alarm(hour);
 234:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 235:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 236:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_DAY);
 237:Core/Src/AB1805.c **** }
 238:Core/Src/AB1805.c **** 
 239:Core/Src/AB1805.c **** void set_datetime_alarm_minutes(uint8_t minutes, uint8_t seconds)
 240:Core/Src/AB1805.c **** {
 241:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 242:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 243:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_HOUR);
 244:Core/Src/AB1805.c **** }
 245:Core/Src/AB1805.c **** 
 246:Core/Src/AB1805.c **** void set_datetime_alarm_seconds(uint8_t seconds)
 247:Core/Src/AB1805.c **** {
 248:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 249:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_MINUTE);
 250:Core/Src/AB1805.c **** }
 251:Core/Src/AB1805.c **** 
 252:Core/Src/AB1805.c **** void set_once_second_alarm(uint8_t hundredths)
 253:Core/Src/AB1805.c **** {
 254:Core/Src/AB1805.c ****   // set_second_alarm(seconds);
 255:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_SECOND);
 256:Core/Src/AB1805.c **** }
 257:Core/Src/AB1805.c **** 
 258:Core/Src/AB1805.c **** bool set_second_alarm(uint8_t value)
 259:Core/Src/AB1805.c **** {
 260:Core/Src/AB1805.c ****   _alarm_second = value % MAX_SECOND;
 261:Core/Src/AB1805.c ****   write_rtc_register(SECOND_ALARM_REGISTER, _alarm_second);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 6


 262:Core/Src/AB1805.c ****   _alarm_second = get_second_alarm();
 263:Core/Src/AB1805.c ****   return (value == _alarm_second);
 264:Core/Src/AB1805.c **** }
 265:Core/Src/AB1805.c **** 
 266:Core/Src/AB1805.c **** bool set_minute_alarm(uint8_t value)
 267:Core/Src/AB1805.c **** {
 268:Core/Src/AB1805.c ****   _alarm_minute = value % MAX_MINUTE;
 269:Core/Src/AB1805.c ****   write_rtc_register(MINUTE_ALARM_REGISTER, _alarm_minute);
 270:Core/Src/AB1805.c ****   _alarm_minute = get_minute_alarm();
 271:Core/Src/AB1805.c ****   return (value == _alarm_minute);
 272:Core/Src/AB1805.c **** }
 273:Core/Src/AB1805.c **** 
 274:Core/Src/AB1805.c **** bool set_hour_alarm(uint8_t value)
 275:Core/Src/AB1805.c **** {
 276:Core/Src/AB1805.c ****   _alarm_hour = value % MAX_HOURS;
 277:Core/Src/AB1805.c ****   write_rtc_register(HOUR_ALARM_REGISTER, _alarm_hour);
 278:Core/Src/AB1805.c ****   _alarm_hour = get_hour_alarm();
 279:Core/Src/AB1805.c ****   return (value == _alarm_hour);
 280:Core/Src/AB1805.c **** }
 281:Core/Src/AB1805.c **** 
 282:Core/Src/AB1805.c **** bool set_weekday_alarm(uint8_t value)
 283:Core/Src/AB1805.c **** {
 284:Core/Src/AB1805.c ****   _alarm_weekday = value % MAX_DAY;
 285:Core/Src/AB1805.c ****   write_rtc_register(WEEKDAY_ALARM_REGISTER, _alarm_weekday);
 286:Core/Src/AB1805.c ****   _alarm_weekday = get_weekday_alarm();
 287:Core/Src/AB1805.c ****   return (value == _alarm_weekday);
 288:Core/Src/AB1805.c **** }
 289:Core/Src/AB1805.c **** 
 290:Core/Src/AB1805.c **** bool set_date_alarm(uint8_t value)
 291:Core/Src/AB1805.c **** {
 292:Core/Src/AB1805.c ****   _alarm_date = value % MAX_DATE;
 293:Core/Src/AB1805.c ****   write_rtc_register(DATE_ALARM_REGISTER, _alarm_date);
 294:Core/Src/AB1805.c ****   _alarm_date = get_date_alarm();
 295:Core/Src/AB1805.c ****   return (value == _alarm_date);
 296:Core/Src/AB1805.c **** }
 297:Core/Src/AB1805.c **** 
 298:Core/Src/AB1805.c **** bool set_month_alarm(uint8_t value)
 299:Core/Src/AB1805.c **** {
 300:Core/Src/AB1805.c ****   _alarm_month = value % MAX_MONTH;
 301:Core/Src/AB1805.c ****   write_rtc_register(MONTH_ALARM_REGISTER, _alarm_month);
 302:Core/Src/AB1805.c ****   _alarm_month = get_month_alarm();
 303:Core/Src/AB1805.c ****   return (value == _alarm_month);
 304:Core/Src/AB1805.c **** }
 305:Core/Src/AB1805.c **** 
 306:Core/Src/AB1805.c **** // String get_date_string(void)
 307:Core/Src/AB1805.c **** // {
 308:Core/Src/AB1805.c **** 
 309:Core/Src/AB1805.c **** //   String date_string;
 310:Core/Src/AB1805.c **** 
 311:Core/Src/AB1805.c **** //   _date = get_date();
 312:Core/Src/AB1805.c **** //   date_string += ((_date & 0xF0) >> 4);
 313:Core/Src/AB1805.c **** //   date_string += (_date & 0x0F);
 314:Core/Src/AB1805.c **** 
 315:Core/Src/AB1805.c **** //   date_string += '/';
 316:Core/Src/AB1805.c **** 
 317:Core/Src/AB1805.c **** //   _month = get_month();
 318:Core/Src/AB1805.c **** //   date_string += ((_month & 0xF0) >> 4);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 7


 319:Core/Src/AB1805.c **** //   date_string += (_month & 0x0F);
 320:Core/Src/AB1805.c **** 
 321:Core/Src/AB1805.c **** //   date_string += '/';
 322:Core/Src/AB1805.c **** 
 323:Core/Src/AB1805.c **** //   _year = get_year();
 324:Core/Src/AB1805.c **** //   date_string += ((_year & 0xF0) >> 4);
 325:Core/Src/AB1805.c **** //   date_string += (_year & 0x0F);
 326:Core/Src/AB1805.c **** 
 327:Core/Src/AB1805.c **** //   date_string += ' ';
 328:Core/Src/AB1805.c **** 
 329:Core/Src/AB1805.c **** //   _hour = get_hour();
 330:Core/Src/AB1805.c **** //   date_string += ((_hour & 0xF0) >> 4);
 331:Core/Src/AB1805.c **** //   date_string += (_hour & 0x0F);
 332:Core/Src/AB1805.c **** 
 333:Core/Src/AB1805.c **** //   date_string += ':';
 334:Core/Src/AB1805.c **** 
 335:Core/Src/AB1805.c **** //   _minute = get_minute();
 336:Core/Src/AB1805.c **** //   date_string += ((_minute & 0xF0) >> 4);
 337:Core/Src/AB1805.c **** //   date_string += (_minute & 0x0F);
 338:Core/Src/AB1805.c **** 
 339:Core/Src/AB1805.c **** //   date_string += ':';
 340:Core/Src/AB1805.c **** 
 341:Core/Src/AB1805.c **** //   _second = get_second();
 342:Core/Src/AB1805.c **** //   date_string += ((_second & 0xF0) >> 4);
 343:Core/Src/AB1805.c **** //   date_string += (_second & 0x0F);
 344:Core/Src/AB1805.c **** 
 345:Core/Src/AB1805.c **** //   return date_string;
 346:Core/Src/AB1805.c **** // }
 347:Core/Src/AB1805.c **** 
 348:Core/Src/AB1805.c **** char *get_date_time(void)
 349:Core/Src/AB1805.c **** {
 350:Core/Src/AB1805.c ****   char *currPos;
 351:Core/Src/AB1805.c ****   currPos = data_time_string;
 352:Core/Src/AB1805.c ****   *currPos = 0;
 353:Core/Src/AB1805.c ****   get_datetime();
 354:Core/Src/AB1805.c **** 
 355:Core/Src/AB1805.c ****   *currPos = ((_date & 0xF0) >> 4) + 0x30;
 356:Core/Src/AB1805.c ****   currPos++;
 357:Core/Src/AB1805.c ****   *currPos = (_date & 0x0F) + 0x30;
 358:Core/Src/AB1805.c ****   currPos++;
 359:Core/Src/AB1805.c **** 
 360:Core/Src/AB1805.c ****   *currPos = '/';
 361:Core/Src/AB1805.c ****   currPos++;
 362:Core/Src/AB1805.c **** 
 363:Core/Src/AB1805.c ****   *currPos = ((_month & 0xF0) >> 4) + 0x30;
 364:Core/Src/AB1805.c ****   currPos++;
 365:Core/Src/AB1805.c ****   *currPos = (_month & 0x0F) + 0x30;
 366:Core/Src/AB1805.c ****   currPos++;
 367:Core/Src/AB1805.c **** 
 368:Core/Src/AB1805.c ****   *currPos = '/';
 369:Core/Src/AB1805.c ****   currPos++;
 370:Core/Src/AB1805.c **** 
 371:Core/Src/AB1805.c ****   *currPos = ((_year & 0xF0) >> 4) + 0x30;
 372:Core/Src/AB1805.c ****   currPos++;
 373:Core/Src/AB1805.c ****   *currPos = (_year & 0x0F) + 0x30;
 374:Core/Src/AB1805.c ****   currPos++;
 375:Core/Src/AB1805.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 8


 376:Core/Src/AB1805.c ****   *currPos = ' ';
 377:Core/Src/AB1805.c ****   currPos++;
 378:Core/Src/AB1805.c **** 
 379:Core/Src/AB1805.c ****   *currPos = ((_hour & 0xF0) >> 4) + 0x30;
 380:Core/Src/AB1805.c ****   currPos++;
 381:Core/Src/AB1805.c ****   *currPos = (_hour & 0x0F) + 0x30;
 382:Core/Src/AB1805.c ****   currPos++;
 383:Core/Src/AB1805.c **** 
 384:Core/Src/AB1805.c ****   *currPos = ':';
 385:Core/Src/AB1805.c ****   currPos++;
 386:Core/Src/AB1805.c **** 
 387:Core/Src/AB1805.c ****   *currPos = ((_minute & 0xF0) >> 4) + 0x30;
 388:Core/Src/AB1805.c ****   currPos++;
 389:Core/Src/AB1805.c ****   *currPos = (_minute & 0x0F) + 0x30;
 390:Core/Src/AB1805.c ****   currPos++;
 391:Core/Src/AB1805.c **** 
 392:Core/Src/AB1805.c ****   *currPos = ':';
 393:Core/Src/AB1805.c ****   currPos++;
 394:Core/Src/AB1805.c **** 
 395:Core/Src/AB1805.c ****   *currPos = ((_second & 0xF0) >> 4) + 0x30;
 396:Core/Src/AB1805.c ****   currPos++;
 397:Core/Src/AB1805.c ****   *currPos = (_second & 0x0F) + 0x30;
 398:Core/Src/AB1805.c ****   currPos++;
 399:Core/Src/AB1805.c **** 
 400:Core/Src/AB1805.c ****   *currPos = ' ';
 401:Core/Src/AB1805.c ****   currPos++;
 402:Core/Src/AB1805.c **** 
 403:Core/Src/AB1805.c ****   *currPos = ((_hundredth & 0xF0) >> 4) + 0x30;
 404:Core/Src/AB1805.c ****   currPos++;
 405:Core/Src/AB1805.c ****   *currPos = (_hundredth & 0x0F) + 0x30;
 406:Core/Src/AB1805.c ****   currPos++;
 407:Core/Src/AB1805.c **** 
 408:Core/Src/AB1805.c ****   return data_time_string;
 409:Core/Src/AB1805.c **** }
 410:Core/Src/AB1805.c **** 
 411:Core/Src/AB1805.c **** uint8_t dec_hex(uint8_t tens, uint8_t digits)
 412:Core/Src/AB1805.c **** {
 413:Core/Src/AB1805.c ****   uint8_t ret;
 414:Core/Src/AB1805.c ****   ret = (tens << 4) + digits;
 415:Core/Src/AB1805.c ****   return ret;
 416:Core/Src/AB1805.c **** }
 417:Core/Src/AB1805.c **** 
 418:Core/Src/AB1805.c **** uint8_t hex_dec(uint8_t hex)
 419:Core/Src/AB1805.c **** {
 420:Core/Src/AB1805.c ****   uint8_t ret;
 421:Core/Src/AB1805.c ****   ret = ((hex >> 4) & 0xF * 10) + (hex & 0xF);
 422:Core/Src/AB1805.c ****   return ret;
 423:Core/Src/AB1805.c **** }
 424:Core/Src/AB1805.c **** 
 425:Core/Src/AB1805.c **** // status
 426:Core/Src/AB1805.c **** uint8_t get_status(void)
 427:Core/Src/AB1805.c **** {
 428:Core/Src/AB1805.c ****   _status = get_rtc_data(STATU_REGISTER, STATUS_READ_ALL_MASK);
 429:Core/Src/AB1805.c ****   return _status;
 430:Core/Src/AB1805.c **** }
 431:Core/Src/AB1805.c **** 
 432:Core/Src/AB1805.c **** uint8_t get_CB_status(void)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 9


 433:Core/Src/AB1805.c **** {
 434:Core/Src/AB1805.c ****   get_status();
 435:Core/Src/AB1805.c ****   return (_status & (STATUS_CB_MASK > 7));
 436:Core/Src/AB1805.c **** };
 437:Core/Src/AB1805.c **** 
 438:Core/Src/AB1805.c **** uint8_t get_BAT_status(void)
 439:Core/Src/AB1805.c **** {
 440:Core/Src/AB1805.c ****   get_status();
 441:Core/Src/AB1805.c ****   return (_status & (STATUS_BAT_MASK > 6));
 442:Core/Src/AB1805.c **** };
 443:Core/Src/AB1805.c **** 
 444:Core/Src/AB1805.c **** uint8_t get_WDT_status(void)
 445:Core/Src/AB1805.c **** {
 446:Core/Src/AB1805.c ****   get_status();
 447:Core/Src/AB1805.c ****   return (_status & (STATUS_WDT_MASK > 5));
 448:Core/Src/AB1805.c **** };
 449:Core/Src/AB1805.c **** 
 450:Core/Src/AB1805.c **** uint8_t get_BL_status(void)
 451:Core/Src/AB1805.c **** {
 452:Core/Src/AB1805.c ****   get_status();
 453:Core/Src/AB1805.c ****   return (_status & (STATUS_BL_MASK > 4));
 454:Core/Src/AB1805.c **** };
 455:Core/Src/AB1805.c **** 
 456:Core/Src/AB1805.c **** uint8_t get_TIM_status(void)
 457:Core/Src/AB1805.c **** {
 458:Core/Src/AB1805.c ****   get_status();
 459:Core/Src/AB1805.c ****   return (_status & (STATUS_TIM_MASK > 3));
 460:Core/Src/AB1805.c **** };
 461:Core/Src/AB1805.c **** 
 462:Core/Src/AB1805.c **** uint8_t get_ALM_status(void)
 463:Core/Src/AB1805.c **** {
 464:Core/Src/AB1805.c ****   get_status();
 465:Core/Src/AB1805.c ****   return (_status & (STATUS_ALM_MASK > 2));
 466:Core/Src/AB1805.c **** };
 467:Core/Src/AB1805.c **** 
 468:Core/Src/AB1805.c **** uint8_t get_EX2_status(void)
 469:Core/Src/AB1805.c **** {
 470:Core/Src/AB1805.c ****   get_status();
 471:Core/Src/AB1805.c ****   return (_status & (STATUS_EX2_MASK > 1));
 472:Core/Src/AB1805.c **** };
 473:Core/Src/AB1805.c **** 
 474:Core/Src/AB1805.c **** uint8_t get_EX1_status(void)
 475:Core/Src/AB1805.c **** {
 476:Core/Src/AB1805.c ****   get_status();
 477:Core/Src/AB1805.c ****   return (_status & (STATUS_EX1_MASK));
 478:Core/Src/AB1805.c **** };
 479:Core/Src/AB1805.c **** 
 480:Core/Src/AB1805.c **** uint8_t clean_CB_status(void)
 481:Core/Src/AB1805.c **** {
 482:Core/Src/AB1805.c ****   uint8_t c1;
 483:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 484:Core/Src/AB1805.c ****   c1 &= ~STATUS_CB_MASK;
 485:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 486:Core/Src/AB1805.c ****   return 1;
 487:Core/Src/AB1805.c **** }
 488:Core/Src/AB1805.c **** 
 489:Core/Src/AB1805.c **** uint8_t clean_BAT_status(void)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 10


 490:Core/Src/AB1805.c **** {
 491:Core/Src/AB1805.c ****   uint8_t c1;
 492:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 493:Core/Src/AB1805.c ****   c1 &= ~STATUS_BAT_MASK;
 494:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 495:Core/Src/AB1805.c ****   return 1;
 496:Core/Src/AB1805.c **** }
 497:Core/Src/AB1805.c **** 
 498:Core/Src/AB1805.c **** uint8_t clean_WDT_status(void)
 499:Core/Src/AB1805.c **** {
 500:Core/Src/AB1805.c ****   uint8_t c1;
 501:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 502:Core/Src/AB1805.c ****   c1 &= ~STATUS_WDT_MASK;
 503:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 504:Core/Src/AB1805.c ****   return 1;
 505:Core/Src/AB1805.c **** }
 506:Core/Src/AB1805.c **** 
 507:Core/Src/AB1805.c **** uint8_t clean_BL_status(void)
 508:Core/Src/AB1805.c **** {
 509:Core/Src/AB1805.c ****   uint8_t c1;
 510:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 511:Core/Src/AB1805.c ****   c1 &= ~STATUS_BL_MASK;
 512:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 513:Core/Src/AB1805.c ****   return 1;
 514:Core/Src/AB1805.c **** }
 515:Core/Src/AB1805.c **** 
 516:Core/Src/AB1805.c **** uint8_t clean_TIM_status(void)
 517:Core/Src/AB1805.c **** {
 518:Core/Src/AB1805.c ****   uint8_t c1;
 519:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 520:Core/Src/AB1805.c ****   c1 &= ~STATUS_TIM_MASK;
 521:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 522:Core/Src/AB1805.c ****   return 1;
 523:Core/Src/AB1805.c **** }
 524:Core/Src/AB1805.c **** 
 525:Core/Src/AB1805.c **** uint8_t clean_ALM_status(void)
 526:Core/Src/AB1805.c **** {
 527:Core/Src/AB1805.c ****   uint8_t c1;
 528:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 529:Core/Src/AB1805.c ****   c1 &= ~STATUS_ALM_MASK;
 530:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 531:Core/Src/AB1805.c ****   return 1;
 532:Core/Src/AB1805.c **** }
 533:Core/Src/AB1805.c **** 
 534:Core/Src/AB1805.c **** uint8_t clean_EX2_status(void)
 535:Core/Src/AB1805.c **** {
 536:Core/Src/AB1805.c ****   uint8_t c1;
 537:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 538:Core/Src/AB1805.c ****   c1 &= ~STATUS_EX2_MASK;
 539:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 540:Core/Src/AB1805.c ****   return 1;
 541:Core/Src/AB1805.c **** }
 542:Core/Src/AB1805.c **** 
 543:Core/Src/AB1805.c **** uint8_t clean_EX1_status(void)
 544:Core/Src/AB1805.c **** {
 545:Core/Src/AB1805.c ****   uint8_t c1;
 546:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 11


 547:Core/Src/AB1805.c ****   c1 &= ~STATUS_EX1_MASK;
 548:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 549:Core/Src/AB1805.c ****   return 1;
 550:Core/Src/AB1805.c **** }
 551:Core/Src/AB1805.c **** 
 552:Core/Src/AB1805.c **** // set func
 553:Core/Src/AB1805.c **** uint8_t set_control1(uint8_t value)
 554:Core/Src/AB1805.c **** {
 555:Core/Src/AB1805.c ****   write_rtc_register(CONTROL1_REGISTER, value);
 556:Core/Src/AB1805.c ****   _control1 = read_rtc_register(CONTROL1_REGISTER);
 557:Core/Src/AB1805.c ****   return _control1;
 558:Core/Src/AB1805.c **** }
 559:Core/Src/AB1805.c **** 
 560:Core/Src/AB1805.c **** uint8_t set_1224(uint8_t value)
 561:Core/Src/AB1805.c **** {
 562:Core/Src/AB1805.c ****   uint8_t c1;
 563:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL1_REGISTER);
 564:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_1224_MASK;
 565:Core/Src/AB1805.c ****   if (value)
 566:Core/Src/AB1805.c ****   {
 567:Core/Src/AB1805.c ****     c1 |= CONTROL1_1224_MASK;
 568:Core/Src/AB1805.c ****   }
 569:Core/Src/AB1805.c ****   write_rtc_register(CONTROL1_REGISTER, c1);
 570:Core/Src/AB1805.c ****   return 1;
 571:Core/Src/AB1805.c **** }
 572:Core/Src/AB1805.c **** 
 573:Core/Src/AB1805.c **** uint8_t set_RSP(uint8_t value)
 574:Core/Src/AB1805.c **** {
 575:Core/Src/AB1805.c ****   uint8_t c1;
 576:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL1_REGISTER);
 577:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_RSP_MASK;
 578:Core/Src/AB1805.c ****   if (value)
 579:Core/Src/AB1805.c ****   {
 580:Core/Src/AB1805.c ****     c1 |= CONTROL1_RSP_MASK;
 581:Core/Src/AB1805.c ****   }
 582:Core/Src/AB1805.c ****   write_rtc_register(CONTROL1_REGISTER, c1);
 583:Core/Src/AB1805.c ****   return 1;
 584:Core/Src/AB1805.c **** }
 585:Core/Src/AB1805.c **** 
 586:Core/Src/AB1805.c **** uint8_t set_ARST(uint8_t value)
 587:Core/Src/AB1805.c **** {
 588:Core/Src/AB1805.c ****   uint8_t c1;
 589:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL1_REGISTER);
 590:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_ARST_MASK;
 591:Core/Src/AB1805.c ****   if (value)
 592:Core/Src/AB1805.c ****   {
 593:Core/Src/AB1805.c ****     c1 |= CONTROL1_ARST_MASK;
 594:Core/Src/AB1805.c ****   }
 595:Core/Src/AB1805.c ****   write_rtc_register(CONTROL1_REGISTER, c1);
 596:Core/Src/AB1805.c ****   return 1;
 597:Core/Src/AB1805.c **** }
 598:Core/Src/AB1805.c **** 
 599:Core/Src/AB1805.c **** uint8_t set_PWR2(uint8_t value)
 600:Core/Src/AB1805.c **** {
 601:Core/Src/AB1805.c ****   uint8_t c1;
 602:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL1_REGISTER);
 603:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_PWR2_MASK;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 12


 604:Core/Src/AB1805.c ****   if (value)
 605:Core/Src/AB1805.c ****   {
 606:Core/Src/AB1805.c ****     c1 |= CONTROL1_PWR2_MASK;
 607:Core/Src/AB1805.c ****   }
 608:Core/Src/AB1805.c ****   write_rtc_register(CONTROL1_REGISTER, c1);
 609:Core/Src/AB1805.c ****   return 1;
 610:Core/Src/AB1805.c **** }
 611:Core/Src/AB1805.c **** 
 612:Core/Src/AB1805.c **** uint8_t set_WRTC(uint8_t value)
 613:Core/Src/AB1805.c **** {
 614:Core/Src/AB1805.c ****   uint8_t c1;
 615:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL1_REGISTER);
 616:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_WRTC_MASK;
 617:Core/Src/AB1805.c ****   if (value)
 618:Core/Src/AB1805.c ****   {
 619:Core/Src/AB1805.c ****     c1 |= CONTROL1_WRTC_MASK;
 620:Core/Src/AB1805.c ****   }
 621:Core/Src/AB1805.c ****   write_rtc_register(CONTROL1_REGISTER, c1);
 622:Core/Src/AB1805.c ****   return 1;
 623:Core/Src/AB1805.c **** }
 624:Core/Src/AB1805.c **** 
 625:Core/Src/AB1805.c **** // interrupt
 626:Core/Src/AB1805.c **** uint8_t get_interrupt(void)
 627:Core/Src/AB1805.c **** {
 628:Core/Src/AB1805.c ****   _interrupt = read_rtc_register(INT_MASK_REGISTER);
 629:Core/Src/AB1805.c ****   return _interrupt;
 630:Core/Src/AB1805.c **** }
 631:Core/Src/AB1805.c **** 
 632:Core/Src/AB1805.c **** uint8_t get_BLIE_interrupt(void)
 633:Core/Src/AB1805.c **** {
 634:Core/Src/AB1805.c ****   get_status();
 635:Core/Src/AB1805.c ****   return (_interrupt & (STATUS_BL_MASK > 4));
 636:Core/Src/AB1805.c **** };
 637:Core/Src/AB1805.c **** 
 638:Core/Src/AB1805.c **** uint8_t get_TIE_interrupt(void)
 639:Core/Src/AB1805.c **** {
 640:Core/Src/AB1805.c ****   get_status();
 641:Core/Src/AB1805.c ****   return (_interrupt & (STATUS_TIM_MASK > 3));
 642:Core/Src/AB1805.c **** };
 643:Core/Src/AB1805.c **** 
 644:Core/Src/AB1805.c **** uint8_t get_AIE_interrupt(void)
 645:Core/Src/AB1805.c **** {
 646:Core/Src/AB1805.c ****   get_status();
 647:Core/Src/AB1805.c ****   return (_interrupt & (STATUS_ALM_MASK > 2));
 648:Core/Src/AB1805.c **** };
 649:Core/Src/AB1805.c **** 
 650:Core/Src/AB1805.c **** uint8_t get_EX2E_interrupt(void)
 651:Core/Src/AB1805.c **** {
 652:Core/Src/AB1805.c ****   get_status();
 653:Core/Src/AB1805.c ****   return (_interrupt & (STATUS_EX2_MASK > 1));
 654:Core/Src/AB1805.c **** };
 655:Core/Src/AB1805.c **** 
 656:Core/Src/AB1805.c **** uint8_t get_EX1E_interrupt(void)
 657:Core/Src/AB1805.c **** {
 658:Core/Src/AB1805.c ****   get_status();
 659:Core/Src/AB1805.c ****   return (_interrupt & (STATUS_EX1_MASK));
 660:Core/Src/AB1805.c **** };
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 13


 661:Core/Src/AB1805.c **** 
 662:Core/Src/AB1805.c **** uint8_t set_interrupt(uint8_t value)
 663:Core/Src/AB1805.c **** {
 664:Core/Src/AB1805.c ****   write_rtc_register(INT_MASK_REGISTER, value);
 665:Core/Src/AB1805.c ****   _interrupt = read_rtc_register(INT_MASK_REGISTER);
 666:Core/Src/AB1805.c ****   return _interrupt;
 667:Core/Src/AB1805.c **** }
 668:Core/Src/AB1805.c **** 
 669:Core/Src/AB1805.c **** uint8_t set_BLIE_interrupt(uint8_t value)
 670:Core/Src/AB1805.c **** {
 671:Core/Src/AB1805.c ****   uint8_t c1;
 672:Core/Src/AB1805.c ****   c1 = read_rtc_register(INT_MASK_REGISTER);
 673:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_BLIE_MASK;
 674:Core/Src/AB1805.c ****   if (value)
 675:Core/Src/AB1805.c ****   {
 676:Core/Src/AB1805.c ****     c1 |= INTERRUPT_BLIE_MASK;
 677:Core/Src/AB1805.c ****   }
 678:Core/Src/AB1805.c ****   write_rtc_register(INT_MASK_REGISTER, c1);
 679:Core/Src/AB1805.c ****   return 1;
 680:Core/Src/AB1805.c **** }
 681:Core/Src/AB1805.c **** 
 682:Core/Src/AB1805.c **** uint8_t set_TIE_interrupt(uint8_t value)
 683:Core/Src/AB1805.c **** {
 684:Core/Src/AB1805.c ****   uint8_t c1;
 685:Core/Src/AB1805.c ****   c1 = read_rtc_register(INT_MASK_REGISTER);
 686:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_TIE_MASK;
 687:Core/Src/AB1805.c ****   if (value)
 688:Core/Src/AB1805.c ****   {
 689:Core/Src/AB1805.c ****     c1 |= INTERRUPT_TIE_MASK;
 690:Core/Src/AB1805.c ****   }
 691:Core/Src/AB1805.c ****   write_rtc_register(INT_MASK_REGISTER, c1);
 692:Core/Src/AB1805.c ****   return 1;
 693:Core/Src/AB1805.c **** }
 694:Core/Src/AB1805.c **** 
 695:Core/Src/AB1805.c **** uint8_t set_AIE_interrupt(uint8_t value)
 696:Core/Src/AB1805.c **** {
 697:Core/Src/AB1805.c ****   uint8_t c1;
 698:Core/Src/AB1805.c ****   c1 = read_rtc_register(INT_MASK_REGISTER);
 699:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_AIE_MASK;
 700:Core/Src/AB1805.c ****   if (value)
 701:Core/Src/AB1805.c ****   {
 702:Core/Src/AB1805.c ****     c1 |= INTERRUPT_AIE_MASK;
 703:Core/Src/AB1805.c ****   }
 704:Core/Src/AB1805.c ****   write_rtc_register(INT_MASK_REGISTER, c1);
 705:Core/Src/AB1805.c ****   return 1;
 706:Core/Src/AB1805.c **** }
 707:Core/Src/AB1805.c **** 
 708:Core/Src/AB1805.c **** uint8_t set_EX1E_interrupt(uint8_t value)
 709:Core/Src/AB1805.c **** {
 710:Core/Src/AB1805.c ****   uint8_t c1;
 711:Core/Src/AB1805.c ****   c1 = read_rtc_register(INT_MASK_REGISTER);
 712:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_EX1E_MASK;
 713:Core/Src/AB1805.c ****   if (value)
 714:Core/Src/AB1805.c ****   {
 715:Core/Src/AB1805.c ****     c1 |= INTERRUPT_EX1E_MASK;
 716:Core/Src/AB1805.c ****   }
 717:Core/Src/AB1805.c ****   write_rtc_register(INT_MASK_REGISTER, c1);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 14


 718:Core/Src/AB1805.c ****   return 1;
 719:Core/Src/AB1805.c **** }
 720:Core/Src/AB1805.c **** 
 721:Core/Src/AB1805.c **** uint8_t set_EX2E_interrupt(uint8_t value)
 722:Core/Src/AB1805.c **** {
 723:Core/Src/AB1805.c ****   uint8_t c1;
 724:Core/Src/AB1805.c ****   c1 = read_rtc_register(INT_MASK_REGISTER);
 725:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_EX2E_MASK;
 726:Core/Src/AB1805.c ****   if (value)
 727:Core/Src/AB1805.c ****   {
 728:Core/Src/AB1805.c ****     c1 |= INTERRUPT_EX2E_MASK;
 729:Core/Src/AB1805.c ****   }
 730:Core/Src/AB1805.c ****   write_rtc_register(INT_MASK_REGISTER, c1);
 731:Core/Src/AB1805.c ****   return 1;
 732:Core/Src/AB1805.c **** }
 733:Core/Src/AB1805.c **** 
 734:Core/Src/AB1805.c **** // control2
 735:Core/Src/AB1805.c **** uint8_t get_control2(void)
 736:Core/Src/AB1805.c **** {
 737:Core/Src/AB1805.c ****   _control2 = read_rtc_register(CONTROL2_REGISTER);
 738:Core/Src/AB1805.c ****   return _control2;
 739:Core/Src/AB1805.c **** }
 740:Core/Src/AB1805.c **** 
 741:Core/Src/AB1805.c **** uint8_t get_RS1E_control2(void)
 742:Core/Src/AB1805.c **** {
 743:Core/Src/AB1805.c ****   get_control2();
 744:Core/Src/AB1805.c ****   return (_control2 & (CONTROL2_RS1E_MASK > 5));
 745:Core/Src/AB1805.c **** };
 746:Core/Src/AB1805.c **** 
 747:Core/Src/AB1805.c **** uint8_t get_OUT2S_control2(void)
 748:Core/Src/AB1805.c **** {
 749:Core/Src/AB1805.c ****   get_control2();
 750:Core/Src/AB1805.c ****   return (_control2 & (CONTROL2_OUT2S_MASK > 2));
 751:Core/Src/AB1805.c **** };
 752:Core/Src/AB1805.c **** 
 753:Core/Src/AB1805.c **** uint8_t get_OUT1S_control2(void)
 754:Core/Src/AB1805.c **** {
 755:Core/Src/AB1805.c ****   get_control2();
 756:Core/Src/AB1805.c ****   return (_control2 & (CONTROL2_OUT1S_MASK));
 757:Core/Src/AB1805.c **** };
 758:Core/Src/AB1805.c **** 
 759:Core/Src/AB1805.c **** uint8_t set_control2(uint8_t value)
 760:Core/Src/AB1805.c **** {
 761:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, value);
 762:Core/Src/AB1805.c ****   _control2 = read_rtc_register(CONTROL2_REGISTER);
 763:Core/Src/AB1805.c ****   return _control2;
 764:Core/Src/AB1805.c **** }
 765:Core/Src/AB1805.c **** 
 766:Core/Src/AB1805.c **** uint8_t set_RS1E_control2(uint8_t value)
 767:Core/Src/AB1805.c **** {
 768:Core/Src/AB1805.c ****   uint8_t c1;
 769:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL2_REGISTER);
 770:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_RS1E_MASK;
 771:Core/Src/AB1805.c ****   if (value)
 772:Core/Src/AB1805.c ****   {
 773:Core/Src/AB1805.c ****     c1 |= CONTROL2_RS1E_MASK;
 774:Core/Src/AB1805.c ****   }
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 15


 775:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, c1);
 776:Core/Src/AB1805.c ****   return c1;
 777:Core/Src/AB1805.c **** }
 778:Core/Src/AB1805.c **** 
 779:Core/Src/AB1805.c **** uint8_t set_OUT2S_control2(uint8_t value)
 780:Core/Src/AB1805.c **** {
 781:Core/Src/AB1805.c ****   uint8_t c1;
 782:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL2_REGISTER);
 783:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_OUT2S_MASK;
 784:Core/Src/AB1805.c ****   c1 |= (value << 2) & CONTROL2_OUT2S_MASK;
 785:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, c1);
 786:Core/Src/AB1805.c ****   return c1;
 787:Core/Src/AB1805.c **** }
 788:Core/Src/AB1805.c **** 
 789:Core/Src/AB1805.c **** uint8_t set_OUT1S_control2(uint8_t value)
 790:Core/Src/AB1805.c **** {
 791:Core/Src/AB1805.c ****   uint8_t c1;
 792:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL2_REGISTER);
 793:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_OUT1S_MASK;
 794:Core/Src/AB1805.c ****   c1 |= (value)&CONTROL2_OUT1S_MASK;
 795:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, c1);
 796:Core/Src/AB1805.c ****   return c1;
 797:Core/Src/AB1805.c **** }
 798:Core/Src/AB1805.c **** 
 799:Core/Src/AB1805.c **** // sleep mode
 800:Core/Src/AB1805.c **** uint8_t get_sleep(void)
 801:Core/Src/AB1805.c **** {
 802:Core/Src/AB1805.c ****   _sleep_mode = read_rtc_register(SLEEP_CONTROL_REGISTER);
 803:Core/Src/AB1805.c ****   return _sleep_mode;
 804:Core/Src/AB1805.c **** }
 805:Core/Src/AB1805.c **** 
 806:Core/Src/AB1805.c **** uint8_t get_SLP_sleep(void)
 807:Core/Src/AB1805.c **** {
 808:Core/Src/AB1805.c ****   get_sleep();
 809:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_SLP_MASK > 7));
 810:Core/Src/AB1805.c **** };
 811:Core/Src/AB1805.c **** 
 812:Core/Src/AB1805.c **** uint8_t get_SLRES_sleep(void)
 813:Core/Src/AB1805.c **** {
 814:Core/Src/AB1805.c ****   get_sleep();
 815:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_SLRES_MASK > 6));
 816:Core/Src/AB1805.c **** };
 817:Core/Src/AB1805.c **** 
 818:Core/Src/AB1805.c **** uint8_t get_EX2P_sleep(void)
 819:Core/Src/AB1805.c **** {
 820:Core/Src/AB1805.c ****   get_sleep();
 821:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_EX2P_MASK > 5));
 822:Core/Src/AB1805.c **** };
 823:Core/Src/AB1805.c **** 
 824:Core/Src/AB1805.c **** uint8_t get_EX1P_sleep(void)
 825:Core/Src/AB1805.c **** {
 826:Core/Src/AB1805.c ****   get_sleep();
 827:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_EX1P_MASK > 4));
 828:Core/Src/AB1805.c **** };
 829:Core/Src/AB1805.c **** 
 830:Core/Src/AB1805.c **** uint8_t get_SLST_sleep(void)
 831:Core/Src/AB1805.c **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 16


 832:Core/Src/AB1805.c ****   get_sleep();
 833:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_SLST_MASK > 3));
 834:Core/Src/AB1805.c **** };
 835:Core/Src/AB1805.c **** 
 836:Core/Src/AB1805.c **** uint8_t get_SLTO_sleep(void)
 837:Core/Src/AB1805.c **** {
 838:Core/Src/AB1805.c ****   get_sleep();
 839:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_SLTO_MASK));
 840:Core/Src/AB1805.c **** };
 841:Core/Src/AB1805.c **** 
 842:Core/Src/AB1805.c **** uint8_t set_sleep(uint8_t value)
 843:Core/Src/AB1805.c **** {
 844:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, value);
 845:Core/Src/AB1805.c ****   _sleep_mode = read_rtc_register(SLEEP_CONTROL_REGISTER);
 846:Core/Src/AB1805.c ****   return _sleep_mode;
 847:Core/Src/AB1805.c **** }
 848:Core/Src/AB1805.c **** 
 849:Core/Src/AB1805.c **** uint8_t set_SLP_sleep(uint8_t value)
 850:Core/Src/AB1805.c **** {
 851:Core/Src/AB1805.c ****   uint8_t c1;
 852:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 853:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLP_MASK;
 854:Core/Src/AB1805.c ****   if (value)
 855:Core/Src/AB1805.c ****   {
 856:Core/Src/AB1805.c ****     c1 |= SLEEP_CONTROL_SLP_MASK;
 857:Core/Src/AB1805.c ****   }
 858:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 859:Core/Src/AB1805.c ****   return c1;
 860:Core/Src/AB1805.c **** }
 861:Core/Src/AB1805.c **** 
 862:Core/Src/AB1805.c **** uint8_t set_SLRES_sleep(uint8_t value)
 863:Core/Src/AB1805.c **** {
 864:Core/Src/AB1805.c ****   uint8_t c1;
 865:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 866:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLRES_MASK;
 867:Core/Src/AB1805.c ****   if (value)
 868:Core/Src/AB1805.c ****   {
 869:Core/Src/AB1805.c ****     c1 |= SLEEP_CONTROL_SLRES_MASK;
 870:Core/Src/AB1805.c ****   }
 871:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 872:Core/Src/AB1805.c ****   return c1;
 873:Core/Src/AB1805.c **** }
 874:Core/Src/AB1805.c **** 
 875:Core/Src/AB1805.c **** uint8_t set_EX2P_sleep(uint8_t value)
 876:Core/Src/AB1805.c **** {
 877:Core/Src/AB1805.c ****   uint8_t c1;
 878:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 879:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_EX2P_MASK;
 880:Core/Src/AB1805.c ****   if (value)
 881:Core/Src/AB1805.c ****   {
 882:Core/Src/AB1805.c ****     c1 |= SLEEP_CONTROL_EX2P_MASK;
 883:Core/Src/AB1805.c ****   }
 884:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 885:Core/Src/AB1805.c ****   return c1;
 886:Core/Src/AB1805.c **** }
 887:Core/Src/AB1805.c **** 
 888:Core/Src/AB1805.c **** uint8_t set_EX1P_sleep(uint8_t value)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 17


 889:Core/Src/AB1805.c **** {
 890:Core/Src/AB1805.c ****   uint8_t c1;
 891:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 892:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_EX1P_MASK;
 893:Core/Src/AB1805.c ****   if (value)
 894:Core/Src/AB1805.c ****   {
 895:Core/Src/AB1805.c ****     c1 |= SLEEP_CONTROL_EX1P_MASK;
 896:Core/Src/AB1805.c ****   }
 897:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 898:Core/Src/AB1805.c ****   return c1;
 899:Core/Src/AB1805.c **** }
 900:Core/Src/AB1805.c **** 
 901:Core/Src/AB1805.c **** uint8_t clean_SLST_sleep(void)
 902:Core/Src/AB1805.c **** {
 903:Core/Src/AB1805.c ****   uint8_t c1;
 904:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 905:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLST_MASK;
 906:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 907:Core/Src/AB1805.c ****   return c1;
 908:Core/Src/AB1805.c **** }
 909:Core/Src/AB1805.c **** 
 910:Core/Src/AB1805.c **** uint8_t set_SLTO_sleep(uint8_t value)
 911:Core/Src/AB1805.c **** {
 912:Core/Src/AB1805.c ****   uint8_t c1;
 913:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 914:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLTO_MASK;
 915:Core/Src/AB1805.c ****   c1 |= value;
 916:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 917:Core/Src/AB1805.c ****   return c1;
 918:Core/Src/AB1805.c **** }
 919:Core/Src/AB1805.c **** 
 920:Core/Src/AB1805.c **** // countdown control
 921:Core/Src/AB1805.c **** uint8_t get_time_control(void)
 922:Core/Src/AB1805.c **** {
 923:Core/Src/AB1805.c ****   _timer_control_mode = read_rtc_register(TIMER_CONTROL_REGISTER);
 924:Core/Src/AB1805.c ****   return _timer_control_mode;
 925:Core/Src/AB1805.c **** }
 926:Core/Src/AB1805.c **** 
 927:Core/Src/AB1805.c **** uint8_t get_TE_time_control(void)
 928:Core/Src/AB1805.c **** {
 929:Core/Src/AB1805.c ****   get_time_control();
 930:Core/Src/AB1805.c ****   return (_timer_control_mode & (TIMER_CONTROL_TE_MASK > 7));
 931:Core/Src/AB1805.c **** };
 932:Core/Src/AB1805.c **** 
 933:Core/Src/AB1805.c **** uint8_t get_TM_time_control(void)
 934:Core/Src/AB1805.c **** {
 935:Core/Src/AB1805.c ****   get_time_control();
 936:Core/Src/AB1805.c ****   return (_timer_control_mode & (TIMER_CONTROL_TM_MASK > 6));
 937:Core/Src/AB1805.c **** };
 938:Core/Src/AB1805.c **** 
 939:Core/Src/AB1805.c **** uint8_t get_TRPT_time_control(void)
 940:Core/Src/AB1805.c **** {
 941:Core/Src/AB1805.c ****   get_time_control();
 942:Core/Src/AB1805.c ****   return (_timer_control_mode & (TIMER_CONTROL_TRPT_MASK > 5));
 943:Core/Src/AB1805.c **** };
 944:Core/Src/AB1805.c **** 
 945:Core/Src/AB1805.c **** uint8_t get_RPT_time_control(void)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 18


 946:Core/Src/AB1805.c **** {
 947:Core/Src/AB1805.c ****   get_time_control();
 948:Core/Src/AB1805.c ****   return (_timer_control_mode & (TIMER_CONTROL_RPT_MASK > 2));
 949:Core/Src/AB1805.c **** };
 950:Core/Src/AB1805.c **** 
 951:Core/Src/AB1805.c **** uint8_t get_TFS_time_control(void)
 952:Core/Src/AB1805.c **** {
 953:Core/Src/AB1805.c ****   get_time_control();
 954:Core/Src/AB1805.c ****   return (_timer_control_mode & (TIMER_CONTROL_TFS_MASK));
 955:Core/Src/AB1805.c **** };
 956:Core/Src/AB1805.c **** 
 957:Core/Src/AB1805.c **** uint8_t set_time_control(uint8_t value)
 958:Core/Src/AB1805.c **** {
 959:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, value);
 960:Core/Src/AB1805.c ****   _timer_control_mode = read_rtc_register(TIMER_CONTROL_REGISTER);
 961:Core/Src/AB1805.c ****   return _timer_control_mode;
 962:Core/Src/AB1805.c **** }
 963:Core/Src/AB1805.c **** 
 964:Core/Src/AB1805.c **** uint8_t set_TE_time_control(uint8_t value)
 965:Core/Src/AB1805.c **** {
 966:Core/Src/AB1805.c ****   uint8_t c1;
 967:Core/Src/AB1805.c ****   c1 = read_rtc_register(TIMER_CONTROL_REGISTER);
 968:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TE_MASK;
 969:Core/Src/AB1805.c ****   if (value)
 970:Core/Src/AB1805.c ****   {
 971:Core/Src/AB1805.c ****     c1 |= TIMER_CONTROL_TE_MASK;
 972:Core/Src/AB1805.c ****   }
 973:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
 974:Core/Src/AB1805.c ****   return c1;
 975:Core/Src/AB1805.c **** }
 976:Core/Src/AB1805.c **** 
 977:Core/Src/AB1805.c **** uint8_t set_TM_time_control(uint8_t value)
 978:Core/Src/AB1805.c **** {
 979:Core/Src/AB1805.c ****   uint8_t c1;
 980:Core/Src/AB1805.c ****   c1 = read_rtc_register(TIMER_CONTROL_REGISTER);
 981:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TM_MASK;
 982:Core/Src/AB1805.c ****   if (value)
 983:Core/Src/AB1805.c ****   {
 984:Core/Src/AB1805.c ****     c1 |= TIMER_CONTROL_TM_MASK;
 985:Core/Src/AB1805.c ****   }
 986:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
 987:Core/Src/AB1805.c ****   return c1;
 988:Core/Src/AB1805.c **** }
 989:Core/Src/AB1805.c **** 
 990:Core/Src/AB1805.c **** uint8_t set_TRPT_time_control(uint8_t value)
 991:Core/Src/AB1805.c **** {
 992:Core/Src/AB1805.c ****   uint8_t c1;
 993:Core/Src/AB1805.c ****   c1 = read_rtc_register(TIMER_CONTROL_REGISTER);
 994:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TRPT_MASK;
 995:Core/Src/AB1805.c ****   if (value)
 996:Core/Src/AB1805.c ****   {
 997:Core/Src/AB1805.c ****     c1 |= TIMER_CONTROL_TRPT_MASK;
 998:Core/Src/AB1805.c ****   }
 999:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
1000:Core/Src/AB1805.c ****   return c1;
1001:Core/Src/AB1805.c **** }
1002:Core/Src/AB1805.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 19


1003:Core/Src/AB1805.c **** uint8_t set_RPT_time_control(uint8_t value)
1004:Core/Src/AB1805.c **** {
1005:Core/Src/AB1805.c ****   uint8_t c1;
1006:Core/Src/AB1805.c ****   c1 = read_rtc_register(TIMER_CONTROL_REGISTER);
1007:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_RPT_MASK;
1008:Core/Src/AB1805.c ****   c1 |= (value << 2) & TIMER_CONTROL_RPT_MASK;
1009:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
1010:Core/Src/AB1805.c ****   return c1;
1011:Core/Src/AB1805.c **** }
1012:Core/Src/AB1805.c **** 
1013:Core/Src/AB1805.c **** uint8_t set_TFS_time_control(uint8_t value)
1014:Core/Src/AB1805.c **** {
1015:Core/Src/AB1805.c ****   uint8_t c1;
1016:Core/Src/AB1805.c ****   c1 = read_rtc_register(TIMER_CONTROL_REGISTER);
1017:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TFS_MASK;
1018:Core/Src/AB1805.c ****   c1 |= value;
1019:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
1020:Core/Src/AB1805.c ****   return c1;
1021:Core/Src/AB1805.c **** }
1022:Core/Src/AB1805.c **** 
1023:Core/Src/AB1805.c **** // outcontrol registers
1024:Core/Src/AB1805.c **** uint8_t get_outcontrol(void)
1025:Core/Src/AB1805.c **** {
1026:Core/Src/AB1805.c ****   _outcontrol = read_rtc_register(OCTRL_REGISTER);
1027:Core/Src/AB1805.c ****   return _outcontrol;
1028:Core/Src/AB1805.c **** }
1029:Core/Src/AB1805.c **** 
1030:Core/Src/AB1805.c **** uint8_t get_outcontrol_mask(uint8_t mask)
1031:Core/Src/AB1805.c **** {
1032:Core/Src/AB1805.c ****   uint8_t ret;
1033:Core/Src/AB1805.c ****   ret = get_outcontrol() & mask;
1034:Core/Src/AB1805.c ****   switch (mask)
1035:Core/Src/AB1805.c ****   {
1036:Core/Src/AB1805.c ****   case OCTRL_WDBM_MASK:
1037:Core/Src/AB1805.c ****     ret = ret >> 7;
1038:Core/Src/AB1805.c ****     break;
1039:Core/Src/AB1805.c ****   case OCTRL_EXBM_MASK:
1040:Core/Src/AB1805.c ****     ret = ret >> 6;
1041:Core/Src/AB1805.c ****     break;
1042:Core/Src/AB1805.c ****   case OCTRL_WDDS_MASK:
1043:Core/Src/AB1805.c ****     ret = ret >> 5;
1044:Core/Src/AB1805.c ****     break;
1045:Core/Src/AB1805.c ****   case OCTRL_EXDS_MASK:
1046:Core/Src/AB1805.c ****     ret = ret >> 4;
1047:Core/Src/AB1805.c ****     break;
1048:Core/Src/AB1805.c ****   case OCTRL_RSEN_MASK:
1049:Core/Src/AB1805.c ****     ret = ret >> 3;
1050:Core/Src/AB1805.c ****     break;
1051:Core/Src/AB1805.c ****   case OCTRL_O4EN_MASK:
1052:Core/Src/AB1805.c ****     ret = ret >> 2;
1053:Core/Src/AB1805.c ****     break;
1054:Core/Src/AB1805.c ****   case OCTRL_O3EN_MASK:
1055:Core/Src/AB1805.c ****     ret = ret >> 1;
1056:Core/Src/AB1805.c ****     break;
1057:Core/Src/AB1805.c ****   case OCTRL_O1EN_MASK:
1058:Core/Src/AB1805.c ****     ret = ret;
1059:Core/Src/AB1805.c ****     break;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 20


1060:Core/Src/AB1805.c ****   default:
1061:Core/Src/AB1805.c ****     ret = _outcontrol;
1062:Core/Src/AB1805.c ****   }
1063:Core/Src/AB1805.c ****   return ret;
1064:Core/Src/AB1805.c **** }
1065:Core/Src/AB1805.c **** 
1066:Core/Src/AB1805.c **** uint8_t set_outcontrol_value(uint8_t value)
1067:Core/Src/AB1805.c **** {
1068:Core/Src/AB1805.c ****   write_rtc_register(OCTRL_REGISTER, value);
1069:Core/Src/AB1805.c ****   _outcontrol = read_rtc_register(OCTRL_REGISTER);
1070:Core/Src/AB1805.c ****   return _outcontrol;
1071:Core/Src/AB1805.c **** }
1072:Core/Src/AB1805.c **** 
1073:Core/Src/AB1805.c **** uint8_t set_outcontrol_value_mask(uint8_t value, uint8_t mask)
1074:Core/Src/AB1805.c **** {
1075:Core/Src/AB1805.c ****   uint8_t c1;
1076:Core/Src/AB1805.c ****   uint32_t primask_bit = utils_enter_critical_section();
1077:Core/Src/AB1805.c **** 
1078:Core/Src/AB1805.c ****   c1 = get_outcontrol();
1079:Core/Src/AB1805.c ****   switch (mask)
1080:Core/Src/AB1805.c ****   {
1081:Core/Src/AB1805.c ****   case OCTRL_WDBM_MASK:
1082:Core/Src/AB1805.c ****     c1 &= ~OCTRL_WDBM_MASK;
1083:Core/Src/AB1805.c ****     c1 |= (value << 7) & OCTRL_WDBM_MASK;
1084:Core/Src/AB1805.c ****     break;
1085:Core/Src/AB1805.c ****   case OCTRL_EXBM_MASK:
1086:Core/Src/AB1805.c ****     c1 &= ~OCTRL_EXBM_MASK;
1087:Core/Src/AB1805.c ****     c1 |= (value << 6) & OCTRL_EXBM_MASK;
1088:Core/Src/AB1805.c ****     break;
1089:Core/Src/AB1805.c ****   case OCTRL_WDDS_MASK:
1090:Core/Src/AB1805.c ****     c1 &= ~OCTRL_WDDS_MASK;
1091:Core/Src/AB1805.c ****     c1 |= (value << 5) & OCTRL_WDDS_MASK;
1092:Core/Src/AB1805.c ****     break;
1093:Core/Src/AB1805.c ****   case OCTRL_EXDS_MASK:
1094:Core/Src/AB1805.c ****     c1 &= ~OCTRL_EXDS_MASK;
1095:Core/Src/AB1805.c ****     c1 |= (value << 4) & OCTRL_EXDS_MASK;
1096:Core/Src/AB1805.c ****     break;
1097:Core/Src/AB1805.c ****   case OCTRL_RSEN_MASK:
1098:Core/Src/AB1805.c ****     c1 &= ~OCTRL_RSEN_MASK;
1099:Core/Src/AB1805.c ****     c1 |= (value << 3) & OCTRL_RSEN_MASK;
1100:Core/Src/AB1805.c ****     break;
1101:Core/Src/AB1805.c ****   case OCTRL_O4EN_MASK:
1102:Core/Src/AB1805.c ****     c1 &= ~OCTRL_O4EN_MASK;
1103:Core/Src/AB1805.c ****     c1 |= (value << 2) & OCTRL_O4EN_MASK;
1104:Core/Src/AB1805.c ****     break;
1105:Core/Src/AB1805.c ****   case OCTRL_O3EN_MASK:
1106:Core/Src/AB1805.c ****     c1 &= ~OCTRL_O3EN_MASK;
1107:Core/Src/AB1805.c ****     c1 |= (value << 1) & OCTRL_O3EN_MASK;
1108:Core/Src/AB1805.c ****     break;
1109:Core/Src/AB1805.c ****   case OCTRL_O1EN_MASK:
1110:Core/Src/AB1805.c ****     c1 &= ~OCTRL_O1EN_MASK;
1111:Core/Src/AB1805.c ****     c1 |= (value)&OCTRL_O1EN_MASK;
1112:Core/Src/AB1805.c ****     break;
1113:Core/Src/AB1805.c ****   case CCTRL_SLEEP_MODE_MASK:
1114:Core/Src/AB1805.c ****     // special mode for sleep mode, to Avoiding Unexpected Leakage Paths
1115:Core/Src/AB1805.c ****     c1 &= ~CCTRL_SLEEP_MODE_MASK;
1116:Core/Src/AB1805.c ****     c1 |= (value)&CCTRL_SLEEP_MODE_MASK;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 21


1117:Core/Src/AB1805.c ****   default:
1118:Core/Src/AB1805.c ****     c1 = value;
1119:Core/Src/AB1805.c ****   }
1120:Core/Src/AB1805.c ****   return set_outcontrol_value(c1);
1121:Core/Src/AB1805.c ****   utils_exit_critical_section(primask_bit);
1122:Core/Src/AB1805.c **** }
1123:Core/Src/AB1805.c **** 
1124:Core/Src/AB1805.c **** // OSC control registers
1125:Core/Src/AB1805.c **** uint8_t get_osc_control(void)
1126:Core/Src/AB1805.c **** {
1127:Core/Src/AB1805.c ****   _osc_control = read_rtc_register(OSC_CONTROL_REGISTER);
1128:Core/Src/AB1805.c ****   return _osc_control;
1129:Core/Src/AB1805.c **** }
1130:Core/Src/AB1805.c **** 
1131:Core/Src/AB1805.c **** uint8_t get_osc_control_mask(uint8_t mask)
1132:Core/Src/AB1805.c **** {
1133:Core/Src/AB1805.c ****   uint8_t ret;
1134:Core/Src/AB1805.c ****   ret = get_osc_control() & mask;
1135:Core/Src/AB1805.c ****   switch (mask)
1136:Core/Src/AB1805.c ****   {
1137:Core/Src/AB1805.c ****   case OSC_CONTROL_OSEL_MASK:
1138:Core/Src/AB1805.c ****     ret = ret >> 7;
1139:Core/Src/AB1805.c ****     break;
1140:Core/Src/AB1805.c ****   case OSC_CONTROL_ACAL_MASK:
1141:Core/Src/AB1805.c ****     ret = ret >> 5;
1142:Core/Src/AB1805.c ****     break;
1143:Core/Src/AB1805.c ****   case OSC_CONTROL_AOS_MASK:
1144:Core/Src/AB1805.c ****     ret = ret >> 4;
1145:Core/Src/AB1805.c ****     break;
1146:Core/Src/AB1805.c ****   case OSC_CONTROL_FOS_MASK:
1147:Core/Src/AB1805.c ****     ret = ret >> 3;
1148:Core/Src/AB1805.c ****     break;
1149:Core/Src/AB1805.c ****   case OSC_CONTROL_PWGT_MASK:
1150:Core/Src/AB1805.c ****     ret = ret >> 2;
1151:Core/Src/AB1805.c ****     break;
1152:Core/Src/AB1805.c ****   case OSC_CONTROL_OFIE_MASK:
1153:Core/Src/AB1805.c ****     ret = ret >> 1;
1154:Core/Src/AB1805.c ****     break;
1155:Core/Src/AB1805.c ****   case OSC_CONTROL_ACIE_MASK:
1156:Core/Src/AB1805.c ****     ret = ret;
1157:Core/Src/AB1805.c ****     break;
1158:Core/Src/AB1805.c ****   default:
1159:Core/Src/AB1805.c ****     ret = _osc_control;
1160:Core/Src/AB1805.c ****   }
1161:Core/Src/AB1805.c ****   return ret;
1162:Core/Src/AB1805.c **** }
1163:Core/Src/AB1805.c **** 
1164:Core/Src/AB1805.c **** uint8_t set_osc_control_value(uint8_t value)
1165:Core/Src/AB1805.c **** {
1166:Core/Src/AB1805.c ****   write_rtc_register(OSC_CONTROL_REGISTER, value);
1167:Core/Src/AB1805.c ****   _osc_control = read_rtc_register(OSC_CONTROL_REGISTER);
1168:Core/Src/AB1805.c ****   return _osc_control;
1169:Core/Src/AB1805.c **** }
1170:Core/Src/AB1805.c **** 
1171:Core/Src/AB1805.c **** uint8_t set_osc_control_value_mask(uint8_t value, uint8_t mask)
1172:Core/Src/AB1805.c **** {
1173:Core/Src/AB1805.c ****   uint8_t c1;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 22


1174:Core/Src/AB1805.c ****   c1 = get_osc_control();
1175:Core/Src/AB1805.c ****   switch (mask)
1176:Core/Src/AB1805.c ****   {
1177:Core/Src/AB1805.c ****   case OSC_CONTROL_OSEL_MASK:
1178:Core/Src/AB1805.c ****     c1 &= ~OSC_CONTROL_OSEL_MASK;
1179:Core/Src/AB1805.c ****     c1 |= (value << 7) & OSC_CONTROL_OSEL_MASK;
1180:Core/Src/AB1805.c ****     break;
1181:Core/Src/AB1805.c ****   case OSC_CONTROL_ACAL_MASK:
1182:Core/Src/AB1805.c ****     c1 &= ~OSC_CONTROL_ACAL_MASK;
1183:Core/Src/AB1805.c ****     c1 |= (value << 5) & OSC_CONTROL_ACAL_MASK;
1184:Core/Src/AB1805.c ****     break;
1185:Core/Src/AB1805.c ****   case OSC_CONTROL_AOS_MASK:
1186:Core/Src/AB1805.c ****     c1 &= ~OSC_CONTROL_AOS_MASK;
1187:Core/Src/AB1805.c ****     c1 |= (value << 4) & OSC_CONTROL_AOS_MASK;
1188:Core/Src/AB1805.c ****     break;
1189:Core/Src/AB1805.c ****   case OSC_CONTROL_FOS_MASK:
1190:Core/Src/AB1805.c ****     c1 &= ~OSC_CONTROL_FOS_MASK;
1191:Core/Src/AB1805.c ****     c1 |= (value << 3) & OSC_CONTROL_FOS_MASK;
1192:Core/Src/AB1805.c ****     break;
1193:Core/Src/AB1805.c ****   case OSC_CONTROL_PWGT_MASK:
1194:Core/Src/AB1805.c ****     c1 &= ~OSC_CONTROL_PWGT_MASK;
1195:Core/Src/AB1805.c ****     c1 |= (value << 2) & OSC_CONTROL_PWGT_MASK;
1196:Core/Src/AB1805.c ****     break;
1197:Core/Src/AB1805.c ****   case OSC_CONTROL_OFIE_MASK:
1198:Core/Src/AB1805.c ****     c1 &= ~OSC_CONTROL_OFIE_MASK;
1199:Core/Src/AB1805.c ****     c1 |= (value << 1) & OSC_CONTROL_OFIE_MASK;
1200:Core/Src/AB1805.c ****     break;
1201:Core/Src/AB1805.c ****   case OSC_CONTROL_ACIE_MASK:
1202:Core/Src/AB1805.c ****     c1 &= ~OSC_CONTROL_ACIE_MASK;
1203:Core/Src/AB1805.c ****     c1 |= (value)&OSC_CONTROL_ACIE_MASK;
1204:Core/Src/AB1805.c ****     break;
1205:Core/Src/AB1805.c ****   default:
1206:Core/Src/AB1805.c ****     c1 = value;
1207:Core/Src/AB1805.c ****   }
1208:Core/Src/AB1805.c ****   return set_osc_control_value(c1);
1209:Core/Src/AB1805.c **** }
1210:Core/Src/AB1805.c **** 
1211:Core/Src/AB1805.c **** // WDT register
1212:Core/Src/AB1805.c **** uint8_t get_WDT_register(void)
1213:Core/Src/AB1805.c **** {
1214:Core/Src/AB1805.c ****   _wdt_register = read_rtc_register(WDT_REGISTER);
1215:Core/Src/AB1805.c ****   return _wdt_register;
1216:Core/Src/AB1805.c **** }
1217:Core/Src/AB1805.c **** 
1218:Core/Src/AB1805.c **** uint8_t get_WDT_register_mask(uint8_t mask)
1219:Core/Src/AB1805.c **** {
1220:Core/Src/AB1805.c ****   uint8_t ret;
1221:Core/Src/AB1805.c ****   ret = get_WDT_register() & mask;
1222:Core/Src/AB1805.c ****   switch (mask)
1223:Core/Src/AB1805.c ****   {
1224:Core/Src/AB1805.c ****   case WDT_REGISTER_WDS_MASK:
1225:Core/Src/AB1805.c ****     ret = ret >> 7;
1226:Core/Src/AB1805.c ****     break;
1227:Core/Src/AB1805.c ****   case WDT_REGISTER_BMB_MASK:
1228:Core/Src/AB1805.c ****     ret = ret >> 2;
1229:Core/Src/AB1805.c ****     break;
1230:Core/Src/AB1805.c ****   case WDT_REGISTER_WRB_MASK:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 23


1231:Core/Src/AB1805.c ****     ret = ret;
1232:Core/Src/AB1805.c ****     break;
1233:Core/Src/AB1805.c ****   default:
1234:Core/Src/AB1805.c ****     ret = _wdt_register;
1235:Core/Src/AB1805.c ****   }
1236:Core/Src/AB1805.c ****   return ret;
1237:Core/Src/AB1805.c **** }
1238:Core/Src/AB1805.c **** 
1239:Core/Src/AB1805.c **** uint8_t set_value(uint8_t value)
1240:Core/Src/AB1805.c **** {
1241:Core/Src/AB1805.c ****   write_rtc_register(WDT_REGISTER, value);
1242:Core/Src/AB1805.c ****   _wdt_register = read_rtc_register(WDT_REGISTER);
1243:Core/Src/AB1805.c ****   return _wdt_register;
1244:Core/Src/AB1805.c **** }
1245:Core/Src/AB1805.c **** 
1246:Core/Src/AB1805.c **** uint8_t set_WDT_register_mask(uint8_t value, uint8_t mask)
1247:Core/Src/AB1805.c **** {
1248:Core/Src/AB1805.c ****   uint8_t c1;
1249:Core/Src/AB1805.c ****   c1 = get_WDT_register();
1250:Core/Src/AB1805.c ****   switch (mask)
1251:Core/Src/AB1805.c ****   {
1252:Core/Src/AB1805.c ****   case WDT_REGISTER_WDS_MASK:
1253:Core/Src/AB1805.c ****     c1 &= ~WDT_REGISTER_WDS_MASK;
1254:Core/Src/AB1805.c ****     c1 |= (value << 7) & WDT_REGISTER_WDS_MASK;
1255:Core/Src/AB1805.c ****     break;
1256:Core/Src/AB1805.c ****   case WDT_REGISTER_BMB_MASK:
1257:Core/Src/AB1805.c ****     c1 &= ~WDT_REGISTER_BMB_MASK;
1258:Core/Src/AB1805.c ****     c1 |= (value << 2) & WDT_REGISTER_BMB_MASK;
1259:Core/Src/AB1805.c ****     break;
1260:Core/Src/AB1805.c ****   case WDT_REGISTER_WRB_MASK:
1261:Core/Src/AB1805.c ****     c1 &= ~WDT_REGISTER_WRB_MASK;
1262:Core/Src/AB1805.c ****     c1 |= (value)&WDT_REGISTER_WRB_MASK;
1263:Core/Src/AB1805.c ****     break;
1264:Core/Src/AB1805.c ****   default:
1265:Core/Src/AB1805.c ****     c1 = value;
1266:Core/Src/AB1805.c ****   }
1267:Core/Src/AB1805.c ****   return set_WDT_register_value(c1);
1268:Core/Src/AB1805.c **** }
1269:Core/Src/AB1805.c **** 
1270:Core/Src/AB1805.c **** // void enter_sleep_mode_PWR(void)
1271:Core/Src/AB1805.c **** // {
1272:Core/Src/AB1805.c **** //   enter_sleep_mode_PWR_value(SLEEP_CONTROL_SLTO_MAX_VALUE);
1273:Core/Src/AB1805.c **** // }
1274:Core/Src/AB1805.c **** 
1275:Core/Src/AB1805.c **** void enter_sleep_mode_PWR_value(uint8_t value)
1276:Core/Src/AB1805.c **** {
1277:Core/Src/AB1805.c ****   if (get_SLST_sleep())
1278:Core/Src/AB1805.c ****   { // clean previous sleep
1279:Core/Src/AB1805.c ****     clean_SLST_sleep();
1280:Core/Src/AB1805.c ****   }
1281:Core/Src/AB1805.c ****   // set OUT2S sleep mode
1282:Core/Src/AB1805.c ****   // the OUT2S field must be set to a value of 6 to select the SLEEP output.
1283:Core/Src/AB1805.c ****   set_OUT2S_control2(CONTROL2_SLEEP_MODE);
1284:Core/Src/AB1805.c **** 
1285:Core/Src/AB1805.c ****   // Avoiding Unexpected Leakage Paths
1286:Core/Src/AB1805.c ****   // clearing the RSEN,O1EN,O4EN,O3EN,EXDS,WDDS bits in output control register
1287:Core/Src/AB1805.c ****   set_outcontrol_value_mask(0, CCTRL_SLEEP_MODE_MASK);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 24


1288:Core/Src/AB1805.c **** 
1289:Core/Src/AB1805.c ****   // The I2C or SPI interface pins are disabled in Sleep Mode by setting the PWGT bit in the Oscill
1290:Core/Src/AB1805.c ****   set_osc_control_value_mask(0, OSC_CONTROL_PWGT_MASK);
1291:Core/Src/AB1805.c **** 
1292:Core/Src/AB1805.c ****   // The number of 7.8 ms periods after SLP is set until the Power Control SM goes into the SLEEP s
1293:Core/Src/AB1805.c ****   set_SLTO_sleep(value);
1294:Core/Src/AB1805.c **** 
1295:Core/Src/AB1805.c ****   // set sleep mode
1296:Core/Src/AB1805.c ****   set_SLP_sleep(1);
1297:Core/Src/AB1805.c **** }
1298:Core/Src/AB1805.c **** 
1299:Core/Src/AB1805.c **** /** Parameter:
1300:Core/Src/AB1805.c ****  *  timeout - minimum timeout period in 7.8 ms periods (0 to 7)
1301:Core/Src/AB1805.c ****  *  mode - sleep mode (nRST modes not available in AM08xx)
1302:Core/Src/AB1805.c ****  *      0 => nRST is pulled low in sleep mode
1303:Core/Src/AB1805.c ****  *      1 => PSW/nIRQ2 is pulled high on a sleep      <-- This one!!!
1304:Core/Src/AB1805.c ****  *      2 => nRST pulled low and PSW/nIRQ2 pulled high on sleep
1305:Core/Src/AB1805.c ****  *  error ?returned value of the attempted sleep command
1306:Core/Src/AB1805.c ****  *      0 => sleep request accepted, sleep mode will be initiated in timeout seconds
1307:Core/Src/AB1805.c ****  *      1 => illegal input values
1308:Core/Src/AB1805.c ****  *      2 => sleep request declined, interrupt is currently pending
1309:Core/Src/AB1805.c ****  *      3 => sleep request declined, no sleep trigger interrupt enabled
1310:Core/Src/AB1805.c ****  **/
1311:Core/Src/AB1805.c **** uint8_t enter_sleep_mode(uint8_t timeout, uint8_t mode)
1312:Core/Src/AB1805.c **** {
1313:Core/Src/AB1805.c ****   uint8_t ret = 0;
1314:Core/Src/AB1805.c ****   uint8_t slres = 0;
1315:Core/Src/AB1805.c ****   char temp = 0;
1316:Core/Src/AB1805.c **** 
1317:Core/Src/AB1805.c **** #ifdef DEBUG_SIO
1318:Core/Src/AB1805.c ****   temp = get_SLST_sleep(); // Get SLST bit (temp & 0x08)
1319:Core/Src/AB1805.c **** 
1320:Core/Src/AB1805.c ****   if ((temp) == 0)
1321:Core/Src/AB1805.c ****   {
1322:Core/Src/AB1805.c ****     printf("\r\nPrevious Sleep Failed");
1323:Core/Src/AB1805.c ****   }
1324:Core/Src/AB1805.c ****   else
1325:Core/Src/AB1805.c ****   {
1326:Core/Src/AB1805.c ****     printf("\r\nPrevious Sleep Successful");
1327:Core/Src/AB1805.c ****   }
1328:Core/Src/AB1805.c ****   clean_SLST_sleep(); // Clear SLST
1329:Core/Src/AB1805.c **** 
1330:Core/Src/AB1805.c ****   temp = get_SLST_sleep(); // Get SLST bit (temp & 0x08)
1331:Core/Src/AB1805.c **** 
1332:Core/Src/AB1805.c ****   if ((temp) == 0)
1333:Core/Src/AB1805.c ****   {
1334:Core/Src/AB1805.c ****     printf("\r\nClear Succ");
1335:Core/Src/AB1805.c ****   }
1336:Core/Src/AB1805.c ****   else
1337:Core/Src/AB1805.c ****   {
1338:Core/Src/AB1805.c ****     printf("\r\nClear Fail");
1339:Core/Src/AB1805.c ****   }
1340:Core/Src/AB1805.c ****   clean_SLST_sleep(); // Clear SLST
1341:Core/Src/AB1805.c **** #endif
1342:Core/Src/AB1805.c **** 
1343:Core/Src/AB1805.c ****   if (mode > 0)
1344:Core/Src/AB1805.c ****   {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 25


1345:Core/Src/AB1805.c ****     /* Sleep to PSW/nIRQ2 */
1346:Core/Src/AB1805.c ****     temp = get_OUT2S_control2(); // Read OUT2S
1347:Core/Src/AB1805.c ****     temp = (temp & 0xE3) | 0x18; // MUST NOT WRITE OUT2S WITH 000
1348:Core/Src/AB1805.c ****     set_OUT2S_control2(temp);    // Write value to OUT2S
1349:Core/Src/AB1805.c ****     slres = 0;
1350:Core/Src/AB1805.c ****   }
1351:Core/Src/AB1805.c **** 
1352:Core/Src/AB1805.c ****   temp = timeout | (slres << 6) | 0x80; // Assemble SLEEP register value
1353:Core/Src/AB1805.c ****   set_sleep(temp);                      // Write to the register
1354:Core/Src/AB1805.c **** 
1355:Core/Src/AB1805.c **** #ifdef DEBUG_SIO
1356:Core/Src/AB1805.c ****   /* Determine if SLEEP was accepted */
1357:Core/Src/AB1805.c ****   temp = get_SLP_sleep(); // Get SLP bit (temp & 0x80)
1358:Core/Src/AB1805.c **** 
1359:Core/Src/AB1805.c ****   if ((temp) == 0)
1360:Core/Src/AB1805.c ****   {
1361:Core/Src/AB1805.c ****     char reg_wdi_value = 0;
1362:Core/Src/AB1805.c ****     /* SLEEP did not happen - determine why and return reason. */
1363:Core/Src/AB1805.c ****     temp = get_interrupt(); // Get status register interrupt enables
1364:Core/Src/AB1805.c ****     reg_wdi_value = get_WDT_register();
1365:Core/Src/AB1805.c ****     if (((temp & 0x0F) == 0) & (((reg_wdi_value & 0x7C) == 0) || ((reg_wdi_value & 0x80) == 0x80)))
1366:Core/Src/AB1805.c ****     {
1367:Core/Src/AB1805.c ****       ret = 3;
1368:Core/Src/AB1805.c ****       printf("\r\nNo trigger interrupts enabled");
1369:Core/Src/AB1805.c ****     }
1370:Core/Src/AB1805.c ****     else
1371:Core/Src/AB1805.c ****     {
1372:Core/Src/AB1805.c ****       ret = 2;
1373:Core/Src/AB1805.c ****       printf("\r\nInterrupt pending");
1374:Core/Src/AB1805.c ****     }
1375:Core/Src/AB1805.c ****   }
1376:Core/Src/AB1805.c ****   else
1377:Core/Src/AB1805.c ****   {
1378:Core/Src/AB1805.c ****     ret = 0;
1379:Core/Src/AB1805.c ****     printf("\r\nSLEEP request successful");
1380:Core/Src/AB1805.c ****   }
1381:Core/Src/AB1805.c **** #endif
1382:Core/Src/AB1805.c ****   return ret;
1383:Core/Src/AB1805.c **** }
1384:Core/Src/AB1805.c **** 
1385:Core/Src/AB1805.c **** // *********************************__________ MY_____________**********************
1386:Core/Src/AB1805.c **** inline static uint8_t SPI1_SendByte(uint8_t data)
1387:Core/Src/AB1805.c **** {
  26              		.loc 1 1387 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              		.loc 1 1387 1 is_stmt 0 view .LVU1
  33 0000 01E0     		b	.L3
  34              	.LVL1:
  35              	.L2:
1388:Core/Src/AB1805.c ****   while (LL_SPI_IsActiveFlag_TXE(SPI1) == RESET)
  36              		.loc 1 1388 40 view .LVU2
  37 0002 002B     		cmp	r3, #0
  38 0004 08D1     		bne	.L6
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 26


  39              	.L3:
  40              		.loc 1 1388 40 is_stmt 1 discriminator 1 view .LVU3
  41              	.LVL2:
  42              	.LBB42:
  43              	.LBI42:
  44              		.file 2 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h"
   1:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
   2:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   ******************************************************************************
   3:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @file    stm32u0xx_ll_spi.h
   4:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @author  MCD Application Team
   5:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief   Header file of SPI LL module.
   6:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   ******************************************************************************
   7:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @attention
   8:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *
   9:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * Copyright (c) 2023 STMicroelectronics.
  10:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * All rights reserved.
  11:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *
  12:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * in the root directory of this software component.
  14:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *
  16:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   ******************************************************************************
  17:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
  18:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  19:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #ifndef STM32U0xx_LL_SPI_H
  21:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define STM32U0xx_LL_SPI_H
  22:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  23:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #ifdef __cplusplus
  24:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** extern "C" {
  25:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #endif
  26:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  27:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #include "stm32u0xx.h"
  29:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  30:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @addtogroup STM32U0xx_LL_Driver
  31:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
  32:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
  33:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  34:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #if defined (SPI1) || defined (SPI2) || defined (SPI3)
  35:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  36:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL SPI
  37:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
  38:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
  39:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  40:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Private macros ------------------------------------------------------------*/
  43:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  44:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Exported types ------------------------------------------------------------*/
  45:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #if defined(USE_FULL_LL_DRIVER)
  46:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_ES_INIT SPI Exported Init structure
  47:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
  48:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
  49:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  50:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
  51:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  SPI Init structures definition
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 27


  52:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
  53:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** typedef struct
  54:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
  55:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t TransferDirection;       /*!< Specifies the SPI unidirectional or bidirectional data mod
  56:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_TRANSFER_M
  57:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  58:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  59:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  60:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t Mode;                    /*!< Specifies the SPI mode (Master/Slave).
  61:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_MODE.
  62:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  63:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  64:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  65:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t DataWidth;               /*!< Specifies the SPI data width.
  66:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_DATAWIDTH.
  67:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  68:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  69:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  70:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t ClockPolarity;           /*!< Specifies the serial clock steady state.
  71:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_POLARITY.
  72:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  73:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  74:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  75:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t ClockPhase;              /*!< Specifies the clock active edge for the bit capture.
  76:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_PHASE.
  77:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  78:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  79:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  80:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t NSS;                     /*!< Specifies whether the NSS signal is managed by hardware (N
  81:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_NSS_MODE.
  82:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  83:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  84:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  85:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t BaudRate;                /*!< Specifies the BaudRate prescaler value which will be used 
  86:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_BAUDRATEPR
  87:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          @note The communication clock is derived from the master c
  88:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  89:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  90:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  91:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t BitOrder;                /*!< Specifies whether data transfers start from MSB or LSB bit
  92:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_BIT_ORDER.
  93:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  94:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  95:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  96:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t CRCCalculation;          /*!< Specifies if the CRC calculation is enabled or not.
  97:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_CRC_CALCUL
  98:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  99:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
 100:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 101:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t CRCPoly;                 /*!< Specifies the polynomial used for the CRC calculation.
 102:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter must be a number between Min_Data = 0x00 an
 103:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 104:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
 105:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 106:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** } LL_SPI_InitTypeDef;
 107:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 108:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 28


 109:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 110:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 111:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #endif /* USE_FULL_LL_DRIVER */
 112:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 113:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Exported constants --------------------------------------------------------*/
 114:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_Exported_Constants SPI Exported Constants
 115:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 116:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 117:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 118:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_GET_FLAG Get Flags Defines
 119:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief    Flags defines which can be used with LL_SPI_ReadReg function
 120:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 121:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 122:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_RXNE                     SPI_SR_RXNE               /*!< Rx buffer not empty flag 
 123:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_TXE                      SPI_SR_TXE                /*!< Tx buffer empty flag     
 124:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_BSY                      SPI_SR_BSY                /*!< Busy flag                
 125:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_CRCERR                   SPI_SR_CRCERR             /*!< CRC error flag           
 126:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_MODF                     SPI_SR_MODF               /*!< Mode fault flag          
 127:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_OVR                      SPI_SR_OVR                /*!< Overrun flag             
 128:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_FRE                      SPI_SR_FRE                /*!< TI mode frame format erro
 129:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 130:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 131:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 132:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 133:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_IT IT Defines
 134:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief    IT defines which can be used with LL_SPI_ReadReg and  LL_SPI_WriteReg functions
 135:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 136:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 137:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CR2_RXNEIE                  SPI_CR2_RXNEIE            /*!< Rx buffer not empty inter
 138:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CR2_TXEIE                   SPI_CR2_TXEIE             /*!< Tx buffer empty interrupt
 139:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CR2_ERRIE                   SPI_CR2_ERRIE             /*!< Error interrupt enable   
 140:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 141:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 142:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 143:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 144:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_MODE Operation Mode
 145:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 146:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 147:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_MODE_MASTER                 (SPI_CR1_MSTR | SPI_CR1_SSI)    /*!< Master configuratio
 148:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_MODE_SLAVE                  0x00000000U                     /*!< Slave configuration
 149:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 150:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 151:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 152:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 153:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_PROTOCOL Serial Protocol
 154:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 155:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 156:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_PROTOCOL_MOTOROLA           0x00000000U               /*!< Motorola mode. Used as de
 157:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_PROTOCOL_TI                 (SPI_CR2_FRF)             /*!< TI mode                  
 158:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 159:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 160:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 161:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 162:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_PHASE Clock Phase
 163:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 164:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 165:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_PHASE_1EDGE                 0x00000000U               /*!< First clock transition is
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 29


 166:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_PHASE_2EDGE                 (SPI_CR1_CPHA)            /*!< Second clock transition i
 167:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 168:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 169:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 170:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 171:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_POLARITY Clock Polarity
 172:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 173:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 174:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_POLARITY_LOW                0x00000000U               /*!< Clock to 0 when idle */
 175:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_POLARITY_HIGH               (SPI_CR1_CPOL)            /*!< Clock to 1 when idle */
 176:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 177:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 178:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 179:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 180:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_BAUDRATEPRESCALER Baud Rate Prescaler
 181:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 182:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 183:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV2      0x00000000U                                    /*!< Baud
 184:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV4      (SPI_CR1_BR_0)                                 /*!< Baud
 185:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV8      (SPI_CR1_BR_1)                                 /*!< Baud
 186:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV16     (SPI_CR1_BR_1 | SPI_CR1_BR_0)                  /*!< Baud
 187:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV32     (SPI_CR1_BR_2)                                 /*!< Baud
 188:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV64     (SPI_CR1_BR_2 | SPI_CR1_BR_0)                  /*!< Baud
 189:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV128    (SPI_CR1_BR_2 | SPI_CR1_BR_1)                  /*!< Baud
 190:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV256    (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0)   /*!< Baud
 191:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 192:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 193:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 194:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 195:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_BIT_ORDER Transmission Bit Order
 196:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 197:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 198:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_LSB_FIRST                   (SPI_CR1_LSBFIRST)        /*!< Data is transmitted/recei
 199:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_MSB_FIRST                   0x00000000U               /*!< Data is transmitted/recei
 200:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 201:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 202:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 203:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 204:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_TRANSFER_MODE Transfer Mode
 205:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 206:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 207:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_FULL_DUPLEX                 0x00000000U                          /*!< Full-Duplex mo
 208:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SIMPLEX_RX                  (SPI_CR1_RXONLY)                     /*!< Simplex Rx mod
 209:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_HALF_DUPLEX_RX              (SPI_CR1_BIDIMODE)                   /*!< Half-Duplex Rx
 210:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_HALF_DUPLEX_TX              (SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE)  /*!< Half-Duplex Tx
 211:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 212:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 213:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 214:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 215:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_NSS_MODE Slave Select Pin Mode
 216:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 217:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 218:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_NSS_SOFT                    (SPI_CR1_SSM)                     /*!< NSS managed inter
 219:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_NSS_HARD_INPUT              0x00000000U                       /*!< NSS pin used in I
 220:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_NSS_HARD_OUTPUT             (((uint32_t)SPI_CR2_SSOE << 16U)) /*!< NSS pin used in O
 221:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 222:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 30


 223:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 224:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 225:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_DATAWIDTH Datawidth
 226:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 227:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 228:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_4BIT              (SPI_CR2_DS_0 | SPI_CR2_DS_1)                           
 229:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_5BIT              (SPI_CR2_DS_2)                                          
 230:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_6BIT              (SPI_CR2_DS_2 | SPI_CR2_DS_0)                           
 231:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_7BIT              (SPI_CR2_DS_2 | SPI_CR2_DS_1)                           
 232:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_8BIT              (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0)            
 233:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_9BIT              (SPI_CR2_DS_3)                                          
 234:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_10BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_0)                           
 235:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_11BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_1)                           
 236:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_12BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_1 | SPI_CR2_DS_0)            
 237:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_13BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_2)                           
 238:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_14BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_2 | SPI_CR2_DS_0)            
 239:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_15BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_2 | SPI_CR2_DS_1)            
 240:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_16BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS
 241:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 242:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 243:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 244:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #if defined(USE_FULL_LL_DRIVER)
 245:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 246:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_CRC_CALCULATION CRC Calculation
 247:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 248:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 249:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CRCCALCULATION_DISABLE      0x00000000U               /*!< CRC calculation disabled 
 250:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CRCCALCULATION_ENABLE       (SPI_CR1_CRCEN)           /*!< CRC calculation enabled  
 251:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 252:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 253:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 254:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #endif /* USE_FULL_LL_DRIVER */
 255:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 256:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_CRC_LENGTH CRC Length
 257:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 258:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 259:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CRC_8BIT                    0x00000000U               /*!<  8-bit CRC length */
 260:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CRC_16BIT                   (SPI_CR1_CRCL)            /*!< 16-bit CRC length */
 261:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 262:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 263:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 264:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 265:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_RX_FIFO_TH RX FIFO Threshold
 266:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 267:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 268:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_TH_HALF             0x00000000U               /*!< RXNE event is generated i
 269:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_TH_QUARTER          (SPI_CR2_FRXTH)           /*!< RXNE event is generated i
 270:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 271:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 272:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 273:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 274:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_RX_FIFO RX FIFO Level
 275:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 276:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 277:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_EMPTY               0x00000000U                       /*!< FIFO reception em
 278:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_QUARTER_FULL        (SPI_SR_FRLVL_0)                  /*!< FIFO reception 1/
 279:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_HALF_FULL           (SPI_SR_FRLVL_1)                  /*!< FIFO reception 1/
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 31


 280:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_FULL                (SPI_SR_FRLVL_1 | SPI_SR_FRLVL_0) /*!< FIFO reception fu
 281:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 282:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 283:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 284:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 285:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_TX_FIFO TX FIFO Level
 286:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 287:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 288:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_TX_FIFO_EMPTY               0x00000000U                       /*!< FIFO transmission
 289:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_TX_FIFO_QUARTER_FULL        (SPI_SR_FTLVL_0)                  /*!< FIFO transmission
 290:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_TX_FIFO_HALF_FULL           (SPI_SR_FTLVL_1)                  /*!< FIFO transmission
 291:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_TX_FIFO_FULL                (SPI_SR_FTLVL_1 | SPI_SR_FTLVL_0) /*!< FIFO transmission
 292:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 293:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 294:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 295:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 296:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_DMA_PARITY DMA Parity
 297:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 298:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 299:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DMA_PARITY_EVEN             0x00000000U   /*!< Select DMA parity Even */
 300:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DMA_PARITY_ODD              0x00000001U   /*!< Select DMA parity Odd  */
 301:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 302:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 303:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 304:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 305:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 306:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 307:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 308:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 309:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 310:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Exported macro ------------------------------------------------------------*/
 311:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_Exported_Macros SPI Exported Macros
 312:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 313:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 314:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 315:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EM_WRITE_READ Common Write and read registers Macros
 316:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 317:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 318:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 319:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 320:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Write a value in SPI register
 321:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  __INSTANCE__ SPI Instance
 322:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  __REG__ Register to be written
 323:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  __VALUE__ Value to be written in the register
 324:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 325:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 326:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 327:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 328:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 329:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Read a value in SPI register
 330:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  __INSTANCE__ SPI Instance
 331:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  __REG__ Register to be read
 332:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Register value
 333:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 334:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 335:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 336:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 32


 337:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 338:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 339:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 340:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 341:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 342:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 343:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Exported functions --------------------------------------------------------*/
 344:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_Exported_Functions SPI Exported Functions
 345:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 346:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 347:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 348:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EF_Configuration Configuration
 349:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 350:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 351:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 352:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 353:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Enable SPI peripheral
 354:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          SPE           LL_SPI_Enable
 355:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 356:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 357:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 358:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
 359:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 360:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 361:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 362:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 363:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 364:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Disable SPI peripheral
 365:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   When disabling the SPI, follow the procedure described in the Reference Manual.
 366:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          SPE           LL_SPI_Disable
 367:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 368:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 369:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 370:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
 371:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 372:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 373:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 374:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 375:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 376:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Check if SPI peripheral is enabled
 377:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          SPE           LL_SPI_IsEnabled
 378:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 379:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
 380:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 381:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
 382:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 383:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 384:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 385:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 386:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 387:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set SPI operation mode to Master or Slave
 388:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should not be changed when communication is ongoing.
 389:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          MSTR          LL_SPI_SetMode\n
 390:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         CR1          SSI           LL_SPI_SetMode
 391:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 392:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  Mode This parameter can be one of the following values:
 393:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_MODE_MASTER
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 33


 394:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_MODE_SLAVE
 395:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 396:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 397:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
 398:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 399:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 400:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 401:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 402:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 403:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get SPI operation mode (Master or Slave)
 404:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          MSTR          LL_SPI_GetMode\n
 405:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         CR1          SSI           LL_SPI_GetMode
 406:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 407:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 408:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_MODE_MASTER
 409:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_MODE_SLAVE
 410:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 411:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetMode(SPI_TypeDef *SPIx)
 412:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 413:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 414:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 415:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 416:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 417:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set serial protocol used
 418:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should be written only when SPI is disabled (SPE = 0) for correct operation.
 419:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          FRF           LL_SPI_SetStandard
 420:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 421:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  Standard This parameter can be one of the following values:
 422:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
 423:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_PROTOCOL_TI
 424:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 425:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 426:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
 427:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 428:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 429:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 430:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 431:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 432:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get serial protocol used
 433:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          FRF           LL_SPI_GetStandard
 434:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 435:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 436:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
 437:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_PROTOCOL_TI
 438:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 439:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetStandard(SPI_TypeDef *SPIx)
 440:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 441:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR2, SPI_CR2_FRF));
 442:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 443:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 444:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 445:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set clock phase
 446:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should not be changed when communication is ongoing.
 447:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         This bit is not used in SPI TI mode.
 448:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          CPHA          LL_SPI_SetClockPhase
 449:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 450:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  ClockPhase This parameter can be one of the following values:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 34


 451:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_PHASE_1EDGE
 452:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_PHASE_2EDGE
 453:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 454:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 455:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
 456:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 457:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 458:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 459:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 460:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 461:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get clock phase
 462:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          CPHA          LL_SPI_GetClockPhase
 463:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 464:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 465:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_PHASE_1EDGE
 466:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_PHASE_2EDGE
 467:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 468:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetClockPhase(SPI_TypeDef *SPIx)
 469:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 470:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_CPHA));
 471:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 472:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 473:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 474:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set clock polarity
 475:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should not be changed when communication is ongoing.
 476:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         This bit is not used in SPI TI mode.
 477:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          CPOL          LL_SPI_SetClockPolarity
 478:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 479:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 480:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_POLARITY_LOW
 481:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_POLARITY_HIGH
 482:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 483:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 484:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
 485:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 486:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 487:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 488:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 489:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 490:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get clock polarity
 491:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          CPOL          LL_SPI_GetClockPolarity
 492:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 493:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 494:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_POLARITY_LOW
 495:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_POLARITY_HIGH
 496:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 497:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetClockPolarity(SPI_TypeDef *SPIx)
 498:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 499:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_CPOL));
 500:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 501:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 502:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 503:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set baud rate prescaler
 504:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   These bits should not be changed when communication is ongoing. SPI BaudRate = fPCLK/Pr
 505:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          BR            LL_SPI_SetBaudRatePrescaler
 506:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 507:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  BaudRate This parameter can be one of the following values:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 35


 508:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV2
 509:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV4
 510:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV8
 511:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV16
 512:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV32
 513:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV64
 514:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
 515:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
 516:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 517:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 518:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
 519:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 520:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 521:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 522:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 523:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 524:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get baud rate prescaler
 525:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          BR            LL_SPI_GetBaudRatePrescaler
 526:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 527:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 528:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV2
 529:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV4
 530:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV8
 531:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV16
 532:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV32
 533:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV64
 534:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
 535:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
 536:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 537:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetBaudRatePrescaler(SPI_TypeDef *SPIx)
 538:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 539:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_BR));
 540:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 541:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 542:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 543:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set transfer bit order
 544:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should not be changed when communication is ongoing. This bit is not used in S
 545:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          LSBFIRST      LL_SPI_SetTransferBitOrder
 546:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 547:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  BitOrder This parameter can be one of the following values:
 548:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_LSB_FIRST
 549:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_MSB_FIRST
 550:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 551:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 552:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
 553:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 554:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 555:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 556:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 557:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 558:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get transfer bit order
 559:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          LSBFIRST      LL_SPI_GetTransferBitOrder
 560:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 561:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 562:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_LSB_FIRST
 563:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_MSB_FIRST
 564:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 36


 565:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetTransferBitOrder(SPI_TypeDef *SPIx)
 566:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 567:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_LSBFIRST));
 568:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 569:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 570:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 571:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set transfer direction mode
 572:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   For Half-Duplex mode, Rx Direction is set by default.
 573:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         In master mode, the MOSI pin is used and in slave mode, the MISO pin is used for Half-D
 574:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          RXONLY        LL_SPI_SetTransferDirection\n
 575:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         CR1          BIDIMODE      LL_SPI_SetTransferDirection\n
 576:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         CR1          BIDIOE        LL_SPI_SetTransferDirection
 577:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 578:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  TransferDirection This parameter can be one of the following values:
 579:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_FULL_DUPLEX
 580:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_SIMPLEX_RX
 581:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_HALF_DUPLEX_RX
 582:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_HALF_DUPLEX_TX
 583:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 584:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 585:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
 586:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 587:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 588:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 589:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 590:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 591:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get transfer direction mode
 592:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          RXONLY        LL_SPI_GetTransferDirection\n
 593:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         CR1          BIDIMODE      LL_SPI_GetTransferDirection\n
 594:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         CR1          BIDIOE        LL_SPI_GetTransferDirection
 595:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 596:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 597:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_FULL_DUPLEX
 598:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_SIMPLEX_RX
 599:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_HALF_DUPLEX_RX
 600:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_HALF_DUPLEX_TX
 601:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 602:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetTransferDirection(SPI_TypeDef *SPIx)
 603:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 604:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE));
 605:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 606:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 607:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 608:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set frame data width
 609:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          DS            LL_SPI_SetDataWidth
 610:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 611:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  DataWidth This parameter can be one of the following values:
 612:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_4BIT
 613:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_5BIT
 614:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_6BIT
 615:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_7BIT
 616:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_8BIT
 617:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_9BIT
 618:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_10BIT
 619:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_11BIT
 620:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_12BIT
 621:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_13BIT
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 37


 622:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_14BIT
 623:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_15BIT
 624:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_16BIT
 625:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 626:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 627:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
 628:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 629:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 630:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 631:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 632:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 633:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get frame data width
 634:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          DS            LL_SPI_GetDataWidth
 635:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 636:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 637:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_4BIT
 638:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_5BIT
 639:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_6BIT
 640:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_7BIT
 641:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_8BIT
 642:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_9BIT
 643:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_10BIT
 644:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_11BIT
 645:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_12BIT
 646:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_13BIT
 647:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_14BIT
 648:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_15BIT
 649:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DATAWIDTH_16BIT
 650:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 651:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetDataWidth(SPI_TypeDef *SPIx)
 652:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 653:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR2, SPI_CR2_DS));
 654:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 655:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 656:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 657:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set threshold of RXFIFO that triggers an RXNE event
 658:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          FRXTH         LL_SPI_SetRxFIFOThreshold
 659:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 660:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  Threshold This parameter can be one of the following values:
 661:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
 662:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
 663:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 664:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 665:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
 666:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 667:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 668:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 669:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 670:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 671:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get threshold of RXFIFO that triggers an RXNE event
 672:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          FRXTH         LL_SPI_GetRxFIFOThreshold
 673:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 674:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 675:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_RX_FIFO_TH_HALF
 676:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_RX_FIFO_TH_QUARTER
 677:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 678:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetRxFIFOThreshold(SPI_TypeDef *SPIx)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 38


 679:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 680:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR2, SPI_CR2_FRXTH));
 681:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 682:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 683:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 684:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 685:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 686:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 687:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EF_CRC_Management CRC Management
 688:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 689:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 690:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 691:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 692:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Enable CRC
 693:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should be written only when SPI is disabled (SPE = 0) for correct operation.
 694:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          CRCEN         LL_SPI_EnableCRC
 695:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 696:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 697:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 698:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_EnableCRC(SPI_TypeDef *SPIx)
 699:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 700:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   SET_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 701:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 702:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 703:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 704:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Disable CRC
 705:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should be written only when SPI is disabled (SPE = 0) for correct operation.
 706:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          CRCEN         LL_SPI_DisableCRC
 707:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 708:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 709:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 710:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
 711:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 712:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 713:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 714:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 715:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 716:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Check if CRC is enabled
 717:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should be written only when SPI is disabled (SPE = 0) for correct operation.
 718:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          CRCEN         LL_SPI_IsEnabledCRC
 719:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 720:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
 721:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 722:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsEnabledCRC(SPI_TypeDef *SPIx)
 723:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 724:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->CR1, SPI_CR1_CRCEN) == (SPI_CR1_CRCEN)) ? 1UL : 0UL);
 725:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 726:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 727:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 728:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set CRC Length
 729:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should be written only when SPI is disabled (SPE = 0) for correct operation.
 730:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          CRCL          LL_SPI_SetCRCWidth
 731:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 732:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  CRCLength This parameter can be one of the following values:
 733:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_CRC_8BIT
 734:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_CRC_16BIT
 735:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 39


 736:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 737:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetCRCWidth(SPI_TypeDef *SPIx, uint32_t CRCLength)
 738:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 739:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR1, SPI_CR1_CRCL, CRCLength);
 740:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 741:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 742:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 743:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get CRC Length
 744:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          CRCL          LL_SPI_GetCRCWidth
 745:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 746:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 747:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_CRC_8BIT
 748:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_CRC_16BIT
 749:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 750:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetCRCWidth(SPI_TypeDef *SPIx)
 751:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 752:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_CRCL));
 753:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 754:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 755:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 756:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set CRCNext to transfer CRC on the line
 757:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit has to be written as soon as the last data is written in the SPIx_DR register.
 758:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          CRCNEXT       LL_SPI_SetCRCNext
 759:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 760:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 761:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 762:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetCRCNext(SPI_TypeDef *SPIx)
 763:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 764:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   SET_BIT(SPIx->CR1, SPI_CR1_CRCNEXT);
 765:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 766:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 767:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 768:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set polynomial for CRC calculation
 769:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CRCPR        CRCPOLY       LL_SPI_SetCRCPolynomial
 770:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 771:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
 772:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 773:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 774:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
 775:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 776:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 777:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 778:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 779:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 780:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get polynomial for CRC calculation
 781:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CRCPR        CRCPOLY       LL_SPI_GetCRCPolynomial
 782:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 783:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value is a number between Min_Data = 0x00 and Max_Data = 0xFFFF
 784:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 785:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetCRCPolynomial(SPI_TypeDef *SPIx)
 786:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 787:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_REG(SPIx->CRCPR));
 788:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 789:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 790:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 791:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get Rx CRC
 792:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll RXCRCR       RXCRC         LL_SPI_GetRxCRC
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 40


 793:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 794:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value is a number between Min_Data = 0x00 and Max_Data = 0xFFFF
 795:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 796:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetRxCRC(SPI_TypeDef *SPIx)
 797:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 798:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_REG(SPIx->RXCRCR));
 799:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 800:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 801:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 802:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get Tx CRC
 803:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll TXCRCR       TXCRC         LL_SPI_GetTxCRC
 804:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 805:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value is a number between Min_Data = 0x00 and Max_Data = 0xFFFF
 806:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 807:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetTxCRC(SPI_TypeDef *SPIx)
 808:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 809:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_REG(SPIx->TXCRCR));
 810:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 811:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 812:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 813:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 814:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 815:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 816:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EF_NSS_Management Slave Select Pin Management
 817:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 818:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 819:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 820:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 821:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set NSS mode
 822:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   LL_SPI_NSS_SOFT Mode is not used in SPI TI mode.
 823:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          SSM           LL_SPI_SetNSSMode\n
 824:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          SSOE          LL_SPI_SetNSSMode
 825:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 826:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  NSS This parameter can be one of the following values:
 827:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_NSS_SOFT
 828:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_NSS_HARD_INPUT
 829:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
 830:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 831:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 832:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
 833:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 834:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 835:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 836:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 837:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 838:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 839:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get NSS mode
 840:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          SSM           LL_SPI_GetNSSMode\n
 841:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          SSOE          LL_SPI_GetNSSMode
 842:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 843:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 844:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_NSS_SOFT
 845:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_NSS_HARD_INPUT
 846:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
 847:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 848:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetNSSMode(SPI_TypeDef *SPIx)
 849:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 41


 850:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t Ssm  = (READ_BIT(SPIx->CR1, SPI_CR1_SSM));
 851:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t Ssoe = (READ_BIT(SPIx->CR2,  SPI_CR2_SSOE) << 16U);
 852:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (Ssm | Ssoe);
 853:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 854:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 855:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 856:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Enable NSS pulse management
 857:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should not be changed when communication is ongoing. This bit is not used in S
 858:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
 859:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 860:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 861:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 862:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
 863:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 864:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 865:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 866:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 867:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 868:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Disable NSS pulse management
 869:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should not be changed when communication is ongoing. This bit is not used in S
 870:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
 871:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 872:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 873:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 874:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
 875:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 876:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 877:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 878:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 879:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 880:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Check if NSS pulse is enabled
 881:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit should not be changed when communication is ongoing. This bit is not used in S
 882:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          NSSP          LL_SPI_IsEnabledNSSPulse
 883:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 884:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
 885:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 886:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsEnabledNSSPulse(SPI_TypeDef *SPIx)
 887:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 888:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->CR2, SPI_CR2_NSSP) == (SPI_CR2_NSSP)) ? 1UL : 0UL);
 889:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 890:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 891:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 892:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 893:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 894:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 895:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EF_FLAG_Management FLAG Management
 896:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 897:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 898:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 899:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 900:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Check if Rx buffer is not empty
 901:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
 902:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 903:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
 904:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 905:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
 906:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 42


 907:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 908:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 909:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 910:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 911:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Check if Tx buffer is empty
 912:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
 913:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 914:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
 915:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 916:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
  45              		.loc 2 916 26 discriminator 1 view .LVU4
  46              	.LBB43:
 917:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 918:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
  47              		.loc 2 918 3 discriminator 1 view .LVU5
  48              		.loc 2 918 12 is_stmt 0 discriminator 1 view .LVU6
  49 0006 0D4B     		ldr	r3, .L8
  50 0008 9A68     		ldr	r2, [r3, #8]
  51 000a 0221     		movs	r1, #2
  52 000c 0B00     		movs	r3, r1
  53 000e 1340     		ands	r3, r2
  54              		.loc 2 918 66 discriminator 1 view .LVU7
  55 0010 1142     		tst	r1, r2
  56 0012 F6D0     		beq	.L2
  57              		.loc 2 918 66 view .LVU8
  58 0014 0123     		movs	r3, #1
  59 0016 F4E7     		b	.L2
  60              	.LVL3:
  61              	.L6:
  62              		.loc 2 918 66 view .LVU9
  63              	.LBE43:
  64              	.LBE42:
1389:Core/Src/AB1805.c ****     ;
1390:Core/Src/AB1805.c ****   LL_SPI_TransmitData8(SPI1, data);
  65              		.loc 1 1390 3 is_stmt 1 view .LVU10
  66              	.LBB44:
  67              	.LBI44:
 919:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 920:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 921:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 922:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get CRC error flag
 923:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           CRCERR        LL_SPI_IsActiveFlag_CRCERR
 924:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 925:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
 926:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 927:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_CRCERR(SPI_TypeDef *SPIx)
 928:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 929:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->SR, SPI_SR_CRCERR) == (SPI_SR_CRCERR)) ? 1UL : 0UL);
 930:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 931:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 932:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 933:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get mode fault error flag
 934:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           MODF          LL_SPI_IsActiveFlag_MODF
 935:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 936:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
 937:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 938:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_MODF(SPI_TypeDef *SPIx)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 43


 939:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 940:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 941:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 942:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 943:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 944:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get overrun error flag
 945:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           OVR           LL_SPI_IsActiveFlag_OVR
 946:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 947:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
 948:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 949:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
 950:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 951:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 952:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 953:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 954:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 955:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get busy flag
 956:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   The BSY flag is cleared under any one of the following conditions:
 957:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * -When the SPI is correctly disabled
 958:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * -When a fault is detected in Master mode (MODF bit set to 1)
 959:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * -In Master mode, when it finishes a data transmission and no new data is ready to be
 960:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * sent
 961:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * -In Slave mode, when the BSY flag is set to '0' for at least one SPI clock cycle between
 962:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * each data transfer.
 963:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
 964:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 965:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
 966:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 967:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
 968:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 969:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 970:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 971:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 972:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 973:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get frame format error flag
 974:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           FRE           LL_SPI_IsActiveFlag_FRE
 975:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 976:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
 977:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 978:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_FRE(SPI_TypeDef *SPIx)
 979:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 980:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->SR, SPI_SR_FRE) == (SPI_SR_FRE)) ? 1UL : 0UL);
 981:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 982:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 983:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 984:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get FIFO reception Level
 985:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           FRLVL         LL_SPI_GetRxFIFOLevel
 986:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 987:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
 988:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_RX_FIFO_EMPTY
 989:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
 990:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
 991:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_RX_FIFO_FULL
 992:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 993:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
 994:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 995:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 44


 996:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 997:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 998:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 999:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get FIFO Transmission Level
1000:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           FTLVL         LL_SPI_GetTxFIFOLevel
1001:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1002:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
1003:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_TX_FIFO_EMPTY
1004:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
1005:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
1006:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_TX_FIFO_FULL
1007:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1008:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
1009:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1010:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
1011:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1012:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1013:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1014:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Clear CRC error flag
1015:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           CRCERR        LL_SPI_ClearFlag_CRCERR
1016:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1017:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1018:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1019:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_ClearFlag_CRCERR(SPI_TypeDef *SPIx)
1020:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1021:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   CLEAR_BIT(SPIx->SR, SPI_SR_CRCERR);
1022:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1023:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1024:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1025:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Clear mode fault error flag
1026:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   Clearing this flag is done by a read access to the SPIx_SR
1027:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         register followed by a write access to the SPIx_CR1 register
1028:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           MODF          LL_SPI_ClearFlag_MODF
1029:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1030:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1031:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1032:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_ClearFlag_MODF(SPI_TypeDef *SPIx)
1033:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1034:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   __IO uint32_t tmpreg_sr;
1035:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   tmpreg_sr = SPIx->SR;
1036:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   (void) tmpreg_sr;
1037:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
1038:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1039:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1040:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1041:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Clear overrun error flag
1042:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   Clearing this flag is done by a read access to the SPIx_DR
1043:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         register followed by a read access to the SPIx_SR register
1044:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
1045:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1046:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1047:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1048:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
1049:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1050:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   __IO uint32_t tmpreg;
1051:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   tmpreg = SPIx->DR;
1052:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   (void) tmpreg;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 45


1053:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   tmpreg = SPIx->SR;
1054:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   (void) tmpreg;
1055:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1056:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1057:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1058:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Clear frame format error flag
1059:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   Clearing this flag is done by reading SPIx_SR register
1060:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll SR           FRE           LL_SPI_ClearFlag_FRE
1061:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1062:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1063:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1064:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_ClearFlag_FRE(SPI_TypeDef *SPIx)
1065:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1066:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   __IO uint32_t tmpreg;
1067:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   tmpreg = SPIx->SR;
1068:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   (void) tmpreg;
1069:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1070:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1071:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1072:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
1073:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1074:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1075:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EF_IT_Management Interrupt Management
1076:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
1077:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1078:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1079:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1080:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Enable error interrupt
1081:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit controls the generation of an interrupt when an error condition occurs (CRCERR
1082:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          ERRIE         LL_SPI_EnableIT_ERR
1083:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1084:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1085:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1086:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_EnableIT_ERR(SPI_TypeDef *SPIx)
1087:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1088:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
1089:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1090:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1091:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1092:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Enable Rx buffer not empty interrupt
1093:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          RXNEIE        LL_SPI_EnableIT_RXNE
1094:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1095:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1096:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1097:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
1098:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1099:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
1100:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1101:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1102:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1103:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Enable Tx buffer empty interrupt
1104:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          TXEIE         LL_SPI_EnableIT_TXE
1105:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1106:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1107:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1108:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_EnableIT_TXE(SPI_TypeDef *SPIx)
1109:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 46


1110:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
1111:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1112:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1113:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1114:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Disable error interrupt
1115:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @note   This bit controls the generation of an interrupt when an error condition occurs (CRCERR
1116:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          ERRIE         LL_SPI_DisableIT_ERR
1117:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1118:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1119:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1120:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_DisableIT_ERR(SPI_TypeDef *SPIx)
1121:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1122:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
1123:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1124:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1125:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1126:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Disable Rx buffer not empty interrupt
1127:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          RXNEIE        LL_SPI_DisableIT_RXNE
1128:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1129:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1130:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1131:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
1132:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1133:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
1134:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1135:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1136:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1137:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Disable Tx buffer empty interrupt
1138:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          TXEIE         LL_SPI_DisableIT_TXE
1139:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1140:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1141:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1142:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
1143:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1144:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
1145:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1146:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1147:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1148:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Check if error interrupt is enabled
1149:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          ERRIE         LL_SPI_IsEnabledIT_ERR
1150:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1151:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
1152:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1153:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_ERR(SPI_TypeDef *SPIx)
1154:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1155:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->CR2, SPI_CR2_ERRIE) == (SPI_CR2_ERRIE)) ? 1UL : 0UL);
1156:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1157:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1158:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1159:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Check if Rx buffer not empty interrupt is enabled
1160:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          RXNEIE        LL_SPI_IsEnabledIT_RXNE
1161:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1162:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
1163:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1164:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_RXNE(SPI_TypeDef *SPIx)
1165:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1166:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->CR2, SPI_CR2_RXNEIE) == (SPI_CR2_RXNEIE)) ? 1UL : 0UL);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 47


1167:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1168:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1169:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1170:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Check if Tx buffer empty interrupt
1171:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          TXEIE         LL_SPI_IsEnabledIT_TXE
1172:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1173:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
1174:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1175:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsEnabledIT_TXE(SPI_TypeDef *SPIx)
1176:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1177:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->CR2, SPI_CR2_TXEIE) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);
1178:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1179:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1180:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1181:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
1182:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1183:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1184:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EF_DMA_Management DMA Management
1185:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
1186:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1187:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1188:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1189:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Enable DMA Rx
1190:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          RXDMAEN       LL_SPI_EnableDMAReq_RX
1191:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1192:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1193:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1194:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
1195:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1196:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   SET_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
1197:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1198:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1199:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1200:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Disable DMA Rx
1201:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          RXDMAEN       LL_SPI_DisableDMAReq_RX
1202:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1203:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1204:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1205:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_DisableDMAReq_RX(SPI_TypeDef *SPIx)
1206:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1207:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   CLEAR_BIT(SPIx->CR2, SPI_CR2_RXDMAEN);
1208:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1209:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1210:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1211:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Check if DMA Rx is enabled
1212:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          RXDMAEN       LL_SPI_IsEnabledDMAReq_RX
1213:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1214:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
1215:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1216:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsEnabledDMAReq_RX(SPI_TypeDef *SPIx)
1217:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1218:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->CR2, SPI_CR2_RXDMAEN) == (SPI_CR2_RXDMAEN)) ? 1UL : 0UL);
1219:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1220:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1221:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1222:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Enable DMA Tx
1223:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 48


1224:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1225:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1226:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1227:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
1228:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1229:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
1230:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1231:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1232:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1233:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Disable DMA Tx
1234:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          TXDMAEN       LL_SPI_DisableDMAReq_TX
1235:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1236:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1237:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1238:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_DisableDMAReq_TX(SPI_TypeDef *SPIx)
1239:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1240:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
1241:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1242:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1243:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1244:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Check if DMA Tx is enabled
1245:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          TXDMAEN       LL_SPI_IsEnabledDMAReq_TX
1246:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1247:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval State of bit (1 or 0).
1248:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1249:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_IsEnabledDMAReq_TX(SPI_TypeDef *SPIx)
1250:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1251:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return ((READ_BIT(SPIx->CR2, SPI_CR2_TXDMAEN) == (SPI_CR2_TXDMAEN)) ? 1UL : 0UL);
1252:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1253:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1254:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1255:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set parity of  Last DMA reception
1256:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          LDMARX        LL_SPI_SetDMAParity_RX
1257:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1258:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  Parity This parameter can be one of the following values:
1259:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DMA_PARITY_ODD
1260:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DMA_PARITY_EVEN
1261:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1262:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1263:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetDMAParity_RX(SPI_TypeDef *SPIx, uint32_t Parity)
1264:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1265:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR2, SPI_CR2_LDMARX, (Parity << SPI_CR2_LDMARX_Pos));
1266:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1267:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1268:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1269:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get parity configuration for  Last DMA reception
1270:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          LDMARX        LL_SPI_GetDMAParity_RX
1271:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1272:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
1273:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DMA_PARITY_ODD
1274:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DMA_PARITY_EVEN
1275:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1276:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetDMAParity_RX(SPI_TypeDef *SPIx)
1277:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1278:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR2, SPI_CR2_LDMARX) >> SPI_CR2_LDMARX_Pos);
1279:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1280:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 49


1281:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1282:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Set parity of  Last DMA transmission
1283:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          LDMATX        LL_SPI_SetDMAParity_TX
1284:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1285:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  Parity This parameter can be one of the following values:
1286:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DMA_PARITY_ODD
1287:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DMA_PARITY_EVEN
1288:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1289:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1290:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_SetDMAParity_TX(SPI_TypeDef *SPIx, uint32_t Parity)
1291:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1292:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   MODIFY_REG(SPIx->CR2, SPI_CR2_LDMATX, (Parity << SPI_CR2_LDMATX_Pos));
1293:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1294:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1295:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1296:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get parity configuration for Last DMA transmission
1297:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR2          LDMATX        LL_SPI_GetDMAParity_TX
1298:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1299:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Returned value can be one of the following values:
1300:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DMA_PARITY_ODD
1301:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *         @arg @ref LL_SPI_DMA_PARITY_EVEN
1302:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1303:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_GetDMAParity_TX(SPI_TypeDef *SPIx)
1304:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1305:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t)(READ_BIT(SPIx->CR2, SPI_CR2_LDMATX) >> SPI_CR2_LDMATX_Pos);
1306:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1307:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1308:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1309:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Get the data register address used for DMA transfer
1310:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
1311:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1312:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Address of data register
1313:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1314:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
1315:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1316:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint32_t) &(SPIx->DR);
1317:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1318:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1319:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1320:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
1321:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1322:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1323:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EF_DATA_Management DATA Management
1324:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
1325:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1326:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1327:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1328:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Read 8-Bits in the data register
1329:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll DR           DR            LL_SPI_ReceiveData8
1330:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1331:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
1332:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1333:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
1334:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1335:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (*((__IO uint8_t *)&SPIx->DR));
1336:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1337:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 50


1338:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1339:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Read 16-Bits in the data register
1340:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll DR           DR            LL_SPI_ReceiveData16
1341:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1342:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFFFF
1343:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1344:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE uint16_t LL_SPI_ReceiveData16(SPI_TypeDef *SPIx)
1345:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1346:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   return (uint16_t)(READ_REG(SPIx->DR));
1347:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
1348:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
1349:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
1350:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Write 8-Bits in the data register
1351:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll DR           DR            LL_SPI_TransmitData8
1352:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
1353:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
1354:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
1355:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
1356:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
  68              		.loc 2 1356 22 view .LVU11
  69              	.LBB45:
1357:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
1358:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #if defined (__GNUC__)
1359:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  70              		.loc 2 1359 3 view .LVU12
1360:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *spidr = TxData;
  71              		.loc 2 1360 3 view .LVU13
  72              		.loc 2 1360 10 is_stmt 0 view .LVU14
  73 0018 084A     		ldr	r2, .L8
  74 001a 1073     		strb	r0, [r2, #12]
1361:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #else
1362:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *((__IO uint8_t *)&SPIx->DR) = TxData;
1363:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #endif /* __GNUC__ */
1364:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
  75              		.loc 2 1364 1 view .LVU15
  76 001c 01E0     		b	.L5
  77              	.LVL4:
  78              	.L4:
  79              		.loc 2 1364 1 view .LVU16
  80              	.LBE45:
  81              	.LBE44:
1391:Core/Src/AB1805.c **** 
1392:Core/Src/AB1805.c ****   while (LL_SPI_IsActiveFlag_RXNE(SPI1) == RESET)
  82              		.loc 1 1392 41 view .LVU17
  83 001e 0028     		cmp	r0, #0
  84 0020 08D1     		bne	.L7
  85              	.L5:
  86              		.loc 1 1392 41 is_stmt 1 discriminator 1 view .LVU18
  87              	.LVL5:
  88              	.LBB46:
  89              	.LBI46:
 905:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
  90              		.loc 2 905 26 discriminator 1 view .LVU19
  91              	.LBB47:
 907:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
  92              		.loc 2 907 3 discriminator 1 view .LVU20
 907:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 51


  93              		.loc 2 907 12 is_stmt 0 discriminator 1 view .LVU21
  94 0022 064A     		ldr	r2, .L8
  95              	.LVL6:
 907:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
  96              		.loc 2 907 12 discriminator 1 view .LVU22
  97 0024 9268     		ldr	r2, [r2, #8]
  98              	.LVL7:
 907:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
  99              		.loc 2 907 12 discriminator 1 view .LVU23
 100 0026 0121     		movs	r1, #1
 101 0028 0800     		movs	r0, r1
 102 002a 1040     		ands	r0, r2
 907:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 103              		.loc 2 907 68 discriminator 1 view .LVU24
 104 002c 1142     		tst	r1, r2
 105 002e F6D0     		beq	.L4
 907:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 106              		.loc 2 907 68 view .LVU25
 107 0030 1800     		movs	r0, r3
 108 0032 F4E7     		b	.L4
 109              	.LVL8:
 110              	.L7:
 907:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 111              		.loc 2 907 68 view .LVU26
 112              	.LBE47:
 113              	.LBE46:
1393:Core/Src/AB1805.c ****     ;
1394:Core/Src/AB1805.c ****   return LL_SPI_ReceiveData8(SPI1);
 114              		.loc 1 1394 3 is_stmt 1 view .LVU27
 115              	.LBB48:
 116              	.LBI48:
1333:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 117              		.loc 2 1333 25 view .LVU28
 118              	.LBB49:
1335:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 119              		.loc 2 1335 3 view .LVU29
1335:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 120              		.loc 2 1335 11 is_stmt 0 view .LVU30
 121 0034 014B     		ldr	r3, .L8
 122              	.LVL9:
1335:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 123              		.loc 2 1335 11 view .LVU31
 124 0036 187B     		ldrb	r0, [r3, #12]
 125 0038 C0B2     		uxtb	r0, r0
 126              	.LVL10:
1335:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** }
 127              		.loc 2 1335 11 view .LVU32
 128              	.LBE49:
 129              	.LBE48:
1395:Core/Src/AB1805.c **** }
 130              		.loc 1 1395 1 view .LVU33
 131              		@ sp needed
 132 003a 7047     		bx	lr
 133              	.L9:
 134              		.align	2
 135              	.L8:
 136 003c 00300140 		.word	1073819648
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 52


 137              		.cfi_endproc
 138              	.LFE623:
 140              		.section	.text.read_rtc_register,"ax",%progbits
 141              		.align	1
 142              		.syntax unified
 143              		.code	16
 144              		.thumb_func
 146              	read_rtc_register:
 147              	.LVL11:
 148              	.LFB624:
1396:Core/Src/AB1805.c **** 
1397:Core/Src/AB1805.c **** inline static uint8_t read_rtc_register(uint8_t reg_addr)
1398:Core/Src/AB1805.c **** {
 149              		.loc 1 1398 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		.loc 1 1398 1 is_stmt 0 view .LVU35
 154 0000 70B5     		push	{r4, r5, r6, lr}
 155              	.LCFI0:
 156              		.cfi_def_cfa_offset 16
 157              		.cfi_offset 4, -16
 158              		.cfi_offset 5, -12
 159              		.cfi_offset 6, -8
 160              		.cfi_offset 14, -4
 161 0002 0300     		movs	r3, r0
1399:Core/Src/AB1805.c ****   uint8_t val;
 162              		.loc 1 1399 3 is_stmt 1 view .LVU36
1400:Core/Src/AB1805.c ****   uint32_t primask_bit = utils_enter_critical_section();
 163              		.loc 1 1400 3 view .LVU37
 164              	.LBB50:
 165              	.LBI50:
1401:Core/Src/AB1805.c **** 
1402:Core/Src/AB1805.c ****   // #define AB1815_SPI_READ(offset) (127 & offset)		127 - 0x7F
1403:Core/Src/AB1805.c ****   // #define AB1815_SPI_WRITE(offset) (128 | offset)  	128 - 0x80
1404:Core/Src/AB1805.c ****   uint8_t addr = AB1815_SPI_READ(reg_addr);
1405:Core/Src/AB1805.c ****   RTC_L();
1406:Core/Src/AB1805.c ****   SPI1_SendByte(addr);
1407:Core/Src/AB1805.c ****   val = SPI1_SendByte(0x00); // Send DUMMY to read data
1408:Core/Src/AB1805.c ****   RTC_H();
1409:Core/Src/AB1805.c ****   utils_exit_critical_section(primask_bit);
1410:Core/Src/AB1805.c **** 
1411:Core/Src/AB1805.c ****   return val;
1412:Core/Src/AB1805.c **** }
1413:Core/Src/AB1805.c **** 
1414:Core/Src/AB1805.c **** // bool read(uint8_t offset, uint8_t *buf, uint8_t length)
1415:Core/Src/AB1805.c **** // {
1416:Core/Src/AB1805.c **** //   uint8_t address = AB1815_SPI_READ(offset);
1417:Core/Src/AB1805.c **** 
1418:Core/Src/AB1805.c **** //   spi_select_slave(0);
1419:Core/Src/AB1805.c **** 
1420:Core/Src/AB1805.c **** //   unsigned int i = 0;
1421:Core/Src/AB1805.c **** //   if (!((SPI1)->CR1 & SPI_CR1_SPE))
1422:Core/Src/AB1805.c **** //   {
1423:Core/Src/AB1805.c **** //     SPI1->CR1 |= SPI_CR1_SPE;
1424:Core/Src/AB1805.c **** //   }
1425:Core/Src/AB1805.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 53


1426:Core/Src/AB1805.c **** //   SPI1_SendByte(address);
1427:Core/Src/AB1805.c **** //   while (i < length)
1428:Core/Src/AB1805.c **** //   {
1429:Core/Src/AB1805.c **** //     buf[i++] = SPI1_SendByte(0x00); // Send DUMMY to read data
1430:Core/Src/AB1805.c **** //   }
1431:Core/Src/AB1805.c **** 
1432:Core/Src/AB1805.c **** //   spi_select_slave(1);
1433:Core/Src/AB1805.c **** //   return ab1815_status_e_OK;
1434:Core/Src/AB1805.c **** // };
1435:Core/Src/AB1805.c **** 
1436:Core/Src/AB1805.c **** uint8_t write_rtc_register(uint8_t offset, uint8_t buf)
1437:Core/Src/AB1805.c **** {
1438:Core/Src/AB1805.c ****   uint8_t address = AB1815_SPI_WRITE(offset);
1439:Core/Src/AB1805.c ****   uint32_t primask_bit = utils_enter_critical_section();
1440:Core/Src/AB1805.c **** 
1441:Core/Src/AB1805.c ****   spi_select_slave(0);
1442:Core/Src/AB1805.c **** 
1443:Core/Src/AB1805.c ****   if (!((SPI1)->CR1 & SPI_CR1_SPE))
1444:Core/Src/AB1805.c ****   {
1445:Core/Src/AB1805.c ****     SPI1->CR1 |= SPI_CR1_SPE;
1446:Core/Src/AB1805.c ****   }
1447:Core/Src/AB1805.c ****   RTC_L();
1448:Core/Src/AB1805.c ****   SPI1_SendByte(address);
1449:Core/Src/AB1805.c ****   SPI1_SendByte(buf); // Send Data to write
1450:Core/Src/AB1805.c **** 
1451:Core/Src/AB1805.c ****   RTC_H();
1452:Core/Src/AB1805.c ****   utils_exit_critical_section(primask_bit);
1453:Core/Src/AB1805.c ****   return 1;
1454:Core/Src/AB1805.c **** };
1455:Core/Src/AB1805.c **** 
1456:Core/Src/AB1805.c **** void hex_dump(void)
1457:Core/Src/AB1805.c **** {
1458:Core/Src/AB1805.c ****   uint8_t buffer[9];
1459:Core/Src/AB1805.c ****   for (uint8_t pos = 0; pos < 0x7F; pos += 8)
1460:Core/Src/AB1805.c ****   {
1461:Core/Src/AB1805.c **** 
1462:Core/Src/AB1805.c ****     uint8_t ii = 0;
1463:Core/Src/AB1805.c ****     for (ii = 0; ii < 7; ii++)
1464:Core/Src/AB1805.c ****     {
1465:Core/Src/AB1805.c ****       buffer[ii] = read_rtc_register(pos + ii);
1466:Core/Src/AB1805.c ****     }
1467:Core/Src/AB1805.c ****     printf("# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\r\n", pos, buffer[0],
1468:Core/Src/AB1805.c ****   }
1469:Core/Src/AB1805.c **** }
1470:Core/Src/AB1805.c **** 
1471:Core/Src/AB1805.c **** bool resetConfig(void)
1472:Core/Src/AB1805.c **** {
1473:Core/Src/AB1805.c ****   printf("resetConfig\n");
1474:Core/Src/AB1805.c **** 
1475:Core/Src/AB1805.c ****   // wire.lock();
1476:Core/Src/AB1805.c **** 
1477:Core/Src/AB1805.c ****   // // Reset configuration registers to default values
1478:Core/Src/AB1805.c ****   // writeRegister(REG_STATUS, REG_STATUS_DEFAULT, false);
1479:Core/Src/AB1805.c ****   // writeRegister(REG_CTRL_1, REG_CTRL_1_DEFAULT, false);
1480:Core/Src/AB1805.c ****   // writeRegister(REG_CTRL_2, REG_CTRL_2_DEFAULT, false);
1481:Core/Src/AB1805.c ****   // writeRegister(REG_INT_MASK, REG_INT_MASK_DEFAULT, false);
1482:Core/Src/AB1805.c ****   // writeRegister(REG_SQW, REG_SQW_DEFAULT, false);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 54


1483:Core/Src/AB1805.c ****   // writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_DEFAULT, false);
1484:Core/Src/AB1805.c **** 
1485:Core/Src/AB1805.c ****   // writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT, false);
1486:Core/Src/AB1805.c **** 
1487:Core/Src/AB1805.c ****   // writeRegister(REG_TIMER, REG_TIMER_DEFAULT, false);
1488:Core/Src/AB1805.c ****   // writeRegister(REG_TIMER_INITIAL, REG_TIMER_INITIAL_DEFAULT, false);
1489:Core/Src/AB1805.c ****   // writeRegister(REG_WDT, REG_WDT_DEFAULT, false);
1490:Core/Src/AB1805.c **** 
1491:Core/Src/AB1805.c ****   // uint8_t oscCtrl = REG_OSC_CTRL_DEFAULT;
1492:Core/Src/AB1805.c **** 
1493:Core/Src/AB1805.c ****   // writeRegister(REG_OSC_CTRL, oscCtrl, false);
1494:Core/Src/AB1805.c ****   // writeRegister(REG_TRICKLE, REG_TRICKLE_DEFAULT, false);
1495:Core/Src/AB1805.c ****   // writeRegister(REG_BREF_CTRL, REG_BREF_CTRL_DEFAULT, false);
1496:Core/Src/AB1805.c ****   // writeRegister(REG_AFCTRL, REG_AFCTRL_DEFAULT, false);
1497:Core/Src/AB1805.c ****   // writeRegister(REG_BATMODE_IO, REG_BATMODE_IO_DEFAULT, false);
1498:Core/Src/AB1805.c ****   // writeRegister(REG_OCTRL, REG_OCTRL_DEFAULT, false);
1499:Core/Src/AB1805.c **** 
1500:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, 0x0);          //!< Status register, default
1501:Core/Src/AB1805.c ****   write_rtc_register(CONTROL1_REGISTER, 0x13);      //!< Control register 1, 0b00010011 (OUT | RSO 
1502:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, 0x3c);      //!< Control register 2, 0b00111100 (OUT2S = OU
1503:Core/Src/AB1805.c ****   write_rtc_register(INT_MASK_REGISTER, 0xe0);      //!< Interrupt mask, default 0b11100000 (CEB | 
1504:Core/Src/AB1805.c ****   write_rtc_register(SQW_REGISTER, 0x26);           //!< Square wave output control, default 0b0010
1505:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, 0x00); //!< Sleep control default (0b00000000)
1506:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, 0x23); //!< Timer control default (0b00010011)//!< Cou
1507:Core/Src/AB1805.c ****   write_rtc_register(TIMER_REGISTER, 0x00);         //!< Countdown timer current value register def
1508:Core/Src/AB1805.c ****   write_rtc_register(TIMER_INITIAL_REGISTER, 0x0);  //!< Countdown timer inital value register defa
1509:Core/Src/AB1805.c ****   write_rtc_register(WDT_REGISTER, 0x0);            //!< Watchdog timer control, default value
1510:Core/Src/AB1805.c ****   write_rtc_register(OSC_CONTROL_REGISTER, 0x0);    //!< Oscillator control register, default value
1511:Core/Src/AB1805.c ****   write_rtc_register(TRICKLE_REGISTER, 0x0);        //!< Trickle charger control register, default 
1512:Core/Src/AB1805.c ****   write_rtc_register(BREF_CONTROL_REGISTER, 0xf0);  //!< Wakeup control system default 0b11110000
1513:Core/Src/AB1805.c ****   write_rtc_register(AFCTRL_REGISTER, 0x0);         //!< Auto-calibration filter, default
1514:Core/Src/AB1805.c ****   write_rtc_register(BATMODE_REGISTER, 0x80);       //!< Brownout control for IO interface, default
1515:Core/Src/AB1805.c ****   write_rtc_register(OCTRL_REGISTER, 0x0);          //!< Output control register, default
1516:Core/Src/AB1805.c **** 
1517:Core/Src/AB1805.c ****   // wire.unlock();
1518:Core/Src/AB1805.c **** 
1519:Core/Src/AB1805.c ****   return true;
1520:Core/Src/AB1805.c **** }
1521:Core/Src/AB1805.c **** 
1522:Core/Src/AB1805.c **** static inline uint32_t utils_enter_critical_section(void)
 166              		.loc 1 1522 24 view .LVU38
 167              	.LBB51:
1523:Core/Src/AB1805.c **** {
1524:Core/Src/AB1805.c ****   uint32_t primask_bit = __get_PRIMASK();
 168              		.loc 1 1524 3 view .LVU39
 169              	.LBB52:
 170              	.LBI52:
 171              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 55


  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 56


  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 57


 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 58


 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 59


 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 60


 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 61


 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 62


 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 63


 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 64


 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 65


 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 66


 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 67


 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 68


 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 69


 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 70


 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 71


 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 966:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 971:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 973:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 977:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 978:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 72


 979:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 980:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 982:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 984:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 985:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 986:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 987:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 991:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 992:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 993:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 994:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 995:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 996:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
1000:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1001:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1003:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
1004:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ISB();
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1006:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1007:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1008:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
1009:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1010:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
1011:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
1012:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
1013:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
1015:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ISB();
1018:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1019:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1020:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1021:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1022:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
1024:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
1025:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1027:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
1028:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1029:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1031:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
1032:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
1033:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1034:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1035:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 73


1036:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1037:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
1038:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
1039:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
1040:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1041:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
1042:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1044:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
1046:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
1047:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1050:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1051:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
1052:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
1056:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1057:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1058:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1059:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
1060:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
1061:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1062:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1063:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1064:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
1067:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
1068:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
1070:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1071:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1072:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
1074:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
1075:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1076:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1077:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
1079:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1084:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
1085:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1086:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1087:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1088:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
1090:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1091:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1092:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 74


1093:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1094:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1095:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
1096:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
1097:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
1098:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1099:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
1100:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1101:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
1102:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1103:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1104:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1105:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
1106:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1107:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
1108:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
1109:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
1110:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1111:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
1112:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1113:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
1114:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1118:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1119:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
1120:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
1121:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
1122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1123:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
1124:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1125:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1127:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
1128:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
1129:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1130:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1132:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
1133:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1134:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
1135:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
1136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
1137:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1138:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
1139:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1140:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
1143:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
1144:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1145:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1146:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1147:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1148:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 75


1150:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
1151:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
1152:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1153:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
1154:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
1156:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1157:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1159:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
1160:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1161:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
1162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
1163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
1164:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1165:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
1166:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1167:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
1168:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1169:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1170:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1171:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1172:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
1173:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1174:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
1175:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
1176:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
1177:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1178:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
1179:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1180:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1182:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
1183:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
1184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1187:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1188:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
1189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
1190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
1191:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1192:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
1193:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1194:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
1195:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1199:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1200:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
1201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
1202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
1203:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1204:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 172              		.loc 3 1204 31 view .LVU40
 173              	.LBB53:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 76


1205:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1206:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 174              		.loc 3 1206 3 view .LVU41
1207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1208:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 175              		.loc 3 1208 3 view .LVU42
 176              		.syntax divided
 177              	@ 1208 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 178 0004 EFF31085 		MRS r5, primask
 179              	@ 0 "" 2
 180              	.LVL12:
1209:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 181              		.loc 3 1209 3 view .LVU43
 182              		.loc 3 1209 3 is_stmt 0 view .LVU44
 183              		.thumb
 184              		.syntax unified
 185              	.LBE53:
 186              	.LBE52:
1525:Core/Src/AB1805.c ****   __disable_irq();
 187              		.loc 1 1525 3 is_stmt 1 view .LVU45
 188              	.LBB54:
 189              	.LBI54:
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190              		.loc 3 960 27 view .LVU46
 191              	.LBB55:
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192              		.loc 3 962 3 view .LVU47
 193              		.syntax divided
 194              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 195 0008 72B6     		cpsid i
 196              	@ 0 "" 2
 197              		.thumb
 198              		.syntax unified
 199              	.LBE55:
 200              	.LBE54:
1526:Core/Src/AB1805.c ****   return primask_bit;
 201              		.loc 1 1526 3 view .LVU48
 202              	.LVL13:
 203              		.loc 1 1526 3 is_stmt 0 view .LVU49
 204              	.LBE51:
 205              	.LBE50:
1404:Core/Src/AB1805.c ****   RTC_L();
 206              		.loc 1 1404 3 is_stmt 1 view .LVU50
1404:Core/Src/AB1805.c ****   RTC_L();
 207              		.loc 1 1404 11 is_stmt 0 view .LVU51
 208 000a 7F20     		movs	r0, #127
 209              	.LVL14:
1404:Core/Src/AB1805.c ****   RTC_L();
 210              		.loc 1 1404 11 view .LVU52
 211 000c 1840     		ands	r0, r3
 212              	.LVL15:
1405:Core/Src/AB1805.c ****   SPI1_SendByte(addr);
 213              		.loc 1 1405 3 is_stmt 1 view .LVU53
 214 000e 074C     		ldr	r4, .L11
 215 0010 8023     		movs	r3, #128
 216 0012 DB05     		lsls	r3, r3, #23
 217 0014 A361     		str	r3, [r4, #24]
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 77


1406:Core/Src/AB1805.c ****   val = SPI1_SendByte(0x00); // Send DUMMY to read data
 218              		.loc 1 1406 3 view .LVU54
 219 0016 FFF7FEFF 		bl	SPI1_SendByte
 220              	.LVL16:
1407:Core/Src/AB1805.c ****   RTC_H();
 221              		.loc 1 1407 3 view .LVU55
1407:Core/Src/AB1805.c ****   RTC_H();
 222              		.loc 1 1407 9 is_stmt 0 view .LVU56
 223 001a 0020     		movs	r0, #0
 224 001c FFF7FEFF 		bl	SPI1_SendByte
 225              	.LVL17:
1408:Core/Src/AB1805.c ****   utils_exit_critical_section(primask_bit);
 226              		.loc 1 1408 3 is_stmt 1 view .LVU57
 227 0020 8023     		movs	r3, #128
 228 0022 DB01     		lsls	r3, r3, #7
 229 0024 A361     		str	r3, [r4, #24]
1409:Core/Src/AB1805.c **** 
 230              		.loc 1 1409 3 view .LVU58
 231              	.LVL18:
 232              	.LBB56:
 233              	.LBI56:
1527:Core/Src/AB1805.c **** }
1528:Core/Src/AB1805.c **** 
1529:Core/Src/AB1805.c **** static inline void utils_exit_critical_section(uint32_t primask_bit)
 234              		.loc 1 1529 20 view .LVU59
1530:Core/Src/AB1805.c **** {
1531:Core/Src/AB1805.c ****   __set_PRIMASK(primask_bit);
 235              		.loc 1 1531 3 view .LVU60
 236              	.LBB57:
 237              	.LBI57:
1210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1213:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
1214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
1216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
1217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
1218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
1220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
1222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
1224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
1225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1226:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1228:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1229:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
1231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
1232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
1233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1234:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 238              		.loc 3 1234 27 view .LVU61
 239              	.LBB58:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 78


1235:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1236:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 240              		.loc 3 1236 3 view .LVU62
 241              		.syntax divided
 242              	@ 1236 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 243 0026 85F31088 		MSR primask, r5
 244              	@ 0 "" 2
 245              	.LVL19:
 246              		.loc 3 1236 3 is_stmt 0 view .LVU63
 247              		.thumb
 248              		.syntax unified
 249              	.LBE58:
 250              	.LBE57:
 251              	.LBE56:
1411:Core/Src/AB1805.c **** }
 252              		.loc 1 1411 3 is_stmt 1 view .LVU64
1412:Core/Src/AB1805.c **** 
 253              		.loc 1 1412 1 is_stmt 0 view .LVU65
 254              		@ sp needed
 255              	.LVL20:
1412:Core/Src/AB1805.c **** 
 256              		.loc 1 1412 1 view .LVU66
 257 002a 70BD     		pop	{r4, r5, r6, pc}
 258              	.L12:
 259              		.align	2
 260              	.L11:
 261 002c 00040050 		.word	1342178304
 262              		.cfi_endproc
 263              	.LFE624:
 265              		.section	.text.spi_select_slave,"ax",%progbits
 266              		.align	1
 267              		.global	spi_select_slave
 268              		.syntax unified
 269              		.code	16
 270              		.thumb_func
 272              	spi_select_slave:
 273              	.LVL21:
 274              	.LFB499:
  45:Core/Src/AB1805.c ****   if (select)
 275              		.loc 1 45 1 is_stmt 1 view -0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
  46:Core/Src/AB1805.c ****   {
 280              		.loc 1 46 3 view .LVU68
  46:Core/Src/AB1805.c ****   {
 281              		.loc 1 46 6 is_stmt 0 view .LVU69
 282 0000 0028     		cmp	r0, #0
 283 0002 04D0     		beq	.L14
  48:Core/Src/AB1805.c ****   }
 284              		.loc 1 48 5 is_stmt 1 view .LVU70
 285 0004 044B     		ldr	r3, .L16
 286 0006 8022     		movs	r2, #128
 287 0008 D201     		lsls	r2, r2, #7
 288 000a 9A61     		str	r2, [r3, #24]
 289              	.L13:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 79


  54:Core/Src/AB1805.c **** 
 290              		.loc 1 54 1 is_stmt 0 view .LVU71
 291              		@ sp needed
 292 000c 7047     		bx	lr
 293              	.L14:
  52:Core/Src/AB1805.c ****   }
 294              		.loc 1 52 5 is_stmt 1 view .LVU72
 295 000e 024B     		ldr	r3, .L16
 296 0010 8022     		movs	r2, #128
 297 0012 D205     		lsls	r2, r2, #23
 298 0014 9A61     		str	r2, [r3, #24]
  54:Core/Src/AB1805.c **** 
 299              		.loc 1 54 1 is_stmt 0 view .LVU73
 300 0016 F9E7     		b	.L13
 301              	.L17:
 302              		.align	2
 303              	.L16:
 304 0018 00040050 		.word	1342178304
 305              		.cfi_endproc
 306              	.LFE499:
 308              		.section	.text.write_rtc_register,"ax",%progbits
 309              		.align	1
 310              		.syntax unified
 311              		.code	16
 312              		.thumb_func
 314              	write_rtc_register:
 315              	.LVL22:
 316              	.LFB625:
1437:Core/Src/AB1805.c ****   uint8_t address = AB1815_SPI_WRITE(offset);
 317              		.loc 1 1437 1 is_stmt 1 view -0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
1437:Core/Src/AB1805.c ****   uint8_t address = AB1815_SPI_WRITE(offset);
 321              		.loc 1 1437 1 is_stmt 0 view .LVU75
 322 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 323              	.LCFI1:
 324              		.cfi_def_cfa_offset 24
 325              		.cfi_offset 3, -24
 326              		.cfi_offset 4, -20
 327              		.cfi_offset 5, -16
 328              		.cfi_offset 6, -12
 329              		.cfi_offset 7, -8
 330              		.cfi_offset 14, -4
 331 0002 0D00     		movs	r5, r1
1438:Core/Src/AB1805.c ****   uint32_t primask_bit = utils_enter_critical_section();
 332              		.loc 1 1438 3 is_stmt 1 view .LVU76
1438:Core/Src/AB1805.c ****   uint32_t primask_bit = utils_enter_critical_section();
 333              		.loc 1 1438 11 is_stmt 0 view .LVU77
 334 0004 8024     		movs	r4, #128
 335 0006 6442     		rsbs	r4, r4, #0
 336 0008 0443     		orrs	r4, r0
 337 000a E4B2     		uxtb	r4, r4
 338              	.LVL23:
1439:Core/Src/AB1805.c **** 
 339              		.loc 1 1439 3 is_stmt 1 view .LVU78
 340              	.LBB59:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 80


 341              	.LBI59:
1522:Core/Src/AB1805.c **** {
 342              		.loc 1 1522 24 view .LVU79
 343              	.LBB60:
1524:Core/Src/AB1805.c ****   __disable_irq();
 344              		.loc 1 1524 3 view .LVU80
 345              	.LBB61:
 346              	.LBI61:
1204:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 347              		.loc 3 1204 31 view .LVU81
 348              	.LBB62:
1206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349              		.loc 3 1206 3 view .LVU82
1208:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 350              		.loc 3 1208 3 view .LVU83
 351              		.syntax divided
 352              	@ 1208 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 353 000c EFF31087 		MRS r7, primask
 354              	@ 0 "" 2
 355              	.LVL24:
1209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 356              		.loc 3 1209 3 view .LVU84
1209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 357              		.loc 3 1209 3 is_stmt 0 view .LVU85
 358              		.thumb
 359              		.syntax unified
 360              	.LBE62:
 361              	.LBE61:
1525:Core/Src/AB1805.c ****   return primask_bit;
 362              		.loc 1 1525 3 is_stmt 1 view .LVU86
 363              	.LBB63:
 364              	.LBI63:
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 365              		.loc 3 960 27 view .LVU87
 366              	.LBB64:
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 367              		.loc 3 962 3 view .LVU88
 368              		.syntax divided
 369              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 370 0010 72B6     		cpsid i
 371              	@ 0 "" 2
 372              		.thumb
 373              		.syntax unified
 374              	.LBE64:
 375              	.LBE63:
1526:Core/Src/AB1805.c **** }
 376              		.loc 1 1526 3 view .LVU89
 377              	.LVL25:
1526:Core/Src/AB1805.c **** }
 378              		.loc 1 1526 3 is_stmt 0 view .LVU90
 379              	.LBE60:
 380              	.LBE59:
1441:Core/Src/AB1805.c **** 
 381              		.loc 1 1441 3 is_stmt 1 view .LVU91
 382 0012 0020     		movs	r0, #0
 383              	.LVL26:
1441:Core/Src/AB1805.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 81


 384              		.loc 1 1441 3 is_stmt 0 view .LVU92
 385 0014 FFF7FEFF 		bl	spi_select_slave
 386              	.LVL27:
1443:Core/Src/AB1805.c ****   {
 387              		.loc 1 1443 3 is_stmt 1 view .LVU93
1443:Core/Src/AB1805.c ****   {
 388              		.loc 1 1443 15 is_stmt 0 view .LVU94
 389 0018 0C4B     		ldr	r3, .L21
 390 001a 1B68     		ldr	r3, [r3]
1443:Core/Src/AB1805.c ****   {
 391              		.loc 1 1443 6 view .LVU95
 392 001c 5B06     		lsls	r3, r3, #25
 393 001e 04D4     		bmi	.L19
1445:Core/Src/AB1805.c ****   }
 394              		.loc 1 1445 5 is_stmt 1 view .LVU96
1445:Core/Src/AB1805.c ****   }
 395              		.loc 1 1445 9 is_stmt 0 view .LVU97
 396 0020 0A4A     		ldr	r2, .L21
 397 0022 1368     		ldr	r3, [r2]
1445:Core/Src/AB1805.c ****   }
 398              		.loc 1 1445 15 view .LVU98
 399 0024 4021     		movs	r1, #64
 400 0026 0B43     		orrs	r3, r1
 401 0028 1360     		str	r3, [r2]
 402              	.L19:
1447:Core/Src/AB1805.c ****   SPI1_SendByte(address);
 403              		.loc 1 1447 3 is_stmt 1 view .LVU99
 404 002a 094E     		ldr	r6, .L21+4
 405 002c 8023     		movs	r3, #128
 406 002e DB05     		lsls	r3, r3, #23
 407 0030 B361     		str	r3, [r6, #24]
1448:Core/Src/AB1805.c ****   SPI1_SendByte(buf); // Send Data to write
 408              		.loc 1 1448 3 view .LVU100
 409 0032 2000     		movs	r0, r4
 410 0034 FFF7FEFF 		bl	SPI1_SendByte
 411              	.LVL28:
1449:Core/Src/AB1805.c **** 
 412              		.loc 1 1449 3 view .LVU101
 413 0038 2800     		movs	r0, r5
 414 003a FFF7FEFF 		bl	SPI1_SendByte
 415              	.LVL29:
1451:Core/Src/AB1805.c ****   utils_exit_critical_section(primask_bit);
 416              		.loc 1 1451 3 view .LVU102
 417 003e 8023     		movs	r3, #128
 418 0040 DB01     		lsls	r3, r3, #7
 419 0042 B361     		str	r3, [r6, #24]
1452:Core/Src/AB1805.c ****   return 1;
 420              		.loc 1 1452 3 view .LVU103
 421              	.LVL30:
 422              	.LBB65:
 423              	.LBI65:
1529:Core/Src/AB1805.c **** {
 424              		.loc 1 1529 20 view .LVU104
 425              		.loc 1 1531 3 view .LVU105
 426              	.LBB66:
 427              	.LBI66:
1234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 82


 428              		.loc 3 1234 27 view .LVU106
 429              	.LBB67:
 430              		.loc 3 1236 3 view .LVU107
 431              		.syntax divided
 432              	@ 1236 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 433 0044 87F31088 		MSR primask, r7
 434              	@ 0 "" 2
 435              	.LVL31:
 436              		.loc 3 1236 3 is_stmt 0 view .LVU108
 437              		.thumb
 438              		.syntax unified
 439              	.LBE67:
 440              	.LBE66:
 441              	.LBE65:
1453:Core/Src/AB1805.c **** };
 442              		.loc 1 1453 3 is_stmt 1 view .LVU109
1454:Core/Src/AB1805.c **** 
 443              		.loc 1 1454 1 is_stmt 0 view .LVU110
 444 0048 0120     		movs	r0, #1
 445              		@ sp needed
 446              	.LVL32:
 447              	.LVL33:
1454:Core/Src/AB1805.c **** 
 448              		.loc 1 1454 1 view .LVU111
 449 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 450              	.L22:
 451              		.align	2
 452              	.L21:
 453 004c 00300140 		.word	1073819648
 454 0050 00040050 		.word	1342178304
 455              		.cfi_endproc
 456              	.LFE625:
 458              		.section	.text.get_rtc_data,"ax",%progbits
 459              		.align	1
 460              		.global	get_rtc_data
 461              		.syntax unified
 462              		.code	16
 463              		.thumb_func
 465              	get_rtc_data:
 466              	.LVL34:
 467              	.LFB500:
  57:Core/Src/AB1805.c ****   return (read_rtc_register(rtc_register) & register_mask);
 468              		.loc 1 57 1 is_stmt 1 view -0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
  57:Core/Src/AB1805.c ****   return (read_rtc_register(rtc_register) & register_mask);
 472              		.loc 1 57 1 is_stmt 0 view .LVU113
 473 0000 10B5     		push	{r4, lr}
 474              	.LCFI2:
 475              		.cfi_def_cfa_offset 8
 476              		.cfi_offset 4, -8
 477              		.cfi_offset 14, -4
 478 0002 0C00     		movs	r4, r1
  58:Core/Src/AB1805.c **** }
 479              		.loc 1 58 3 is_stmt 1 view .LVU114
  58:Core/Src/AB1805.c **** }
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 83


 480              		.loc 1 58 11 is_stmt 0 view .LVU115
 481 0004 FFF7FEFF 		bl	read_rtc_register
 482              	.LVL35:
  58:Core/Src/AB1805.c **** }
 483              		.loc 1 58 43 view .LVU116
 484 0008 2040     		ands	r0, r4
  59:Core/Src/AB1805.c **** 
 485              		.loc 1 59 1 view .LVU117
 486              		@ sp needed
 487 000a 10BD     		pop	{r4, pc}
 488              		.cfi_endproc
 489              	.LFE500:
 491              		.section	.text.get_hundredths,"ax",%progbits
 492              		.align	1
 493              		.global	get_hundredths
 494              		.syntax unified
 495              		.code	16
 496              		.thumb_func
 498              	get_hundredths:
 499              	.LFB501:
  62:Core/Src/AB1805.c ****   return get_rtc_data(HUNDRETH_REGISTER, 0xFF);
 500              		.loc 1 62 1 is_stmt 1 view -0
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 0
 503              		@ frame_needed = 0, uses_anonymous_args = 0
 504 0000 10B5     		push	{r4, lr}
 505              	.LCFI3:
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 4, -8
 508              		.cfi_offset 14, -4
  63:Core/Src/AB1805.c **** }
 509              		.loc 1 63 3 view .LVU119
  63:Core/Src/AB1805.c **** }
 510              		.loc 1 63 10 is_stmt 0 view .LVU120
 511 0002 FF21     		movs	r1, #255
 512 0004 0020     		movs	r0, #0
 513 0006 FFF7FEFF 		bl	get_rtc_data
 514              	.LVL36:
  64:Core/Src/AB1805.c **** 
 515              		.loc 1 64 1 view .LVU121
 516              		@ sp needed
 517 000a 10BD     		pop	{r4, pc}
 518              		.cfi_endproc
 519              	.LFE501:
 521              		.section	.text.get_second,"ax",%progbits
 522              		.align	1
 523              		.global	get_second
 524              		.syntax unified
 525              		.code	16
 526              		.thumb_func
 528              	get_second:
 529              	.LFB502:
  67:Core/Src/AB1805.c ****   return get_rtc_data(SECOND_REGISTER, SECOND_MASK);
 530              		.loc 1 67 1 is_stmt 1 view -0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 84


 534 0000 10B5     		push	{r4, lr}
 535              	.LCFI4:
 536              		.cfi_def_cfa_offset 8
 537              		.cfi_offset 4, -8
 538              		.cfi_offset 14, -4
  68:Core/Src/AB1805.c **** }
 539              		.loc 1 68 3 view .LVU123
  68:Core/Src/AB1805.c **** }
 540              		.loc 1 68 10 is_stmt 0 view .LVU124
 541 0002 7F21     		movs	r1, #127
 542 0004 0120     		movs	r0, #1
 543 0006 FFF7FEFF 		bl	get_rtc_data
 544              	.LVL37:
  69:Core/Src/AB1805.c **** 
 545              		.loc 1 69 1 view .LVU125
 546              		@ sp needed
 547 000a 10BD     		pop	{r4, pc}
 548              		.cfi_endproc
 549              	.LFE502:
 551              		.section	.text.get_minute,"ax",%progbits
 552              		.align	1
 553              		.global	get_minute
 554              		.syntax unified
 555              		.code	16
 556              		.thumb_func
 558              	get_minute:
 559              	.LFB503:
  72:Core/Src/AB1805.c ****   return get_rtc_data(MINUTE_REGISTER, MINUTE_MASK);
 560              		.loc 1 72 1 is_stmt 1 view -0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564 0000 10B5     		push	{r4, lr}
 565              	.LCFI5:
 566              		.cfi_def_cfa_offset 8
 567              		.cfi_offset 4, -8
 568              		.cfi_offset 14, -4
  73:Core/Src/AB1805.c **** }
 569              		.loc 1 73 3 view .LVU127
  73:Core/Src/AB1805.c **** }
 570              		.loc 1 73 10 is_stmt 0 view .LVU128
 571 0002 7F21     		movs	r1, #127
 572 0004 0220     		movs	r0, #2
 573 0006 FFF7FEFF 		bl	get_rtc_data
 574              	.LVL38:
  74:Core/Src/AB1805.c **** 
 575              		.loc 1 74 1 view .LVU129
 576              		@ sp needed
 577 000a 10BD     		pop	{r4, pc}
 578              		.cfi_endproc
 579              	.LFE503:
 581              		.section	.text.get_hour,"ax",%progbits
 582              		.align	1
 583              		.global	get_hour
 584              		.syntax unified
 585              		.code	16
 586              		.thumb_func
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 85


 588              	get_hour:
 589              	.LFB504:
  77:Core/Src/AB1805.c ****   return get_rtc_data(HOUR_REGISTER, HOUR_24_MASK);
 590              		.loc 1 77 1 is_stmt 1 view -0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594 0000 10B5     		push	{r4, lr}
 595              	.LCFI6:
 596              		.cfi_def_cfa_offset 8
 597              		.cfi_offset 4, -8
 598              		.cfi_offset 14, -4
  78:Core/Src/AB1805.c **** }
 599              		.loc 1 78 3 view .LVU131
  78:Core/Src/AB1805.c **** }
 600              		.loc 1 78 10 is_stmt 0 view .LVU132
 601 0002 3F21     		movs	r1, #63
 602 0004 0320     		movs	r0, #3
 603 0006 FFF7FEFF 		bl	get_rtc_data
 604              	.LVL39:
  79:Core/Src/AB1805.c **** 
 605              		.loc 1 79 1 view .LVU133
 606              		@ sp needed
 607 000a 10BD     		pop	{r4, pc}
 608              		.cfi_endproc
 609              	.LFE504:
 611              		.section	.text.get_weekday,"ax",%progbits
 612              		.align	1
 613              		.global	get_weekday
 614              		.syntax unified
 615              		.code	16
 616              		.thumb_func
 618              	get_weekday:
 619              	.LFB505:
  82:Core/Src/AB1805.c ****   return get_rtc_data(WEEKDAY_REGISTER, DAY_MASK);
 620              		.loc 1 82 1 is_stmt 1 view -0
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 0
 623              		@ frame_needed = 0, uses_anonymous_args = 0
 624 0000 10B5     		push	{r4, lr}
 625              	.LCFI7:
 626              		.cfi_def_cfa_offset 8
 627              		.cfi_offset 4, -8
 628              		.cfi_offset 14, -4
  83:Core/Src/AB1805.c **** }
 629              		.loc 1 83 3 view .LVU135
  83:Core/Src/AB1805.c **** }
 630              		.loc 1 83 10 is_stmt 0 view .LVU136
 631 0002 0721     		movs	r1, #7
 632 0004 0720     		movs	r0, #7
 633 0006 FFF7FEFF 		bl	get_rtc_data
 634              	.LVL40:
  84:Core/Src/AB1805.c **** 
 635              		.loc 1 84 1 view .LVU137
 636              		@ sp needed
 637 000a 10BD     		pop	{r4, pc}
 638              		.cfi_endproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 86


 639              	.LFE505:
 641              		.section	.text.get_date,"ax",%progbits
 642              		.align	1
 643              		.global	get_date
 644              		.syntax unified
 645              		.code	16
 646              		.thumb_func
 648              	get_date:
 649              	.LFB506:
  87:Core/Src/AB1805.c ****   return get_rtc_data(DATE_REGISTER, DATE_MASK);
 650              		.loc 1 87 1 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654 0000 10B5     		push	{r4, lr}
 655              	.LCFI8:
 656              		.cfi_def_cfa_offset 8
 657              		.cfi_offset 4, -8
 658              		.cfi_offset 14, -4
  88:Core/Src/AB1805.c **** }
 659              		.loc 1 88 3 view .LVU139
  88:Core/Src/AB1805.c **** }
 660              		.loc 1 88 10 is_stmt 0 view .LVU140
 661 0002 3F21     		movs	r1, #63
 662 0004 0420     		movs	r0, #4
 663 0006 FFF7FEFF 		bl	get_rtc_data
 664              	.LVL41:
  89:Core/Src/AB1805.c **** 
 665              		.loc 1 89 1 view .LVU141
 666              		@ sp needed
 667 000a 10BD     		pop	{r4, pc}
 668              		.cfi_endproc
 669              	.LFE506:
 671              		.section	.text.get_month,"ax",%progbits
 672              		.align	1
 673              		.global	get_month
 674              		.syntax unified
 675              		.code	16
 676              		.thumb_func
 678              	get_month:
 679              	.LFB507:
  92:Core/Src/AB1805.c ****   return get_rtc_data(MONTH_REGISTER, MONTH_MASK);
 680              		.loc 1 92 1 is_stmt 1 view -0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684 0000 10B5     		push	{r4, lr}
 685              	.LCFI9:
 686              		.cfi_def_cfa_offset 8
 687              		.cfi_offset 4, -8
 688              		.cfi_offset 14, -4
  93:Core/Src/AB1805.c **** }
 689              		.loc 1 93 3 view .LVU143
  93:Core/Src/AB1805.c **** }
 690              		.loc 1 93 10 is_stmt 0 view .LVU144
 691 0002 1F21     		movs	r1, #31
 692 0004 0520     		movs	r0, #5
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 87


 693 0006 FFF7FEFF 		bl	get_rtc_data
 694              	.LVL42:
  94:Core/Src/AB1805.c **** 
 695              		.loc 1 94 1 view .LVU145
 696              		@ sp needed
 697 000a 10BD     		pop	{r4, pc}
 698              		.cfi_endproc
 699              	.LFE507:
 701              		.section	.text.get_year,"ax",%progbits
 702              		.align	1
 703              		.global	get_year
 704              		.syntax unified
 705              		.code	16
 706              		.thumb_func
 708              	get_year:
 709              	.LFB508:
  97:Core/Src/AB1805.c ****   return get_rtc_data(YEAR_REGISTER, YEAR_MASK);
 710              		.loc 1 97 1 is_stmt 1 view -0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714 0000 10B5     		push	{r4, lr}
 715              	.LCFI10:
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 4, -8
 718              		.cfi_offset 14, -4
  98:Core/Src/AB1805.c **** }
 719              		.loc 1 98 3 view .LVU147
  98:Core/Src/AB1805.c **** }
 720              		.loc 1 98 10 is_stmt 0 view .LVU148
 721 0002 FF21     		movs	r1, #255
 722 0004 0620     		movs	r0, #6
 723 0006 FFF7FEFF 		bl	get_rtc_data
 724              	.LVL43:
  99:Core/Src/AB1805.c **** 
 725              		.loc 1 99 1 view .LVU149
 726              		@ sp needed
 727 000a 10BD     		pop	{r4, pc}
 728              		.cfi_endproc
 729              	.LFE508:
 731              		.section	.text.get_datetime,"ax",%progbits
 732              		.align	1
 733              		.global	get_datetime
 734              		.syntax unified
 735              		.code	16
 736              		.thumb_func
 738              	get_datetime:
 739              	.LFB509:
 102:Core/Src/AB1805.c ****   // rtc_check_valid();
 740              		.loc 1 102 1 is_stmt 1 view -0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744 0000 10B5     		push	{r4, lr}
 745              	.LCFI11:
 746              		.cfi_def_cfa_offset 8
 747              		.cfi_offset 4, -8
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 88


 748              		.cfi_offset 14, -4
 105:Core/Src/AB1805.c ****   _minute = get_minute();
 749              		.loc 1 105 3 view .LVU151
 105:Core/Src/AB1805.c ****   _minute = get_minute();
 750              		.loc 1 105 13 is_stmt 0 view .LVU152
 751 0002 FFF7FEFF 		bl	get_second
 752              	.LVL44:
 105:Core/Src/AB1805.c ****   _minute = get_minute();
 753              		.loc 1 105 11 view .LVU153
 754 0006 0D4B     		ldr	r3, .L33
 755 0008 1870     		strb	r0, [r3]
 106:Core/Src/AB1805.c ****   _hour = get_hour();
 756              		.loc 1 106 3 is_stmt 1 view .LVU154
 106:Core/Src/AB1805.c ****   _hour = get_hour();
 757              		.loc 1 106 13 is_stmt 0 view .LVU155
 758 000a FFF7FEFF 		bl	get_minute
 759              	.LVL45:
 106:Core/Src/AB1805.c ****   _hour = get_hour();
 760              		.loc 1 106 11 view .LVU156
 761 000e 0C4B     		ldr	r3, .L33+4
 762 0010 1870     		strb	r0, [r3]
 107:Core/Src/AB1805.c ****   _weekday = get_weekday();
 763              		.loc 1 107 3 is_stmt 1 view .LVU157
 107:Core/Src/AB1805.c ****   _weekday = get_weekday();
 764              		.loc 1 107 11 is_stmt 0 view .LVU158
 765 0012 FFF7FEFF 		bl	get_hour
 766              	.LVL46:
 107:Core/Src/AB1805.c ****   _weekday = get_weekday();
 767              		.loc 1 107 9 view .LVU159
 768 0016 0B4B     		ldr	r3, .L33+8
 769 0018 1870     		strb	r0, [r3]
 108:Core/Src/AB1805.c ****   _date = get_date();
 770              		.loc 1 108 3 is_stmt 1 view .LVU160
 108:Core/Src/AB1805.c ****   _date = get_date();
 771              		.loc 1 108 14 is_stmt 0 view .LVU161
 772 001a FFF7FEFF 		bl	get_weekday
 773              	.LVL47:
 108:Core/Src/AB1805.c ****   _date = get_date();
 774              		.loc 1 108 12 view .LVU162
 775 001e 0A4B     		ldr	r3, .L33+12
 776 0020 1870     		strb	r0, [r3]
 109:Core/Src/AB1805.c ****   _month = get_month();
 777              		.loc 1 109 3 is_stmt 1 view .LVU163
 109:Core/Src/AB1805.c ****   _month = get_month();
 778              		.loc 1 109 11 is_stmt 0 view .LVU164
 779 0022 FFF7FEFF 		bl	get_date
 780              	.LVL48:
 109:Core/Src/AB1805.c ****   _month = get_month();
 781              		.loc 1 109 9 view .LVU165
 782 0026 094B     		ldr	r3, .L33+16
 783 0028 1870     		strb	r0, [r3]
 110:Core/Src/AB1805.c ****   _year = get_year();
 784              		.loc 1 110 3 is_stmt 1 view .LVU166
 110:Core/Src/AB1805.c ****   _year = get_year();
 785              		.loc 1 110 12 is_stmt 0 view .LVU167
 786 002a FFF7FEFF 		bl	get_month
 787              	.LVL49:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 89


 110:Core/Src/AB1805.c ****   _year = get_year();
 788              		.loc 1 110 10 view .LVU168
 789 002e 084B     		ldr	r3, .L33+20
 790 0030 1870     		strb	r0, [r3]
 111:Core/Src/AB1805.c **** }
 791              		.loc 1 111 3 is_stmt 1 view .LVU169
 111:Core/Src/AB1805.c **** }
 792              		.loc 1 111 11 is_stmt 0 view .LVU170
 793 0032 FFF7FEFF 		bl	get_year
 794              	.LVL50:
 111:Core/Src/AB1805.c **** }
 795              		.loc 1 111 9 view .LVU171
 796 0036 074B     		ldr	r3, .L33+24
 797 0038 1870     		strb	r0, [r3]
 112:Core/Src/AB1805.c **** 
 798              		.loc 1 112 1 view .LVU172
 799              		@ sp needed
 800 003a 10BD     		pop	{r4, pc}
 801              	.L34:
 802              		.align	2
 803              	.L33:
 804 003c 00000000 		.word	_second
 805 0040 00000000 		.word	_minute
 806 0044 00000000 		.word	_hour
 807 0048 00000000 		.word	_weekday
 808 004c 00000000 		.word	_date
 809 0050 00000000 		.word	_month
 810 0054 00000000 		.word	_year
 811              		.cfi_endproc
 812              	.LFE509:
 814              		.section	.text.get_second_alarm,"ax",%progbits
 815              		.align	1
 816              		.global	get_second_alarm
 817              		.syntax unified
 818              		.code	16
 819              		.thumb_func
 821              	get_second_alarm:
 822              	.LFB510:
 115:Core/Src/AB1805.c ****   _alarm_second = get_rtc_data(SECOND_ALARM_REGISTER, SECOND_ALARM_MASK);
 823              		.loc 1 115 1 is_stmt 1 view -0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827 0000 10B5     		push	{r4, lr}
 828              	.LCFI12:
 829              		.cfi_def_cfa_offset 8
 830              		.cfi_offset 4, -8
 831              		.cfi_offset 14, -4
 116:Core/Src/AB1805.c ****   return _alarm_second;
 832              		.loc 1 116 3 view .LVU174
 116:Core/Src/AB1805.c ****   return _alarm_second;
 833              		.loc 1 116 19 is_stmt 0 view .LVU175
 834 0002 7F21     		movs	r1, #127
 835 0004 0920     		movs	r0, #9
 836 0006 FFF7FEFF 		bl	get_rtc_data
 837              	.LVL51:
 116:Core/Src/AB1805.c ****   return _alarm_second;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 90


 838              		.loc 1 116 17 view .LVU176
 839 000a 024B     		ldr	r3, .L36
 840 000c 1870     		strb	r0, [r3]
 117:Core/Src/AB1805.c **** }
 841              		.loc 1 117 3 is_stmt 1 view .LVU177
 117:Core/Src/AB1805.c **** }
 842              		.loc 1 117 10 is_stmt 0 view .LVU178
 843 000e 1878     		ldrb	r0, [r3]
 844 0010 C0B2     		uxtb	r0, r0
 118:Core/Src/AB1805.c **** 
 845              		.loc 1 118 1 view .LVU179
 846              		@ sp needed
 847 0012 10BD     		pop	{r4, pc}
 848              	.L37:
 849              		.align	2
 850              	.L36:
 851 0014 00000000 		.word	_alarm_second
 852              		.cfi_endproc
 853              	.LFE510:
 855              		.section	.text.get_minute_alarm,"ax",%progbits
 856              		.align	1
 857              		.global	get_minute_alarm
 858              		.syntax unified
 859              		.code	16
 860              		.thumb_func
 862              	get_minute_alarm:
 863              	.LFB511:
 121:Core/Src/AB1805.c ****   _alarm_minute = get_rtc_data(MINUTE_ALARM_REGISTER, MINUTE_ALARM_MASK);
 864              		.loc 1 121 1 is_stmt 1 view -0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 0
 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868 0000 10B5     		push	{r4, lr}
 869              	.LCFI13:
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 4, -8
 872              		.cfi_offset 14, -4
 122:Core/Src/AB1805.c ****   return _alarm_minute;
 873              		.loc 1 122 3 view .LVU181
 122:Core/Src/AB1805.c ****   return _alarm_minute;
 874              		.loc 1 122 19 is_stmt 0 view .LVU182
 875 0002 7F21     		movs	r1, #127
 876 0004 0A20     		movs	r0, #10
 877 0006 FFF7FEFF 		bl	get_rtc_data
 878              	.LVL52:
 122:Core/Src/AB1805.c ****   return _alarm_minute;
 879              		.loc 1 122 17 view .LVU183
 880 000a 024B     		ldr	r3, .L39
 881 000c 1870     		strb	r0, [r3]
 123:Core/Src/AB1805.c **** }
 882              		.loc 1 123 3 is_stmt 1 view .LVU184
 123:Core/Src/AB1805.c **** }
 883              		.loc 1 123 10 is_stmt 0 view .LVU185
 884 000e 1878     		ldrb	r0, [r3]
 885 0010 C0B2     		uxtb	r0, r0
 124:Core/Src/AB1805.c **** 
 886              		.loc 1 124 1 view .LVU186
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 91


 887              		@ sp needed
 888 0012 10BD     		pop	{r4, pc}
 889              	.L40:
 890              		.align	2
 891              	.L39:
 892 0014 00000000 		.word	_alarm_minute
 893              		.cfi_endproc
 894              	.LFE511:
 896              		.section	.text.get_hour_alarm,"ax",%progbits
 897              		.align	1
 898              		.global	get_hour_alarm
 899              		.syntax unified
 900              		.code	16
 901              		.thumb_func
 903              	get_hour_alarm:
 904              	.LFB512:
 127:Core/Src/AB1805.c ****   _alarm_hour = get_rtc_data(HOUR_ALARM_REGISTER, HOUR_24_ALARM_MASK);
 905              		.loc 1 127 1 is_stmt 1 view -0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909 0000 10B5     		push	{r4, lr}
 910              	.LCFI14:
 911              		.cfi_def_cfa_offset 8
 912              		.cfi_offset 4, -8
 913              		.cfi_offset 14, -4
 128:Core/Src/AB1805.c ****   return _alarm_hour;
 914              		.loc 1 128 3 view .LVU188
 128:Core/Src/AB1805.c ****   return _alarm_hour;
 915              		.loc 1 128 17 is_stmt 0 view .LVU189
 916 0002 3F21     		movs	r1, #63
 917 0004 0B20     		movs	r0, #11
 918 0006 FFF7FEFF 		bl	get_rtc_data
 919              	.LVL53:
 128:Core/Src/AB1805.c ****   return _alarm_hour;
 920              		.loc 1 128 15 view .LVU190
 921 000a 024B     		ldr	r3, .L42
 922 000c 1870     		strb	r0, [r3]
 129:Core/Src/AB1805.c **** }
 923              		.loc 1 129 3 is_stmt 1 view .LVU191
 129:Core/Src/AB1805.c **** }
 924              		.loc 1 129 10 is_stmt 0 view .LVU192
 925 000e 1878     		ldrb	r0, [r3]
 926 0010 C0B2     		uxtb	r0, r0
 130:Core/Src/AB1805.c **** 
 927              		.loc 1 130 1 view .LVU193
 928              		@ sp needed
 929 0012 10BD     		pop	{r4, pc}
 930              	.L43:
 931              		.align	2
 932              	.L42:
 933 0014 00000000 		.word	_alarm_hour
 934              		.cfi_endproc
 935              	.LFE512:
 937              		.section	.text.get_weekday_alarm,"ax",%progbits
 938              		.align	1
 939              		.global	get_weekday_alarm
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 92


 940              		.syntax unified
 941              		.code	16
 942              		.thumb_func
 944              	get_weekday_alarm:
 945              	.LFB513:
 133:Core/Src/AB1805.c ****   _alarm_weekday = get_rtc_data(WEEKDAY_ALARM_REGISTER, WEEKDAY_ALARM_MASK);
 946              		.loc 1 133 1 is_stmt 1 view -0
 947              		.cfi_startproc
 948              		@ args = 0, pretend = 0, frame = 0
 949              		@ frame_needed = 0, uses_anonymous_args = 0
 950 0000 10B5     		push	{r4, lr}
 951              	.LCFI15:
 952              		.cfi_def_cfa_offset 8
 953              		.cfi_offset 4, -8
 954              		.cfi_offset 14, -4
 134:Core/Src/AB1805.c ****   return _alarm_weekday;
 955              		.loc 1 134 3 view .LVU195
 134:Core/Src/AB1805.c ****   return _alarm_weekday;
 956              		.loc 1 134 20 is_stmt 0 view .LVU196
 957 0002 0721     		movs	r1, #7
 958 0004 0E20     		movs	r0, #14
 959 0006 FFF7FEFF 		bl	get_rtc_data
 960              	.LVL54:
 134:Core/Src/AB1805.c ****   return _alarm_weekday;
 961              		.loc 1 134 18 view .LVU197
 962 000a 024B     		ldr	r3, .L45
 963 000c 1870     		strb	r0, [r3]
 135:Core/Src/AB1805.c **** }
 964              		.loc 1 135 3 is_stmt 1 view .LVU198
 135:Core/Src/AB1805.c **** }
 965              		.loc 1 135 10 is_stmt 0 view .LVU199
 966 000e 1878     		ldrb	r0, [r3]
 967 0010 C0B2     		uxtb	r0, r0
 136:Core/Src/AB1805.c **** 
 968              		.loc 1 136 1 view .LVU200
 969              		@ sp needed
 970 0012 10BD     		pop	{r4, pc}
 971              	.L46:
 972              		.align	2
 973              	.L45:
 974 0014 00000000 		.word	_alarm_weekday
 975              		.cfi_endproc
 976              	.LFE513:
 978              		.section	.text.get_date_alarm,"ax",%progbits
 979              		.align	1
 980              		.global	get_date_alarm
 981              		.syntax unified
 982              		.code	16
 983              		.thumb_func
 985              	get_date_alarm:
 986              	.LFB514:
 139:Core/Src/AB1805.c ****   _alarm_date = get_rtc_data(DATE_ALARM_REGISTER, DATE_ALARM_MASK);
 987              		.loc 1 139 1 is_stmt 1 view -0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 0
 990              		@ frame_needed = 0, uses_anonymous_args = 0
 991 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 93


 992              	.LCFI16:
 993              		.cfi_def_cfa_offset 8
 994              		.cfi_offset 4, -8
 995              		.cfi_offset 14, -4
 140:Core/Src/AB1805.c ****   return _alarm_date;
 996              		.loc 1 140 3 view .LVU202
 140:Core/Src/AB1805.c ****   return _alarm_date;
 997              		.loc 1 140 17 is_stmt 0 view .LVU203
 998 0002 3F21     		movs	r1, #63
 999 0004 0C20     		movs	r0, #12
 1000 0006 FFF7FEFF 		bl	get_rtc_data
 1001              	.LVL55:
 140:Core/Src/AB1805.c ****   return _alarm_date;
 1002              		.loc 1 140 15 view .LVU204
 1003 000a 024B     		ldr	r3, .L48
 1004 000c 1870     		strb	r0, [r3]
 141:Core/Src/AB1805.c **** }
 1005              		.loc 1 141 3 is_stmt 1 view .LVU205
 141:Core/Src/AB1805.c **** }
 1006              		.loc 1 141 10 is_stmt 0 view .LVU206
 1007 000e 1878     		ldrb	r0, [r3]
 1008 0010 C0B2     		uxtb	r0, r0
 142:Core/Src/AB1805.c **** 
 1009              		.loc 1 142 1 view .LVU207
 1010              		@ sp needed
 1011 0012 10BD     		pop	{r4, pc}
 1012              	.L49:
 1013              		.align	2
 1014              	.L48:
 1015 0014 00000000 		.word	_alarm_date
 1016              		.cfi_endproc
 1017              	.LFE514:
 1019              		.section	.text.get_month_alarm,"ax",%progbits
 1020              		.align	1
 1021              		.global	get_month_alarm
 1022              		.syntax unified
 1023              		.code	16
 1024              		.thumb_func
 1026              	get_month_alarm:
 1027              	.LFB515:
 145:Core/Src/AB1805.c ****   _alarm_month = get_rtc_data(MONTH_ALARM_REGISTER, MONTH_ALARM_MASK);
 1028              		.loc 1 145 1 is_stmt 1 view -0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 0
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032 0000 10B5     		push	{r4, lr}
 1033              	.LCFI17:
 1034              		.cfi_def_cfa_offset 8
 1035              		.cfi_offset 4, -8
 1036              		.cfi_offset 14, -4
 146:Core/Src/AB1805.c ****   return _alarm_month;
 1037              		.loc 1 146 3 view .LVU209
 146:Core/Src/AB1805.c ****   return _alarm_month;
 1038              		.loc 1 146 18 is_stmt 0 view .LVU210
 1039 0002 1F21     		movs	r1, #31
 1040 0004 0D20     		movs	r0, #13
 1041 0006 FFF7FEFF 		bl	get_rtc_data
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 94


 1042              	.LVL56:
 146:Core/Src/AB1805.c ****   return _alarm_month;
 1043              		.loc 1 146 16 view .LVU211
 1044 000a 024B     		ldr	r3, .L51
 1045 000c 1870     		strb	r0, [r3]
 147:Core/Src/AB1805.c **** }
 1046              		.loc 1 147 3 is_stmt 1 view .LVU212
 147:Core/Src/AB1805.c **** }
 1047              		.loc 1 147 10 is_stmt 0 view .LVU213
 1048 000e 1878     		ldrb	r0, [r3]
 1049 0010 C0B2     		uxtb	r0, r0
 148:Core/Src/AB1805.c **** 
 1050              		.loc 1 148 1 view .LVU214
 1051              		@ sp needed
 1052 0012 10BD     		pop	{r4, pc}
 1053              	.L52:
 1054              		.align	2
 1055              	.L51:
 1056 0014 00000000 		.word	_alarm_month
 1057              		.cfi_endproc
 1058              	.LFE515:
 1060              		.global	__aeabi_uidivmod
 1061              		.section	.text.set_second,"ax",%progbits
 1062              		.align	1
 1063              		.global	set_second
 1064              		.syntax unified
 1065              		.code	16
 1066              		.thumb_func
 1068              	set_second:
 1069              	.LVL57:
 1070              	.LFB516:
 151:Core/Src/AB1805.c ****   _second = value % MAX_SECOND;
 1071              		.loc 1 151 1 is_stmt 1 view -0
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 0
 1074              		@ frame_needed = 0, uses_anonymous_args = 0
 151:Core/Src/AB1805.c ****   _second = value % MAX_SECOND;
 1075              		.loc 1 151 1 is_stmt 0 view .LVU216
 1076 0000 10B5     		push	{r4, lr}
 1077              	.LCFI18:
 1078              		.cfi_def_cfa_offset 8
 1079              		.cfi_offset 4, -8
 1080              		.cfi_offset 14, -4
 152:Core/Src/AB1805.c ****   write_rtc_register(SECOND_REGISTER, _second);
 1081              		.loc 1 152 3 is_stmt 1 view .LVU217
 152:Core/Src/AB1805.c ****   write_rtc_register(SECOND_REGISTER, _second);
 1082              		.loc 1 152 11 is_stmt 0 view .LVU218
 1083 0002 6021     		movs	r1, #96
 1084 0004 FFF7FEFF 		bl	__aeabi_uidivmod
 1085              	.LVL58:
 152:Core/Src/AB1805.c ****   write_rtc_register(SECOND_REGISTER, _second);
 1086              		.loc 1 152 11 view .LVU219
 1087 0008 C9B2     		uxtb	r1, r1
 1088 000a 044B     		ldr	r3, .L54
 1089 000c 1970     		strb	r1, [r3]
 153:Core/Src/AB1805.c **** }
 1090              		.loc 1 153 3 is_stmt 1 view .LVU220
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 95


 1091 000e 1978     		ldrb	r1, [r3]
 1092 0010 C9B2     		uxtb	r1, r1
 1093 0012 0120     		movs	r0, #1
 1094 0014 FFF7FEFF 		bl	write_rtc_register
 1095              	.LVL59:
 154:Core/Src/AB1805.c **** 
 1096              		.loc 1 154 1 is_stmt 0 view .LVU221
 1097              		@ sp needed
 1098 0018 10BD     		pop	{r4, pc}
 1099              	.L55:
 1100 001a C046     		.align	2
 1101              	.L54:
 1102 001c 00000000 		.word	_second
 1103              		.cfi_endproc
 1104              	.LFE516:
 1106              		.section	.text.set_minute,"ax",%progbits
 1107              		.align	1
 1108              		.global	set_minute
 1109              		.syntax unified
 1110              		.code	16
 1111              		.thumb_func
 1113              	set_minute:
 1114              	.LVL60:
 1115              	.LFB517:
 157:Core/Src/AB1805.c ****   _minute = value % MAX_MINUTE;
 1116              		.loc 1 157 1 is_stmt 1 view -0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 157:Core/Src/AB1805.c ****   _minute = value % MAX_MINUTE;
 1120              		.loc 1 157 1 is_stmt 0 view .LVU223
 1121 0000 10B5     		push	{r4, lr}
 1122              	.LCFI19:
 1123              		.cfi_def_cfa_offset 8
 1124              		.cfi_offset 4, -8
 1125              		.cfi_offset 14, -4
 158:Core/Src/AB1805.c ****   write_rtc_register(MINUTE_REGISTER, _minute);
 1126              		.loc 1 158 3 is_stmt 1 view .LVU224
 158:Core/Src/AB1805.c ****   write_rtc_register(MINUTE_REGISTER, _minute);
 1127              		.loc 1 158 11 is_stmt 0 view .LVU225
 1128 0002 6021     		movs	r1, #96
 1129 0004 FFF7FEFF 		bl	__aeabi_uidivmod
 1130              	.LVL61:
 158:Core/Src/AB1805.c ****   write_rtc_register(MINUTE_REGISTER, _minute);
 1131              		.loc 1 158 11 view .LVU226
 1132 0008 C9B2     		uxtb	r1, r1
 1133 000a 044B     		ldr	r3, .L57
 1134 000c 1970     		strb	r1, [r3]
 159:Core/Src/AB1805.c **** }
 1135              		.loc 1 159 3 is_stmt 1 view .LVU227
 1136 000e 1978     		ldrb	r1, [r3]
 1137 0010 C9B2     		uxtb	r1, r1
 1138 0012 0220     		movs	r0, #2
 1139 0014 FFF7FEFF 		bl	write_rtc_register
 1140              	.LVL62:
 160:Core/Src/AB1805.c **** 
 1141              		.loc 1 160 1 is_stmt 0 view .LVU228
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 96


 1142              		@ sp needed
 1143 0018 10BD     		pop	{r4, pc}
 1144              	.L58:
 1145 001a C046     		.align	2
 1146              	.L57:
 1147 001c 00000000 		.word	_minute
 1148              		.cfi_endproc
 1149              	.LFE517:
 1151              		.section	.text.set_hour,"ax",%progbits
 1152              		.align	1
 1153              		.global	set_hour
 1154              		.syntax unified
 1155              		.code	16
 1156              		.thumb_func
 1158              	set_hour:
 1159              	.LVL63:
 1160              	.LFB518:
 163:Core/Src/AB1805.c ****   _hour = value % MAX_HOURS;
 1161              		.loc 1 163 1 is_stmt 1 view -0
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 0
 1164              		@ frame_needed = 0, uses_anonymous_args = 0
 163:Core/Src/AB1805.c ****   _hour = value % MAX_HOURS;
 1165              		.loc 1 163 1 is_stmt 0 view .LVU230
 1166 0000 10B5     		push	{r4, lr}
 1167              	.LCFI20:
 1168              		.cfi_def_cfa_offset 8
 1169              		.cfi_offset 4, -8
 1170              		.cfi_offset 14, -4
 164:Core/Src/AB1805.c ****   write_rtc_register(HOUR_REGISTER, _hour);
 1171              		.loc 1 164 3 is_stmt 1 view .LVU231
 164:Core/Src/AB1805.c ****   write_rtc_register(HOUR_REGISTER, _hour);
 1172              		.loc 1 164 9 is_stmt 0 view .LVU232
 1173 0002 2421     		movs	r1, #36
 1174 0004 FFF7FEFF 		bl	__aeabi_uidivmod
 1175              	.LVL64:
 164:Core/Src/AB1805.c ****   write_rtc_register(HOUR_REGISTER, _hour);
 1176              		.loc 1 164 9 view .LVU233
 1177 0008 C9B2     		uxtb	r1, r1
 1178 000a 044B     		ldr	r3, .L60
 1179 000c 1970     		strb	r1, [r3]
 165:Core/Src/AB1805.c **** }
 1180              		.loc 1 165 3 is_stmt 1 view .LVU234
 1181 000e 1978     		ldrb	r1, [r3]
 1182 0010 C9B2     		uxtb	r1, r1
 1183 0012 0320     		movs	r0, #3
 1184 0014 FFF7FEFF 		bl	write_rtc_register
 1185              	.LVL65:
 166:Core/Src/AB1805.c **** 
 1186              		.loc 1 166 1 is_stmt 0 view .LVU235
 1187              		@ sp needed
 1188 0018 10BD     		pop	{r4, pc}
 1189              	.L61:
 1190 001a C046     		.align	2
 1191              	.L60:
 1192 001c 00000000 		.word	_hour
 1193              		.cfi_endproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 97


 1194              	.LFE518:
 1196              		.section	.text.set_weekday,"ax",%progbits
 1197              		.align	1
 1198              		.global	set_weekday
 1199              		.syntax unified
 1200              		.code	16
 1201              		.thumb_func
 1203              	set_weekday:
 1204              	.LVL66:
 1205              	.LFB519:
 169:Core/Src/AB1805.c ****   _weekday = value % MAX_DAY;
 1206              		.loc 1 169 1 is_stmt 1 view -0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 169:Core/Src/AB1805.c ****   _weekday = value % MAX_DAY;
 1210              		.loc 1 169 1 is_stmt 0 view .LVU237
 1211 0000 10B5     		push	{r4, lr}
 1212              	.LCFI21:
 1213              		.cfi_def_cfa_offset 8
 1214              		.cfi_offset 4, -8
 1215              		.cfi_offset 14, -4
 170:Core/Src/AB1805.c ****   write_rtc_register(WEEKDAY_REGISTER, _weekday);
 1216              		.loc 1 170 3 is_stmt 1 view .LVU238
 170:Core/Src/AB1805.c ****   write_rtc_register(WEEKDAY_REGISTER, _weekday);
 1217              		.loc 1 170 20 is_stmt 0 view .LVU239
 1218 0002 0723     		movs	r3, #7
 1219 0004 0340     		ands	r3, r0
 170:Core/Src/AB1805.c ****   write_rtc_register(WEEKDAY_REGISTER, _weekday);
 1220              		.loc 1 170 12 view .LVU240
 1221 0006 044A     		ldr	r2, .L63
 1222 0008 1370     		strb	r3, [r2]
 171:Core/Src/AB1805.c **** }
 1223              		.loc 1 171 3 is_stmt 1 view .LVU241
 1224 000a 1178     		ldrb	r1, [r2]
 1225 000c C9B2     		uxtb	r1, r1
 1226 000e 0720     		movs	r0, #7
 1227              	.LVL67:
 171:Core/Src/AB1805.c **** }
 1228              		.loc 1 171 3 is_stmt 0 view .LVU242
 1229 0010 FFF7FEFF 		bl	write_rtc_register
 1230              	.LVL68:
 172:Core/Src/AB1805.c **** 
 1231              		.loc 1 172 1 view .LVU243
 1232              		@ sp needed
 1233 0014 10BD     		pop	{r4, pc}
 1234              	.L64:
 1235 0016 C046     		.align	2
 1236              	.L63:
 1237 0018 00000000 		.word	_weekday
 1238              		.cfi_endproc
 1239              	.LFE519:
 1241              		.section	.text.set_date,"ax",%progbits
 1242              		.align	1
 1243              		.global	set_date
 1244              		.syntax unified
 1245              		.code	16
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 98


 1246              		.thumb_func
 1248              	set_date:
 1249              	.LVL69:
 1250              	.LFB520:
 175:Core/Src/AB1805.c ****   _date = value % MAX_DATE;
 1251              		.loc 1 175 1 is_stmt 1 view -0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 0
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 175:Core/Src/AB1805.c ****   _date = value % MAX_DATE;
 1255              		.loc 1 175 1 is_stmt 0 view .LVU245
 1256 0000 10B5     		push	{r4, lr}
 1257              	.LCFI22:
 1258              		.cfi_def_cfa_offset 8
 1259              		.cfi_offset 4, -8
 1260              		.cfi_offset 14, -4
 176:Core/Src/AB1805.c ****   write_rtc_register(DATE_REGISTER, _date);
 1261              		.loc 1 176 3 is_stmt 1 view .LVU246
 176:Core/Src/AB1805.c ****   write_rtc_register(DATE_REGISTER, _date);
 1262              		.loc 1 176 9 is_stmt 0 view .LVU247
 1263 0002 3221     		movs	r1, #50
 1264 0004 FFF7FEFF 		bl	__aeabi_uidivmod
 1265              	.LVL70:
 176:Core/Src/AB1805.c ****   write_rtc_register(DATE_REGISTER, _date);
 1266              		.loc 1 176 9 view .LVU248
 1267 0008 C9B2     		uxtb	r1, r1
 1268 000a 044B     		ldr	r3, .L66
 1269 000c 1970     		strb	r1, [r3]
 177:Core/Src/AB1805.c **** }
 1270              		.loc 1 177 3 is_stmt 1 view .LVU249
 1271 000e 1978     		ldrb	r1, [r3]
 1272 0010 C9B2     		uxtb	r1, r1
 1273 0012 0420     		movs	r0, #4
 1274 0014 FFF7FEFF 		bl	write_rtc_register
 1275              	.LVL71:
 178:Core/Src/AB1805.c **** 
 1276              		.loc 1 178 1 is_stmt 0 view .LVU250
 1277              		@ sp needed
 1278 0018 10BD     		pop	{r4, pc}
 1279              	.L67:
 1280 001a C046     		.align	2
 1281              	.L66:
 1282 001c 00000000 		.word	_date
 1283              		.cfi_endproc
 1284              	.LFE520:
 1286              		.section	.text.set_month,"ax",%progbits
 1287              		.align	1
 1288              		.global	set_month
 1289              		.syntax unified
 1290              		.code	16
 1291              		.thumb_func
 1293              	set_month:
 1294              	.LVL72:
 1295              	.LFB521:
 181:Core/Src/AB1805.c ****   _month = value % MAX_MONTH;
 1296              		.loc 1 181 1 is_stmt 1 view -0
 1297              		.cfi_startproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 99


 1298              		@ args = 0, pretend = 0, frame = 0
 1299              		@ frame_needed = 0, uses_anonymous_args = 0
 181:Core/Src/AB1805.c ****   _month = value % MAX_MONTH;
 1300              		.loc 1 181 1 is_stmt 0 view .LVU252
 1301 0000 10B5     		push	{r4, lr}
 1302              	.LCFI23:
 1303              		.cfi_def_cfa_offset 8
 1304              		.cfi_offset 4, -8
 1305              		.cfi_offset 14, -4
 182:Core/Src/AB1805.c ****   write_rtc_register(MONTH_REGISTER, _month);
 1306              		.loc 1 182 3 is_stmt 1 view .LVU253
 182:Core/Src/AB1805.c ****   write_rtc_register(MONTH_REGISTER, _month);
 1307              		.loc 1 182 10 is_stmt 0 view .LVU254
 1308 0002 1321     		movs	r1, #19
 1309 0004 FFF7FEFF 		bl	__aeabi_uidivmod
 1310              	.LVL73:
 182:Core/Src/AB1805.c ****   write_rtc_register(MONTH_REGISTER, _month);
 1311              		.loc 1 182 10 view .LVU255
 1312 0008 C9B2     		uxtb	r1, r1
 1313 000a 044B     		ldr	r3, .L69
 1314 000c 1970     		strb	r1, [r3]
 183:Core/Src/AB1805.c **** }
 1315              		.loc 1 183 3 is_stmt 1 view .LVU256
 1316 000e 1978     		ldrb	r1, [r3]
 1317 0010 C9B2     		uxtb	r1, r1
 1318 0012 0520     		movs	r0, #5
 1319 0014 FFF7FEFF 		bl	write_rtc_register
 1320              	.LVL74:
 184:Core/Src/AB1805.c **** 
 1321              		.loc 1 184 1 is_stmt 0 view .LVU257
 1322              		@ sp needed
 1323 0018 10BD     		pop	{r4, pc}
 1324              	.L70:
 1325 001a C046     		.align	2
 1326              	.L69:
 1327 001c 00000000 		.word	_month
 1328              		.cfi_endproc
 1329              	.LFE521:
 1331              		.section	.text.set_year,"ax",%progbits
 1332              		.align	1
 1333              		.global	set_year
 1334              		.syntax unified
 1335              		.code	16
 1336              		.thumb_func
 1338              	set_year:
 1339              	.LVL75:
 1340              	.LFB522:
 187:Core/Src/AB1805.c ****   _year = value % MAX_YEAR;
 1341              		.loc 1 187 1 is_stmt 1 view -0
 1342              		.cfi_startproc
 1343              		@ args = 0, pretend = 0, frame = 0
 1344              		@ frame_needed = 0, uses_anonymous_args = 0
 187:Core/Src/AB1805.c ****   _year = value % MAX_YEAR;
 1345              		.loc 1 187 1 is_stmt 0 view .LVU259
 1346 0000 10B5     		push	{r4, lr}
 1347              	.LCFI24:
 1348              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 100


 1349              		.cfi_offset 4, -8
 1350              		.cfi_offset 14, -4
 1351 0002 0100     		movs	r1, r0
 188:Core/Src/AB1805.c ****   write_rtc_register(YEAR_REGISTER, value);
 1352              		.loc 1 188 3 is_stmt 1 view .LVU260
 188:Core/Src/AB1805.c ****   write_rtc_register(YEAR_REGISTER, value);
 1353              		.loc 1 188 9 is_stmt 0 view .LVU261
 1354 0004 024B     		ldr	r3, .L72
 1355 0006 1870     		strb	r0, [r3]
 189:Core/Src/AB1805.c **** }
 1356              		.loc 1 189 3 is_stmt 1 view .LVU262
 1357 0008 0620     		movs	r0, #6
 1358              	.LVL76:
 189:Core/Src/AB1805.c **** }
 1359              		.loc 1 189 3 is_stmt 0 view .LVU263
 1360 000a FFF7FEFF 		bl	write_rtc_register
 1361              	.LVL77:
 190:Core/Src/AB1805.c **** 
 1362              		.loc 1 190 1 view .LVU264
 1363              		@ sp needed
 1364 000e 10BD     		pop	{r4, pc}
 1365              	.L73:
 1366              		.align	2
 1367              	.L72:
 1368 0010 00000000 		.word	_year
 1369              		.cfi_endproc
 1370              	.LFE522:
 1372              		.section	.text.set_datetime,"ax",%progbits
 1373              		.align	1
 1374              		.global	set_datetime
 1375              		.syntax unified
 1376              		.code	16
 1377              		.thumb_func
 1379              	set_datetime:
 1380              	.LVL78:
 1381              	.LFB523:
 193:Core/Src/AB1805.c ****   set_year(year);
 1382              		.loc 1 193 1 is_stmt 1 view -0
 1383              		.cfi_startproc
 1384              		@ args = 12, pretend = 0, frame = 0
 1385              		@ frame_needed = 0, uses_anonymous_args = 0
 193:Core/Src/AB1805.c ****   set_year(year);
 1386              		.loc 1 193 1 is_stmt 0 view .LVU266
 1387 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1388              	.LCFI25:
 1389              		.cfi_def_cfa_offset 24
 1390              		.cfi_offset 3, -24
 1391              		.cfi_offset 4, -20
 1392              		.cfi_offset 5, -16
 1393              		.cfi_offset 6, -12
 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
 1396 0002 CE46     		mov	lr, r9
 1397 0004 4746     		mov	r7, r8
 1398 0006 80B5     		push	{r7, lr}
 1399              	.LCFI26:
 1400              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 101


 1401              		.cfi_offset 8, -32
 1402              		.cfi_offset 9, -28
 1403 0008 0E00     		movs	r6, r1
 1404 000a 1500     		movs	r5, r2
 1405 000c 1C00     		movs	r4, r3
 1406 000e 08AB     		add	r3, sp, #32
 1407              	.LVL79:
 193:Core/Src/AB1805.c ****   set_year(year);
 1408              		.loc 1 193 1 view .LVU267
 1409 0010 1B78     		ldrb	r3, [r3]
 1410              	.LVL80:
 193:Core/Src/AB1805.c ****   set_year(year);
 1411              		.loc 1 193 1 view .LVU268
 1412 0012 9946     		mov	r9, r3
 1413 0014 09AB     		add	r3, sp, #36
 1414              	.LVL81:
 193:Core/Src/AB1805.c ****   set_year(year);
 1415              		.loc 1 193 1 view .LVU269
 1416 0016 1B78     		ldrb	r3, [r3]
 1417              	.LVL82:
 193:Core/Src/AB1805.c ****   set_year(year);
 1418              		.loc 1 193 1 view .LVU270
 1419 0018 9846     		mov	r8, r3
 1420 001a 0AAB     		add	r3, sp, #40
 1421              	.LVL83:
 193:Core/Src/AB1805.c ****   set_year(year);
 1422              		.loc 1 193 1 view .LVU271
 1423 001c 1F78     		ldrb	r7, [r3]
 194:Core/Src/AB1805.c ****   set_month(month);
 1424              		.loc 1 194 3 is_stmt 1 view .LVU272
 1425 001e FFF7FEFF 		bl	set_year
 1426              	.LVL84:
 195:Core/Src/AB1805.c ****   set_date(date);
 1427              		.loc 1 195 3 view .LVU273
 1428 0022 3000     		movs	r0, r6
 1429 0024 FFF7FEFF 		bl	set_month
 1430              	.LVL85:
 196:Core/Src/AB1805.c ****   set_weekday(weekday);
 1431              		.loc 1 196 3 view .LVU274
 1432 0028 2800     		movs	r0, r5
 1433 002a FFF7FEFF 		bl	set_date
 1434              	.LVL86:
 197:Core/Src/AB1805.c ****   set_hour(hour);
 1435              		.loc 1 197 3 view .LVU275
 1436 002e 2000     		movs	r0, r4
 1437 0030 FFF7FEFF 		bl	set_weekday
 1438              	.LVL87:
 198:Core/Src/AB1805.c ****   set_minute(minutes);
 1439              		.loc 1 198 3 view .LVU276
 1440 0034 4846     		mov	r0, r9
 1441 0036 FFF7FEFF 		bl	set_hour
 1442              	.LVL88:
 199:Core/Src/AB1805.c ****   set_second(seconds);
 1443              		.loc 1 199 3 view .LVU277
 1444 003a 4046     		mov	r0, r8
 1445 003c FFF7FEFF 		bl	set_minute
 1446              	.LVL89:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 102


 200:Core/Src/AB1805.c **** }
 1447              		.loc 1 200 3 view .LVU278
 1448 0040 3800     		movs	r0, r7
 1449 0042 FFF7FEFF 		bl	set_second
 1450              	.LVL90:
 201:Core/Src/AB1805.c **** 
 1451              		.loc 1 201 1 is_stmt 0 view .LVU279
 1452              		@ sp needed
 1453 0046 C0BC     		pop	{r6, r7}
 1454 0048 B946     		mov	r9, r7
 1455 004a B046     		mov	r8, r6
 1456 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1457              		.cfi_endproc
 1458              	.LFE523:
 1460              		.section	.text.set_second_alarm,"ax",%progbits
 1461              		.align	1
 1462              		.global	set_second_alarm
 1463              		.syntax unified
 1464              		.code	16
 1465              		.thumb_func
 1467              	set_second_alarm:
 1468              	.LVL91:
 1469              	.LFB531:
 259:Core/Src/AB1805.c ****   _alarm_second = value % MAX_SECOND;
 1470              		.loc 1 259 1 is_stmt 1 view -0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 0
 1473              		@ frame_needed = 0, uses_anonymous_args = 0
 259:Core/Src/AB1805.c ****   _alarm_second = value % MAX_SECOND;
 1474              		.loc 1 259 1 is_stmt 0 view .LVU281
 1475 0000 70B5     		push	{r4, r5, r6, lr}
 1476              	.LCFI27:
 1477              		.cfi_def_cfa_offset 16
 1478              		.cfi_offset 4, -16
 1479              		.cfi_offset 5, -12
 1480              		.cfi_offset 6, -8
 1481              		.cfi_offset 14, -4
 1482 0002 0400     		movs	r4, r0
 260:Core/Src/AB1805.c ****   write_rtc_register(SECOND_ALARM_REGISTER, _alarm_second);
 1483              		.loc 1 260 3 is_stmt 1 view .LVU282
 260:Core/Src/AB1805.c ****   write_rtc_register(SECOND_ALARM_REGISTER, _alarm_second);
 1484              		.loc 1 260 17 is_stmt 0 view .LVU283
 1485 0004 6021     		movs	r1, #96
 1486 0006 FFF7FEFF 		bl	__aeabi_uidivmod
 1487              	.LVL92:
 260:Core/Src/AB1805.c ****   write_rtc_register(SECOND_ALARM_REGISTER, _alarm_second);
 1488              		.loc 1 260 17 view .LVU284
 1489 000a C9B2     		uxtb	r1, r1
 1490 000c 074D     		ldr	r5, .L76
 1491 000e 2970     		strb	r1, [r5]
 261:Core/Src/AB1805.c ****   _alarm_second = get_second_alarm();
 1492              		.loc 1 261 3 is_stmt 1 view .LVU285
 1493 0010 2978     		ldrb	r1, [r5]
 1494 0012 C9B2     		uxtb	r1, r1
 1495 0014 0920     		movs	r0, #9
 1496 0016 FFF7FEFF 		bl	write_rtc_register
 1497              	.LVL93:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 103


 262:Core/Src/AB1805.c ****   return (value == _alarm_second);
 1498              		.loc 1 262 3 view .LVU286
 262:Core/Src/AB1805.c ****   return (value == _alarm_second);
 1499              		.loc 1 262 19 is_stmt 0 view .LVU287
 1500 001a FFF7FEFF 		bl	get_second_alarm
 1501              	.LVL94:
 262:Core/Src/AB1805.c ****   return (value == _alarm_second);
 1502              		.loc 1 262 17 view .LVU288
 1503 001e 2870     		strb	r0, [r5]
 263:Core/Src/AB1805.c **** }
 1504              		.loc 1 263 3 is_stmt 1 view .LVU289
 263:Core/Src/AB1805.c **** }
 1505              		.loc 1 263 17 is_stmt 0 view .LVU290
 1506 0020 2878     		ldrb	r0, [r5]
 1507 0022 001B     		subs	r0, r0, r4
 1508 0024 4342     		rsbs	r3, r0, #0
 1509 0026 5841     		adcs	r0, r0, r3
 1510 0028 C0B2     		uxtb	r0, r0
 264:Core/Src/AB1805.c **** 
 1511              		.loc 1 264 1 view .LVU291
 1512              		@ sp needed
 1513 002a 70BD     		pop	{r4, r5, r6, pc}
 1514              	.L77:
 1515              		.align	2
 1516              	.L76:
 1517 002c 00000000 		.word	_alarm_second
 1518              		.cfi_endproc
 1519              	.LFE531:
 1521              		.section	.text.set_minute_alarm,"ax",%progbits
 1522              		.align	1
 1523              		.global	set_minute_alarm
 1524              		.syntax unified
 1525              		.code	16
 1526              		.thumb_func
 1528              	set_minute_alarm:
 1529              	.LVL95:
 1530              	.LFB532:
 267:Core/Src/AB1805.c ****   _alarm_minute = value % MAX_MINUTE;
 1531              		.loc 1 267 1 is_stmt 1 view -0
 1532              		.cfi_startproc
 1533              		@ args = 0, pretend = 0, frame = 0
 1534              		@ frame_needed = 0, uses_anonymous_args = 0
 267:Core/Src/AB1805.c ****   _alarm_minute = value % MAX_MINUTE;
 1535              		.loc 1 267 1 is_stmt 0 view .LVU293
 1536 0000 70B5     		push	{r4, r5, r6, lr}
 1537              	.LCFI28:
 1538              		.cfi_def_cfa_offset 16
 1539              		.cfi_offset 4, -16
 1540              		.cfi_offset 5, -12
 1541              		.cfi_offset 6, -8
 1542              		.cfi_offset 14, -4
 1543 0002 0400     		movs	r4, r0
 268:Core/Src/AB1805.c ****   write_rtc_register(MINUTE_ALARM_REGISTER, _alarm_minute);
 1544              		.loc 1 268 3 is_stmt 1 view .LVU294
 268:Core/Src/AB1805.c ****   write_rtc_register(MINUTE_ALARM_REGISTER, _alarm_minute);
 1545              		.loc 1 268 17 is_stmt 0 view .LVU295
 1546 0004 6021     		movs	r1, #96
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 104


 1547 0006 FFF7FEFF 		bl	__aeabi_uidivmod
 1548              	.LVL96:
 268:Core/Src/AB1805.c ****   write_rtc_register(MINUTE_ALARM_REGISTER, _alarm_minute);
 1549              		.loc 1 268 17 view .LVU296
 1550 000a C9B2     		uxtb	r1, r1
 1551 000c 074D     		ldr	r5, .L79
 1552 000e 2970     		strb	r1, [r5]
 269:Core/Src/AB1805.c ****   _alarm_minute = get_minute_alarm();
 1553              		.loc 1 269 3 is_stmt 1 view .LVU297
 1554 0010 2978     		ldrb	r1, [r5]
 1555 0012 C9B2     		uxtb	r1, r1
 1556 0014 0A20     		movs	r0, #10
 1557 0016 FFF7FEFF 		bl	write_rtc_register
 1558              	.LVL97:
 270:Core/Src/AB1805.c ****   return (value == _alarm_minute);
 1559              		.loc 1 270 3 view .LVU298
 270:Core/Src/AB1805.c ****   return (value == _alarm_minute);
 1560              		.loc 1 270 19 is_stmt 0 view .LVU299
 1561 001a FFF7FEFF 		bl	get_minute_alarm
 1562              	.LVL98:
 270:Core/Src/AB1805.c ****   return (value == _alarm_minute);
 1563              		.loc 1 270 17 view .LVU300
 1564 001e 2870     		strb	r0, [r5]
 271:Core/Src/AB1805.c **** }
 1565              		.loc 1 271 3 is_stmt 1 view .LVU301
 271:Core/Src/AB1805.c **** }
 1566              		.loc 1 271 17 is_stmt 0 view .LVU302
 1567 0020 2878     		ldrb	r0, [r5]
 1568 0022 001B     		subs	r0, r0, r4
 1569 0024 4342     		rsbs	r3, r0, #0
 1570 0026 5841     		adcs	r0, r0, r3
 1571 0028 C0B2     		uxtb	r0, r0
 272:Core/Src/AB1805.c **** 
 1572              		.loc 1 272 1 view .LVU303
 1573              		@ sp needed
 1574 002a 70BD     		pop	{r4, r5, r6, pc}
 1575              	.L80:
 1576              		.align	2
 1577              	.L79:
 1578 002c 00000000 		.word	_alarm_minute
 1579              		.cfi_endproc
 1580              	.LFE532:
 1582              		.section	.text.set_hour_alarm,"ax",%progbits
 1583              		.align	1
 1584              		.global	set_hour_alarm
 1585              		.syntax unified
 1586              		.code	16
 1587              		.thumb_func
 1589              	set_hour_alarm:
 1590              	.LVL99:
 1591              	.LFB533:
 275:Core/Src/AB1805.c ****   _alarm_hour = value % MAX_HOURS;
 1592              		.loc 1 275 1 is_stmt 1 view -0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 275:Core/Src/AB1805.c ****   _alarm_hour = value % MAX_HOURS;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 105


 1596              		.loc 1 275 1 is_stmt 0 view .LVU305
 1597 0000 70B5     		push	{r4, r5, r6, lr}
 1598              	.LCFI29:
 1599              		.cfi_def_cfa_offset 16
 1600              		.cfi_offset 4, -16
 1601              		.cfi_offset 5, -12
 1602              		.cfi_offset 6, -8
 1603              		.cfi_offset 14, -4
 1604 0002 0400     		movs	r4, r0
 276:Core/Src/AB1805.c ****   write_rtc_register(HOUR_ALARM_REGISTER, _alarm_hour);
 1605              		.loc 1 276 3 is_stmt 1 view .LVU306
 276:Core/Src/AB1805.c ****   write_rtc_register(HOUR_ALARM_REGISTER, _alarm_hour);
 1606              		.loc 1 276 15 is_stmt 0 view .LVU307
 1607 0004 2421     		movs	r1, #36
 1608 0006 FFF7FEFF 		bl	__aeabi_uidivmod
 1609              	.LVL100:
 276:Core/Src/AB1805.c ****   write_rtc_register(HOUR_ALARM_REGISTER, _alarm_hour);
 1610              		.loc 1 276 15 view .LVU308
 1611 000a C9B2     		uxtb	r1, r1
 1612 000c 074D     		ldr	r5, .L82
 1613 000e 2970     		strb	r1, [r5]
 277:Core/Src/AB1805.c ****   _alarm_hour = get_hour_alarm();
 1614              		.loc 1 277 3 is_stmt 1 view .LVU309
 1615 0010 2978     		ldrb	r1, [r5]
 1616 0012 C9B2     		uxtb	r1, r1
 1617 0014 0B20     		movs	r0, #11
 1618 0016 FFF7FEFF 		bl	write_rtc_register
 1619              	.LVL101:
 278:Core/Src/AB1805.c ****   return (value == _alarm_hour);
 1620              		.loc 1 278 3 view .LVU310
 278:Core/Src/AB1805.c ****   return (value == _alarm_hour);
 1621              		.loc 1 278 17 is_stmt 0 view .LVU311
 1622 001a FFF7FEFF 		bl	get_hour_alarm
 1623              	.LVL102:
 278:Core/Src/AB1805.c ****   return (value == _alarm_hour);
 1624              		.loc 1 278 15 view .LVU312
 1625 001e 2870     		strb	r0, [r5]
 279:Core/Src/AB1805.c **** }
 1626              		.loc 1 279 3 is_stmt 1 view .LVU313
 279:Core/Src/AB1805.c **** }
 1627              		.loc 1 279 17 is_stmt 0 view .LVU314
 1628 0020 2878     		ldrb	r0, [r5]
 1629 0022 001B     		subs	r0, r0, r4
 1630 0024 4342     		rsbs	r3, r0, #0
 1631 0026 5841     		adcs	r0, r0, r3
 1632 0028 C0B2     		uxtb	r0, r0
 280:Core/Src/AB1805.c **** 
 1633              		.loc 1 280 1 view .LVU315
 1634              		@ sp needed
 1635 002a 70BD     		pop	{r4, r5, r6, pc}
 1636              	.L83:
 1637              		.align	2
 1638              	.L82:
 1639 002c 00000000 		.word	_alarm_hour
 1640              		.cfi_endproc
 1641              	.LFE533:
 1643              		.section	.text.set_weekday_alarm,"ax",%progbits
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 106


 1644              		.align	1
 1645              		.global	set_weekday_alarm
 1646              		.syntax unified
 1647              		.code	16
 1648              		.thumb_func
 1650              	set_weekday_alarm:
 1651              	.LVL103:
 1652              	.LFB534:
 283:Core/Src/AB1805.c ****   _alarm_weekday = value % MAX_DAY;
 1653              		.loc 1 283 1 is_stmt 1 view -0
 1654              		.cfi_startproc
 1655              		@ args = 0, pretend = 0, frame = 0
 1656              		@ frame_needed = 0, uses_anonymous_args = 0
 283:Core/Src/AB1805.c ****   _alarm_weekday = value % MAX_DAY;
 1657              		.loc 1 283 1 is_stmt 0 view .LVU317
 1658 0000 70B5     		push	{r4, r5, r6, lr}
 1659              	.LCFI30:
 1660              		.cfi_def_cfa_offset 16
 1661              		.cfi_offset 4, -16
 1662              		.cfi_offset 5, -12
 1663              		.cfi_offset 6, -8
 1664              		.cfi_offset 14, -4
 1665 0002 0400     		movs	r4, r0
 284:Core/Src/AB1805.c ****   write_rtc_register(WEEKDAY_ALARM_REGISTER, _alarm_weekday);
 1666              		.loc 1 284 3 is_stmt 1 view .LVU318
 284:Core/Src/AB1805.c ****   write_rtc_register(WEEKDAY_ALARM_REGISTER, _alarm_weekday);
 1667              		.loc 1 284 26 is_stmt 0 view .LVU319
 1668 0004 0723     		movs	r3, #7
 1669 0006 0340     		ands	r3, r0
 284:Core/Src/AB1805.c ****   write_rtc_register(WEEKDAY_ALARM_REGISTER, _alarm_weekday);
 1670              		.loc 1 284 18 view .LVU320
 1671 0008 074D     		ldr	r5, .L85
 1672 000a 2B70     		strb	r3, [r5]
 285:Core/Src/AB1805.c ****   _alarm_weekday = get_weekday_alarm();
 1673              		.loc 1 285 3 is_stmt 1 view .LVU321
 1674 000c 2978     		ldrb	r1, [r5]
 1675 000e C9B2     		uxtb	r1, r1
 1676 0010 0E20     		movs	r0, #14
 1677              	.LVL104:
 285:Core/Src/AB1805.c ****   _alarm_weekday = get_weekday_alarm();
 1678              		.loc 1 285 3 is_stmt 0 view .LVU322
 1679 0012 FFF7FEFF 		bl	write_rtc_register
 1680              	.LVL105:
 286:Core/Src/AB1805.c ****   return (value == _alarm_weekday);
 1681              		.loc 1 286 3 is_stmt 1 view .LVU323
 286:Core/Src/AB1805.c ****   return (value == _alarm_weekday);
 1682              		.loc 1 286 20 is_stmt 0 view .LVU324
 1683 0016 FFF7FEFF 		bl	get_weekday_alarm
 1684              	.LVL106:
 286:Core/Src/AB1805.c ****   return (value == _alarm_weekday);
 1685              		.loc 1 286 18 view .LVU325
 1686 001a 2870     		strb	r0, [r5]
 287:Core/Src/AB1805.c **** }
 1687              		.loc 1 287 3 is_stmt 1 view .LVU326
 287:Core/Src/AB1805.c **** }
 1688              		.loc 1 287 17 is_stmt 0 view .LVU327
 1689 001c 2878     		ldrb	r0, [r5]
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 107


 1690 001e 001B     		subs	r0, r0, r4
 1691 0020 4342     		rsbs	r3, r0, #0
 1692 0022 5841     		adcs	r0, r0, r3
 1693 0024 C0B2     		uxtb	r0, r0
 288:Core/Src/AB1805.c **** 
 1694              		.loc 1 288 1 view .LVU328
 1695              		@ sp needed
 1696 0026 70BD     		pop	{r4, r5, r6, pc}
 1697              	.L86:
 1698              		.align	2
 1699              	.L85:
 1700 0028 00000000 		.word	_alarm_weekday
 1701              		.cfi_endproc
 1702              	.LFE534:
 1704              		.section	.text.set_date_alarm,"ax",%progbits
 1705              		.align	1
 1706              		.global	set_date_alarm
 1707              		.syntax unified
 1708              		.code	16
 1709              		.thumb_func
 1711              	set_date_alarm:
 1712              	.LVL107:
 1713              	.LFB535:
 291:Core/Src/AB1805.c ****   _alarm_date = value % MAX_DATE;
 1714              		.loc 1 291 1 is_stmt 1 view -0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 0
 1717              		@ frame_needed = 0, uses_anonymous_args = 0
 291:Core/Src/AB1805.c ****   _alarm_date = value % MAX_DATE;
 1718              		.loc 1 291 1 is_stmt 0 view .LVU330
 1719 0000 70B5     		push	{r4, r5, r6, lr}
 1720              	.LCFI31:
 1721              		.cfi_def_cfa_offset 16
 1722              		.cfi_offset 4, -16
 1723              		.cfi_offset 5, -12
 1724              		.cfi_offset 6, -8
 1725              		.cfi_offset 14, -4
 1726 0002 0400     		movs	r4, r0
 292:Core/Src/AB1805.c ****   write_rtc_register(DATE_ALARM_REGISTER, _alarm_date);
 1727              		.loc 1 292 3 is_stmt 1 view .LVU331
 292:Core/Src/AB1805.c ****   write_rtc_register(DATE_ALARM_REGISTER, _alarm_date);
 1728              		.loc 1 292 15 is_stmt 0 view .LVU332
 1729 0004 3221     		movs	r1, #50
 1730 0006 FFF7FEFF 		bl	__aeabi_uidivmod
 1731              	.LVL108:
 292:Core/Src/AB1805.c ****   write_rtc_register(DATE_ALARM_REGISTER, _alarm_date);
 1732              		.loc 1 292 15 view .LVU333
 1733 000a C9B2     		uxtb	r1, r1
 1734 000c 074D     		ldr	r5, .L88
 1735 000e 2970     		strb	r1, [r5]
 293:Core/Src/AB1805.c ****   _alarm_date = get_date_alarm();
 1736              		.loc 1 293 3 is_stmt 1 view .LVU334
 1737 0010 2978     		ldrb	r1, [r5]
 1738 0012 C9B2     		uxtb	r1, r1
 1739 0014 0C20     		movs	r0, #12
 1740 0016 FFF7FEFF 		bl	write_rtc_register
 1741              	.LVL109:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 108


 294:Core/Src/AB1805.c ****   return (value == _alarm_date);
 1742              		.loc 1 294 3 view .LVU335
 294:Core/Src/AB1805.c ****   return (value == _alarm_date);
 1743              		.loc 1 294 17 is_stmt 0 view .LVU336
 1744 001a FFF7FEFF 		bl	get_date_alarm
 1745              	.LVL110:
 294:Core/Src/AB1805.c ****   return (value == _alarm_date);
 1746              		.loc 1 294 15 view .LVU337
 1747 001e 2870     		strb	r0, [r5]
 295:Core/Src/AB1805.c **** }
 1748              		.loc 1 295 3 is_stmt 1 view .LVU338
 295:Core/Src/AB1805.c **** }
 1749              		.loc 1 295 17 is_stmt 0 view .LVU339
 1750 0020 2878     		ldrb	r0, [r5]
 1751 0022 001B     		subs	r0, r0, r4
 1752 0024 4342     		rsbs	r3, r0, #0
 1753 0026 5841     		adcs	r0, r0, r3
 1754 0028 C0B2     		uxtb	r0, r0
 296:Core/Src/AB1805.c **** 
 1755              		.loc 1 296 1 view .LVU340
 1756              		@ sp needed
 1757 002a 70BD     		pop	{r4, r5, r6, pc}
 1758              	.L89:
 1759              		.align	2
 1760              	.L88:
 1761 002c 00000000 		.word	_alarm_date
 1762              		.cfi_endproc
 1763              	.LFE535:
 1765              		.section	.text.set_month_alarm,"ax",%progbits
 1766              		.align	1
 1767              		.global	set_month_alarm
 1768              		.syntax unified
 1769              		.code	16
 1770              		.thumb_func
 1772              	set_month_alarm:
 1773              	.LVL111:
 1774              	.LFB536:
 299:Core/Src/AB1805.c ****   _alarm_month = value % MAX_MONTH;
 1775              		.loc 1 299 1 is_stmt 1 view -0
 1776              		.cfi_startproc
 1777              		@ args = 0, pretend = 0, frame = 0
 1778              		@ frame_needed = 0, uses_anonymous_args = 0
 299:Core/Src/AB1805.c ****   _alarm_month = value % MAX_MONTH;
 1779              		.loc 1 299 1 is_stmt 0 view .LVU342
 1780 0000 70B5     		push	{r4, r5, r6, lr}
 1781              	.LCFI32:
 1782              		.cfi_def_cfa_offset 16
 1783              		.cfi_offset 4, -16
 1784              		.cfi_offset 5, -12
 1785              		.cfi_offset 6, -8
 1786              		.cfi_offset 14, -4
 1787 0002 0400     		movs	r4, r0
 300:Core/Src/AB1805.c ****   write_rtc_register(MONTH_ALARM_REGISTER, _alarm_month);
 1788              		.loc 1 300 3 is_stmt 1 view .LVU343
 300:Core/Src/AB1805.c ****   write_rtc_register(MONTH_ALARM_REGISTER, _alarm_month);
 1789              		.loc 1 300 16 is_stmt 0 view .LVU344
 1790 0004 1321     		movs	r1, #19
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 109


 1791 0006 FFF7FEFF 		bl	__aeabi_uidivmod
 1792              	.LVL112:
 300:Core/Src/AB1805.c ****   write_rtc_register(MONTH_ALARM_REGISTER, _alarm_month);
 1793              		.loc 1 300 16 view .LVU345
 1794 000a C9B2     		uxtb	r1, r1
 1795 000c 074D     		ldr	r5, .L91
 1796 000e 2970     		strb	r1, [r5]
 301:Core/Src/AB1805.c ****   _alarm_month = get_month_alarm();
 1797              		.loc 1 301 3 is_stmt 1 view .LVU346
 1798 0010 2978     		ldrb	r1, [r5]
 1799 0012 C9B2     		uxtb	r1, r1
 1800 0014 0D20     		movs	r0, #13
 1801 0016 FFF7FEFF 		bl	write_rtc_register
 1802              	.LVL113:
 302:Core/Src/AB1805.c ****   return (value == _alarm_month);
 1803              		.loc 1 302 3 view .LVU347
 302:Core/Src/AB1805.c ****   return (value == _alarm_month);
 1804              		.loc 1 302 18 is_stmt 0 view .LVU348
 1805 001a FFF7FEFF 		bl	get_month_alarm
 1806              	.LVL114:
 302:Core/Src/AB1805.c ****   return (value == _alarm_month);
 1807              		.loc 1 302 16 view .LVU349
 1808 001e 2870     		strb	r0, [r5]
 303:Core/Src/AB1805.c **** }
 1809              		.loc 1 303 3 is_stmt 1 view .LVU350
 303:Core/Src/AB1805.c **** }
 1810              		.loc 1 303 17 is_stmt 0 view .LVU351
 1811 0020 2878     		ldrb	r0, [r5]
 1812 0022 001B     		subs	r0, r0, r4
 1813 0024 4342     		rsbs	r3, r0, #0
 1814 0026 5841     		adcs	r0, r0, r3
 1815 0028 C0B2     		uxtb	r0, r0
 304:Core/Src/AB1805.c **** 
 1816              		.loc 1 304 1 view .LVU352
 1817              		@ sp needed
 1818 002a 70BD     		pop	{r4, r5, r6, pc}
 1819              	.L92:
 1820              		.align	2
 1821              	.L91:
 1822 002c 00000000 		.word	_alarm_month
 1823              		.cfi_endproc
 1824              	.LFE536:
 1826              		.section	.text.get_date_time,"ax",%progbits
 1827              		.align	1
 1828              		.global	get_date_time
 1829              		.syntax unified
 1830              		.code	16
 1831              		.thumb_func
 1833              	get_date_time:
 1834              	.LFB537:
 349:Core/Src/AB1805.c ****   char *currPos;
 1835              		.loc 1 349 1 is_stmt 1 view -0
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 0
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 1839 0000 70B5     		push	{r4, r5, r6, lr}
 1840              	.LCFI33:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 110


 1841              		.cfi_def_cfa_offset 16
 1842              		.cfi_offset 4, -16
 1843              		.cfi_offset 5, -12
 1844              		.cfi_offset 6, -8
 1845              		.cfi_offset 14, -4
 350:Core/Src/AB1805.c ****   currPos = data_time_string;
 1846              		.loc 1 350 3 view .LVU354
 351:Core/Src/AB1805.c ****   *currPos = 0;
 1847              		.loc 1 351 3 view .LVU355
 1848              	.LVL115:
 352:Core/Src/AB1805.c ****   get_datetime();
 1849              		.loc 1 352 3 view .LVU356
 352:Core/Src/AB1805.c ****   get_datetime();
 1850              		.loc 1 352 12 is_stmt 0 view .LVU357
 1851 0002 2B4C     		ldr	r4, .L94
 1852 0004 0023     		movs	r3, #0
 1853 0006 2370     		strb	r3, [r4]
 353:Core/Src/AB1805.c **** 
 1854              		.loc 1 353 3 is_stmt 1 view .LVU358
 1855 0008 FFF7FEFF 		bl	get_datetime
 1856              	.LVL116:
 355:Core/Src/AB1805.c ****   currPos++;
 1857              		.loc 1 355 3 view .LVU359
 355:Core/Src/AB1805.c ****   currPos++;
 1858              		.loc 1 355 30 is_stmt 0 view .LVU360
 1859 000c 2949     		ldr	r1, .L94+4
 1860 000e 0A78     		ldrb	r2, [r1]
 1861 0010 1209     		lsrs	r2, r2, #4
 1862 0012 0F23     		movs	r3, #15
 1863 0014 1A40     		ands	r2, r3
 355:Core/Src/AB1805.c ****   currPos++;
 1864              		.loc 1 355 36 view .LVU361
 1865 0016 3032     		adds	r2, r2, #48
 355:Core/Src/AB1805.c ****   currPos++;
 1866              		.loc 1 355 12 view .LVU362
 1867 0018 2270     		strb	r2, [r4]
 356:Core/Src/AB1805.c ****   *currPos = (_date & 0x0F) + 0x30;
 1868              		.loc 1 356 3 is_stmt 1 view .LVU363
 1869              	.LVL117:
 357:Core/Src/AB1805.c ****   currPos++;
 1870              		.loc 1 357 3 view .LVU364
 357:Core/Src/AB1805.c ****   currPos++;
 1871              		.loc 1 357 21 is_stmt 0 view .LVU365
 1872 001a 0A78     		ldrb	r2, [r1]
 1873 001c 1A40     		ands	r2, r3
 357:Core/Src/AB1805.c ****   currPos++;
 1874              		.loc 1 357 29 view .LVU366
 1875 001e 3032     		adds	r2, r2, #48
 357:Core/Src/AB1805.c ****   currPos++;
 1876              		.loc 1 357 12 view .LVU367
 1877 0020 6270     		strb	r2, [r4, #1]
 358:Core/Src/AB1805.c **** 
 1878              		.loc 1 358 3 is_stmt 1 view .LVU368
 1879              	.LVL118:
 360:Core/Src/AB1805.c ****   currPos++;
 1880              		.loc 1 360 3 view .LVU369
 360:Core/Src/AB1805.c ****   currPos++;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 111


 1881              		.loc 1 360 12 is_stmt 0 view .LVU370
 1882 0022 2F21     		movs	r1, #47
 1883 0024 A170     		strb	r1, [r4, #2]
 361:Core/Src/AB1805.c **** 
 1884              		.loc 1 361 3 is_stmt 1 view .LVU371
 1885              	.LVL119:
 363:Core/Src/AB1805.c ****   currPos++;
 1886              		.loc 1 363 3 view .LVU372
 363:Core/Src/AB1805.c ****   currPos++;
 1887              		.loc 1 363 31 is_stmt 0 view .LVU373
 1888 0026 2448     		ldr	r0, .L94+8
 1889 0028 0278     		ldrb	r2, [r0]
 1890 002a 1209     		lsrs	r2, r2, #4
 1891 002c 1A40     		ands	r2, r3
 363:Core/Src/AB1805.c ****   currPos++;
 1892              		.loc 1 363 37 view .LVU374
 1893 002e 3032     		adds	r2, r2, #48
 363:Core/Src/AB1805.c ****   currPos++;
 1894              		.loc 1 363 12 view .LVU375
 1895 0030 E270     		strb	r2, [r4, #3]
 364:Core/Src/AB1805.c ****   *currPos = (_month & 0x0F) + 0x30;
 1896              		.loc 1 364 3 is_stmt 1 view .LVU376
 1897              	.LVL120:
 365:Core/Src/AB1805.c ****   currPos++;
 1898              		.loc 1 365 3 view .LVU377
 365:Core/Src/AB1805.c ****   currPos++;
 1899              		.loc 1 365 22 is_stmt 0 view .LVU378
 1900 0032 0278     		ldrb	r2, [r0]
 1901 0034 1A40     		ands	r2, r3
 365:Core/Src/AB1805.c ****   currPos++;
 1902              		.loc 1 365 30 view .LVU379
 1903 0036 3032     		adds	r2, r2, #48
 365:Core/Src/AB1805.c ****   currPos++;
 1904              		.loc 1 365 12 view .LVU380
 1905 0038 2271     		strb	r2, [r4, #4]
 366:Core/Src/AB1805.c **** 
 1906              		.loc 1 366 3 is_stmt 1 view .LVU381
 1907              	.LVL121:
 368:Core/Src/AB1805.c ****   currPos++;
 1908              		.loc 1 368 3 view .LVU382
 368:Core/Src/AB1805.c ****   currPos++;
 1909              		.loc 1 368 12 is_stmt 0 view .LVU383
 1910 003a 6171     		strb	r1, [r4, #5]
 369:Core/Src/AB1805.c **** 
 1911              		.loc 1 369 3 is_stmt 1 view .LVU384
 1912              	.LVL122:
 371:Core/Src/AB1805.c ****   currPos++;
 1913              		.loc 1 371 3 view .LVU385
 371:Core/Src/AB1805.c ****   currPos++;
 1914              		.loc 1 371 30 is_stmt 0 view .LVU386
 1915 003c 1F49     		ldr	r1, .L94+12
 1916 003e 0A78     		ldrb	r2, [r1]
 1917 0040 1209     		lsrs	r2, r2, #4
 1918 0042 1A40     		ands	r2, r3
 371:Core/Src/AB1805.c ****   currPos++;
 1919              		.loc 1 371 36 view .LVU387
 1920 0044 3032     		adds	r2, r2, #48
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 112


 371:Core/Src/AB1805.c ****   currPos++;
 1921              		.loc 1 371 12 view .LVU388
 1922 0046 A271     		strb	r2, [r4, #6]
 372:Core/Src/AB1805.c ****   *currPos = (_year & 0x0F) + 0x30;
 1923              		.loc 1 372 3 is_stmt 1 view .LVU389
 1924              	.LVL123:
 373:Core/Src/AB1805.c ****   currPos++;
 1925              		.loc 1 373 3 view .LVU390
 373:Core/Src/AB1805.c ****   currPos++;
 1926              		.loc 1 373 21 is_stmt 0 view .LVU391
 1927 0048 0A78     		ldrb	r2, [r1]
 1928 004a 1A40     		ands	r2, r3
 373:Core/Src/AB1805.c ****   currPos++;
 1929              		.loc 1 373 29 view .LVU392
 1930 004c 3032     		adds	r2, r2, #48
 373:Core/Src/AB1805.c ****   currPos++;
 1931              		.loc 1 373 12 view .LVU393
 1932 004e E271     		strb	r2, [r4, #7]
 374:Core/Src/AB1805.c **** 
 1933              		.loc 1 374 3 is_stmt 1 view .LVU394
 1934              	.LVL124:
 376:Core/Src/AB1805.c ****   currPos++;
 1935              		.loc 1 376 3 view .LVU395
 376:Core/Src/AB1805.c ****   currPos++;
 1936              		.loc 1 376 12 is_stmt 0 view .LVU396
 1937 0050 2021     		movs	r1, #32
 1938 0052 2172     		strb	r1, [r4, #8]
 377:Core/Src/AB1805.c **** 
 1939              		.loc 1 377 3 is_stmt 1 view .LVU397
 1940              	.LVL125:
 379:Core/Src/AB1805.c ****   currPos++;
 1941              		.loc 1 379 3 view .LVU398
 379:Core/Src/AB1805.c ****   currPos++;
 1942              		.loc 1 379 30 is_stmt 0 view .LVU399
 1943 0054 1A48     		ldr	r0, .L94+16
 1944 0056 0278     		ldrb	r2, [r0]
 1945 0058 1209     		lsrs	r2, r2, #4
 1946 005a 1A40     		ands	r2, r3
 379:Core/Src/AB1805.c ****   currPos++;
 1947              		.loc 1 379 36 view .LVU400
 1948 005c 3032     		adds	r2, r2, #48
 379:Core/Src/AB1805.c ****   currPos++;
 1949              		.loc 1 379 12 view .LVU401
 1950 005e 6272     		strb	r2, [r4, #9]
 380:Core/Src/AB1805.c ****   *currPos = (_hour & 0x0F) + 0x30;
 1951              		.loc 1 380 3 is_stmt 1 view .LVU402
 1952              	.LVL126:
 381:Core/Src/AB1805.c ****   currPos++;
 1953              		.loc 1 381 3 view .LVU403
 381:Core/Src/AB1805.c ****   currPos++;
 1954              		.loc 1 381 21 is_stmt 0 view .LVU404
 1955 0060 0278     		ldrb	r2, [r0]
 1956 0062 1A40     		ands	r2, r3
 381:Core/Src/AB1805.c ****   currPos++;
 1957              		.loc 1 381 29 view .LVU405
 1958 0064 3032     		adds	r2, r2, #48
 381:Core/Src/AB1805.c ****   currPos++;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 113


 1959              		.loc 1 381 12 view .LVU406
 1960 0066 A272     		strb	r2, [r4, #10]
 382:Core/Src/AB1805.c **** 
 1961              		.loc 1 382 3 is_stmt 1 view .LVU407
 1962              	.LVL127:
 384:Core/Src/AB1805.c ****   currPos++;
 1963              		.loc 1 384 3 view .LVU408
 384:Core/Src/AB1805.c ****   currPos++;
 1964              		.loc 1 384 12 is_stmt 0 view .LVU409
 1965 0068 3A20     		movs	r0, #58
 1966 006a E072     		strb	r0, [r4, #11]
 385:Core/Src/AB1805.c **** 
 1967              		.loc 1 385 3 is_stmt 1 view .LVU410
 1968              	.LVL128:
 387:Core/Src/AB1805.c ****   currPos++;
 1969              		.loc 1 387 3 view .LVU411
 387:Core/Src/AB1805.c ****   currPos++;
 1970              		.loc 1 387 32 is_stmt 0 view .LVU412
 1971 006c 154D     		ldr	r5, .L94+20
 1972 006e 2A78     		ldrb	r2, [r5]
 1973 0070 1209     		lsrs	r2, r2, #4
 1974 0072 1A40     		ands	r2, r3
 387:Core/Src/AB1805.c ****   currPos++;
 1975              		.loc 1 387 38 view .LVU413
 1976 0074 3032     		adds	r2, r2, #48
 387:Core/Src/AB1805.c ****   currPos++;
 1977              		.loc 1 387 12 view .LVU414
 1978 0076 2273     		strb	r2, [r4, #12]
 388:Core/Src/AB1805.c ****   *currPos = (_minute & 0x0F) + 0x30;
 1979              		.loc 1 388 3 is_stmt 1 view .LVU415
 1980              	.LVL129:
 389:Core/Src/AB1805.c ****   currPos++;
 1981              		.loc 1 389 3 view .LVU416
 389:Core/Src/AB1805.c ****   currPos++;
 1982              		.loc 1 389 23 is_stmt 0 view .LVU417
 1983 0078 2A78     		ldrb	r2, [r5]
 1984 007a 1A40     		ands	r2, r3
 389:Core/Src/AB1805.c ****   currPos++;
 1985              		.loc 1 389 31 view .LVU418
 1986 007c 3032     		adds	r2, r2, #48
 389:Core/Src/AB1805.c ****   currPos++;
 1987              		.loc 1 389 12 view .LVU419
 1988 007e 6273     		strb	r2, [r4, #13]
 390:Core/Src/AB1805.c **** 
 1989              		.loc 1 390 3 is_stmt 1 view .LVU420
 1990              	.LVL130:
 392:Core/Src/AB1805.c ****   currPos++;
 1991              		.loc 1 392 3 view .LVU421
 392:Core/Src/AB1805.c ****   currPos++;
 1992              		.loc 1 392 12 is_stmt 0 view .LVU422
 1993 0080 A073     		strb	r0, [r4, #14]
 393:Core/Src/AB1805.c **** 
 1994              		.loc 1 393 3 is_stmt 1 view .LVU423
 1995              	.LVL131:
 395:Core/Src/AB1805.c ****   currPos++;
 1996              		.loc 1 395 3 view .LVU424
 395:Core/Src/AB1805.c ****   currPos++;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 114


 1997              		.loc 1 395 32 is_stmt 0 view .LVU425
 1998 0082 1148     		ldr	r0, .L94+24
 1999 0084 0278     		ldrb	r2, [r0]
 2000 0086 1209     		lsrs	r2, r2, #4
 2001 0088 1A40     		ands	r2, r3
 395:Core/Src/AB1805.c ****   currPos++;
 2002              		.loc 1 395 38 view .LVU426
 2003 008a 3032     		adds	r2, r2, #48
 395:Core/Src/AB1805.c ****   currPos++;
 2004              		.loc 1 395 12 view .LVU427
 2005 008c E273     		strb	r2, [r4, #15]
 396:Core/Src/AB1805.c ****   *currPos = (_second & 0x0F) + 0x30;
 2006              		.loc 1 396 3 is_stmt 1 view .LVU428
 2007              	.LVL132:
 397:Core/Src/AB1805.c ****   currPos++;
 2008              		.loc 1 397 3 view .LVU429
 397:Core/Src/AB1805.c ****   currPos++;
 2009              		.loc 1 397 23 is_stmt 0 view .LVU430
 2010 008e 0278     		ldrb	r2, [r0]
 2011 0090 1A40     		ands	r2, r3
 397:Core/Src/AB1805.c ****   currPos++;
 2012              		.loc 1 397 31 view .LVU431
 2013 0092 3032     		adds	r2, r2, #48
 397:Core/Src/AB1805.c ****   currPos++;
 2014              		.loc 1 397 12 view .LVU432
 2015 0094 2274     		strb	r2, [r4, #16]
 398:Core/Src/AB1805.c **** 
 2016              		.loc 1 398 3 is_stmt 1 view .LVU433
 2017              	.LVL133:
 400:Core/Src/AB1805.c ****   currPos++;
 2018              		.loc 1 400 3 view .LVU434
 400:Core/Src/AB1805.c ****   currPos++;
 2019              		.loc 1 400 12 is_stmt 0 view .LVU435
 2020 0096 6174     		strb	r1, [r4, #17]
 401:Core/Src/AB1805.c **** 
 2021              		.loc 1 401 3 is_stmt 1 view .LVU436
 2022              	.LVL134:
 403:Core/Src/AB1805.c ****   currPos++;
 2023              		.loc 1 403 3 view .LVU437
 403:Core/Src/AB1805.c ****   currPos++;
 2024              		.loc 1 403 35 is_stmt 0 view .LVU438
 2025 0098 0C49     		ldr	r1, .L94+28
 2026 009a 0A78     		ldrb	r2, [r1]
 2027 009c 1209     		lsrs	r2, r2, #4
 2028 009e 1A40     		ands	r2, r3
 403:Core/Src/AB1805.c ****   currPos++;
 2029              		.loc 1 403 41 view .LVU439
 2030 00a0 3032     		adds	r2, r2, #48
 403:Core/Src/AB1805.c ****   currPos++;
 2031              		.loc 1 403 12 view .LVU440
 2032 00a2 A274     		strb	r2, [r4, #18]
 404:Core/Src/AB1805.c ****   *currPos = (_hundredth & 0x0F) + 0x30;
 2033              		.loc 1 404 3 is_stmt 1 view .LVU441
 2034              	.LVL135:
 405:Core/Src/AB1805.c ****   currPos++;
 2035              		.loc 1 405 3 view .LVU442
 405:Core/Src/AB1805.c ****   currPos++;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 115


 2036              		.loc 1 405 26 is_stmt 0 view .LVU443
 2037 00a4 0A78     		ldrb	r2, [r1]
 2038 00a6 1340     		ands	r3, r2
 405:Core/Src/AB1805.c ****   currPos++;
 2039              		.loc 1 405 34 view .LVU444
 2040 00a8 3033     		adds	r3, r3, #48
 405:Core/Src/AB1805.c ****   currPos++;
 2041              		.loc 1 405 12 view .LVU445
 2042 00aa E374     		strb	r3, [r4, #19]
 406:Core/Src/AB1805.c **** 
 2043              		.loc 1 406 3 is_stmt 1 view .LVU446
 2044              	.LVL136:
 408:Core/Src/AB1805.c **** }
 2045              		.loc 1 408 3 view .LVU447
 409:Core/Src/AB1805.c **** 
 2046              		.loc 1 409 1 is_stmt 0 view .LVU448
 2047 00ac 2000     		movs	r0, r4
 2048              		@ sp needed
 2049 00ae 70BD     		pop	{r4, r5, r6, pc}
 2050              	.L95:
 2051              		.align	2
 2052              	.L94:
 2053 00b0 00000000 		.word	data_time_string
 2054 00b4 00000000 		.word	_date
 2055 00b8 00000000 		.word	_month
 2056 00bc 00000000 		.word	_year
 2057 00c0 00000000 		.word	_hour
 2058 00c4 00000000 		.word	_minute
 2059 00c8 00000000 		.word	_second
 2060 00cc 00000000 		.word	_hundredth
 2061              		.cfi_endproc
 2062              	.LFE537:
 2064              		.section	.text.dec_hex,"ax",%progbits
 2065              		.align	1
 2066              		.global	dec_hex
 2067              		.syntax unified
 2068              		.code	16
 2069              		.thumb_func
 2071              	dec_hex:
 2072              	.LVL137:
 2073              	.LFB538:
 412:Core/Src/AB1805.c ****   uint8_t ret;
 2074              		.loc 1 412 1 is_stmt 1 view -0
 2075              		.cfi_startproc
 2076              		@ args = 0, pretend = 0, frame = 0
 2077              		@ frame_needed = 0, uses_anonymous_args = 0
 2078              		@ link register save eliminated.
 413:Core/Src/AB1805.c ****   ret = (tens << 4) + digits;
 2079              		.loc 1 413 3 view .LVU450
 414:Core/Src/AB1805.c ****   return ret;
 2080              		.loc 1 414 3 view .LVU451
 414:Core/Src/AB1805.c ****   return ret;
 2081              		.loc 1 414 15 is_stmt 0 view .LVU452
 2082 0000 0001     		lsls	r0, r0, #4
 2083              	.LVL138:
 414:Core/Src/AB1805.c ****   return ret;
 2084              		.loc 1 414 15 view .LVU453
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 116


 2085 0002 C0B2     		uxtb	r0, r0
 414:Core/Src/AB1805.c ****   return ret;
 2086              		.loc 1 414 7 view .LVU454
 2087 0004 4018     		adds	r0, r0, r1
 2088 0006 C0B2     		uxtb	r0, r0
 2089              	.LVL139:
 415:Core/Src/AB1805.c **** }
 2090              		.loc 1 415 3 is_stmt 1 view .LVU455
 416:Core/Src/AB1805.c **** 
 2091              		.loc 1 416 1 is_stmt 0 view .LVU456
 2092              		@ sp needed
 2093 0008 7047     		bx	lr
 2094              		.cfi_endproc
 2095              	.LFE538:
 2097              		.section	.text.hex_dec,"ax",%progbits
 2098              		.align	1
 2099              		.global	hex_dec
 2100              		.syntax unified
 2101              		.code	16
 2102              		.thumb_func
 2104              	hex_dec:
 2105              	.LVL140:
 2106              	.LFB539:
 419:Core/Src/AB1805.c ****   uint8_t ret;
 2107              		.loc 1 419 1 is_stmt 1 view -0
 2108              		.cfi_startproc
 2109              		@ args = 0, pretend = 0, frame = 0
 2110              		@ frame_needed = 0, uses_anonymous_args = 0
 2111              		@ link register save eliminated.
 419:Core/Src/AB1805.c ****   uint8_t ret;
 2112              		.loc 1 419 1 is_stmt 0 view .LVU458
 2113 0000 0200     		movs	r2, r0
 420:Core/Src/AB1805.c ****   ret = ((hex >> 4) & 0xF * 10) + (hex & 0xF);
 2114              		.loc 1 420 3 is_stmt 1 view .LVU459
 421:Core/Src/AB1805.c ****   return ret;
 2115              		.loc 1 421 3 view .LVU460
 421:Core/Src/AB1805.c ****   return ret;
 2116              		.loc 1 421 21 is_stmt 0 view .LVU461
 2117 0002 0009     		lsrs	r0, r0, #4
 2118              	.LVL141:
 421:Core/Src/AB1805.c ****   return ret;
 2119              		.loc 1 421 21 view .LVU462
 2120 0004 6923     		movs	r3, #105
 2121 0006 9843     		bics	r0, r3
 421:Core/Src/AB1805.c ****   return ret;
 2122              		.loc 1 421 40 view .LVU463
 2123 0008 0F21     		movs	r1, #15
 2124 000a 0A40     		ands	r2, r1
 421:Core/Src/AB1805.c ****   return ret;
 2125              		.loc 1 421 7 view .LVU464
 2126 000c 8018     		adds	r0, r0, r2
 2127              	.LVL142:
 422:Core/Src/AB1805.c **** }
 2128              		.loc 1 422 3 is_stmt 1 view .LVU465
 423:Core/Src/AB1805.c **** 
 2129              		.loc 1 423 1 is_stmt 0 view .LVU466
 2130              		@ sp needed
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 117


 2131 000e 7047     		bx	lr
 2132              		.cfi_endproc
 2133              	.LFE539:
 2135              		.section	.text.get_status,"ax",%progbits
 2136              		.align	1
 2137              		.global	get_status
 2138              		.syntax unified
 2139              		.code	16
 2140              		.thumb_func
 2142              	get_status:
 2143              	.LFB540:
 427:Core/Src/AB1805.c ****   _status = get_rtc_data(STATU_REGISTER, STATUS_READ_ALL_MASK);
 2144              		.loc 1 427 1 is_stmt 1 view -0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 2148 0000 10B5     		push	{r4, lr}
 2149              	.LCFI34:
 2150              		.cfi_def_cfa_offset 8
 2151              		.cfi_offset 4, -8
 2152              		.cfi_offset 14, -4
 428:Core/Src/AB1805.c ****   return _status;
 2153              		.loc 1 428 3 view .LVU468
 428:Core/Src/AB1805.c ****   return _status;
 2154              		.loc 1 428 13 is_stmt 0 view .LVU469
 2155 0002 FF21     		movs	r1, #255
 2156 0004 0F20     		movs	r0, #15
 2157 0006 FFF7FEFF 		bl	get_rtc_data
 2158              	.LVL143:
 428:Core/Src/AB1805.c ****   return _status;
 2159              		.loc 1 428 11 view .LVU470
 2160 000a 014B     		ldr	r3, .L99
 2161 000c 1870     		strb	r0, [r3]
 429:Core/Src/AB1805.c **** }
 2162              		.loc 1 429 3 is_stmt 1 view .LVU471
 430:Core/Src/AB1805.c **** 
 2163              		.loc 1 430 1 is_stmt 0 view .LVU472
 2164              		@ sp needed
 2165 000e 10BD     		pop	{r4, pc}
 2166              	.L100:
 2167              		.align	2
 2168              	.L99:
 2169 0010 00000000 		.word	_status
 2170              		.cfi_endproc
 2171              	.LFE540:
 2173              		.section	.text.get_CB_status,"ax",%progbits
 2174              		.align	1
 2175              		.global	get_CB_status
 2176              		.syntax unified
 2177              		.code	16
 2178              		.thumb_func
 2180              	get_CB_status:
 2181              	.LFB541:
 433:Core/Src/AB1805.c ****   get_status();
 2182              		.loc 1 433 1 is_stmt 1 view -0
 2183              		.cfi_startproc
 2184              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 118


 2185              		@ frame_needed = 0, uses_anonymous_args = 0
 2186 0000 10B5     		push	{r4, lr}
 2187              	.LCFI35:
 2188              		.cfi_def_cfa_offset 8
 2189              		.cfi_offset 4, -8
 2190              		.cfi_offset 14, -4
 434:Core/Src/AB1805.c ****   return (_status & (STATUS_CB_MASK > 7));
 2191              		.loc 1 434 3 view .LVU474
 2192 0002 FFF7FEFF 		bl	get_status
 2193              	.LVL144:
 435:Core/Src/AB1805.c **** };
 2194              		.loc 1 435 3 view .LVU475
 435:Core/Src/AB1805.c **** };
 2195              		.loc 1 435 19 is_stmt 0 view .LVU476
 2196 0006 024B     		ldr	r3, .L102
 2197 0008 1B78     		ldrb	r3, [r3]
 2198 000a 0120     		movs	r0, #1
 2199 000c 1840     		ands	r0, r3
 436:Core/Src/AB1805.c **** 
 2200              		.loc 1 436 1 view .LVU477
 2201              		@ sp needed
 2202 000e 10BD     		pop	{r4, pc}
 2203              	.L103:
 2204              		.align	2
 2205              	.L102:
 2206 0010 00000000 		.word	_status
 2207              		.cfi_endproc
 2208              	.LFE541:
 2210              		.section	.text.get_BAT_status,"ax",%progbits
 2211              		.align	1
 2212              		.global	get_BAT_status
 2213              		.syntax unified
 2214              		.code	16
 2215              		.thumb_func
 2217              	get_BAT_status:
 2218              	.LFB542:
 439:Core/Src/AB1805.c ****   get_status();
 2219              		.loc 1 439 1 is_stmt 1 view -0
 2220              		.cfi_startproc
 2221              		@ args = 0, pretend = 0, frame = 0
 2222              		@ frame_needed = 0, uses_anonymous_args = 0
 2223 0000 10B5     		push	{r4, lr}
 2224              	.LCFI36:
 2225              		.cfi_def_cfa_offset 8
 2226              		.cfi_offset 4, -8
 2227              		.cfi_offset 14, -4
 440:Core/Src/AB1805.c ****   return (_status & (STATUS_BAT_MASK > 6));
 2228              		.loc 1 440 3 view .LVU479
 2229 0002 FFF7FEFF 		bl	get_status
 2230              	.LVL145:
 441:Core/Src/AB1805.c **** };
 2231              		.loc 1 441 3 view .LVU480
 441:Core/Src/AB1805.c **** };
 2232              		.loc 1 441 19 is_stmt 0 view .LVU481
 2233 0006 024B     		ldr	r3, .L105
 2234 0008 1B78     		ldrb	r3, [r3]
 2235 000a 0120     		movs	r0, #1
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 119


 2236 000c 1840     		ands	r0, r3
 442:Core/Src/AB1805.c **** 
 2237              		.loc 1 442 1 view .LVU482
 2238              		@ sp needed
 2239 000e 10BD     		pop	{r4, pc}
 2240              	.L106:
 2241              		.align	2
 2242              	.L105:
 2243 0010 00000000 		.word	_status
 2244              		.cfi_endproc
 2245              	.LFE542:
 2247              		.section	.text.get_WDT_status,"ax",%progbits
 2248              		.align	1
 2249              		.global	get_WDT_status
 2250              		.syntax unified
 2251              		.code	16
 2252              		.thumb_func
 2254              	get_WDT_status:
 2255              	.LFB543:
 445:Core/Src/AB1805.c ****   get_status();
 2256              		.loc 1 445 1 is_stmt 1 view -0
 2257              		.cfi_startproc
 2258              		@ args = 0, pretend = 0, frame = 0
 2259              		@ frame_needed = 0, uses_anonymous_args = 0
 2260 0000 10B5     		push	{r4, lr}
 2261              	.LCFI37:
 2262              		.cfi_def_cfa_offset 8
 2263              		.cfi_offset 4, -8
 2264              		.cfi_offset 14, -4
 446:Core/Src/AB1805.c ****   return (_status & (STATUS_WDT_MASK > 5));
 2265              		.loc 1 446 3 view .LVU484
 2266 0002 FFF7FEFF 		bl	get_status
 2267              	.LVL146:
 447:Core/Src/AB1805.c **** };
 2268              		.loc 1 447 3 view .LVU485
 447:Core/Src/AB1805.c **** };
 2269              		.loc 1 447 19 is_stmt 0 view .LVU486
 2270 0006 024B     		ldr	r3, .L108
 2271 0008 1B78     		ldrb	r3, [r3]
 2272 000a 0120     		movs	r0, #1
 2273 000c 1840     		ands	r0, r3
 448:Core/Src/AB1805.c **** 
 2274              		.loc 1 448 1 view .LVU487
 2275              		@ sp needed
 2276 000e 10BD     		pop	{r4, pc}
 2277              	.L109:
 2278              		.align	2
 2279              	.L108:
 2280 0010 00000000 		.word	_status
 2281              		.cfi_endproc
 2282              	.LFE543:
 2284              		.section	.text.get_BL_status,"ax",%progbits
 2285              		.align	1
 2286              		.global	get_BL_status
 2287              		.syntax unified
 2288              		.code	16
 2289              		.thumb_func
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 120


 2291              	get_BL_status:
 2292              	.LFB544:
 451:Core/Src/AB1805.c ****   get_status();
 2293              		.loc 1 451 1 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297 0000 10B5     		push	{r4, lr}
 2298              	.LCFI38:
 2299              		.cfi_def_cfa_offset 8
 2300              		.cfi_offset 4, -8
 2301              		.cfi_offset 14, -4
 452:Core/Src/AB1805.c ****   return (_status & (STATUS_BL_MASK > 4));
 2302              		.loc 1 452 3 view .LVU489
 2303 0002 FFF7FEFF 		bl	get_status
 2304              	.LVL147:
 453:Core/Src/AB1805.c **** };
 2305              		.loc 1 453 3 view .LVU490
 453:Core/Src/AB1805.c **** };
 2306              		.loc 1 453 19 is_stmt 0 view .LVU491
 2307 0006 024B     		ldr	r3, .L111
 2308 0008 1B78     		ldrb	r3, [r3]
 2309 000a 0120     		movs	r0, #1
 2310 000c 1840     		ands	r0, r3
 454:Core/Src/AB1805.c **** 
 2311              		.loc 1 454 1 view .LVU492
 2312              		@ sp needed
 2313 000e 10BD     		pop	{r4, pc}
 2314              	.L112:
 2315              		.align	2
 2316              	.L111:
 2317 0010 00000000 		.word	_status
 2318              		.cfi_endproc
 2319              	.LFE544:
 2321              		.section	.text.get_TIM_status,"ax",%progbits
 2322              		.align	1
 2323              		.global	get_TIM_status
 2324              		.syntax unified
 2325              		.code	16
 2326              		.thumb_func
 2328              	get_TIM_status:
 2329              	.LFB545:
 457:Core/Src/AB1805.c ****   get_status();
 2330              		.loc 1 457 1 is_stmt 1 view -0
 2331              		.cfi_startproc
 2332              		@ args = 0, pretend = 0, frame = 0
 2333              		@ frame_needed = 0, uses_anonymous_args = 0
 2334 0000 10B5     		push	{r4, lr}
 2335              	.LCFI39:
 2336              		.cfi_def_cfa_offset 8
 2337              		.cfi_offset 4, -8
 2338              		.cfi_offset 14, -4
 458:Core/Src/AB1805.c ****   return (_status & (STATUS_TIM_MASK > 3));
 2339              		.loc 1 458 3 view .LVU494
 2340 0002 FFF7FEFF 		bl	get_status
 2341              	.LVL148:
 459:Core/Src/AB1805.c **** };
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 121


 2342              		.loc 1 459 3 view .LVU495
 459:Core/Src/AB1805.c **** };
 2343              		.loc 1 459 19 is_stmt 0 view .LVU496
 2344 0006 024B     		ldr	r3, .L114
 2345 0008 1B78     		ldrb	r3, [r3]
 2346 000a 0120     		movs	r0, #1
 2347 000c 1840     		ands	r0, r3
 460:Core/Src/AB1805.c **** 
 2348              		.loc 1 460 1 view .LVU497
 2349              		@ sp needed
 2350 000e 10BD     		pop	{r4, pc}
 2351              	.L115:
 2352              		.align	2
 2353              	.L114:
 2354 0010 00000000 		.word	_status
 2355              		.cfi_endproc
 2356              	.LFE545:
 2358              		.section	.text.get_ALM_status,"ax",%progbits
 2359              		.align	1
 2360              		.global	get_ALM_status
 2361              		.syntax unified
 2362              		.code	16
 2363              		.thumb_func
 2365              	get_ALM_status:
 2366              	.LFB546:
 463:Core/Src/AB1805.c ****   get_status();
 2367              		.loc 1 463 1 is_stmt 1 view -0
 2368              		.cfi_startproc
 2369              		@ args = 0, pretend = 0, frame = 0
 2370              		@ frame_needed = 0, uses_anonymous_args = 0
 2371 0000 10B5     		push	{r4, lr}
 2372              	.LCFI40:
 2373              		.cfi_def_cfa_offset 8
 2374              		.cfi_offset 4, -8
 2375              		.cfi_offset 14, -4
 464:Core/Src/AB1805.c ****   return (_status & (STATUS_ALM_MASK > 2));
 2376              		.loc 1 464 3 view .LVU499
 2377 0002 FFF7FEFF 		bl	get_status
 2378              	.LVL149:
 465:Core/Src/AB1805.c **** };
 2379              		.loc 1 465 3 view .LVU500
 465:Core/Src/AB1805.c **** };
 2380              		.loc 1 465 19 is_stmt 0 view .LVU501
 2381 0006 024B     		ldr	r3, .L117
 2382 0008 1B78     		ldrb	r3, [r3]
 2383 000a 0120     		movs	r0, #1
 2384 000c 1840     		ands	r0, r3
 466:Core/Src/AB1805.c **** 
 2385              		.loc 1 466 1 view .LVU502
 2386              		@ sp needed
 2387 000e 10BD     		pop	{r4, pc}
 2388              	.L118:
 2389              		.align	2
 2390              	.L117:
 2391 0010 00000000 		.word	_status
 2392              		.cfi_endproc
 2393              	.LFE546:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 122


 2395              		.section	.text.get_EX2_status,"ax",%progbits
 2396              		.align	1
 2397              		.global	get_EX2_status
 2398              		.syntax unified
 2399              		.code	16
 2400              		.thumb_func
 2402              	get_EX2_status:
 2403              	.LFB547:
 469:Core/Src/AB1805.c ****   get_status();
 2404              		.loc 1 469 1 is_stmt 1 view -0
 2405              		.cfi_startproc
 2406              		@ args = 0, pretend = 0, frame = 0
 2407              		@ frame_needed = 0, uses_anonymous_args = 0
 2408 0000 10B5     		push	{r4, lr}
 2409              	.LCFI41:
 2410              		.cfi_def_cfa_offset 8
 2411              		.cfi_offset 4, -8
 2412              		.cfi_offset 14, -4
 470:Core/Src/AB1805.c ****   return (_status & (STATUS_EX2_MASK > 1));
 2413              		.loc 1 470 3 view .LVU504
 2414 0002 FFF7FEFF 		bl	get_status
 2415              	.LVL150:
 471:Core/Src/AB1805.c **** };
 2416              		.loc 1 471 3 view .LVU505
 471:Core/Src/AB1805.c **** };
 2417              		.loc 1 471 19 is_stmt 0 view .LVU506
 2418 0006 024B     		ldr	r3, .L120
 2419 0008 1B78     		ldrb	r3, [r3]
 2420 000a 0120     		movs	r0, #1
 2421 000c 1840     		ands	r0, r3
 472:Core/Src/AB1805.c **** 
 2422              		.loc 1 472 1 view .LVU507
 2423              		@ sp needed
 2424 000e 10BD     		pop	{r4, pc}
 2425              	.L121:
 2426              		.align	2
 2427              	.L120:
 2428 0010 00000000 		.word	_status
 2429              		.cfi_endproc
 2430              	.LFE547:
 2432              		.section	.text.get_EX1_status,"ax",%progbits
 2433              		.align	1
 2434              		.global	get_EX1_status
 2435              		.syntax unified
 2436              		.code	16
 2437              		.thumb_func
 2439              	get_EX1_status:
 2440              	.LFB548:
 475:Core/Src/AB1805.c ****   get_status();
 2441              		.loc 1 475 1 is_stmt 1 view -0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 2445 0000 10B5     		push	{r4, lr}
 2446              	.LCFI42:
 2447              		.cfi_def_cfa_offset 8
 2448              		.cfi_offset 4, -8
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 123


 2449              		.cfi_offset 14, -4
 476:Core/Src/AB1805.c ****   return (_status & (STATUS_EX1_MASK));
 2450              		.loc 1 476 3 view .LVU509
 2451 0002 FFF7FEFF 		bl	get_status
 2452              	.LVL151:
 477:Core/Src/AB1805.c **** };
 2453              		.loc 1 477 3 view .LVU510
 477:Core/Src/AB1805.c **** };
 2454              		.loc 1 477 19 is_stmt 0 view .LVU511
 2455 0006 024B     		ldr	r3, .L123
 2456 0008 1B78     		ldrb	r3, [r3]
 2457 000a 0120     		movs	r0, #1
 2458 000c 1840     		ands	r0, r3
 478:Core/Src/AB1805.c **** 
 2459              		.loc 1 478 1 view .LVU512
 2460              		@ sp needed
 2461 000e 10BD     		pop	{r4, pc}
 2462              	.L124:
 2463              		.align	2
 2464              	.L123:
 2465 0010 00000000 		.word	_status
 2466              		.cfi_endproc
 2467              	.LFE548:
 2469              		.section	.text.clean_CB_status,"ax",%progbits
 2470              		.align	1
 2471              		.global	clean_CB_status
 2472              		.syntax unified
 2473              		.code	16
 2474              		.thumb_func
 2476              	clean_CB_status:
 2477              	.LFB549:
 481:Core/Src/AB1805.c ****   uint8_t c1;
 2478              		.loc 1 481 1 is_stmt 1 view -0
 2479              		.cfi_startproc
 2480              		@ args = 0, pretend = 0, frame = 0
 2481              		@ frame_needed = 0, uses_anonymous_args = 0
 2482 0000 10B5     		push	{r4, lr}
 2483              	.LCFI43:
 2484              		.cfi_def_cfa_offset 8
 2485              		.cfi_offset 4, -8
 2486              		.cfi_offset 14, -4
 482:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 2487              		.loc 1 482 3 view .LVU514
 483:Core/Src/AB1805.c ****   c1 &= ~STATUS_CB_MASK;
 2488              		.loc 1 483 3 view .LVU515
 483:Core/Src/AB1805.c ****   c1 &= ~STATUS_CB_MASK;
 2489              		.loc 1 483 8 is_stmt 0 view .LVU516
 2490 0002 0F20     		movs	r0, #15
 2491 0004 FFF7FEFF 		bl	read_rtc_register
 2492              	.LVL152:
 484:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2493              		.loc 1 484 3 is_stmt 1 view .LVU517
 484:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2494              		.loc 1 484 6 is_stmt 0 view .LVU518
 2495 0008 7F21     		movs	r1, #127
 2496 000a 0140     		ands	r1, r0
 2497              	.LVL153:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 124


 485:Core/Src/AB1805.c ****   return 1;
 2498              		.loc 1 485 3 is_stmt 1 view .LVU519
 2499 000c 0F20     		movs	r0, #15
 2500 000e FFF7FEFF 		bl	write_rtc_register
 2501              	.LVL154:
 486:Core/Src/AB1805.c **** }
 2502              		.loc 1 486 3 view .LVU520
 487:Core/Src/AB1805.c **** 
 2503              		.loc 1 487 1 is_stmt 0 view .LVU521
 2504 0012 0120     		movs	r0, #1
 2505              		@ sp needed
 2506 0014 10BD     		pop	{r4, pc}
 2507              		.cfi_endproc
 2508              	.LFE549:
 2510              		.section	.text.clean_BAT_status,"ax",%progbits
 2511              		.align	1
 2512              		.global	clean_BAT_status
 2513              		.syntax unified
 2514              		.code	16
 2515              		.thumb_func
 2517              	clean_BAT_status:
 2518              	.LFB550:
 490:Core/Src/AB1805.c ****   uint8_t c1;
 2519              		.loc 1 490 1 is_stmt 1 view -0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
 2523 0000 10B5     		push	{r4, lr}
 2524              	.LCFI44:
 2525              		.cfi_def_cfa_offset 8
 2526              		.cfi_offset 4, -8
 2527              		.cfi_offset 14, -4
 491:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 2528              		.loc 1 491 3 view .LVU523
 492:Core/Src/AB1805.c ****   c1 &= ~STATUS_BAT_MASK;
 2529              		.loc 1 492 3 view .LVU524
 492:Core/Src/AB1805.c ****   c1 &= ~STATUS_BAT_MASK;
 2530              		.loc 1 492 8 is_stmt 0 view .LVU525
 2531 0002 0F20     		movs	r0, #15
 2532 0004 FFF7FEFF 		bl	read_rtc_register
 2533              	.LVL155:
 493:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2534              		.loc 1 493 3 is_stmt 1 view .LVU526
 493:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2535              		.loc 1 493 6 is_stmt 0 view .LVU527
 2536 0008 4023     		movs	r3, #64
 2537 000a 9843     		bics	r0, r3
 2538              	.LVL156:
 493:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2539              		.loc 1 493 6 view .LVU528
 2540 000c C1B2     		uxtb	r1, r0
 2541              	.LVL157:
 494:Core/Src/AB1805.c ****   return 1;
 2542              		.loc 1 494 3 is_stmt 1 view .LVU529
 2543 000e 0F20     		movs	r0, #15
 2544 0010 FFF7FEFF 		bl	write_rtc_register
 2545              	.LVL158:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 125


 495:Core/Src/AB1805.c **** }
 2546              		.loc 1 495 3 view .LVU530
 496:Core/Src/AB1805.c **** 
 2547              		.loc 1 496 1 is_stmt 0 view .LVU531
 2548 0014 0120     		movs	r0, #1
 2549              		@ sp needed
 2550 0016 10BD     		pop	{r4, pc}
 2551              		.cfi_endproc
 2552              	.LFE550:
 2554              		.section	.text.clean_WDT_status,"ax",%progbits
 2555              		.align	1
 2556              		.global	clean_WDT_status
 2557              		.syntax unified
 2558              		.code	16
 2559              		.thumb_func
 2561              	clean_WDT_status:
 2562              	.LFB551:
 499:Core/Src/AB1805.c ****   uint8_t c1;
 2563              		.loc 1 499 1 is_stmt 1 view -0
 2564              		.cfi_startproc
 2565              		@ args = 0, pretend = 0, frame = 0
 2566              		@ frame_needed = 0, uses_anonymous_args = 0
 2567 0000 10B5     		push	{r4, lr}
 2568              	.LCFI45:
 2569              		.cfi_def_cfa_offset 8
 2570              		.cfi_offset 4, -8
 2571              		.cfi_offset 14, -4
 500:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 2572              		.loc 1 500 3 view .LVU533
 501:Core/Src/AB1805.c ****   c1 &= ~STATUS_WDT_MASK;
 2573              		.loc 1 501 3 view .LVU534
 501:Core/Src/AB1805.c ****   c1 &= ~STATUS_WDT_MASK;
 2574              		.loc 1 501 8 is_stmt 0 view .LVU535
 2575 0002 0F20     		movs	r0, #15
 2576 0004 FFF7FEFF 		bl	read_rtc_register
 2577              	.LVL159:
 502:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2578              		.loc 1 502 3 is_stmt 1 view .LVU536
 502:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2579              		.loc 1 502 6 is_stmt 0 view .LVU537
 2580 0008 2023     		movs	r3, #32
 2581 000a 9843     		bics	r0, r3
 2582              	.LVL160:
 502:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2583              		.loc 1 502 6 view .LVU538
 2584 000c C1B2     		uxtb	r1, r0
 2585              	.LVL161:
 503:Core/Src/AB1805.c ****   return 1;
 2586              		.loc 1 503 3 is_stmt 1 view .LVU539
 2587 000e 0F20     		movs	r0, #15
 2588 0010 FFF7FEFF 		bl	write_rtc_register
 2589              	.LVL162:
 504:Core/Src/AB1805.c **** }
 2590              		.loc 1 504 3 view .LVU540
 505:Core/Src/AB1805.c **** 
 2591              		.loc 1 505 1 is_stmt 0 view .LVU541
 2592 0014 0120     		movs	r0, #1
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 126


 2593              		@ sp needed
 2594 0016 10BD     		pop	{r4, pc}
 2595              		.cfi_endproc
 2596              	.LFE551:
 2598              		.section	.text.clean_BL_status,"ax",%progbits
 2599              		.align	1
 2600              		.global	clean_BL_status
 2601              		.syntax unified
 2602              		.code	16
 2603              		.thumb_func
 2605              	clean_BL_status:
 2606              	.LFB552:
 508:Core/Src/AB1805.c ****   uint8_t c1;
 2607              		.loc 1 508 1 is_stmt 1 view -0
 2608              		.cfi_startproc
 2609              		@ args = 0, pretend = 0, frame = 0
 2610              		@ frame_needed = 0, uses_anonymous_args = 0
 2611 0000 10B5     		push	{r4, lr}
 2612              	.LCFI46:
 2613              		.cfi_def_cfa_offset 8
 2614              		.cfi_offset 4, -8
 2615              		.cfi_offset 14, -4
 509:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 2616              		.loc 1 509 3 view .LVU543
 510:Core/Src/AB1805.c ****   c1 &= ~STATUS_BL_MASK;
 2617              		.loc 1 510 3 view .LVU544
 510:Core/Src/AB1805.c ****   c1 &= ~STATUS_BL_MASK;
 2618              		.loc 1 510 8 is_stmt 0 view .LVU545
 2619 0002 0F20     		movs	r0, #15
 2620 0004 FFF7FEFF 		bl	read_rtc_register
 2621              	.LVL163:
 511:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2622              		.loc 1 511 3 is_stmt 1 view .LVU546
 511:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2623              		.loc 1 511 6 is_stmt 0 view .LVU547
 2624 0008 1023     		movs	r3, #16
 2625 000a 9843     		bics	r0, r3
 2626              	.LVL164:
 511:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2627              		.loc 1 511 6 view .LVU548
 2628 000c C1B2     		uxtb	r1, r0
 2629              	.LVL165:
 512:Core/Src/AB1805.c ****   return 1;
 2630              		.loc 1 512 3 is_stmt 1 view .LVU549
 2631 000e 0F20     		movs	r0, #15
 2632 0010 FFF7FEFF 		bl	write_rtc_register
 2633              	.LVL166:
 513:Core/Src/AB1805.c **** }
 2634              		.loc 1 513 3 view .LVU550
 514:Core/Src/AB1805.c **** 
 2635              		.loc 1 514 1 is_stmt 0 view .LVU551
 2636 0014 0120     		movs	r0, #1
 2637              		@ sp needed
 2638 0016 10BD     		pop	{r4, pc}
 2639              		.cfi_endproc
 2640              	.LFE552:
 2642              		.section	.text.clean_TIM_status,"ax",%progbits
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 127


 2643              		.align	1
 2644              		.global	clean_TIM_status
 2645              		.syntax unified
 2646              		.code	16
 2647              		.thumb_func
 2649              	clean_TIM_status:
 2650              	.LFB553:
 517:Core/Src/AB1805.c ****   uint8_t c1;
 2651              		.loc 1 517 1 is_stmt 1 view -0
 2652              		.cfi_startproc
 2653              		@ args = 0, pretend = 0, frame = 0
 2654              		@ frame_needed = 0, uses_anonymous_args = 0
 2655 0000 10B5     		push	{r4, lr}
 2656              	.LCFI47:
 2657              		.cfi_def_cfa_offset 8
 2658              		.cfi_offset 4, -8
 2659              		.cfi_offset 14, -4
 518:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 2660              		.loc 1 518 3 view .LVU553
 519:Core/Src/AB1805.c ****   c1 &= ~STATUS_TIM_MASK;
 2661              		.loc 1 519 3 view .LVU554
 519:Core/Src/AB1805.c ****   c1 &= ~STATUS_TIM_MASK;
 2662              		.loc 1 519 8 is_stmt 0 view .LVU555
 2663 0002 0F20     		movs	r0, #15
 2664 0004 FFF7FEFF 		bl	read_rtc_register
 2665              	.LVL167:
 520:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2666              		.loc 1 520 3 is_stmt 1 view .LVU556
 520:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2667              		.loc 1 520 6 is_stmt 0 view .LVU557
 2668 0008 0823     		movs	r3, #8
 2669 000a 9843     		bics	r0, r3
 2670              	.LVL168:
 520:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2671              		.loc 1 520 6 view .LVU558
 2672 000c C1B2     		uxtb	r1, r0
 2673              	.LVL169:
 521:Core/Src/AB1805.c ****   return 1;
 2674              		.loc 1 521 3 is_stmt 1 view .LVU559
 2675 000e 0F20     		movs	r0, #15
 2676 0010 FFF7FEFF 		bl	write_rtc_register
 2677              	.LVL170:
 522:Core/Src/AB1805.c **** }
 2678              		.loc 1 522 3 view .LVU560
 523:Core/Src/AB1805.c **** 
 2679              		.loc 1 523 1 is_stmt 0 view .LVU561
 2680 0014 0120     		movs	r0, #1
 2681              		@ sp needed
 2682 0016 10BD     		pop	{r4, pc}
 2683              		.cfi_endproc
 2684              	.LFE553:
 2686              		.section	.text.clean_ALM_status,"ax",%progbits
 2687              		.align	1
 2688              		.global	clean_ALM_status
 2689              		.syntax unified
 2690              		.code	16
 2691              		.thumb_func
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 128


 2693              	clean_ALM_status:
 2694              	.LFB554:
 526:Core/Src/AB1805.c ****   uint8_t c1;
 2695              		.loc 1 526 1 is_stmt 1 view -0
 2696              		.cfi_startproc
 2697              		@ args = 0, pretend = 0, frame = 0
 2698              		@ frame_needed = 0, uses_anonymous_args = 0
 2699 0000 10B5     		push	{r4, lr}
 2700              	.LCFI48:
 2701              		.cfi_def_cfa_offset 8
 2702              		.cfi_offset 4, -8
 2703              		.cfi_offset 14, -4
 527:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 2704              		.loc 1 527 3 view .LVU563
 528:Core/Src/AB1805.c ****   c1 &= ~STATUS_ALM_MASK;
 2705              		.loc 1 528 3 view .LVU564
 528:Core/Src/AB1805.c ****   c1 &= ~STATUS_ALM_MASK;
 2706              		.loc 1 528 8 is_stmt 0 view .LVU565
 2707 0002 0F20     		movs	r0, #15
 2708 0004 FFF7FEFF 		bl	read_rtc_register
 2709              	.LVL171:
 529:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2710              		.loc 1 529 3 is_stmt 1 view .LVU566
 529:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2711              		.loc 1 529 6 is_stmt 0 view .LVU567
 2712 0008 0423     		movs	r3, #4
 2713 000a 9843     		bics	r0, r3
 2714              	.LVL172:
 529:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2715              		.loc 1 529 6 view .LVU568
 2716 000c C1B2     		uxtb	r1, r0
 2717              	.LVL173:
 530:Core/Src/AB1805.c ****   return 1;
 2718              		.loc 1 530 3 is_stmt 1 view .LVU569
 2719 000e 0F20     		movs	r0, #15
 2720 0010 FFF7FEFF 		bl	write_rtc_register
 2721              	.LVL174:
 531:Core/Src/AB1805.c **** }
 2722              		.loc 1 531 3 view .LVU570
 532:Core/Src/AB1805.c **** 
 2723              		.loc 1 532 1 is_stmt 0 view .LVU571
 2724 0014 0120     		movs	r0, #1
 2725              		@ sp needed
 2726 0016 10BD     		pop	{r4, pc}
 2727              		.cfi_endproc
 2728              	.LFE554:
 2730              		.section	.text.clean_EX2_status,"ax",%progbits
 2731              		.align	1
 2732              		.global	clean_EX2_status
 2733              		.syntax unified
 2734              		.code	16
 2735              		.thumb_func
 2737              	clean_EX2_status:
 2738              	.LFB555:
 535:Core/Src/AB1805.c ****   uint8_t c1;
 2739              		.loc 1 535 1 is_stmt 1 view -0
 2740              		.cfi_startproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 129


 2741              		@ args = 0, pretend = 0, frame = 0
 2742              		@ frame_needed = 0, uses_anonymous_args = 0
 2743 0000 10B5     		push	{r4, lr}
 2744              	.LCFI49:
 2745              		.cfi_def_cfa_offset 8
 2746              		.cfi_offset 4, -8
 2747              		.cfi_offset 14, -4
 536:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 2748              		.loc 1 536 3 view .LVU573
 537:Core/Src/AB1805.c ****   c1 &= ~STATUS_EX2_MASK;
 2749              		.loc 1 537 3 view .LVU574
 537:Core/Src/AB1805.c ****   c1 &= ~STATUS_EX2_MASK;
 2750              		.loc 1 537 8 is_stmt 0 view .LVU575
 2751 0002 0F20     		movs	r0, #15
 2752 0004 FFF7FEFF 		bl	read_rtc_register
 2753              	.LVL175:
 538:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2754              		.loc 1 538 3 is_stmt 1 view .LVU576
 538:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2755              		.loc 1 538 6 is_stmt 0 view .LVU577
 2756 0008 0223     		movs	r3, #2
 2757 000a 9843     		bics	r0, r3
 2758              	.LVL176:
 538:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2759              		.loc 1 538 6 view .LVU578
 2760 000c C1B2     		uxtb	r1, r0
 2761              	.LVL177:
 539:Core/Src/AB1805.c ****   return 1;
 2762              		.loc 1 539 3 is_stmt 1 view .LVU579
 2763 000e 0F20     		movs	r0, #15
 2764 0010 FFF7FEFF 		bl	write_rtc_register
 2765              	.LVL178:
 540:Core/Src/AB1805.c **** }
 2766              		.loc 1 540 3 view .LVU580
 541:Core/Src/AB1805.c **** 
 2767              		.loc 1 541 1 is_stmt 0 view .LVU581
 2768 0014 0120     		movs	r0, #1
 2769              		@ sp needed
 2770 0016 10BD     		pop	{r4, pc}
 2771              		.cfi_endproc
 2772              	.LFE555:
 2774              		.section	.text.clean_EX1_status,"ax",%progbits
 2775              		.align	1
 2776              		.global	clean_EX1_status
 2777              		.syntax unified
 2778              		.code	16
 2779              		.thumb_func
 2781              	clean_EX1_status:
 2782              	.LFB556:
 544:Core/Src/AB1805.c ****   uint8_t c1;
 2783              		.loc 1 544 1 is_stmt 1 view -0
 2784              		.cfi_startproc
 2785              		@ args = 0, pretend = 0, frame = 0
 2786              		@ frame_needed = 0, uses_anonymous_args = 0
 2787 0000 10B5     		push	{r4, lr}
 2788              	.LCFI50:
 2789              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 130


 2790              		.cfi_offset 4, -8
 2791              		.cfi_offset 14, -4
 545:Core/Src/AB1805.c ****   c1 = read_rtc_register(STATU_REGISTER);
 2792              		.loc 1 545 3 view .LVU583
 546:Core/Src/AB1805.c ****   c1 &= ~STATUS_EX1_MASK;
 2793              		.loc 1 546 3 view .LVU584
 546:Core/Src/AB1805.c ****   c1 &= ~STATUS_EX1_MASK;
 2794              		.loc 1 546 8 is_stmt 0 view .LVU585
 2795 0002 0F20     		movs	r0, #15
 2796 0004 FFF7FEFF 		bl	read_rtc_register
 2797              	.LVL179:
 547:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2798              		.loc 1 547 3 is_stmt 1 view .LVU586
 547:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2799              		.loc 1 547 6 is_stmt 0 view .LVU587
 2800 0008 0123     		movs	r3, #1
 2801 000a 9843     		bics	r0, r3
 2802              	.LVL180:
 547:Core/Src/AB1805.c ****   write_rtc_register(STATU_REGISTER, c1);
 2803              		.loc 1 547 6 view .LVU588
 2804 000c C1B2     		uxtb	r1, r0
 2805              	.LVL181:
 548:Core/Src/AB1805.c ****   return 1;
 2806              		.loc 1 548 3 is_stmt 1 view .LVU589
 2807 000e 0F20     		movs	r0, #15
 2808 0010 FFF7FEFF 		bl	write_rtc_register
 2809              	.LVL182:
 549:Core/Src/AB1805.c **** }
 2810              		.loc 1 549 3 view .LVU590
 550:Core/Src/AB1805.c **** 
 2811              		.loc 1 550 1 is_stmt 0 view .LVU591
 2812 0014 0120     		movs	r0, #1
 550:Core/Src/AB1805.c **** 
 2813              		.loc 1 550 1 view .LVU592
 2814              		@ sp needed
 2815 0016 10BD     		pop	{r4, pc}
 2816              		.cfi_endproc
 2817              	.LFE556:
 2819              		.section	.text.set_control1,"ax",%progbits
 2820              		.align	1
 2821              		.global	set_control1
 2822              		.syntax unified
 2823              		.code	16
 2824              		.thumb_func
 2826              	set_control1:
 2827              	.LVL183:
 2828              	.LFB557:
 554:Core/Src/AB1805.c ****   write_rtc_register(CONTROL1_REGISTER, value);
 2829              		.loc 1 554 1 is_stmt 1 view -0
 2830              		.cfi_startproc
 2831              		@ args = 0, pretend = 0, frame = 0
 2832              		@ frame_needed = 0, uses_anonymous_args = 0
 554:Core/Src/AB1805.c ****   write_rtc_register(CONTROL1_REGISTER, value);
 2833              		.loc 1 554 1 is_stmt 0 view .LVU594
 2834 0000 10B5     		push	{r4, lr}
 2835              	.LCFI51:
 2836              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 131


 2837              		.cfi_offset 4, -8
 2838              		.cfi_offset 14, -4
 2839 0002 0100     		movs	r1, r0
 555:Core/Src/AB1805.c ****   _control1 = read_rtc_register(CONTROL1_REGISTER);
 2840              		.loc 1 555 3 is_stmt 1 view .LVU595
 2841 0004 1020     		movs	r0, #16
 2842              	.LVL184:
 555:Core/Src/AB1805.c ****   _control1 = read_rtc_register(CONTROL1_REGISTER);
 2843              		.loc 1 555 3 is_stmt 0 view .LVU596
 2844 0006 FFF7FEFF 		bl	write_rtc_register
 2845              	.LVL185:
 556:Core/Src/AB1805.c ****   return _control1;
 2846              		.loc 1 556 3 is_stmt 1 view .LVU597
 556:Core/Src/AB1805.c ****   return _control1;
 2847              		.loc 1 556 15 is_stmt 0 view .LVU598
 2848 000a 1020     		movs	r0, #16
 2849 000c FFF7FEFF 		bl	read_rtc_register
 2850              	.LVL186:
 556:Core/Src/AB1805.c ****   return _control1;
 2851              		.loc 1 556 13 view .LVU599
 2852 0010 014B     		ldr	r3, .L134
 2853 0012 1870     		strb	r0, [r3]
 557:Core/Src/AB1805.c **** }
 2854              		.loc 1 557 3 is_stmt 1 view .LVU600
 558:Core/Src/AB1805.c **** 
 2855              		.loc 1 558 1 is_stmt 0 view .LVU601
 2856              		@ sp needed
 2857 0014 10BD     		pop	{r4, pc}
 2858              	.L135:
 2859 0016 C046     		.align	2
 2860              	.L134:
 2861 0018 00000000 		.word	_control1
 2862              		.cfi_endproc
 2863              	.LFE557:
 2865              		.section	.text.set_1224,"ax",%progbits
 2866              		.align	1
 2867              		.global	set_1224
 2868              		.syntax unified
 2869              		.code	16
 2870              		.thumb_func
 2872              	set_1224:
 2873              	.LVL187:
 2874              	.LFB558:
 561:Core/Src/AB1805.c ****   uint8_t c1;
 2875              		.loc 1 561 1 is_stmt 1 view -0
 2876              		.cfi_startproc
 2877              		@ args = 0, pretend = 0, frame = 0
 2878              		@ frame_needed = 0, uses_anonymous_args = 0
 561:Core/Src/AB1805.c ****   uint8_t c1;
 2879              		.loc 1 561 1 is_stmt 0 view .LVU603
 2880 0000 10B5     		push	{r4, lr}
 2881              	.LCFI52:
 2882              		.cfi_def_cfa_offset 8
 2883              		.cfi_offset 4, -8
 2884              		.cfi_offset 14, -4
 2885 0002 0400     		movs	r4, r0
 562:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL1_REGISTER);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 132


 2886              		.loc 1 562 3 is_stmt 1 view .LVU604
 563:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_1224_MASK;
 2887              		.loc 1 563 3 view .LVU605
 563:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_1224_MASK;
 2888              		.loc 1 563 8 is_stmt 0 view .LVU606
 2889 0004 1020     		movs	r0, #16
 2890              	.LVL188:
 563:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_1224_MASK;
 2891              		.loc 1 563 8 view .LVU607
 2892 0006 FFF7FEFF 		bl	read_rtc_register
 2893              	.LVL189:
 564:Core/Src/AB1805.c ****   if (value)
 2894              		.loc 1 564 3 is_stmt 1 view .LVU608
 564:Core/Src/AB1805.c ****   if (value)
 2895              		.loc 1 564 6 is_stmt 0 view .LVU609
 2896 000a 4023     		movs	r3, #64
 2897 000c 9843     		bics	r0, r3
 2898              	.LVL190:
 564:Core/Src/AB1805.c ****   if (value)
 2899              		.loc 1 564 6 view .LVU610
 2900 000e C1B2     		uxtb	r1, r0
 2901              	.LVL191:
 565:Core/Src/AB1805.c ****   {
 2902              		.loc 1 565 3 is_stmt 1 view .LVU611
 565:Core/Src/AB1805.c ****   {
 2903              		.loc 1 565 6 is_stmt 0 view .LVU612
 2904 0010 002C     		cmp	r4, #0
 2905 0012 01D0     		beq	.L137
 567:Core/Src/AB1805.c ****   }
 2906              		.loc 1 567 5 is_stmt 1 view .LVU613
 567:Core/Src/AB1805.c ****   }
 2907              		.loc 1 567 8 is_stmt 0 view .LVU614
 2908 0014 1943     		orrs	r1, r3
 2909              	.LVL192:
 567:Core/Src/AB1805.c ****   }
 2910              		.loc 1 567 8 view .LVU615
 2911 0016 C9B2     		uxtb	r1, r1
 2912              	.LVL193:
 2913              	.L137:
 569:Core/Src/AB1805.c ****   return 1;
 2914              		.loc 1 569 3 is_stmt 1 view .LVU616
 2915 0018 1020     		movs	r0, #16
 2916 001a FFF7FEFF 		bl	write_rtc_register
 2917              	.LVL194:
 570:Core/Src/AB1805.c **** }
 2918              		.loc 1 570 3 view .LVU617
 571:Core/Src/AB1805.c **** 
 2919              		.loc 1 571 1 is_stmt 0 view .LVU618
 2920 001e 0120     		movs	r0, #1
 2921              		@ sp needed
 2922 0020 10BD     		pop	{r4, pc}
 2923              		.cfi_endproc
 2924              	.LFE558:
 2926              		.section	.text.set_RSP,"ax",%progbits
 2927              		.align	1
 2928              		.global	set_RSP
 2929              		.syntax unified
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 133


 2930              		.code	16
 2931              		.thumb_func
 2933              	set_RSP:
 2934              	.LVL195:
 2935              	.LFB559:
 574:Core/Src/AB1805.c ****   uint8_t c1;
 2936              		.loc 1 574 1 is_stmt 1 view -0
 2937              		.cfi_startproc
 2938              		@ args = 0, pretend = 0, frame = 0
 2939              		@ frame_needed = 0, uses_anonymous_args = 0
 574:Core/Src/AB1805.c ****   uint8_t c1;
 2940              		.loc 1 574 1 is_stmt 0 view .LVU620
 2941 0000 10B5     		push	{r4, lr}
 2942              	.LCFI53:
 2943              		.cfi_def_cfa_offset 8
 2944              		.cfi_offset 4, -8
 2945              		.cfi_offset 14, -4
 2946 0002 0400     		movs	r4, r0
 575:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL1_REGISTER);
 2947              		.loc 1 575 3 is_stmt 1 view .LVU621
 576:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_RSP_MASK;
 2948              		.loc 1 576 3 view .LVU622
 576:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_RSP_MASK;
 2949              		.loc 1 576 8 is_stmt 0 view .LVU623
 2950 0004 1020     		movs	r0, #16
 2951              	.LVL196:
 576:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_RSP_MASK;
 2952              		.loc 1 576 8 view .LVU624
 2953 0006 FFF7FEFF 		bl	read_rtc_register
 2954              	.LVL197:
 577:Core/Src/AB1805.c ****   if (value)
 2955              		.loc 1 577 3 is_stmt 1 view .LVU625
 577:Core/Src/AB1805.c ****   if (value)
 2956              		.loc 1 577 6 is_stmt 0 view .LVU626
 2957 000a 0823     		movs	r3, #8
 2958 000c 9843     		bics	r0, r3
 2959              	.LVL198:
 577:Core/Src/AB1805.c ****   if (value)
 2960              		.loc 1 577 6 view .LVU627
 2961 000e C1B2     		uxtb	r1, r0
 2962              	.LVL199:
 578:Core/Src/AB1805.c ****   {
 2963              		.loc 1 578 3 is_stmt 1 view .LVU628
 578:Core/Src/AB1805.c ****   {
 2964              		.loc 1 578 6 is_stmt 0 view .LVU629
 2965 0010 002C     		cmp	r4, #0
 2966 0012 01D0     		beq	.L139
 580:Core/Src/AB1805.c ****   }
 2967              		.loc 1 580 5 is_stmt 1 view .LVU630
 580:Core/Src/AB1805.c ****   }
 2968              		.loc 1 580 8 is_stmt 0 view .LVU631
 2969 0014 1943     		orrs	r1, r3
 2970              	.LVL200:
 580:Core/Src/AB1805.c ****   }
 2971              		.loc 1 580 8 view .LVU632
 2972 0016 C9B2     		uxtb	r1, r1
 2973              	.LVL201:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 134


 2974              	.L139:
 582:Core/Src/AB1805.c ****   return 1;
 2975              		.loc 1 582 3 is_stmt 1 view .LVU633
 2976 0018 1020     		movs	r0, #16
 2977 001a FFF7FEFF 		bl	write_rtc_register
 2978              	.LVL202:
 583:Core/Src/AB1805.c **** }
 2979              		.loc 1 583 3 view .LVU634
 584:Core/Src/AB1805.c **** 
 2980              		.loc 1 584 1 is_stmt 0 view .LVU635
 2981 001e 0120     		movs	r0, #1
 2982              		@ sp needed
 2983 0020 10BD     		pop	{r4, pc}
 2984              		.cfi_endproc
 2985              	.LFE559:
 2987              		.section	.text.set_ARST,"ax",%progbits
 2988              		.align	1
 2989              		.global	set_ARST
 2990              		.syntax unified
 2991              		.code	16
 2992              		.thumb_func
 2994              	set_ARST:
 2995              	.LVL203:
 2996              	.LFB560:
 587:Core/Src/AB1805.c ****   uint8_t c1;
 2997              		.loc 1 587 1 is_stmt 1 view -0
 2998              		.cfi_startproc
 2999              		@ args = 0, pretend = 0, frame = 0
 3000              		@ frame_needed = 0, uses_anonymous_args = 0
 587:Core/Src/AB1805.c ****   uint8_t c1;
 3001              		.loc 1 587 1 is_stmt 0 view .LVU637
 3002 0000 10B5     		push	{r4, lr}
 3003              	.LCFI54:
 3004              		.cfi_def_cfa_offset 8
 3005              		.cfi_offset 4, -8
 3006              		.cfi_offset 14, -4
 3007 0002 0400     		movs	r4, r0
 588:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL1_REGISTER);
 3008              		.loc 1 588 3 is_stmt 1 view .LVU638
 589:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_ARST_MASK;
 3009              		.loc 1 589 3 view .LVU639
 589:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_ARST_MASK;
 3010              		.loc 1 589 8 is_stmt 0 view .LVU640
 3011 0004 1020     		movs	r0, #16
 3012              	.LVL204:
 589:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_ARST_MASK;
 3013              		.loc 1 589 8 view .LVU641
 3014 0006 FFF7FEFF 		bl	read_rtc_register
 3015              	.LVL205:
 590:Core/Src/AB1805.c ****   if (value)
 3016              		.loc 1 590 3 is_stmt 1 view .LVU642
 590:Core/Src/AB1805.c ****   if (value)
 3017              		.loc 1 590 6 is_stmt 0 view .LVU643
 3018 000a 0423     		movs	r3, #4
 3019 000c 9843     		bics	r0, r3
 3020              	.LVL206:
 590:Core/Src/AB1805.c ****   if (value)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 135


 3021              		.loc 1 590 6 view .LVU644
 3022 000e C1B2     		uxtb	r1, r0
 3023              	.LVL207:
 591:Core/Src/AB1805.c ****   {
 3024              		.loc 1 591 3 is_stmt 1 view .LVU645
 591:Core/Src/AB1805.c ****   {
 3025              		.loc 1 591 6 is_stmt 0 view .LVU646
 3026 0010 002C     		cmp	r4, #0
 3027 0012 01D0     		beq	.L141
 593:Core/Src/AB1805.c ****   }
 3028              		.loc 1 593 5 is_stmt 1 view .LVU647
 593:Core/Src/AB1805.c ****   }
 3029              		.loc 1 593 8 is_stmt 0 view .LVU648
 3030 0014 1943     		orrs	r1, r3
 3031              	.LVL208:
 593:Core/Src/AB1805.c ****   }
 3032              		.loc 1 593 8 view .LVU649
 3033 0016 C9B2     		uxtb	r1, r1
 3034              	.LVL209:
 3035              	.L141:
 595:Core/Src/AB1805.c ****   return 1;
 3036              		.loc 1 595 3 is_stmt 1 view .LVU650
 3037 0018 1020     		movs	r0, #16
 3038 001a FFF7FEFF 		bl	write_rtc_register
 3039              	.LVL210:
 596:Core/Src/AB1805.c **** }
 3040              		.loc 1 596 3 view .LVU651
 597:Core/Src/AB1805.c **** 
 3041              		.loc 1 597 1 is_stmt 0 view .LVU652
 3042 001e 0120     		movs	r0, #1
 3043              		@ sp needed
 3044 0020 10BD     		pop	{r4, pc}
 3045              		.cfi_endproc
 3046              	.LFE560:
 3048              		.section	.text.set_PWR2,"ax",%progbits
 3049              		.align	1
 3050              		.global	set_PWR2
 3051              		.syntax unified
 3052              		.code	16
 3053              		.thumb_func
 3055              	set_PWR2:
 3056              	.LVL211:
 3057              	.LFB561:
 600:Core/Src/AB1805.c ****   uint8_t c1;
 3058              		.loc 1 600 1 is_stmt 1 view -0
 3059              		.cfi_startproc
 3060              		@ args = 0, pretend = 0, frame = 0
 3061              		@ frame_needed = 0, uses_anonymous_args = 0
 600:Core/Src/AB1805.c ****   uint8_t c1;
 3062              		.loc 1 600 1 is_stmt 0 view .LVU654
 3063 0000 10B5     		push	{r4, lr}
 3064              	.LCFI55:
 3065              		.cfi_def_cfa_offset 8
 3066              		.cfi_offset 4, -8
 3067              		.cfi_offset 14, -4
 3068 0002 0400     		movs	r4, r0
 601:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL1_REGISTER);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 136


 3069              		.loc 1 601 3 is_stmt 1 view .LVU655
 602:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_PWR2_MASK;
 3070              		.loc 1 602 3 view .LVU656
 602:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_PWR2_MASK;
 3071              		.loc 1 602 8 is_stmt 0 view .LVU657
 3072 0004 1020     		movs	r0, #16
 3073              	.LVL212:
 602:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_PWR2_MASK;
 3074              		.loc 1 602 8 view .LVU658
 3075 0006 FFF7FEFF 		bl	read_rtc_register
 3076              	.LVL213:
 603:Core/Src/AB1805.c ****   if (value)
 3077              		.loc 1 603 3 is_stmt 1 view .LVU659
 603:Core/Src/AB1805.c ****   if (value)
 3078              		.loc 1 603 6 is_stmt 0 view .LVU660
 3079 000a 0223     		movs	r3, #2
 3080 000c 9843     		bics	r0, r3
 3081              	.LVL214:
 603:Core/Src/AB1805.c ****   if (value)
 3082              		.loc 1 603 6 view .LVU661
 3083 000e C1B2     		uxtb	r1, r0
 3084              	.LVL215:
 604:Core/Src/AB1805.c ****   {
 3085              		.loc 1 604 3 is_stmt 1 view .LVU662
 604:Core/Src/AB1805.c ****   {
 3086              		.loc 1 604 6 is_stmt 0 view .LVU663
 3087 0010 002C     		cmp	r4, #0
 3088 0012 01D0     		beq	.L143
 606:Core/Src/AB1805.c ****   }
 3089              		.loc 1 606 5 is_stmt 1 view .LVU664
 606:Core/Src/AB1805.c ****   }
 3090              		.loc 1 606 8 is_stmt 0 view .LVU665
 3091 0014 1943     		orrs	r1, r3
 3092              	.LVL216:
 606:Core/Src/AB1805.c ****   }
 3093              		.loc 1 606 8 view .LVU666
 3094 0016 C9B2     		uxtb	r1, r1
 3095              	.LVL217:
 3096              	.L143:
 608:Core/Src/AB1805.c ****   return 1;
 3097              		.loc 1 608 3 is_stmt 1 view .LVU667
 3098 0018 1020     		movs	r0, #16
 3099 001a FFF7FEFF 		bl	write_rtc_register
 3100              	.LVL218:
 609:Core/Src/AB1805.c **** }
 3101              		.loc 1 609 3 view .LVU668
 610:Core/Src/AB1805.c **** 
 3102              		.loc 1 610 1 is_stmt 0 view .LVU669
 3103 001e 0120     		movs	r0, #1
 3104              		@ sp needed
 3105 0020 10BD     		pop	{r4, pc}
 3106              		.cfi_endproc
 3107              	.LFE561:
 3109              		.section	.text.set_WRTC,"ax",%progbits
 3110              		.align	1
 3111              		.global	set_WRTC
 3112              		.syntax unified
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 137


 3113              		.code	16
 3114              		.thumb_func
 3116              	set_WRTC:
 3117              	.LVL219:
 3118              	.LFB562:
 613:Core/Src/AB1805.c ****   uint8_t c1;
 3119              		.loc 1 613 1 is_stmt 1 view -0
 3120              		.cfi_startproc
 3121              		@ args = 0, pretend = 0, frame = 0
 3122              		@ frame_needed = 0, uses_anonymous_args = 0
 613:Core/Src/AB1805.c ****   uint8_t c1;
 3123              		.loc 1 613 1 is_stmt 0 view .LVU671
 3124 0000 10B5     		push	{r4, lr}
 3125              	.LCFI56:
 3126              		.cfi_def_cfa_offset 8
 3127              		.cfi_offset 4, -8
 3128              		.cfi_offset 14, -4
 3129 0002 0400     		movs	r4, r0
 614:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL1_REGISTER);
 3130              		.loc 1 614 3 is_stmt 1 view .LVU672
 615:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_WRTC_MASK;
 3131              		.loc 1 615 3 view .LVU673
 615:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_WRTC_MASK;
 3132              		.loc 1 615 8 is_stmt 0 view .LVU674
 3133 0004 1020     		movs	r0, #16
 3134              	.LVL220:
 615:Core/Src/AB1805.c ****   c1 &= ~CONTROL1_WRTC_MASK;
 3135              		.loc 1 615 8 view .LVU675
 3136 0006 FFF7FEFF 		bl	read_rtc_register
 3137              	.LVL221:
 616:Core/Src/AB1805.c ****   if (value)
 3138              		.loc 1 616 3 is_stmt 1 view .LVU676
 616:Core/Src/AB1805.c ****   if (value)
 3139              		.loc 1 616 6 is_stmt 0 view .LVU677
 3140 000a 0123     		movs	r3, #1
 3141 000c 9843     		bics	r0, r3
 3142              	.LVL222:
 616:Core/Src/AB1805.c ****   if (value)
 3143              		.loc 1 616 6 view .LVU678
 3144 000e C1B2     		uxtb	r1, r0
 3145              	.LVL223:
 617:Core/Src/AB1805.c ****   {
 3146              		.loc 1 617 3 is_stmt 1 view .LVU679
 617:Core/Src/AB1805.c ****   {
 3147              		.loc 1 617 6 is_stmt 0 view .LVU680
 3148 0010 002C     		cmp	r4, #0
 3149 0012 01D0     		beq	.L145
 619:Core/Src/AB1805.c ****   }
 3150              		.loc 1 619 5 is_stmt 1 view .LVU681
 619:Core/Src/AB1805.c ****   }
 3151              		.loc 1 619 8 is_stmt 0 view .LVU682
 3152 0014 1943     		orrs	r1, r3
 3153              	.LVL224:
 619:Core/Src/AB1805.c ****   }
 3154              		.loc 1 619 8 view .LVU683
 3155 0016 C9B2     		uxtb	r1, r1
 3156              	.LVL225:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 138


 3157              	.L145:
 621:Core/Src/AB1805.c ****   return 1;
 3158              		.loc 1 621 3 is_stmt 1 view .LVU684
 3159 0018 1020     		movs	r0, #16
 3160 001a FFF7FEFF 		bl	write_rtc_register
 3161              	.LVL226:
 622:Core/Src/AB1805.c **** }
 3162              		.loc 1 622 3 view .LVU685
 623:Core/Src/AB1805.c **** 
 3163              		.loc 1 623 1 is_stmt 0 view .LVU686
 3164 001e 0120     		movs	r0, #1
 3165              		@ sp needed
 3166 0020 10BD     		pop	{r4, pc}
 3167              		.cfi_endproc
 3168              	.LFE562:
 3170              		.section	.text.get_interrupt,"ax",%progbits
 3171              		.align	1
 3172              		.global	get_interrupt
 3173              		.syntax unified
 3174              		.code	16
 3175              		.thumb_func
 3177              	get_interrupt:
 3178              	.LFB563:
 627:Core/Src/AB1805.c ****   _interrupt = read_rtc_register(INT_MASK_REGISTER);
 3179              		.loc 1 627 1 is_stmt 1 view -0
 3180              		.cfi_startproc
 3181              		@ args = 0, pretend = 0, frame = 0
 3182              		@ frame_needed = 0, uses_anonymous_args = 0
 3183 0000 10B5     		push	{r4, lr}
 3184              	.LCFI57:
 3185              		.cfi_def_cfa_offset 8
 3186              		.cfi_offset 4, -8
 3187              		.cfi_offset 14, -4
 628:Core/Src/AB1805.c ****   return _interrupt;
 3188              		.loc 1 628 3 view .LVU688
 628:Core/Src/AB1805.c ****   return _interrupt;
 3189              		.loc 1 628 16 is_stmt 0 view .LVU689
 3190 0002 1220     		movs	r0, #18
 3191 0004 FFF7FEFF 		bl	read_rtc_register
 3192              	.LVL227:
 628:Core/Src/AB1805.c ****   return _interrupt;
 3193              		.loc 1 628 14 view .LVU690
 3194 0008 014B     		ldr	r3, .L147
 3195 000a 1870     		strb	r0, [r3]
 629:Core/Src/AB1805.c **** }
 3196              		.loc 1 629 3 is_stmt 1 view .LVU691
 630:Core/Src/AB1805.c **** 
 3197              		.loc 1 630 1 is_stmt 0 view .LVU692
 3198              		@ sp needed
 3199 000c 10BD     		pop	{r4, pc}
 3200              	.L148:
 3201 000e C046     		.align	2
 3202              	.L147:
 3203 0010 00000000 		.word	_interrupt
 3204              		.cfi_endproc
 3205              	.LFE563:
 3207              		.section	.text.get_BLIE_interrupt,"ax",%progbits
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 139


 3208              		.align	1
 3209              		.global	get_BLIE_interrupt
 3210              		.syntax unified
 3211              		.code	16
 3212              		.thumb_func
 3214              	get_BLIE_interrupt:
 3215              	.LFB564:
 633:Core/Src/AB1805.c ****   get_status();
 3216              		.loc 1 633 1 is_stmt 1 view -0
 3217              		.cfi_startproc
 3218              		@ args = 0, pretend = 0, frame = 0
 3219              		@ frame_needed = 0, uses_anonymous_args = 0
 3220 0000 10B5     		push	{r4, lr}
 3221              	.LCFI58:
 3222              		.cfi_def_cfa_offset 8
 3223              		.cfi_offset 4, -8
 3224              		.cfi_offset 14, -4
 634:Core/Src/AB1805.c ****   return (_interrupt & (STATUS_BL_MASK > 4));
 3225              		.loc 1 634 3 view .LVU694
 3226 0002 FFF7FEFF 		bl	get_status
 3227              	.LVL228:
 635:Core/Src/AB1805.c **** };
 3228              		.loc 1 635 3 view .LVU695
 635:Core/Src/AB1805.c **** };
 3229              		.loc 1 635 22 is_stmt 0 view .LVU696
 3230 0006 024B     		ldr	r3, .L150
 3231 0008 1B78     		ldrb	r3, [r3]
 3232 000a 0120     		movs	r0, #1
 3233 000c 1840     		ands	r0, r3
 636:Core/Src/AB1805.c **** 
 3234              		.loc 1 636 1 view .LVU697
 3235              		@ sp needed
 3236 000e 10BD     		pop	{r4, pc}
 3237              	.L151:
 3238              		.align	2
 3239              	.L150:
 3240 0010 00000000 		.word	_interrupt
 3241              		.cfi_endproc
 3242              	.LFE564:
 3244              		.section	.text.get_TIE_interrupt,"ax",%progbits
 3245              		.align	1
 3246              		.global	get_TIE_interrupt
 3247              		.syntax unified
 3248              		.code	16
 3249              		.thumb_func
 3251              	get_TIE_interrupt:
 3252              	.LFB565:
 639:Core/Src/AB1805.c ****   get_status();
 3253              		.loc 1 639 1 is_stmt 1 view -0
 3254              		.cfi_startproc
 3255              		@ args = 0, pretend = 0, frame = 0
 3256              		@ frame_needed = 0, uses_anonymous_args = 0
 3257 0000 10B5     		push	{r4, lr}
 3258              	.LCFI59:
 3259              		.cfi_def_cfa_offset 8
 3260              		.cfi_offset 4, -8
 3261              		.cfi_offset 14, -4
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 140


 640:Core/Src/AB1805.c ****   return (_interrupt & (STATUS_TIM_MASK > 3));
 3262              		.loc 1 640 3 view .LVU699
 3263 0002 FFF7FEFF 		bl	get_status
 3264              	.LVL229:
 641:Core/Src/AB1805.c **** };
 3265              		.loc 1 641 3 view .LVU700
 641:Core/Src/AB1805.c **** };
 3266              		.loc 1 641 22 is_stmt 0 view .LVU701
 3267 0006 024B     		ldr	r3, .L153
 3268 0008 1B78     		ldrb	r3, [r3]
 3269 000a 0120     		movs	r0, #1
 3270 000c 1840     		ands	r0, r3
 642:Core/Src/AB1805.c **** 
 3271              		.loc 1 642 1 view .LVU702
 3272              		@ sp needed
 3273 000e 10BD     		pop	{r4, pc}
 3274              	.L154:
 3275              		.align	2
 3276              	.L153:
 3277 0010 00000000 		.word	_interrupt
 3278              		.cfi_endproc
 3279              	.LFE565:
 3281              		.section	.text.get_AIE_interrupt,"ax",%progbits
 3282              		.align	1
 3283              		.global	get_AIE_interrupt
 3284              		.syntax unified
 3285              		.code	16
 3286              		.thumb_func
 3288              	get_AIE_interrupt:
 3289              	.LFB566:
 645:Core/Src/AB1805.c ****   get_status();
 3290              		.loc 1 645 1 is_stmt 1 view -0
 3291              		.cfi_startproc
 3292              		@ args = 0, pretend = 0, frame = 0
 3293              		@ frame_needed = 0, uses_anonymous_args = 0
 3294 0000 10B5     		push	{r4, lr}
 3295              	.LCFI60:
 3296              		.cfi_def_cfa_offset 8
 3297              		.cfi_offset 4, -8
 3298              		.cfi_offset 14, -4
 646:Core/Src/AB1805.c ****   return (_interrupt & (STATUS_ALM_MASK > 2));
 3299              		.loc 1 646 3 view .LVU704
 3300 0002 FFF7FEFF 		bl	get_status
 3301              	.LVL230:
 647:Core/Src/AB1805.c **** };
 3302              		.loc 1 647 3 view .LVU705
 647:Core/Src/AB1805.c **** };
 3303              		.loc 1 647 22 is_stmt 0 view .LVU706
 3304 0006 024B     		ldr	r3, .L156
 3305 0008 1B78     		ldrb	r3, [r3]
 3306 000a 0120     		movs	r0, #1
 3307 000c 1840     		ands	r0, r3
 648:Core/Src/AB1805.c **** 
 3308              		.loc 1 648 1 view .LVU707
 3309              		@ sp needed
 3310 000e 10BD     		pop	{r4, pc}
 3311              	.L157:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 141


 3312              		.align	2
 3313              	.L156:
 3314 0010 00000000 		.word	_interrupt
 3315              		.cfi_endproc
 3316              	.LFE566:
 3318              		.section	.text.get_EX2E_interrupt,"ax",%progbits
 3319              		.align	1
 3320              		.global	get_EX2E_interrupt
 3321              		.syntax unified
 3322              		.code	16
 3323              		.thumb_func
 3325              	get_EX2E_interrupt:
 3326              	.LFB567:
 651:Core/Src/AB1805.c ****   get_status();
 3327              		.loc 1 651 1 is_stmt 1 view -0
 3328              		.cfi_startproc
 3329              		@ args = 0, pretend = 0, frame = 0
 3330              		@ frame_needed = 0, uses_anonymous_args = 0
 3331 0000 10B5     		push	{r4, lr}
 3332              	.LCFI61:
 3333              		.cfi_def_cfa_offset 8
 3334              		.cfi_offset 4, -8
 3335              		.cfi_offset 14, -4
 652:Core/Src/AB1805.c ****   return (_interrupt & (STATUS_EX2_MASK > 1));
 3336              		.loc 1 652 3 view .LVU709
 3337 0002 FFF7FEFF 		bl	get_status
 3338              	.LVL231:
 653:Core/Src/AB1805.c **** };
 3339              		.loc 1 653 3 view .LVU710
 653:Core/Src/AB1805.c **** };
 3340              		.loc 1 653 22 is_stmt 0 view .LVU711
 3341 0006 024B     		ldr	r3, .L159
 3342 0008 1B78     		ldrb	r3, [r3]
 3343 000a 0120     		movs	r0, #1
 3344 000c 1840     		ands	r0, r3
 654:Core/Src/AB1805.c **** 
 3345              		.loc 1 654 1 view .LVU712
 3346              		@ sp needed
 3347 000e 10BD     		pop	{r4, pc}
 3348              	.L160:
 3349              		.align	2
 3350              	.L159:
 3351 0010 00000000 		.word	_interrupt
 3352              		.cfi_endproc
 3353              	.LFE567:
 3355              		.section	.text.get_EX1E_interrupt,"ax",%progbits
 3356              		.align	1
 3357              		.global	get_EX1E_interrupt
 3358              		.syntax unified
 3359              		.code	16
 3360              		.thumb_func
 3362              	get_EX1E_interrupt:
 3363              	.LFB568:
 657:Core/Src/AB1805.c ****   get_status();
 3364              		.loc 1 657 1 is_stmt 1 view -0
 3365              		.cfi_startproc
 3366              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 142


 3367              		@ frame_needed = 0, uses_anonymous_args = 0
 3368 0000 10B5     		push	{r4, lr}
 3369              	.LCFI62:
 3370              		.cfi_def_cfa_offset 8
 3371              		.cfi_offset 4, -8
 3372              		.cfi_offset 14, -4
 658:Core/Src/AB1805.c ****   return (_interrupt & (STATUS_EX1_MASK));
 3373              		.loc 1 658 3 view .LVU714
 3374 0002 FFF7FEFF 		bl	get_status
 3375              	.LVL232:
 659:Core/Src/AB1805.c **** };
 3376              		.loc 1 659 3 view .LVU715
 659:Core/Src/AB1805.c **** };
 3377              		.loc 1 659 22 is_stmt 0 view .LVU716
 3378 0006 024B     		ldr	r3, .L162
 3379 0008 1B78     		ldrb	r3, [r3]
 3380 000a 0120     		movs	r0, #1
 3381 000c 1840     		ands	r0, r3
 660:Core/Src/AB1805.c **** 
 3382              		.loc 1 660 1 view .LVU717
 3383              		@ sp needed
 3384 000e 10BD     		pop	{r4, pc}
 3385              	.L163:
 3386              		.align	2
 3387              	.L162:
 3388 0010 00000000 		.word	_interrupt
 3389              		.cfi_endproc
 3390              	.LFE568:
 3392              		.section	.text.set_interrupt,"ax",%progbits
 3393              		.align	1
 3394              		.global	set_interrupt
 3395              		.syntax unified
 3396              		.code	16
 3397              		.thumb_func
 3399              	set_interrupt:
 3400              	.LVL233:
 3401              	.LFB569:
 663:Core/Src/AB1805.c ****   write_rtc_register(INT_MASK_REGISTER, value);
 3402              		.loc 1 663 1 is_stmt 1 view -0
 3403              		.cfi_startproc
 3404              		@ args = 0, pretend = 0, frame = 0
 3405              		@ frame_needed = 0, uses_anonymous_args = 0
 663:Core/Src/AB1805.c ****   write_rtc_register(INT_MASK_REGISTER, value);
 3406              		.loc 1 663 1 is_stmt 0 view .LVU719
 3407 0000 10B5     		push	{r4, lr}
 3408              	.LCFI63:
 3409              		.cfi_def_cfa_offset 8
 3410              		.cfi_offset 4, -8
 3411              		.cfi_offset 14, -4
 3412 0002 0100     		movs	r1, r0
 664:Core/Src/AB1805.c ****   _interrupt = read_rtc_register(INT_MASK_REGISTER);
 3413              		.loc 1 664 3 is_stmt 1 view .LVU720
 3414 0004 1220     		movs	r0, #18
 3415              	.LVL234:
 664:Core/Src/AB1805.c ****   _interrupt = read_rtc_register(INT_MASK_REGISTER);
 3416              		.loc 1 664 3 is_stmt 0 view .LVU721
 3417 0006 FFF7FEFF 		bl	write_rtc_register
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 143


 3418              	.LVL235:
 665:Core/Src/AB1805.c ****   return _interrupt;
 3419              		.loc 1 665 3 is_stmt 1 view .LVU722
 665:Core/Src/AB1805.c ****   return _interrupt;
 3420              		.loc 1 665 16 is_stmt 0 view .LVU723
 3421 000a 1220     		movs	r0, #18
 3422 000c FFF7FEFF 		bl	read_rtc_register
 3423              	.LVL236:
 665:Core/Src/AB1805.c ****   return _interrupt;
 3424              		.loc 1 665 14 view .LVU724
 3425 0010 014B     		ldr	r3, .L165
 3426 0012 1870     		strb	r0, [r3]
 666:Core/Src/AB1805.c **** }
 3427              		.loc 1 666 3 is_stmt 1 view .LVU725
 667:Core/Src/AB1805.c **** 
 3428              		.loc 1 667 1 is_stmt 0 view .LVU726
 3429              		@ sp needed
 3430 0014 10BD     		pop	{r4, pc}
 3431              	.L166:
 3432 0016 C046     		.align	2
 3433              	.L165:
 3434 0018 00000000 		.word	_interrupt
 3435              		.cfi_endproc
 3436              	.LFE569:
 3438              		.section	.text.set_BLIE_interrupt,"ax",%progbits
 3439              		.align	1
 3440              		.global	set_BLIE_interrupt
 3441              		.syntax unified
 3442              		.code	16
 3443              		.thumb_func
 3445              	set_BLIE_interrupt:
 3446              	.LVL237:
 3447              	.LFB570:
 670:Core/Src/AB1805.c ****   uint8_t c1;
 3448              		.loc 1 670 1 is_stmt 1 view -0
 3449              		.cfi_startproc
 3450              		@ args = 0, pretend = 0, frame = 0
 3451              		@ frame_needed = 0, uses_anonymous_args = 0
 670:Core/Src/AB1805.c ****   uint8_t c1;
 3452              		.loc 1 670 1 is_stmt 0 view .LVU728
 3453 0000 10B5     		push	{r4, lr}
 3454              	.LCFI64:
 3455              		.cfi_def_cfa_offset 8
 3456              		.cfi_offset 4, -8
 3457              		.cfi_offset 14, -4
 3458 0002 0400     		movs	r4, r0
 671:Core/Src/AB1805.c ****   c1 = read_rtc_register(INT_MASK_REGISTER);
 3459              		.loc 1 671 3 is_stmt 1 view .LVU729
 672:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_BLIE_MASK;
 3460              		.loc 1 672 3 view .LVU730
 672:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_BLIE_MASK;
 3461              		.loc 1 672 8 is_stmt 0 view .LVU731
 3462 0004 1220     		movs	r0, #18
 3463              	.LVL238:
 672:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_BLIE_MASK;
 3464              		.loc 1 672 8 view .LVU732
 3465 0006 FFF7FEFF 		bl	read_rtc_register
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 144


 3466              	.LVL239:
 673:Core/Src/AB1805.c ****   if (value)
 3467              		.loc 1 673 3 is_stmt 1 view .LVU733
 673:Core/Src/AB1805.c ****   if (value)
 3468              		.loc 1 673 6 is_stmt 0 view .LVU734
 3469 000a 1023     		movs	r3, #16
 3470 000c 9843     		bics	r0, r3
 3471              	.LVL240:
 673:Core/Src/AB1805.c ****   if (value)
 3472              		.loc 1 673 6 view .LVU735
 3473 000e C1B2     		uxtb	r1, r0
 3474              	.LVL241:
 674:Core/Src/AB1805.c ****   {
 3475              		.loc 1 674 3 is_stmt 1 view .LVU736
 674:Core/Src/AB1805.c ****   {
 3476              		.loc 1 674 6 is_stmt 0 view .LVU737
 3477 0010 002C     		cmp	r4, #0
 3478 0012 01D0     		beq	.L168
 676:Core/Src/AB1805.c ****   }
 3479              		.loc 1 676 5 is_stmt 1 view .LVU738
 676:Core/Src/AB1805.c ****   }
 3480              		.loc 1 676 8 is_stmt 0 view .LVU739
 3481 0014 1943     		orrs	r1, r3
 3482              	.LVL242:
 676:Core/Src/AB1805.c ****   }
 3483              		.loc 1 676 8 view .LVU740
 3484 0016 C9B2     		uxtb	r1, r1
 3485              	.LVL243:
 3486              	.L168:
 678:Core/Src/AB1805.c ****   return 1;
 3487              		.loc 1 678 3 is_stmt 1 view .LVU741
 3488 0018 1220     		movs	r0, #18
 3489 001a FFF7FEFF 		bl	write_rtc_register
 3490              	.LVL244:
 679:Core/Src/AB1805.c **** }
 3491              		.loc 1 679 3 view .LVU742
 680:Core/Src/AB1805.c **** 
 3492              		.loc 1 680 1 is_stmt 0 view .LVU743
 3493 001e 0120     		movs	r0, #1
 3494              		@ sp needed
 3495 0020 10BD     		pop	{r4, pc}
 3496              		.cfi_endproc
 3497              	.LFE570:
 3499              		.section	.text.set_TIE_interrupt,"ax",%progbits
 3500              		.align	1
 3501              		.global	set_TIE_interrupt
 3502              		.syntax unified
 3503              		.code	16
 3504              		.thumb_func
 3506              	set_TIE_interrupt:
 3507              	.LVL245:
 3508              	.LFB571:
 683:Core/Src/AB1805.c ****   uint8_t c1;
 3509              		.loc 1 683 1 is_stmt 1 view -0
 3510              		.cfi_startproc
 3511              		@ args = 0, pretend = 0, frame = 0
 3512              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 145


 683:Core/Src/AB1805.c ****   uint8_t c1;
 3513              		.loc 1 683 1 is_stmt 0 view .LVU745
 3514 0000 10B5     		push	{r4, lr}
 3515              	.LCFI65:
 3516              		.cfi_def_cfa_offset 8
 3517              		.cfi_offset 4, -8
 3518              		.cfi_offset 14, -4
 3519 0002 0400     		movs	r4, r0
 684:Core/Src/AB1805.c ****   c1 = read_rtc_register(INT_MASK_REGISTER);
 3520              		.loc 1 684 3 is_stmt 1 view .LVU746
 685:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_TIE_MASK;
 3521              		.loc 1 685 3 view .LVU747
 685:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_TIE_MASK;
 3522              		.loc 1 685 8 is_stmt 0 view .LVU748
 3523 0004 1220     		movs	r0, #18
 3524              	.LVL246:
 685:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_TIE_MASK;
 3525              		.loc 1 685 8 view .LVU749
 3526 0006 FFF7FEFF 		bl	read_rtc_register
 3527              	.LVL247:
 686:Core/Src/AB1805.c ****   if (value)
 3528              		.loc 1 686 3 is_stmt 1 view .LVU750
 686:Core/Src/AB1805.c ****   if (value)
 3529              		.loc 1 686 6 is_stmt 0 view .LVU751
 3530 000a 0823     		movs	r3, #8
 3531 000c 9843     		bics	r0, r3
 3532              	.LVL248:
 686:Core/Src/AB1805.c ****   if (value)
 3533              		.loc 1 686 6 view .LVU752
 3534 000e C1B2     		uxtb	r1, r0
 3535              	.LVL249:
 687:Core/Src/AB1805.c ****   {
 3536              		.loc 1 687 3 is_stmt 1 view .LVU753
 687:Core/Src/AB1805.c ****   {
 3537              		.loc 1 687 6 is_stmt 0 view .LVU754
 3538 0010 002C     		cmp	r4, #0
 3539 0012 01D0     		beq	.L170
 689:Core/Src/AB1805.c ****   }
 3540              		.loc 1 689 5 is_stmt 1 view .LVU755
 689:Core/Src/AB1805.c ****   }
 3541              		.loc 1 689 8 is_stmt 0 view .LVU756
 3542 0014 1943     		orrs	r1, r3
 3543              	.LVL250:
 689:Core/Src/AB1805.c ****   }
 3544              		.loc 1 689 8 view .LVU757
 3545 0016 C9B2     		uxtb	r1, r1
 3546              	.LVL251:
 3547              	.L170:
 691:Core/Src/AB1805.c ****   return 1;
 3548              		.loc 1 691 3 is_stmt 1 view .LVU758
 3549 0018 1220     		movs	r0, #18
 3550 001a FFF7FEFF 		bl	write_rtc_register
 3551              	.LVL252:
 692:Core/Src/AB1805.c **** }
 3552              		.loc 1 692 3 view .LVU759
 693:Core/Src/AB1805.c **** 
 3553              		.loc 1 693 1 is_stmt 0 view .LVU760
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 146


 3554 001e 0120     		movs	r0, #1
 3555              		@ sp needed
 3556 0020 10BD     		pop	{r4, pc}
 3557              		.cfi_endproc
 3558              	.LFE571:
 3560              		.section	.text.set_AIE_interrupt,"ax",%progbits
 3561              		.align	1
 3562              		.global	set_AIE_interrupt
 3563              		.syntax unified
 3564              		.code	16
 3565              		.thumb_func
 3567              	set_AIE_interrupt:
 3568              	.LVL253:
 3569              	.LFB572:
 696:Core/Src/AB1805.c ****   uint8_t c1;
 3570              		.loc 1 696 1 is_stmt 1 view -0
 3571              		.cfi_startproc
 3572              		@ args = 0, pretend = 0, frame = 0
 3573              		@ frame_needed = 0, uses_anonymous_args = 0
 696:Core/Src/AB1805.c ****   uint8_t c1;
 3574              		.loc 1 696 1 is_stmt 0 view .LVU762
 3575 0000 10B5     		push	{r4, lr}
 3576              	.LCFI66:
 3577              		.cfi_def_cfa_offset 8
 3578              		.cfi_offset 4, -8
 3579              		.cfi_offset 14, -4
 3580 0002 0400     		movs	r4, r0
 697:Core/Src/AB1805.c ****   c1 = read_rtc_register(INT_MASK_REGISTER);
 3581              		.loc 1 697 3 is_stmt 1 view .LVU763
 698:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_AIE_MASK;
 3582              		.loc 1 698 3 view .LVU764
 698:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_AIE_MASK;
 3583              		.loc 1 698 8 is_stmt 0 view .LVU765
 3584 0004 1220     		movs	r0, #18
 3585              	.LVL254:
 698:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_AIE_MASK;
 3586              		.loc 1 698 8 view .LVU766
 3587 0006 FFF7FEFF 		bl	read_rtc_register
 3588              	.LVL255:
 699:Core/Src/AB1805.c ****   if (value)
 3589              		.loc 1 699 3 is_stmt 1 view .LVU767
 699:Core/Src/AB1805.c ****   if (value)
 3590              		.loc 1 699 6 is_stmt 0 view .LVU768
 3591 000a 0423     		movs	r3, #4
 3592 000c 9843     		bics	r0, r3
 3593              	.LVL256:
 699:Core/Src/AB1805.c ****   if (value)
 3594              		.loc 1 699 6 view .LVU769
 3595 000e C1B2     		uxtb	r1, r0
 3596              	.LVL257:
 700:Core/Src/AB1805.c ****   {
 3597              		.loc 1 700 3 is_stmt 1 view .LVU770
 700:Core/Src/AB1805.c ****   {
 3598              		.loc 1 700 6 is_stmt 0 view .LVU771
 3599 0010 002C     		cmp	r4, #0
 3600 0012 01D0     		beq	.L172
 702:Core/Src/AB1805.c ****   }
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 147


 3601              		.loc 1 702 5 is_stmt 1 view .LVU772
 702:Core/Src/AB1805.c ****   }
 3602              		.loc 1 702 8 is_stmt 0 view .LVU773
 3603 0014 1943     		orrs	r1, r3
 3604              	.LVL258:
 702:Core/Src/AB1805.c ****   }
 3605              		.loc 1 702 8 view .LVU774
 3606 0016 C9B2     		uxtb	r1, r1
 3607              	.LVL259:
 3608              	.L172:
 704:Core/Src/AB1805.c ****   return 1;
 3609              		.loc 1 704 3 is_stmt 1 view .LVU775
 3610 0018 1220     		movs	r0, #18
 3611 001a FFF7FEFF 		bl	write_rtc_register
 3612              	.LVL260:
 705:Core/Src/AB1805.c **** }
 3613              		.loc 1 705 3 view .LVU776
 706:Core/Src/AB1805.c **** 
 3614              		.loc 1 706 1 is_stmt 0 view .LVU777
 3615 001e 0120     		movs	r0, #1
 3616              		@ sp needed
 3617 0020 10BD     		pop	{r4, pc}
 3618              		.cfi_endproc
 3619              	.LFE572:
 3621              		.section	.text.set_EX1E_interrupt,"ax",%progbits
 3622              		.align	1
 3623              		.global	set_EX1E_interrupt
 3624              		.syntax unified
 3625              		.code	16
 3626              		.thumb_func
 3628              	set_EX1E_interrupt:
 3629              	.LVL261:
 3630              	.LFB573:
 709:Core/Src/AB1805.c ****   uint8_t c1;
 3631              		.loc 1 709 1 is_stmt 1 view -0
 3632              		.cfi_startproc
 3633              		@ args = 0, pretend = 0, frame = 0
 3634              		@ frame_needed = 0, uses_anonymous_args = 0
 709:Core/Src/AB1805.c ****   uint8_t c1;
 3635              		.loc 1 709 1 is_stmt 0 view .LVU779
 3636 0000 10B5     		push	{r4, lr}
 3637              	.LCFI67:
 3638              		.cfi_def_cfa_offset 8
 3639              		.cfi_offset 4, -8
 3640              		.cfi_offset 14, -4
 3641 0002 0400     		movs	r4, r0
 710:Core/Src/AB1805.c ****   c1 = read_rtc_register(INT_MASK_REGISTER);
 3642              		.loc 1 710 3 is_stmt 1 view .LVU780
 711:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_EX1E_MASK;
 3643              		.loc 1 711 3 view .LVU781
 711:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_EX1E_MASK;
 3644              		.loc 1 711 8 is_stmt 0 view .LVU782
 3645 0004 1220     		movs	r0, #18
 3646              	.LVL262:
 711:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_EX1E_MASK;
 3647              		.loc 1 711 8 view .LVU783
 3648 0006 FFF7FEFF 		bl	read_rtc_register
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 148


 3649              	.LVL263:
 712:Core/Src/AB1805.c ****   if (value)
 3650              		.loc 1 712 3 is_stmt 1 view .LVU784
 712:Core/Src/AB1805.c ****   if (value)
 3651              		.loc 1 712 6 is_stmt 0 view .LVU785
 3652 000a 0123     		movs	r3, #1
 3653 000c 9843     		bics	r0, r3
 3654              	.LVL264:
 712:Core/Src/AB1805.c ****   if (value)
 3655              		.loc 1 712 6 view .LVU786
 3656 000e C1B2     		uxtb	r1, r0
 3657              	.LVL265:
 713:Core/Src/AB1805.c ****   {
 3658              		.loc 1 713 3 is_stmt 1 view .LVU787
 713:Core/Src/AB1805.c ****   {
 3659              		.loc 1 713 6 is_stmt 0 view .LVU788
 3660 0010 002C     		cmp	r4, #0
 3661 0012 01D0     		beq	.L174
 715:Core/Src/AB1805.c ****   }
 3662              		.loc 1 715 5 is_stmt 1 view .LVU789
 715:Core/Src/AB1805.c ****   }
 3663              		.loc 1 715 8 is_stmt 0 view .LVU790
 3664 0014 1943     		orrs	r1, r3
 3665              	.LVL266:
 715:Core/Src/AB1805.c ****   }
 3666              		.loc 1 715 8 view .LVU791
 3667 0016 C9B2     		uxtb	r1, r1
 3668              	.LVL267:
 3669              	.L174:
 717:Core/Src/AB1805.c ****   return 1;
 3670              		.loc 1 717 3 is_stmt 1 view .LVU792
 3671 0018 1220     		movs	r0, #18
 3672 001a FFF7FEFF 		bl	write_rtc_register
 3673              	.LVL268:
 718:Core/Src/AB1805.c **** }
 3674              		.loc 1 718 3 view .LVU793
 719:Core/Src/AB1805.c **** 
 3675              		.loc 1 719 1 is_stmt 0 view .LVU794
 3676 001e 0120     		movs	r0, #1
 3677              		@ sp needed
 3678 0020 10BD     		pop	{r4, pc}
 3679              		.cfi_endproc
 3680              	.LFE573:
 3682              		.section	.text.set_EX2E_interrupt,"ax",%progbits
 3683              		.align	1
 3684              		.global	set_EX2E_interrupt
 3685              		.syntax unified
 3686              		.code	16
 3687              		.thumb_func
 3689              	set_EX2E_interrupt:
 3690              	.LVL269:
 3691              	.LFB574:
 722:Core/Src/AB1805.c ****   uint8_t c1;
 3692              		.loc 1 722 1 is_stmt 1 view -0
 3693              		.cfi_startproc
 3694              		@ args = 0, pretend = 0, frame = 0
 3695              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 149


 722:Core/Src/AB1805.c ****   uint8_t c1;
 3696              		.loc 1 722 1 is_stmt 0 view .LVU796
 3697 0000 10B5     		push	{r4, lr}
 3698              	.LCFI68:
 3699              		.cfi_def_cfa_offset 8
 3700              		.cfi_offset 4, -8
 3701              		.cfi_offset 14, -4
 3702 0002 0400     		movs	r4, r0
 723:Core/Src/AB1805.c ****   c1 = read_rtc_register(INT_MASK_REGISTER);
 3703              		.loc 1 723 3 is_stmt 1 view .LVU797
 724:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_EX2E_MASK;
 3704              		.loc 1 724 3 view .LVU798
 724:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_EX2E_MASK;
 3705              		.loc 1 724 8 is_stmt 0 view .LVU799
 3706 0004 1220     		movs	r0, #18
 3707              	.LVL270:
 724:Core/Src/AB1805.c ****   c1 &= ~INTERRUPT_EX2E_MASK;
 3708              		.loc 1 724 8 view .LVU800
 3709 0006 FFF7FEFF 		bl	read_rtc_register
 3710              	.LVL271:
 725:Core/Src/AB1805.c ****   if (value)
 3711              		.loc 1 725 3 is_stmt 1 view .LVU801
 725:Core/Src/AB1805.c ****   if (value)
 3712              		.loc 1 725 6 is_stmt 0 view .LVU802
 3713 000a 0223     		movs	r3, #2
 3714 000c 9843     		bics	r0, r3
 3715              	.LVL272:
 725:Core/Src/AB1805.c ****   if (value)
 3716              		.loc 1 725 6 view .LVU803
 3717 000e C1B2     		uxtb	r1, r0
 3718              	.LVL273:
 726:Core/Src/AB1805.c ****   {
 3719              		.loc 1 726 3 is_stmt 1 view .LVU804
 726:Core/Src/AB1805.c ****   {
 3720              		.loc 1 726 6 is_stmt 0 view .LVU805
 3721 0010 002C     		cmp	r4, #0
 3722 0012 01D0     		beq	.L176
 728:Core/Src/AB1805.c ****   }
 3723              		.loc 1 728 5 is_stmt 1 view .LVU806
 728:Core/Src/AB1805.c ****   }
 3724              		.loc 1 728 8 is_stmt 0 view .LVU807
 3725 0014 1943     		orrs	r1, r3
 3726              	.LVL274:
 728:Core/Src/AB1805.c ****   }
 3727              		.loc 1 728 8 view .LVU808
 3728 0016 C9B2     		uxtb	r1, r1
 3729              	.LVL275:
 3730              	.L176:
 730:Core/Src/AB1805.c ****   return 1;
 3731              		.loc 1 730 3 is_stmt 1 view .LVU809
 3732 0018 1220     		movs	r0, #18
 3733 001a FFF7FEFF 		bl	write_rtc_register
 3734              	.LVL276:
 731:Core/Src/AB1805.c **** }
 3735              		.loc 1 731 3 view .LVU810
 732:Core/Src/AB1805.c **** 
 3736              		.loc 1 732 1 is_stmt 0 view .LVU811
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 150


 3737 001e 0120     		movs	r0, #1
 3738              		@ sp needed
 3739 0020 10BD     		pop	{r4, pc}
 3740              		.cfi_endproc
 3741              	.LFE574:
 3743              		.section	.text.get_control2,"ax",%progbits
 3744              		.align	1
 3745              		.global	get_control2
 3746              		.syntax unified
 3747              		.code	16
 3748              		.thumb_func
 3750              	get_control2:
 3751              	.LFB575:
 736:Core/Src/AB1805.c ****   _control2 = read_rtc_register(CONTROL2_REGISTER);
 3752              		.loc 1 736 1 is_stmt 1 view -0
 3753              		.cfi_startproc
 3754              		@ args = 0, pretend = 0, frame = 0
 3755              		@ frame_needed = 0, uses_anonymous_args = 0
 3756 0000 10B5     		push	{r4, lr}
 3757              	.LCFI69:
 3758              		.cfi_def_cfa_offset 8
 3759              		.cfi_offset 4, -8
 3760              		.cfi_offset 14, -4
 737:Core/Src/AB1805.c ****   return _control2;
 3761              		.loc 1 737 3 view .LVU813
 737:Core/Src/AB1805.c ****   return _control2;
 3762              		.loc 1 737 15 is_stmt 0 view .LVU814
 3763 0002 1120     		movs	r0, #17
 3764 0004 FFF7FEFF 		bl	read_rtc_register
 3765              	.LVL277:
 737:Core/Src/AB1805.c ****   return _control2;
 3766              		.loc 1 737 13 view .LVU815
 3767 0008 014B     		ldr	r3, .L178
 3768 000a 1870     		strb	r0, [r3]
 738:Core/Src/AB1805.c **** }
 3769              		.loc 1 738 3 is_stmt 1 view .LVU816
 739:Core/Src/AB1805.c **** 
 3770              		.loc 1 739 1 is_stmt 0 view .LVU817
 3771              		@ sp needed
 3772 000c 10BD     		pop	{r4, pc}
 3773              	.L179:
 3774 000e C046     		.align	2
 3775              	.L178:
 3776 0010 00000000 		.word	_control2
 3777              		.cfi_endproc
 3778              	.LFE575:
 3780              		.section	.text.get_RS1E_control2,"ax",%progbits
 3781              		.align	1
 3782              		.global	get_RS1E_control2
 3783              		.syntax unified
 3784              		.code	16
 3785              		.thumb_func
 3787              	get_RS1E_control2:
 3788              	.LFB576:
 742:Core/Src/AB1805.c ****   get_control2();
 3789              		.loc 1 742 1 is_stmt 1 view -0
 3790              		.cfi_startproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 151


 3791              		@ args = 0, pretend = 0, frame = 0
 3792              		@ frame_needed = 0, uses_anonymous_args = 0
 3793 0000 10B5     		push	{r4, lr}
 3794              	.LCFI70:
 3795              		.cfi_def_cfa_offset 8
 3796              		.cfi_offset 4, -8
 3797              		.cfi_offset 14, -4
 743:Core/Src/AB1805.c ****   return (_control2 & (CONTROL2_RS1E_MASK > 5));
 3798              		.loc 1 743 3 view .LVU819
 3799 0002 FFF7FEFF 		bl	get_control2
 3800              	.LVL278:
 744:Core/Src/AB1805.c **** };
 3801              		.loc 1 744 3 view .LVU820
 744:Core/Src/AB1805.c **** };
 3802              		.loc 1 744 21 is_stmt 0 view .LVU821
 3803 0006 024B     		ldr	r3, .L181
 3804 0008 1B78     		ldrb	r3, [r3]
 3805 000a 0120     		movs	r0, #1
 3806 000c 1840     		ands	r0, r3
 745:Core/Src/AB1805.c **** 
 3807              		.loc 1 745 1 view .LVU822
 3808              		@ sp needed
 3809 000e 10BD     		pop	{r4, pc}
 3810              	.L182:
 3811              		.align	2
 3812              	.L181:
 3813 0010 00000000 		.word	_control2
 3814              		.cfi_endproc
 3815              	.LFE576:
 3817              		.section	.text.get_OUT2S_control2,"ax",%progbits
 3818              		.align	1
 3819              		.global	get_OUT2S_control2
 3820              		.syntax unified
 3821              		.code	16
 3822              		.thumb_func
 3824              	get_OUT2S_control2:
 3825              	.LFB577:
 748:Core/Src/AB1805.c ****   get_control2();
 3826              		.loc 1 748 1 is_stmt 1 view -0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 3830 0000 10B5     		push	{r4, lr}
 3831              	.LCFI71:
 3832              		.cfi_def_cfa_offset 8
 3833              		.cfi_offset 4, -8
 3834              		.cfi_offset 14, -4
 749:Core/Src/AB1805.c ****   return (_control2 & (CONTROL2_OUT2S_MASK > 2));
 3835              		.loc 1 749 3 view .LVU824
 3836 0002 FFF7FEFF 		bl	get_control2
 3837              	.LVL279:
 750:Core/Src/AB1805.c **** };
 3838              		.loc 1 750 3 view .LVU825
 750:Core/Src/AB1805.c **** };
 3839              		.loc 1 750 21 is_stmt 0 view .LVU826
 3840 0006 024B     		ldr	r3, .L184
 3841 0008 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 152


 3842 000a 0120     		movs	r0, #1
 3843 000c 1840     		ands	r0, r3
 751:Core/Src/AB1805.c **** 
 3844              		.loc 1 751 1 view .LVU827
 3845              		@ sp needed
 3846 000e 10BD     		pop	{r4, pc}
 3847              	.L185:
 3848              		.align	2
 3849              	.L184:
 3850 0010 00000000 		.word	_control2
 3851              		.cfi_endproc
 3852              	.LFE577:
 3854              		.section	.text.get_OUT1S_control2,"ax",%progbits
 3855              		.align	1
 3856              		.global	get_OUT1S_control2
 3857              		.syntax unified
 3858              		.code	16
 3859              		.thumb_func
 3861              	get_OUT1S_control2:
 3862              	.LFB578:
 754:Core/Src/AB1805.c ****   get_control2();
 3863              		.loc 1 754 1 is_stmt 1 view -0
 3864              		.cfi_startproc
 3865              		@ args = 0, pretend = 0, frame = 0
 3866              		@ frame_needed = 0, uses_anonymous_args = 0
 3867 0000 10B5     		push	{r4, lr}
 3868              	.LCFI72:
 3869              		.cfi_def_cfa_offset 8
 3870              		.cfi_offset 4, -8
 3871              		.cfi_offset 14, -4
 755:Core/Src/AB1805.c ****   return (_control2 & (CONTROL2_OUT1S_MASK));
 3872              		.loc 1 755 3 view .LVU829
 3873 0002 FFF7FEFF 		bl	get_control2
 3874              	.LVL280:
 756:Core/Src/AB1805.c **** };
 3875              		.loc 1 756 3 view .LVU830
 756:Core/Src/AB1805.c **** };
 3876              		.loc 1 756 21 is_stmt 0 view .LVU831
 3877 0006 024B     		ldr	r3, .L187
 3878 0008 1B78     		ldrb	r3, [r3]
 3879 000a 0320     		movs	r0, #3
 3880 000c 1840     		ands	r0, r3
 757:Core/Src/AB1805.c **** 
 3881              		.loc 1 757 1 view .LVU832
 3882              		@ sp needed
 3883 000e 10BD     		pop	{r4, pc}
 3884              	.L188:
 3885              		.align	2
 3886              	.L187:
 3887 0010 00000000 		.word	_control2
 3888              		.cfi_endproc
 3889              	.LFE578:
 3891              		.section	.text.set_control2,"ax",%progbits
 3892              		.align	1
 3893              		.global	set_control2
 3894              		.syntax unified
 3895              		.code	16
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 153


 3896              		.thumb_func
 3898              	set_control2:
 3899              	.LVL281:
 3900              	.LFB579:
 760:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, value);
 3901              		.loc 1 760 1 is_stmt 1 view -0
 3902              		.cfi_startproc
 3903              		@ args = 0, pretend = 0, frame = 0
 3904              		@ frame_needed = 0, uses_anonymous_args = 0
 760:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, value);
 3905              		.loc 1 760 1 is_stmt 0 view .LVU834
 3906 0000 10B5     		push	{r4, lr}
 3907              	.LCFI73:
 3908              		.cfi_def_cfa_offset 8
 3909              		.cfi_offset 4, -8
 3910              		.cfi_offset 14, -4
 3911 0002 0100     		movs	r1, r0
 761:Core/Src/AB1805.c ****   _control2 = read_rtc_register(CONTROL2_REGISTER);
 3912              		.loc 1 761 3 is_stmt 1 view .LVU835
 3913 0004 1120     		movs	r0, #17
 3914              	.LVL282:
 761:Core/Src/AB1805.c ****   _control2 = read_rtc_register(CONTROL2_REGISTER);
 3915              		.loc 1 761 3 is_stmt 0 view .LVU836
 3916 0006 FFF7FEFF 		bl	write_rtc_register
 3917              	.LVL283:
 762:Core/Src/AB1805.c ****   return _control2;
 3918              		.loc 1 762 3 is_stmt 1 view .LVU837
 762:Core/Src/AB1805.c ****   return _control2;
 3919              		.loc 1 762 15 is_stmt 0 view .LVU838
 3920 000a 1120     		movs	r0, #17
 3921 000c FFF7FEFF 		bl	read_rtc_register
 3922              	.LVL284:
 762:Core/Src/AB1805.c ****   return _control2;
 3923              		.loc 1 762 13 view .LVU839
 3924 0010 014B     		ldr	r3, .L190
 3925 0012 1870     		strb	r0, [r3]
 763:Core/Src/AB1805.c **** }
 3926              		.loc 1 763 3 is_stmt 1 view .LVU840
 764:Core/Src/AB1805.c **** 
 3927              		.loc 1 764 1 is_stmt 0 view .LVU841
 3928              		@ sp needed
 3929 0014 10BD     		pop	{r4, pc}
 3930              	.L191:
 3931 0016 C046     		.align	2
 3932              	.L190:
 3933 0018 00000000 		.word	_control2
 3934              		.cfi_endproc
 3935              	.LFE579:
 3937              		.section	.text.set_RS1E_control2,"ax",%progbits
 3938              		.align	1
 3939              		.global	set_RS1E_control2
 3940              		.syntax unified
 3941              		.code	16
 3942              		.thumb_func
 3944              	set_RS1E_control2:
 3945              	.LVL285:
 3946              	.LFB580:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 154


 767:Core/Src/AB1805.c ****   uint8_t c1;
 3947              		.loc 1 767 1 is_stmt 1 view -0
 3948              		.cfi_startproc
 3949              		@ args = 0, pretend = 0, frame = 0
 3950              		@ frame_needed = 0, uses_anonymous_args = 0
 767:Core/Src/AB1805.c ****   uint8_t c1;
 3951              		.loc 1 767 1 is_stmt 0 view .LVU843
 3952 0000 70B5     		push	{r4, r5, r6, lr}
 3953              	.LCFI74:
 3954              		.cfi_def_cfa_offset 16
 3955              		.cfi_offset 4, -16
 3956              		.cfi_offset 5, -12
 3957              		.cfi_offset 6, -8
 3958              		.cfi_offset 14, -4
 3959 0002 0500     		movs	r5, r0
 768:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL2_REGISTER);
 3960              		.loc 1 768 3 is_stmt 1 view .LVU844
 769:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_RS1E_MASK;
 3961              		.loc 1 769 3 view .LVU845
 769:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_RS1E_MASK;
 3962              		.loc 1 769 8 is_stmt 0 view .LVU846
 3963 0004 1120     		movs	r0, #17
 3964              	.LVL286:
 769:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_RS1E_MASK;
 3965              		.loc 1 769 8 view .LVU847
 3966 0006 FFF7FEFF 		bl	read_rtc_register
 3967              	.LVL287:
 770:Core/Src/AB1805.c ****   if (value)
 3968              		.loc 1 770 3 is_stmt 1 view .LVU848
 770:Core/Src/AB1805.c ****   if (value)
 3969              		.loc 1 770 6 is_stmt 0 view .LVU849
 3970 000a 2023     		movs	r3, #32
 3971 000c 9843     		bics	r0, r3
 3972              	.LVL288:
 770:Core/Src/AB1805.c ****   if (value)
 3973              		.loc 1 770 6 view .LVU850
 3974 000e C4B2     		uxtb	r4, r0
 3975              	.LVL289:
 771:Core/Src/AB1805.c ****   {
 3976              		.loc 1 771 3 is_stmt 1 view .LVU851
 771:Core/Src/AB1805.c ****   {
 3977              		.loc 1 771 6 is_stmt 0 view .LVU852
 3978 0010 002D     		cmp	r5, #0
 3979 0012 01D0     		beq	.L193
 773:Core/Src/AB1805.c ****   }
 3980              		.loc 1 773 5 is_stmt 1 view .LVU853
 773:Core/Src/AB1805.c ****   }
 3981              		.loc 1 773 8 is_stmt 0 view .LVU854
 3982 0014 1C43     		orrs	r4, r3
 3983              	.LVL290:
 773:Core/Src/AB1805.c ****   }
 3984              		.loc 1 773 8 view .LVU855
 3985 0016 E4B2     		uxtb	r4, r4
 3986              	.LVL291:
 3987              	.L193:
 775:Core/Src/AB1805.c ****   return c1;
 3988              		.loc 1 775 3 is_stmt 1 view .LVU856
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 155


 3989 0018 2100     		movs	r1, r4
 3990 001a 1120     		movs	r0, #17
 3991 001c FFF7FEFF 		bl	write_rtc_register
 3992              	.LVL292:
 776:Core/Src/AB1805.c **** }
 3993              		.loc 1 776 3 view .LVU857
 777:Core/Src/AB1805.c **** 
 3994              		.loc 1 777 1 is_stmt 0 view .LVU858
 3995 0020 2000     		movs	r0, r4
 3996              		@ sp needed
 3997              	.LVL293:
 777:Core/Src/AB1805.c **** 
 3998              		.loc 1 777 1 view .LVU859
 3999 0022 70BD     		pop	{r4, r5, r6, pc}
 4000              		.cfi_endproc
 4001              	.LFE580:
 4003              		.section	.text.set_OUT2S_control2,"ax",%progbits
 4004              		.align	1
 4005              		.global	set_OUT2S_control2
 4006              		.syntax unified
 4007              		.code	16
 4008              		.thumb_func
 4010              	set_OUT2S_control2:
 4011              	.LVL294:
 4012              	.LFB581:
 780:Core/Src/AB1805.c ****   uint8_t c1;
 4013              		.loc 1 780 1 is_stmt 1 view -0
 4014              		.cfi_startproc
 4015              		@ args = 0, pretend = 0, frame = 0
 4016              		@ frame_needed = 0, uses_anonymous_args = 0
 780:Core/Src/AB1805.c ****   uint8_t c1;
 4017              		.loc 1 780 1 is_stmt 0 view .LVU861
 4018 0000 70B5     		push	{r4, r5, r6, lr}
 4019              	.LCFI75:
 4020              		.cfi_def_cfa_offset 16
 4021              		.cfi_offset 4, -16
 4022              		.cfi_offset 5, -12
 4023              		.cfi_offset 6, -8
 4024              		.cfi_offset 14, -4
 4025 0002 0500     		movs	r5, r0
 781:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL2_REGISTER);
 4026              		.loc 1 781 3 is_stmt 1 view .LVU862
 782:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_OUT2S_MASK;
 4027              		.loc 1 782 3 view .LVU863
 782:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_OUT2S_MASK;
 4028              		.loc 1 782 8 is_stmt 0 view .LVU864
 4029 0004 1120     		movs	r0, #17
 4030              	.LVL295:
 782:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_OUT2S_MASK;
 4031              		.loc 1 782 8 view .LVU865
 4032 0006 FFF7FEFF 		bl	read_rtc_register
 4033              	.LVL296:
 783:Core/Src/AB1805.c ****   c1 |= (value << 2) & CONTROL2_OUT2S_MASK;
 4034              		.loc 1 783 3 is_stmt 1 view .LVU866
 783:Core/Src/AB1805.c ****   c1 |= (value << 2) & CONTROL2_OUT2S_MASK;
 4035              		.loc 1 783 6 is_stmt 0 view .LVU867
 4036 000a 1C23     		movs	r3, #28
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 156


 4037 000c 9843     		bics	r0, r3
 4038              	.LVL297:
 783:Core/Src/AB1805.c ****   c1 |= (value << 2) & CONTROL2_OUT2S_MASK;
 4039              		.loc 1 783 6 view .LVU868
 4040 000e C4B2     		uxtb	r4, r0
 4041              	.LVL298:
 784:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, c1);
 4042              		.loc 1 784 3 is_stmt 1 view .LVU869
 784:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, c1);
 4043              		.loc 1 784 16 is_stmt 0 view .LVU870
 4044 0010 AD00     		lsls	r5, r5, #2
 784:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, c1);
 4045              		.loc 1 784 22 view .LVU871
 4046 0012 2B40     		ands	r3, r5
 784:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, c1);
 4047              		.loc 1 784 6 view .LVU872
 4048 0014 1C43     		orrs	r4, r3
 4049              	.LVL299:
 785:Core/Src/AB1805.c ****   return c1;
 4050              		.loc 1 785 3 is_stmt 1 view .LVU873
 4051 0016 2100     		movs	r1, r4
 4052 0018 1120     		movs	r0, #17
 4053 001a FFF7FEFF 		bl	write_rtc_register
 4054              	.LVL300:
 786:Core/Src/AB1805.c **** }
 4055              		.loc 1 786 3 view .LVU874
 787:Core/Src/AB1805.c **** 
 4056              		.loc 1 787 1 is_stmt 0 view .LVU875
 4057 001e 2000     		movs	r0, r4
 4058              		@ sp needed
 4059              	.LVL301:
 787:Core/Src/AB1805.c **** 
 4060              		.loc 1 787 1 view .LVU876
 4061 0020 70BD     		pop	{r4, r5, r6, pc}
 4062              		.cfi_endproc
 4063              	.LFE581:
 4065              		.section	.text.set_OUT1S_control2,"ax",%progbits
 4066              		.align	1
 4067              		.global	set_OUT1S_control2
 4068              		.syntax unified
 4069              		.code	16
 4070              		.thumb_func
 4072              	set_OUT1S_control2:
 4073              	.LVL302:
 4074              	.LFB582:
 790:Core/Src/AB1805.c ****   uint8_t c1;
 4075              		.loc 1 790 1 is_stmt 1 view -0
 4076              		.cfi_startproc
 4077              		@ args = 0, pretend = 0, frame = 0
 4078              		@ frame_needed = 0, uses_anonymous_args = 0
 790:Core/Src/AB1805.c ****   uint8_t c1;
 4079              		.loc 1 790 1 is_stmt 0 view .LVU878
 4080 0000 70B5     		push	{r4, r5, r6, lr}
 4081              	.LCFI76:
 4082              		.cfi_def_cfa_offset 16
 4083              		.cfi_offset 4, -16
 4084              		.cfi_offset 5, -12
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 157


 4085              		.cfi_offset 6, -8
 4086              		.cfi_offset 14, -4
 4087 0002 0500     		movs	r5, r0
 791:Core/Src/AB1805.c ****   c1 = read_rtc_register(CONTROL2_REGISTER);
 4088              		.loc 1 791 3 is_stmt 1 view .LVU879
 792:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_OUT1S_MASK;
 4089              		.loc 1 792 3 view .LVU880
 792:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_OUT1S_MASK;
 4090              		.loc 1 792 8 is_stmt 0 view .LVU881
 4091 0004 1120     		movs	r0, #17
 4092              	.LVL303:
 792:Core/Src/AB1805.c ****   c1 &= ~CONTROL2_OUT1S_MASK;
 4093              		.loc 1 792 8 view .LVU882
 4094 0006 FFF7FEFF 		bl	read_rtc_register
 4095              	.LVL304:
 793:Core/Src/AB1805.c ****   c1 |= (value)&CONTROL2_OUT1S_MASK;
 4096              		.loc 1 793 3 is_stmt 1 view .LVU883
 793:Core/Src/AB1805.c ****   c1 |= (value)&CONTROL2_OUT1S_MASK;
 4097              		.loc 1 793 6 is_stmt 0 view .LVU884
 4098 000a 0323     		movs	r3, #3
 4099 000c 9843     		bics	r0, r3
 4100              	.LVL305:
 793:Core/Src/AB1805.c ****   c1 |= (value)&CONTROL2_OUT1S_MASK;
 4101              		.loc 1 793 6 view .LVU885
 4102 000e C4B2     		uxtb	r4, r0
 4103              	.LVL306:
 794:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, c1);
 4104              		.loc 1 794 3 is_stmt 1 view .LVU886
 4105 0010 0320     		movs	r0, #3
 4106 0012 2840     		ands	r0, r5
 4107 0014 0443     		orrs	r4, r0
 4108              	.LVL307:
 795:Core/Src/AB1805.c ****   return c1;
 4109              		.loc 1 795 3 view .LVU887
 4110 0016 2100     		movs	r1, r4
 4111 0018 1120     		movs	r0, #17
 4112 001a FFF7FEFF 		bl	write_rtc_register
 4113              	.LVL308:
 796:Core/Src/AB1805.c **** }
 4114              		.loc 1 796 3 view .LVU888
 797:Core/Src/AB1805.c **** 
 4115              		.loc 1 797 1 is_stmt 0 view .LVU889
 4116 001e 2000     		movs	r0, r4
 4117              		@ sp needed
 4118              	.LVL309:
 797:Core/Src/AB1805.c **** 
 4119              		.loc 1 797 1 view .LVU890
 4120 0020 70BD     		pop	{r4, r5, r6, pc}
 4121              		.cfi_endproc
 4122              	.LFE582:
 4124              		.section	.text.get_sleep,"ax",%progbits
 4125              		.align	1
 4126              		.global	get_sleep
 4127              		.syntax unified
 4128              		.code	16
 4129              		.thumb_func
 4131              	get_sleep:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 158


 4132              	.LFB583:
 801:Core/Src/AB1805.c ****   _sleep_mode = read_rtc_register(SLEEP_CONTROL_REGISTER);
 4133              		.loc 1 801 1 is_stmt 1 view -0
 4134              		.cfi_startproc
 4135              		@ args = 0, pretend = 0, frame = 0
 4136              		@ frame_needed = 0, uses_anonymous_args = 0
 4137 0000 10B5     		push	{r4, lr}
 4138              	.LCFI77:
 4139              		.cfi_def_cfa_offset 8
 4140              		.cfi_offset 4, -8
 4141              		.cfi_offset 14, -4
 802:Core/Src/AB1805.c ****   return _sleep_mode;
 4142              		.loc 1 802 3 view .LVU892
 802:Core/Src/AB1805.c ****   return _sleep_mode;
 4143              		.loc 1 802 17 is_stmt 0 view .LVU893
 4144 0002 1720     		movs	r0, #23
 4145 0004 FFF7FEFF 		bl	read_rtc_register
 4146              	.LVL310:
 802:Core/Src/AB1805.c ****   return _sleep_mode;
 4147              		.loc 1 802 15 view .LVU894
 4148 0008 014B     		ldr	r3, .L197
 4149 000a 1870     		strb	r0, [r3]
 803:Core/Src/AB1805.c **** }
 4150              		.loc 1 803 3 is_stmt 1 view .LVU895
 804:Core/Src/AB1805.c **** 
 4151              		.loc 1 804 1 is_stmt 0 view .LVU896
 4152              		@ sp needed
 4153 000c 10BD     		pop	{r4, pc}
 4154              	.L198:
 4155 000e C046     		.align	2
 4156              	.L197:
 4157 0010 00000000 		.word	_sleep_mode
 4158              		.cfi_endproc
 4159              	.LFE583:
 4161              		.section	.text.get_SLP_sleep,"ax",%progbits
 4162              		.align	1
 4163              		.global	get_SLP_sleep
 4164              		.syntax unified
 4165              		.code	16
 4166              		.thumb_func
 4168              	get_SLP_sleep:
 4169              	.LFB584:
 807:Core/Src/AB1805.c ****   get_sleep();
 4170              		.loc 1 807 1 is_stmt 1 view -0
 4171              		.cfi_startproc
 4172              		@ args = 0, pretend = 0, frame = 0
 4173              		@ frame_needed = 0, uses_anonymous_args = 0
 4174 0000 10B5     		push	{r4, lr}
 4175              	.LCFI78:
 4176              		.cfi_def_cfa_offset 8
 4177              		.cfi_offset 4, -8
 4178              		.cfi_offset 14, -4
 808:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_SLP_MASK > 7));
 4179              		.loc 1 808 3 view .LVU898
 4180 0002 FFF7FEFF 		bl	get_sleep
 4181              	.LVL311:
 809:Core/Src/AB1805.c **** };
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 159


 4182              		.loc 1 809 3 view .LVU899
 809:Core/Src/AB1805.c **** };
 4183              		.loc 1 809 23 is_stmt 0 view .LVU900
 4184 0006 024B     		ldr	r3, .L200
 4185 0008 1B78     		ldrb	r3, [r3]
 4186 000a 0120     		movs	r0, #1
 4187 000c 1840     		ands	r0, r3
 810:Core/Src/AB1805.c **** 
 4188              		.loc 1 810 1 view .LVU901
 4189              		@ sp needed
 4190 000e 10BD     		pop	{r4, pc}
 4191              	.L201:
 4192              		.align	2
 4193              	.L200:
 4194 0010 00000000 		.word	_sleep_mode
 4195              		.cfi_endproc
 4196              	.LFE584:
 4198              		.section	.text.get_SLRES_sleep,"ax",%progbits
 4199              		.align	1
 4200              		.global	get_SLRES_sleep
 4201              		.syntax unified
 4202              		.code	16
 4203              		.thumb_func
 4205              	get_SLRES_sleep:
 4206              	.LFB585:
 813:Core/Src/AB1805.c ****   get_sleep();
 4207              		.loc 1 813 1 is_stmt 1 view -0
 4208              		.cfi_startproc
 4209              		@ args = 0, pretend = 0, frame = 0
 4210              		@ frame_needed = 0, uses_anonymous_args = 0
 4211 0000 10B5     		push	{r4, lr}
 4212              	.LCFI79:
 4213              		.cfi_def_cfa_offset 8
 4214              		.cfi_offset 4, -8
 4215              		.cfi_offset 14, -4
 814:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_SLRES_MASK > 6));
 4216              		.loc 1 814 3 view .LVU903
 4217 0002 FFF7FEFF 		bl	get_sleep
 4218              	.LVL312:
 815:Core/Src/AB1805.c **** };
 4219              		.loc 1 815 3 view .LVU904
 815:Core/Src/AB1805.c **** };
 4220              		.loc 1 815 23 is_stmt 0 view .LVU905
 4221 0006 024B     		ldr	r3, .L203
 4222 0008 1B78     		ldrb	r3, [r3]
 4223 000a 0120     		movs	r0, #1
 4224 000c 1840     		ands	r0, r3
 816:Core/Src/AB1805.c **** 
 4225              		.loc 1 816 1 view .LVU906
 4226              		@ sp needed
 4227 000e 10BD     		pop	{r4, pc}
 4228              	.L204:
 4229              		.align	2
 4230              	.L203:
 4231 0010 00000000 		.word	_sleep_mode
 4232              		.cfi_endproc
 4233              	.LFE585:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 160


 4235              		.section	.text.get_EX2P_sleep,"ax",%progbits
 4236              		.align	1
 4237              		.global	get_EX2P_sleep
 4238              		.syntax unified
 4239              		.code	16
 4240              		.thumb_func
 4242              	get_EX2P_sleep:
 4243              	.LFB586:
 819:Core/Src/AB1805.c ****   get_sleep();
 4244              		.loc 1 819 1 is_stmt 1 view -0
 4245              		.cfi_startproc
 4246              		@ args = 0, pretend = 0, frame = 0
 4247              		@ frame_needed = 0, uses_anonymous_args = 0
 4248 0000 10B5     		push	{r4, lr}
 4249              	.LCFI80:
 4250              		.cfi_def_cfa_offset 8
 4251              		.cfi_offset 4, -8
 4252              		.cfi_offset 14, -4
 820:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_EX2P_MASK > 5));
 4253              		.loc 1 820 3 view .LVU908
 4254 0002 FFF7FEFF 		bl	get_sleep
 4255              	.LVL313:
 821:Core/Src/AB1805.c **** };
 4256              		.loc 1 821 3 view .LVU909
 821:Core/Src/AB1805.c **** };
 4257              		.loc 1 821 23 is_stmt 0 view .LVU910
 4258 0006 024B     		ldr	r3, .L206
 4259 0008 1B78     		ldrb	r3, [r3]
 4260 000a 0120     		movs	r0, #1
 4261 000c 1840     		ands	r0, r3
 822:Core/Src/AB1805.c **** 
 4262              		.loc 1 822 1 view .LVU911
 4263              		@ sp needed
 4264 000e 10BD     		pop	{r4, pc}
 4265              	.L207:
 4266              		.align	2
 4267              	.L206:
 4268 0010 00000000 		.word	_sleep_mode
 4269              		.cfi_endproc
 4270              	.LFE586:
 4272              		.section	.text.get_EX1P_sleep,"ax",%progbits
 4273              		.align	1
 4274              		.global	get_EX1P_sleep
 4275              		.syntax unified
 4276              		.code	16
 4277              		.thumb_func
 4279              	get_EX1P_sleep:
 4280              	.LFB587:
 825:Core/Src/AB1805.c ****   get_sleep();
 4281              		.loc 1 825 1 is_stmt 1 view -0
 4282              		.cfi_startproc
 4283              		@ args = 0, pretend = 0, frame = 0
 4284              		@ frame_needed = 0, uses_anonymous_args = 0
 4285 0000 10B5     		push	{r4, lr}
 4286              	.LCFI81:
 4287              		.cfi_def_cfa_offset 8
 4288              		.cfi_offset 4, -8
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 161


 4289              		.cfi_offset 14, -4
 826:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_EX1P_MASK > 4));
 4290              		.loc 1 826 3 view .LVU913
 4291 0002 FFF7FEFF 		bl	get_sleep
 4292              	.LVL314:
 827:Core/Src/AB1805.c **** };
 4293              		.loc 1 827 3 view .LVU914
 827:Core/Src/AB1805.c **** };
 4294              		.loc 1 827 23 is_stmt 0 view .LVU915
 4295 0006 024B     		ldr	r3, .L209
 4296 0008 1B78     		ldrb	r3, [r3]
 4297 000a 0120     		movs	r0, #1
 4298 000c 1840     		ands	r0, r3
 828:Core/Src/AB1805.c **** 
 4299              		.loc 1 828 1 view .LVU916
 4300              		@ sp needed
 4301 000e 10BD     		pop	{r4, pc}
 4302              	.L210:
 4303              		.align	2
 4304              	.L209:
 4305 0010 00000000 		.word	_sleep_mode
 4306              		.cfi_endproc
 4307              	.LFE587:
 4309              		.section	.text.get_SLST_sleep,"ax",%progbits
 4310              		.align	1
 4311              		.global	get_SLST_sleep
 4312              		.syntax unified
 4313              		.code	16
 4314              		.thumb_func
 4316              	get_SLST_sleep:
 4317              	.LFB588:
 831:Core/Src/AB1805.c ****   get_sleep();
 4318              		.loc 1 831 1 is_stmt 1 view -0
 4319              		.cfi_startproc
 4320              		@ args = 0, pretend = 0, frame = 0
 4321              		@ frame_needed = 0, uses_anonymous_args = 0
 4322 0000 10B5     		push	{r4, lr}
 4323              	.LCFI82:
 4324              		.cfi_def_cfa_offset 8
 4325              		.cfi_offset 4, -8
 4326              		.cfi_offset 14, -4
 832:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_SLST_MASK > 3));
 4327              		.loc 1 832 3 view .LVU918
 4328 0002 FFF7FEFF 		bl	get_sleep
 4329              	.LVL315:
 833:Core/Src/AB1805.c **** };
 4330              		.loc 1 833 3 view .LVU919
 833:Core/Src/AB1805.c **** };
 4331              		.loc 1 833 23 is_stmt 0 view .LVU920
 4332 0006 024B     		ldr	r3, .L212
 4333 0008 1B78     		ldrb	r3, [r3]
 4334 000a 0120     		movs	r0, #1
 4335 000c 1840     		ands	r0, r3
 834:Core/Src/AB1805.c **** 
 4336              		.loc 1 834 1 view .LVU921
 4337              		@ sp needed
 4338 000e 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 162


 4339              	.L213:
 4340              		.align	2
 4341              	.L212:
 4342 0010 00000000 		.word	_sleep_mode
 4343              		.cfi_endproc
 4344              	.LFE588:
 4346              		.section	.text.get_SLTO_sleep,"ax",%progbits
 4347              		.align	1
 4348              		.global	get_SLTO_sleep
 4349              		.syntax unified
 4350              		.code	16
 4351              		.thumb_func
 4353              	get_SLTO_sleep:
 4354              	.LFB589:
 837:Core/Src/AB1805.c ****   get_sleep();
 4355              		.loc 1 837 1 is_stmt 1 view -0
 4356              		.cfi_startproc
 4357              		@ args = 0, pretend = 0, frame = 0
 4358              		@ frame_needed = 0, uses_anonymous_args = 0
 4359 0000 10B5     		push	{r4, lr}
 4360              	.LCFI83:
 4361              		.cfi_def_cfa_offset 8
 4362              		.cfi_offset 4, -8
 4363              		.cfi_offset 14, -4
 838:Core/Src/AB1805.c ****   return (_sleep_mode & (SLEEP_CONTROL_SLTO_MASK));
 4364              		.loc 1 838 3 view .LVU923
 4365 0002 FFF7FEFF 		bl	get_sleep
 4366              	.LVL316:
 839:Core/Src/AB1805.c **** };
 4367              		.loc 1 839 3 view .LVU924
 839:Core/Src/AB1805.c **** };
 4368              		.loc 1 839 23 is_stmt 0 view .LVU925
 4369 0006 024B     		ldr	r3, .L215
 4370 0008 1B78     		ldrb	r3, [r3]
 4371 000a 0720     		movs	r0, #7
 4372 000c 1840     		ands	r0, r3
 840:Core/Src/AB1805.c **** 
 4373              		.loc 1 840 1 view .LVU926
 4374              		@ sp needed
 4375 000e 10BD     		pop	{r4, pc}
 4376              	.L216:
 4377              		.align	2
 4378              	.L215:
 4379 0010 00000000 		.word	_sleep_mode
 4380              		.cfi_endproc
 4381              	.LFE589:
 4383              		.section	.text.set_sleep,"ax",%progbits
 4384              		.align	1
 4385              		.global	set_sleep
 4386              		.syntax unified
 4387              		.code	16
 4388              		.thumb_func
 4390              	set_sleep:
 4391              	.LVL317:
 4392              	.LFB590:
 843:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, value);
 4393              		.loc 1 843 1 is_stmt 1 view -0
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 163


 4394              		.cfi_startproc
 4395              		@ args = 0, pretend = 0, frame = 0
 4396              		@ frame_needed = 0, uses_anonymous_args = 0
 843:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, value);
 4397              		.loc 1 843 1 is_stmt 0 view .LVU928
 4398 0000 10B5     		push	{r4, lr}
 4399              	.LCFI84:
 4400              		.cfi_def_cfa_offset 8
 4401              		.cfi_offset 4, -8
 4402              		.cfi_offset 14, -4
 4403 0002 0100     		movs	r1, r0
 844:Core/Src/AB1805.c ****   _sleep_mode = read_rtc_register(SLEEP_CONTROL_REGISTER);
 4404              		.loc 1 844 3 is_stmt 1 view .LVU929
 4405 0004 1720     		movs	r0, #23
 4406              	.LVL318:
 844:Core/Src/AB1805.c ****   _sleep_mode = read_rtc_register(SLEEP_CONTROL_REGISTER);
 4407              		.loc 1 844 3 is_stmt 0 view .LVU930
 4408 0006 FFF7FEFF 		bl	write_rtc_register
 4409              	.LVL319:
 845:Core/Src/AB1805.c ****   return _sleep_mode;
 4410              		.loc 1 845 3 is_stmt 1 view .LVU931
 845:Core/Src/AB1805.c ****   return _sleep_mode;
 4411              		.loc 1 845 17 is_stmt 0 view .LVU932
 4412 000a 1720     		movs	r0, #23
 4413 000c FFF7FEFF 		bl	read_rtc_register
 4414              	.LVL320:
 845:Core/Src/AB1805.c ****   return _sleep_mode;
 4415              		.loc 1 845 15 view .LVU933
 4416 0010 014B     		ldr	r3, .L218
 4417 0012 1870     		strb	r0, [r3]
 846:Core/Src/AB1805.c **** }
 4418              		.loc 1 846 3 is_stmt 1 view .LVU934
 847:Core/Src/AB1805.c **** 
 4419              		.loc 1 847 1 is_stmt 0 view .LVU935
 4420              		@ sp needed
 4421 0014 10BD     		pop	{r4, pc}
 4422              	.L219:
 4423 0016 C046     		.align	2
 4424              	.L218:
 4425 0018 00000000 		.word	_sleep_mode
 4426              		.cfi_endproc
 4427              	.LFE590:
 4429              		.section	.text.set_SLP_sleep,"ax",%progbits
 4430              		.align	1
 4431              		.global	set_SLP_sleep
 4432              		.syntax unified
 4433              		.code	16
 4434              		.thumb_func
 4436              	set_SLP_sleep:
 4437              	.LVL321:
 4438              	.LFB591:
 850:Core/Src/AB1805.c ****   uint8_t c1;
 4439              		.loc 1 850 1 is_stmt 1 view -0
 4440              		.cfi_startproc
 4441              		@ args = 0, pretend = 0, frame = 0
 4442              		@ frame_needed = 0, uses_anonymous_args = 0
 850:Core/Src/AB1805.c ****   uint8_t c1;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 164


 4443              		.loc 1 850 1 is_stmt 0 view .LVU937
 4444 0000 70B5     		push	{r4, r5, r6, lr}
 4445              	.LCFI85:
 4446              		.cfi_def_cfa_offset 16
 4447              		.cfi_offset 4, -16
 4448              		.cfi_offset 5, -12
 4449              		.cfi_offset 6, -8
 4450              		.cfi_offset 14, -4
 4451 0002 0500     		movs	r5, r0
 851:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 4452              		.loc 1 851 3 is_stmt 1 view .LVU938
 852:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLP_MASK;
 4453              		.loc 1 852 3 view .LVU939
 852:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLP_MASK;
 4454              		.loc 1 852 8 is_stmt 0 view .LVU940
 4455 0004 1720     		movs	r0, #23
 4456              	.LVL322:
 852:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLP_MASK;
 4457              		.loc 1 852 8 view .LVU941
 4458 0006 FFF7FEFF 		bl	read_rtc_register
 4459              	.LVL323:
 853:Core/Src/AB1805.c ****   if (value)
 4460              		.loc 1 853 3 is_stmt 1 view .LVU942
 853:Core/Src/AB1805.c ****   if (value)
 4461              		.loc 1 853 6 is_stmt 0 view .LVU943
 4462 000a 7F24     		movs	r4, #127
 4463 000c 0440     		ands	r4, r0
 4464              	.LVL324:
 854:Core/Src/AB1805.c ****   {
 4465              		.loc 1 854 3 is_stmt 1 view .LVU944
 854:Core/Src/AB1805.c ****   {
 4466              		.loc 1 854 6 is_stmt 0 view .LVU945
 4467 000e 002D     		cmp	r5, #0
 4468 0010 03D0     		beq	.L221
 856:Core/Src/AB1805.c ****   }
 4469              		.loc 1 856 5 is_stmt 1 view .LVU946
 856:Core/Src/AB1805.c ****   }
 4470              		.loc 1 856 8 is_stmt 0 view .LVU947
 4471 0012 8023     		movs	r3, #128
 4472 0014 5B42     		rsbs	r3, r3, #0
 4473 0016 1C43     		orrs	r4, r3
 4474              	.LVL325:
 856:Core/Src/AB1805.c ****   }
 4475              		.loc 1 856 8 view .LVU948
 4476 0018 E4B2     		uxtb	r4, r4
 4477              	.LVL326:
 4478              	.L221:
 858:Core/Src/AB1805.c ****   return c1;
 4479              		.loc 1 858 3 is_stmt 1 view .LVU949
 4480 001a 2100     		movs	r1, r4
 4481 001c 1720     		movs	r0, #23
 4482 001e FFF7FEFF 		bl	write_rtc_register
 4483              	.LVL327:
 859:Core/Src/AB1805.c **** }
 4484              		.loc 1 859 3 view .LVU950
 860:Core/Src/AB1805.c **** 
 4485              		.loc 1 860 1 is_stmt 0 view .LVU951
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 165


 4486 0022 2000     		movs	r0, r4
 4487              		@ sp needed
 4488              	.LVL328:
 860:Core/Src/AB1805.c **** 
 4489              		.loc 1 860 1 view .LVU952
 4490 0024 70BD     		pop	{r4, r5, r6, pc}
 4491              		.cfi_endproc
 4492              	.LFE591:
 4494              		.section	.text.set_SLRES_sleep,"ax",%progbits
 4495              		.align	1
 4496              		.global	set_SLRES_sleep
 4497              		.syntax unified
 4498              		.code	16
 4499              		.thumb_func
 4501              	set_SLRES_sleep:
 4502              	.LVL329:
 4503              	.LFB592:
 863:Core/Src/AB1805.c ****   uint8_t c1;
 4504              		.loc 1 863 1 is_stmt 1 view -0
 4505              		.cfi_startproc
 4506              		@ args = 0, pretend = 0, frame = 0
 4507              		@ frame_needed = 0, uses_anonymous_args = 0
 863:Core/Src/AB1805.c ****   uint8_t c1;
 4508              		.loc 1 863 1 is_stmt 0 view .LVU954
 4509 0000 70B5     		push	{r4, r5, r6, lr}
 4510              	.LCFI86:
 4511              		.cfi_def_cfa_offset 16
 4512              		.cfi_offset 4, -16
 4513              		.cfi_offset 5, -12
 4514              		.cfi_offset 6, -8
 4515              		.cfi_offset 14, -4
 4516 0002 0500     		movs	r5, r0
 864:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 4517              		.loc 1 864 3 is_stmt 1 view .LVU955
 865:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLRES_MASK;
 4518              		.loc 1 865 3 view .LVU956
 865:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLRES_MASK;
 4519              		.loc 1 865 8 is_stmt 0 view .LVU957
 4520 0004 1720     		movs	r0, #23
 4521              	.LVL330:
 865:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLRES_MASK;
 4522              		.loc 1 865 8 view .LVU958
 4523 0006 FFF7FEFF 		bl	read_rtc_register
 4524              	.LVL331:
 866:Core/Src/AB1805.c ****   if (value)
 4525              		.loc 1 866 3 is_stmt 1 view .LVU959
 866:Core/Src/AB1805.c ****   if (value)
 4526              		.loc 1 866 6 is_stmt 0 view .LVU960
 4527 000a 4023     		movs	r3, #64
 4528 000c 9843     		bics	r0, r3
 4529              	.LVL332:
 866:Core/Src/AB1805.c ****   if (value)
 4530              		.loc 1 866 6 view .LVU961
 4531 000e C4B2     		uxtb	r4, r0
 4532              	.LVL333:
 867:Core/Src/AB1805.c ****   {
 4533              		.loc 1 867 3 is_stmt 1 view .LVU962
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 166


 867:Core/Src/AB1805.c ****   {
 4534              		.loc 1 867 6 is_stmt 0 view .LVU963
 4535 0010 002D     		cmp	r5, #0
 4536 0012 01D0     		beq	.L223
 869:Core/Src/AB1805.c ****   }
 4537              		.loc 1 869 5 is_stmt 1 view .LVU964
 869:Core/Src/AB1805.c ****   }
 4538              		.loc 1 869 8 is_stmt 0 view .LVU965
 4539 0014 1C43     		orrs	r4, r3
 4540              	.LVL334:
 869:Core/Src/AB1805.c ****   }
 4541              		.loc 1 869 8 view .LVU966
 4542 0016 E4B2     		uxtb	r4, r4
 4543              	.LVL335:
 4544              	.L223:
 871:Core/Src/AB1805.c ****   return c1;
 4545              		.loc 1 871 3 is_stmt 1 view .LVU967
 4546 0018 2100     		movs	r1, r4
 4547 001a 1720     		movs	r0, #23
 4548 001c FFF7FEFF 		bl	write_rtc_register
 4549              	.LVL336:
 872:Core/Src/AB1805.c **** }
 4550              		.loc 1 872 3 view .LVU968
 873:Core/Src/AB1805.c **** 
 4551              		.loc 1 873 1 is_stmt 0 view .LVU969
 4552 0020 2000     		movs	r0, r4
 4553              		@ sp needed
 4554              	.LVL337:
 873:Core/Src/AB1805.c **** 
 4555              		.loc 1 873 1 view .LVU970
 4556 0022 70BD     		pop	{r4, r5, r6, pc}
 4557              		.cfi_endproc
 4558              	.LFE592:
 4560              		.section	.text.set_EX2P_sleep,"ax",%progbits
 4561              		.align	1
 4562              		.global	set_EX2P_sleep
 4563              		.syntax unified
 4564              		.code	16
 4565              		.thumb_func
 4567              	set_EX2P_sleep:
 4568              	.LVL338:
 4569              	.LFB593:
 876:Core/Src/AB1805.c ****   uint8_t c1;
 4570              		.loc 1 876 1 is_stmt 1 view -0
 4571              		.cfi_startproc
 4572              		@ args = 0, pretend = 0, frame = 0
 4573              		@ frame_needed = 0, uses_anonymous_args = 0
 876:Core/Src/AB1805.c ****   uint8_t c1;
 4574              		.loc 1 876 1 is_stmt 0 view .LVU972
 4575 0000 70B5     		push	{r4, r5, r6, lr}
 4576              	.LCFI87:
 4577              		.cfi_def_cfa_offset 16
 4578              		.cfi_offset 4, -16
 4579              		.cfi_offset 5, -12
 4580              		.cfi_offset 6, -8
 4581              		.cfi_offset 14, -4
 4582 0002 0500     		movs	r5, r0
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 167


 877:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 4583              		.loc 1 877 3 is_stmt 1 view .LVU973
 878:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_EX2P_MASK;
 4584              		.loc 1 878 3 view .LVU974
 878:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_EX2P_MASK;
 4585              		.loc 1 878 8 is_stmt 0 view .LVU975
 4586 0004 1720     		movs	r0, #23
 4587              	.LVL339:
 878:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_EX2P_MASK;
 4588              		.loc 1 878 8 view .LVU976
 4589 0006 FFF7FEFF 		bl	read_rtc_register
 4590              	.LVL340:
 879:Core/Src/AB1805.c ****   if (value)
 4591              		.loc 1 879 3 is_stmt 1 view .LVU977
 879:Core/Src/AB1805.c ****   if (value)
 4592              		.loc 1 879 6 is_stmt 0 view .LVU978
 4593 000a 2023     		movs	r3, #32
 4594 000c 9843     		bics	r0, r3
 4595              	.LVL341:
 879:Core/Src/AB1805.c ****   if (value)
 4596              		.loc 1 879 6 view .LVU979
 4597 000e C4B2     		uxtb	r4, r0
 4598              	.LVL342:
 880:Core/Src/AB1805.c ****   {
 4599              		.loc 1 880 3 is_stmt 1 view .LVU980
 880:Core/Src/AB1805.c ****   {
 4600              		.loc 1 880 6 is_stmt 0 view .LVU981
 4601 0010 002D     		cmp	r5, #0
 4602 0012 01D0     		beq	.L225
 882:Core/Src/AB1805.c ****   }
 4603              		.loc 1 882 5 is_stmt 1 view .LVU982
 882:Core/Src/AB1805.c ****   }
 4604              		.loc 1 882 8 is_stmt 0 view .LVU983
 4605 0014 1C43     		orrs	r4, r3
 4606              	.LVL343:
 882:Core/Src/AB1805.c ****   }
 4607              		.loc 1 882 8 view .LVU984
 4608 0016 E4B2     		uxtb	r4, r4
 4609              	.LVL344:
 4610              	.L225:
 884:Core/Src/AB1805.c ****   return c1;
 4611              		.loc 1 884 3 is_stmt 1 view .LVU985
 4612 0018 2100     		movs	r1, r4
 4613 001a 1720     		movs	r0, #23
 4614 001c FFF7FEFF 		bl	write_rtc_register
 4615              	.LVL345:
 885:Core/Src/AB1805.c **** }
 4616              		.loc 1 885 3 view .LVU986
 886:Core/Src/AB1805.c **** 
 4617              		.loc 1 886 1 is_stmt 0 view .LVU987
 4618 0020 2000     		movs	r0, r4
 4619              		@ sp needed
 4620              	.LVL346:
 886:Core/Src/AB1805.c **** 
 4621              		.loc 1 886 1 view .LVU988
 4622 0022 70BD     		pop	{r4, r5, r6, pc}
 4623              		.cfi_endproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 168


 4624              	.LFE593:
 4626              		.section	.text.set_EX1P_sleep,"ax",%progbits
 4627              		.align	1
 4628              		.global	set_EX1P_sleep
 4629              		.syntax unified
 4630              		.code	16
 4631              		.thumb_func
 4633              	set_EX1P_sleep:
 4634              	.LVL347:
 4635              	.LFB594:
 889:Core/Src/AB1805.c ****   uint8_t c1;
 4636              		.loc 1 889 1 is_stmt 1 view -0
 4637              		.cfi_startproc
 4638              		@ args = 0, pretend = 0, frame = 0
 4639              		@ frame_needed = 0, uses_anonymous_args = 0
 889:Core/Src/AB1805.c ****   uint8_t c1;
 4640              		.loc 1 889 1 is_stmt 0 view .LVU990
 4641 0000 70B5     		push	{r4, r5, r6, lr}
 4642              	.LCFI88:
 4643              		.cfi_def_cfa_offset 16
 4644              		.cfi_offset 4, -16
 4645              		.cfi_offset 5, -12
 4646              		.cfi_offset 6, -8
 4647              		.cfi_offset 14, -4
 4648 0002 0500     		movs	r5, r0
 890:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 4649              		.loc 1 890 3 is_stmt 1 view .LVU991
 891:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_EX1P_MASK;
 4650              		.loc 1 891 3 view .LVU992
 891:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_EX1P_MASK;
 4651              		.loc 1 891 8 is_stmt 0 view .LVU993
 4652 0004 1720     		movs	r0, #23
 4653              	.LVL348:
 891:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_EX1P_MASK;
 4654              		.loc 1 891 8 view .LVU994
 4655 0006 FFF7FEFF 		bl	read_rtc_register
 4656              	.LVL349:
 892:Core/Src/AB1805.c ****   if (value)
 4657              		.loc 1 892 3 is_stmt 1 view .LVU995
 892:Core/Src/AB1805.c ****   if (value)
 4658              		.loc 1 892 6 is_stmt 0 view .LVU996
 4659 000a 1023     		movs	r3, #16
 4660 000c 9843     		bics	r0, r3
 4661              	.LVL350:
 892:Core/Src/AB1805.c ****   if (value)
 4662              		.loc 1 892 6 view .LVU997
 4663 000e C4B2     		uxtb	r4, r0
 4664              	.LVL351:
 893:Core/Src/AB1805.c ****   {
 4665              		.loc 1 893 3 is_stmt 1 view .LVU998
 893:Core/Src/AB1805.c ****   {
 4666              		.loc 1 893 6 is_stmt 0 view .LVU999
 4667 0010 002D     		cmp	r5, #0
 4668 0012 01D0     		beq	.L227
 895:Core/Src/AB1805.c ****   }
 4669              		.loc 1 895 5 is_stmt 1 view .LVU1000
 895:Core/Src/AB1805.c ****   }
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 169


 4670              		.loc 1 895 8 is_stmt 0 view .LVU1001
 4671 0014 1C43     		orrs	r4, r3
 4672              	.LVL352:
 895:Core/Src/AB1805.c ****   }
 4673              		.loc 1 895 8 view .LVU1002
 4674 0016 E4B2     		uxtb	r4, r4
 4675              	.LVL353:
 4676              	.L227:
 897:Core/Src/AB1805.c ****   return c1;
 4677              		.loc 1 897 3 is_stmt 1 view .LVU1003
 4678 0018 2100     		movs	r1, r4
 4679 001a 1720     		movs	r0, #23
 4680 001c FFF7FEFF 		bl	write_rtc_register
 4681              	.LVL354:
 898:Core/Src/AB1805.c **** }
 4682              		.loc 1 898 3 view .LVU1004
 899:Core/Src/AB1805.c **** 
 4683              		.loc 1 899 1 is_stmt 0 view .LVU1005
 4684 0020 2000     		movs	r0, r4
 4685              		@ sp needed
 4686              	.LVL355:
 899:Core/Src/AB1805.c **** 
 4687              		.loc 1 899 1 view .LVU1006
 4688 0022 70BD     		pop	{r4, r5, r6, pc}
 4689              		.cfi_endproc
 4690              	.LFE594:
 4692              		.section	.text.clean_SLST_sleep,"ax",%progbits
 4693              		.align	1
 4694              		.global	clean_SLST_sleep
 4695              		.syntax unified
 4696              		.code	16
 4697              		.thumb_func
 4699              	clean_SLST_sleep:
 4700              	.LFB595:
 902:Core/Src/AB1805.c ****   uint8_t c1;
 4701              		.loc 1 902 1 is_stmt 1 view -0
 4702              		.cfi_startproc
 4703              		@ args = 0, pretend = 0, frame = 0
 4704              		@ frame_needed = 0, uses_anonymous_args = 0
 4705 0000 10B5     		push	{r4, lr}
 4706              	.LCFI89:
 4707              		.cfi_def_cfa_offset 8
 4708              		.cfi_offset 4, -8
 4709              		.cfi_offset 14, -4
 903:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 4710              		.loc 1 903 3 view .LVU1008
 904:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLST_MASK;
 4711              		.loc 1 904 3 view .LVU1009
 904:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLST_MASK;
 4712              		.loc 1 904 8 is_stmt 0 view .LVU1010
 4713 0002 1720     		movs	r0, #23
 4714 0004 FFF7FEFF 		bl	read_rtc_register
 4715              	.LVL356:
 905:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 4716              		.loc 1 905 3 is_stmt 1 view .LVU1011
 905:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 4717              		.loc 1 905 6 is_stmt 0 view .LVU1012
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 170


 4718 0008 0823     		movs	r3, #8
 4719 000a 9843     		bics	r0, r3
 4720              	.LVL357:
 905:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 4721              		.loc 1 905 6 view .LVU1013
 4722 000c C4B2     		uxtb	r4, r0
 4723              	.LVL358:
 906:Core/Src/AB1805.c ****   return c1;
 4724              		.loc 1 906 3 is_stmt 1 view .LVU1014
 4725 000e 2100     		movs	r1, r4
 4726 0010 1720     		movs	r0, #23
 4727 0012 FFF7FEFF 		bl	write_rtc_register
 4728              	.LVL359:
 907:Core/Src/AB1805.c **** }
 4729              		.loc 1 907 3 view .LVU1015
 908:Core/Src/AB1805.c **** 
 4730              		.loc 1 908 1 is_stmt 0 view .LVU1016
 4731 0016 2000     		movs	r0, r4
 4732              		@ sp needed
 4733              	.LVL360:
 908:Core/Src/AB1805.c **** 
 4734              		.loc 1 908 1 view .LVU1017
 4735 0018 10BD     		pop	{r4, pc}
 4736              		.cfi_endproc
 4737              	.LFE595:
 4739              		.section	.text.set_SLTO_sleep,"ax",%progbits
 4740              		.align	1
 4741              		.global	set_SLTO_sleep
 4742              		.syntax unified
 4743              		.code	16
 4744              		.thumb_func
 4746              	set_SLTO_sleep:
 4747              	.LVL361:
 4748              	.LFB596:
 911:Core/Src/AB1805.c ****   uint8_t c1;
 4749              		.loc 1 911 1 is_stmt 1 view -0
 4750              		.cfi_startproc
 4751              		@ args = 0, pretend = 0, frame = 0
 4752              		@ frame_needed = 0, uses_anonymous_args = 0
 911:Core/Src/AB1805.c ****   uint8_t c1;
 4753              		.loc 1 911 1 is_stmt 0 view .LVU1019
 4754 0000 70B5     		push	{r4, r5, r6, lr}
 4755              	.LCFI90:
 4756              		.cfi_def_cfa_offset 16
 4757              		.cfi_offset 4, -16
 4758              		.cfi_offset 5, -12
 4759              		.cfi_offset 6, -8
 4760              		.cfi_offset 14, -4
 4761 0002 0500     		movs	r5, r0
 912:Core/Src/AB1805.c ****   c1 = read_rtc_register(SLEEP_CONTROL_REGISTER);
 4762              		.loc 1 912 3 is_stmt 1 view .LVU1020
 913:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLTO_MASK;
 4763              		.loc 1 913 3 view .LVU1021
 913:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLTO_MASK;
 4764              		.loc 1 913 8 is_stmt 0 view .LVU1022
 4765 0004 1720     		movs	r0, #23
 4766              	.LVL362:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 171


 913:Core/Src/AB1805.c ****   c1 &= ~SLEEP_CONTROL_SLTO_MASK;
 4767              		.loc 1 913 8 view .LVU1023
 4768 0006 FFF7FEFF 		bl	read_rtc_register
 4769              	.LVL363:
 914:Core/Src/AB1805.c ****   c1 |= value;
 4770              		.loc 1 914 3 is_stmt 1 view .LVU1024
 914:Core/Src/AB1805.c ****   c1 |= value;
 4771              		.loc 1 914 6 is_stmt 0 view .LVU1025
 4772 000a 0723     		movs	r3, #7
 4773 000c 9843     		bics	r0, r3
 4774              	.LVL364:
 914:Core/Src/AB1805.c ****   c1 |= value;
 4775              		.loc 1 914 6 view .LVU1026
 4776 000e C4B2     		uxtb	r4, r0
 4777              	.LVL365:
 915:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 4778              		.loc 1 915 3 is_stmt 1 view .LVU1027
 915:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, c1);
 4779              		.loc 1 915 6 is_stmt 0 view .LVU1028
 4780 0010 2C43     		orrs	r4, r5
 4781              	.LVL366:
 916:Core/Src/AB1805.c ****   return c1;
 4782              		.loc 1 916 3 is_stmt 1 view .LVU1029
 4783 0012 2100     		movs	r1, r4
 4784 0014 1720     		movs	r0, #23
 4785 0016 FFF7FEFF 		bl	write_rtc_register
 4786              	.LVL367:
 917:Core/Src/AB1805.c **** }
 4787              		.loc 1 917 3 view .LVU1030
 918:Core/Src/AB1805.c **** 
 4788              		.loc 1 918 1 is_stmt 0 view .LVU1031
 4789 001a 2000     		movs	r0, r4
 4790              		@ sp needed
 4791              	.LVL368:
 918:Core/Src/AB1805.c **** 
 4792              		.loc 1 918 1 view .LVU1032
 4793 001c 70BD     		pop	{r4, r5, r6, pc}
 4794              		.cfi_endproc
 4795              	.LFE596:
 4797              		.section	.text.get_time_control,"ax",%progbits
 4798              		.align	1
 4799              		.global	get_time_control
 4800              		.syntax unified
 4801              		.code	16
 4802              		.thumb_func
 4804              	get_time_control:
 4805              	.LFB597:
 922:Core/Src/AB1805.c ****   _timer_control_mode = read_rtc_register(TIMER_CONTROL_REGISTER);
 4806              		.loc 1 922 1 is_stmt 1 view -0
 4807              		.cfi_startproc
 4808              		@ args = 0, pretend = 0, frame = 0
 4809              		@ frame_needed = 0, uses_anonymous_args = 0
 4810 0000 10B5     		push	{r4, lr}
 4811              	.LCFI91:
 4812              		.cfi_def_cfa_offset 8
 4813              		.cfi_offset 4, -8
 4814              		.cfi_offset 14, -4
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 172


 923:Core/Src/AB1805.c ****   return _timer_control_mode;
 4815              		.loc 1 923 3 view .LVU1034
 923:Core/Src/AB1805.c ****   return _timer_control_mode;
 4816              		.loc 1 923 25 is_stmt 0 view .LVU1035
 4817 0002 1820     		movs	r0, #24
 4818 0004 FFF7FEFF 		bl	read_rtc_register
 4819              	.LVL369:
 923:Core/Src/AB1805.c ****   return _timer_control_mode;
 4820              		.loc 1 923 23 view .LVU1036
 4821 0008 014B     		ldr	r3, .L231
 4822 000a 1870     		strb	r0, [r3]
 924:Core/Src/AB1805.c **** }
 4823              		.loc 1 924 3 is_stmt 1 view .LVU1037
 925:Core/Src/AB1805.c **** 
 4824              		.loc 1 925 1 is_stmt 0 view .LVU1038
 4825              		@ sp needed
 4826 000c 10BD     		pop	{r4, pc}
 4827              	.L232:
 4828 000e C046     		.align	2
 4829              	.L231:
 4830 0010 00000000 		.word	_timer_control_mode
 4831              		.cfi_endproc
 4832              	.LFE597:
 4834              		.section	.text.get_TE_time_control,"ax",%progbits
 4835              		.align	1
 4836              		.global	get_TE_time_control
 4837              		.syntax unified
 4838              		.code	16
 4839              		.thumb_func
 4841              	get_TE_time_control:
 4842              	.LFB598:
 928:Core/Src/AB1805.c ****   get_time_control();
 4843              		.loc 1 928 1 is_stmt 1 view -0
 4844              		.cfi_startproc
 4845              		@ args = 0, pretend = 0, frame = 0
 4846              		@ frame_needed = 0, uses_anonymous_args = 0
 4847 0000 10B5     		push	{r4, lr}
 4848              	.LCFI92:
 4849              		.cfi_def_cfa_offset 8
 4850              		.cfi_offset 4, -8
 4851              		.cfi_offset 14, -4
 929:Core/Src/AB1805.c ****   return (_timer_control_mode & (TIMER_CONTROL_TE_MASK > 7));
 4852              		.loc 1 929 3 view .LVU1040
 4853 0002 FFF7FEFF 		bl	get_time_control
 4854              	.LVL370:
 930:Core/Src/AB1805.c **** };
 4855              		.loc 1 930 3 view .LVU1041
 930:Core/Src/AB1805.c **** };
 4856              		.loc 1 930 31 is_stmt 0 view .LVU1042
 4857 0006 024B     		ldr	r3, .L234
 4858 0008 1B78     		ldrb	r3, [r3]
 4859 000a 0120     		movs	r0, #1
 4860 000c 1840     		ands	r0, r3
 931:Core/Src/AB1805.c **** 
 4861              		.loc 1 931 1 view .LVU1043
 4862              		@ sp needed
 4863 000e 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 173


 4864              	.L235:
 4865              		.align	2
 4866              	.L234:
 4867 0010 00000000 		.word	_timer_control_mode
 4868              		.cfi_endproc
 4869              	.LFE598:
 4871              		.section	.text.get_TM_time_control,"ax",%progbits
 4872              		.align	1
 4873              		.global	get_TM_time_control
 4874              		.syntax unified
 4875              		.code	16
 4876              		.thumb_func
 4878              	get_TM_time_control:
 4879              	.LFB599:
 934:Core/Src/AB1805.c ****   get_time_control();
 4880              		.loc 1 934 1 is_stmt 1 view -0
 4881              		.cfi_startproc
 4882              		@ args = 0, pretend = 0, frame = 0
 4883              		@ frame_needed = 0, uses_anonymous_args = 0
 4884 0000 10B5     		push	{r4, lr}
 4885              	.LCFI93:
 4886              		.cfi_def_cfa_offset 8
 4887              		.cfi_offset 4, -8
 4888              		.cfi_offset 14, -4
 935:Core/Src/AB1805.c ****   return (_timer_control_mode & (TIMER_CONTROL_TM_MASK > 6));
 4889              		.loc 1 935 3 view .LVU1045
 4890 0002 FFF7FEFF 		bl	get_time_control
 4891              	.LVL371:
 936:Core/Src/AB1805.c **** };
 4892              		.loc 1 936 3 view .LVU1046
 936:Core/Src/AB1805.c **** };
 4893              		.loc 1 936 31 is_stmt 0 view .LVU1047
 4894 0006 024B     		ldr	r3, .L237
 4895 0008 1B78     		ldrb	r3, [r3]
 4896 000a 0120     		movs	r0, #1
 4897 000c 1840     		ands	r0, r3
 937:Core/Src/AB1805.c **** 
 4898              		.loc 1 937 1 view .LVU1048
 4899              		@ sp needed
 4900 000e 10BD     		pop	{r4, pc}
 4901              	.L238:
 4902              		.align	2
 4903              	.L237:
 4904 0010 00000000 		.word	_timer_control_mode
 4905              		.cfi_endproc
 4906              	.LFE599:
 4908              		.section	.text.get_TRPT_time_control,"ax",%progbits
 4909              		.align	1
 4910              		.global	get_TRPT_time_control
 4911              		.syntax unified
 4912              		.code	16
 4913              		.thumb_func
 4915              	get_TRPT_time_control:
 4916              	.LFB600:
 940:Core/Src/AB1805.c ****   get_time_control();
 4917              		.loc 1 940 1 is_stmt 1 view -0
 4918              		.cfi_startproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 174


 4919              		@ args = 0, pretend = 0, frame = 0
 4920              		@ frame_needed = 0, uses_anonymous_args = 0
 4921 0000 10B5     		push	{r4, lr}
 4922              	.LCFI94:
 4923              		.cfi_def_cfa_offset 8
 4924              		.cfi_offset 4, -8
 4925              		.cfi_offset 14, -4
 941:Core/Src/AB1805.c ****   return (_timer_control_mode & (TIMER_CONTROL_TRPT_MASK > 5));
 4926              		.loc 1 941 3 view .LVU1050
 4927 0002 FFF7FEFF 		bl	get_time_control
 4928              	.LVL372:
 942:Core/Src/AB1805.c **** };
 4929              		.loc 1 942 3 view .LVU1051
 942:Core/Src/AB1805.c **** };
 4930              		.loc 1 942 31 is_stmt 0 view .LVU1052
 4931 0006 024B     		ldr	r3, .L240
 4932 0008 1B78     		ldrb	r3, [r3]
 4933 000a 0120     		movs	r0, #1
 4934 000c 1840     		ands	r0, r3
 943:Core/Src/AB1805.c **** 
 4935              		.loc 1 943 1 view .LVU1053
 4936              		@ sp needed
 4937 000e 10BD     		pop	{r4, pc}
 4938              	.L241:
 4939              		.align	2
 4940              	.L240:
 4941 0010 00000000 		.word	_timer_control_mode
 4942              		.cfi_endproc
 4943              	.LFE600:
 4945              		.section	.text.get_RPT_time_control,"ax",%progbits
 4946              		.align	1
 4947              		.global	get_RPT_time_control
 4948              		.syntax unified
 4949              		.code	16
 4950              		.thumb_func
 4952              	get_RPT_time_control:
 4953              	.LFB601:
 946:Core/Src/AB1805.c ****   get_time_control();
 4954              		.loc 1 946 1 is_stmt 1 view -0
 4955              		.cfi_startproc
 4956              		@ args = 0, pretend = 0, frame = 0
 4957              		@ frame_needed = 0, uses_anonymous_args = 0
 4958 0000 10B5     		push	{r4, lr}
 4959              	.LCFI95:
 4960              		.cfi_def_cfa_offset 8
 4961              		.cfi_offset 4, -8
 4962              		.cfi_offset 14, -4
 947:Core/Src/AB1805.c ****   return (_timer_control_mode & (TIMER_CONTROL_RPT_MASK > 2));
 4963              		.loc 1 947 3 view .LVU1055
 4964 0002 FFF7FEFF 		bl	get_time_control
 4965              	.LVL373:
 948:Core/Src/AB1805.c **** };
 4966              		.loc 1 948 3 view .LVU1056
 948:Core/Src/AB1805.c **** };
 4967              		.loc 1 948 31 is_stmt 0 view .LVU1057
 4968 0006 024B     		ldr	r3, .L243
 4969 0008 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 175


 4970 000a 0120     		movs	r0, #1
 4971 000c 1840     		ands	r0, r3
 949:Core/Src/AB1805.c **** 
 4972              		.loc 1 949 1 view .LVU1058
 4973              		@ sp needed
 4974 000e 10BD     		pop	{r4, pc}
 4975              	.L244:
 4976              		.align	2
 4977              	.L243:
 4978 0010 00000000 		.word	_timer_control_mode
 4979              		.cfi_endproc
 4980              	.LFE601:
 4982              		.section	.text.get_TFS_time_control,"ax",%progbits
 4983              		.align	1
 4984              		.global	get_TFS_time_control
 4985              		.syntax unified
 4986              		.code	16
 4987              		.thumb_func
 4989              	get_TFS_time_control:
 4990              	.LFB602:
 952:Core/Src/AB1805.c ****   get_time_control();
 4991              		.loc 1 952 1 is_stmt 1 view -0
 4992              		.cfi_startproc
 4993              		@ args = 0, pretend = 0, frame = 0
 4994              		@ frame_needed = 0, uses_anonymous_args = 0
 4995 0000 10B5     		push	{r4, lr}
 4996              	.LCFI96:
 4997              		.cfi_def_cfa_offset 8
 4998              		.cfi_offset 4, -8
 4999              		.cfi_offset 14, -4
 953:Core/Src/AB1805.c ****   return (_timer_control_mode & (TIMER_CONTROL_TFS_MASK));
 5000              		.loc 1 953 3 view .LVU1060
 5001 0002 FFF7FEFF 		bl	get_time_control
 5002              	.LVL374:
 954:Core/Src/AB1805.c **** };
 5003              		.loc 1 954 3 view .LVU1061
 954:Core/Src/AB1805.c **** };
 5004              		.loc 1 954 31 is_stmt 0 view .LVU1062
 5005 0006 024B     		ldr	r3, .L246
 5006 0008 1B78     		ldrb	r3, [r3]
 5007 000a 0320     		movs	r0, #3
 5008 000c 1840     		ands	r0, r3
 955:Core/Src/AB1805.c **** 
 5009              		.loc 1 955 1 view .LVU1063
 5010              		@ sp needed
 5011 000e 10BD     		pop	{r4, pc}
 5012              	.L247:
 5013              		.align	2
 5014              	.L246:
 5015 0010 00000000 		.word	_timer_control_mode
 5016              		.cfi_endproc
 5017              	.LFE602:
 5019              		.section	.text.set_time_control,"ax",%progbits
 5020              		.align	1
 5021              		.global	set_time_control
 5022              		.syntax unified
 5023              		.code	16
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 176


 5024              		.thumb_func
 5026              	set_time_control:
 5027              	.LVL375:
 5028              	.LFB603:
 958:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, value);
 5029              		.loc 1 958 1 is_stmt 1 view -0
 5030              		.cfi_startproc
 5031              		@ args = 0, pretend = 0, frame = 0
 5032              		@ frame_needed = 0, uses_anonymous_args = 0
 958:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, value);
 5033              		.loc 1 958 1 is_stmt 0 view .LVU1065
 5034 0000 10B5     		push	{r4, lr}
 5035              	.LCFI97:
 5036              		.cfi_def_cfa_offset 8
 5037              		.cfi_offset 4, -8
 5038              		.cfi_offset 14, -4
 5039 0002 0100     		movs	r1, r0
 959:Core/Src/AB1805.c ****   _timer_control_mode = read_rtc_register(TIMER_CONTROL_REGISTER);
 5040              		.loc 1 959 3 is_stmt 1 view .LVU1066
 5041 0004 1820     		movs	r0, #24
 5042              	.LVL376:
 959:Core/Src/AB1805.c ****   _timer_control_mode = read_rtc_register(TIMER_CONTROL_REGISTER);
 5043              		.loc 1 959 3 is_stmt 0 view .LVU1067
 5044 0006 FFF7FEFF 		bl	write_rtc_register
 5045              	.LVL377:
 960:Core/Src/AB1805.c ****   return _timer_control_mode;
 5046              		.loc 1 960 3 is_stmt 1 view .LVU1068
 960:Core/Src/AB1805.c ****   return _timer_control_mode;
 5047              		.loc 1 960 25 is_stmt 0 view .LVU1069
 5048 000a 1820     		movs	r0, #24
 5049 000c FFF7FEFF 		bl	read_rtc_register
 5050              	.LVL378:
 960:Core/Src/AB1805.c ****   return _timer_control_mode;
 5051              		.loc 1 960 23 view .LVU1070
 5052 0010 014B     		ldr	r3, .L249
 5053 0012 1870     		strb	r0, [r3]
 961:Core/Src/AB1805.c **** }
 5054              		.loc 1 961 3 is_stmt 1 view .LVU1071
 962:Core/Src/AB1805.c **** 
 5055              		.loc 1 962 1 is_stmt 0 view .LVU1072
 5056              		@ sp needed
 5057 0014 10BD     		pop	{r4, pc}
 5058              	.L250:
 5059 0016 C046     		.align	2
 5060              	.L249:
 5061 0018 00000000 		.word	_timer_control_mode
 5062              		.cfi_endproc
 5063              	.LFE603:
 5065              		.section	.text.set_TE_time_control,"ax",%progbits
 5066              		.align	1
 5067              		.global	set_TE_time_control
 5068              		.syntax unified
 5069              		.code	16
 5070              		.thumb_func
 5072              	set_TE_time_control:
 5073              	.LVL379:
 5074              	.LFB604:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 177


 965:Core/Src/AB1805.c ****   uint8_t c1;
 5075              		.loc 1 965 1 is_stmt 1 view -0
 5076              		.cfi_startproc
 5077              		@ args = 0, pretend = 0, frame = 0
 5078              		@ frame_needed = 0, uses_anonymous_args = 0
 965:Core/Src/AB1805.c ****   uint8_t c1;
 5079              		.loc 1 965 1 is_stmt 0 view .LVU1074
 5080 0000 70B5     		push	{r4, r5, r6, lr}
 5081              	.LCFI98:
 5082              		.cfi_def_cfa_offset 16
 5083              		.cfi_offset 4, -16
 5084              		.cfi_offset 5, -12
 5085              		.cfi_offset 6, -8
 5086              		.cfi_offset 14, -4
 5087 0002 0500     		movs	r5, r0
 966:Core/Src/AB1805.c ****   c1 = read_rtc_register(TIMER_CONTROL_REGISTER);
 5088              		.loc 1 966 3 is_stmt 1 view .LVU1075
 967:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TE_MASK;
 5089              		.loc 1 967 3 view .LVU1076
 967:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TE_MASK;
 5090              		.loc 1 967 8 is_stmt 0 view .LVU1077
 5091 0004 1820     		movs	r0, #24
 5092              	.LVL380:
 967:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TE_MASK;
 5093              		.loc 1 967 8 view .LVU1078
 5094 0006 FFF7FEFF 		bl	read_rtc_register
 5095              	.LVL381:
 968:Core/Src/AB1805.c ****   if (value)
 5096              		.loc 1 968 3 is_stmt 1 view .LVU1079
 968:Core/Src/AB1805.c ****   if (value)
 5097              		.loc 1 968 6 is_stmt 0 view .LVU1080
 5098 000a 7F24     		movs	r4, #127
 5099 000c 0440     		ands	r4, r0
 5100              	.LVL382:
 969:Core/Src/AB1805.c ****   {
 5101              		.loc 1 969 3 is_stmt 1 view .LVU1081
 969:Core/Src/AB1805.c ****   {
 5102              		.loc 1 969 6 is_stmt 0 view .LVU1082
 5103 000e 002D     		cmp	r5, #0
 5104 0010 03D0     		beq	.L252
 971:Core/Src/AB1805.c ****   }
 5105              		.loc 1 971 5 is_stmt 1 view .LVU1083
 971:Core/Src/AB1805.c ****   }
 5106              		.loc 1 971 8 is_stmt 0 view .LVU1084
 5107 0012 8023     		movs	r3, #128
 5108 0014 5B42     		rsbs	r3, r3, #0
 5109 0016 1C43     		orrs	r4, r3
 5110              	.LVL383:
 971:Core/Src/AB1805.c ****   }
 5111              		.loc 1 971 8 view .LVU1085
 5112 0018 E4B2     		uxtb	r4, r4
 5113              	.LVL384:
 5114              	.L252:
 973:Core/Src/AB1805.c ****   return c1;
 5115              		.loc 1 973 3 is_stmt 1 view .LVU1086
 5116 001a 2100     		movs	r1, r4
 5117 001c 1820     		movs	r0, #24
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 178


 5118 001e FFF7FEFF 		bl	write_rtc_register
 5119              	.LVL385:
 974:Core/Src/AB1805.c **** }
 5120              		.loc 1 974 3 view .LVU1087
 975:Core/Src/AB1805.c **** 
 5121              		.loc 1 975 1 is_stmt 0 view .LVU1088
 5122 0022 2000     		movs	r0, r4
 5123              		@ sp needed
 5124              	.LVL386:
 975:Core/Src/AB1805.c **** 
 5125              		.loc 1 975 1 view .LVU1089
 5126 0024 70BD     		pop	{r4, r5, r6, pc}
 5127              		.cfi_endproc
 5128              	.LFE604:
 5130              		.section	.text.set_TM_time_control,"ax",%progbits
 5131              		.align	1
 5132              		.global	set_TM_time_control
 5133              		.syntax unified
 5134              		.code	16
 5135              		.thumb_func
 5137              	set_TM_time_control:
 5138              	.LVL387:
 5139              	.LFB605:
 978:Core/Src/AB1805.c ****   uint8_t c1;
 5140              		.loc 1 978 1 is_stmt 1 view -0
 5141              		.cfi_startproc
 5142              		@ args = 0, pretend = 0, frame = 0
 5143              		@ frame_needed = 0, uses_anonymous_args = 0
 978:Core/Src/AB1805.c ****   uint8_t c1;
 5144              		.loc 1 978 1 is_stmt 0 view .LVU1091
 5145 0000 70B5     		push	{r4, r5, r6, lr}
 5146              	.LCFI99:
 5147              		.cfi_def_cfa_offset 16
 5148              		.cfi_offset 4, -16
 5149              		.cfi_offset 5, -12
 5150              		.cfi_offset 6, -8
 5151              		.cfi_offset 14, -4
 5152 0002 0500     		movs	r5, r0
 979:Core/Src/AB1805.c ****   c1 = read_rtc_register(TIMER_CONTROL_REGISTER);
 5153              		.loc 1 979 3 is_stmt 1 view .LVU1092
 980:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TM_MASK;
 5154              		.loc 1 980 3 view .LVU1093
 980:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TM_MASK;
 5155              		.loc 1 980 8 is_stmt 0 view .LVU1094
 5156 0004 1820     		movs	r0, #24
 5157              	.LVL388:
 980:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TM_MASK;
 5158              		.loc 1 980 8 view .LVU1095
 5159 0006 FFF7FEFF 		bl	read_rtc_register
 5160              	.LVL389:
 981:Core/Src/AB1805.c ****   if (value)
 5161              		.loc 1 981 3 is_stmt 1 view .LVU1096
 981:Core/Src/AB1805.c ****   if (value)
 5162              		.loc 1 981 6 is_stmt 0 view .LVU1097
 5163 000a 4023     		movs	r3, #64
 5164 000c 9843     		bics	r0, r3
 5165              	.LVL390:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 179


 981:Core/Src/AB1805.c ****   if (value)
 5166              		.loc 1 981 6 view .LVU1098
 5167 000e C4B2     		uxtb	r4, r0
 5168              	.LVL391:
 982:Core/Src/AB1805.c ****   {
 5169              		.loc 1 982 3 is_stmt 1 view .LVU1099
 982:Core/Src/AB1805.c ****   {
 5170              		.loc 1 982 6 is_stmt 0 view .LVU1100
 5171 0010 002D     		cmp	r5, #0
 5172 0012 01D0     		beq	.L254
 984:Core/Src/AB1805.c ****   }
 5173              		.loc 1 984 5 is_stmt 1 view .LVU1101
 984:Core/Src/AB1805.c ****   }
 5174              		.loc 1 984 8 is_stmt 0 view .LVU1102
 5175 0014 1C43     		orrs	r4, r3
 5176              	.LVL392:
 984:Core/Src/AB1805.c ****   }
 5177              		.loc 1 984 8 view .LVU1103
 5178 0016 E4B2     		uxtb	r4, r4
 5179              	.LVL393:
 5180              	.L254:
 986:Core/Src/AB1805.c ****   return c1;
 5181              		.loc 1 986 3 is_stmt 1 view .LVU1104
 5182 0018 2100     		movs	r1, r4
 5183 001a 1820     		movs	r0, #24
 5184 001c FFF7FEFF 		bl	write_rtc_register
 5185              	.LVL394:
 987:Core/Src/AB1805.c **** }
 5186              		.loc 1 987 3 view .LVU1105
 988:Core/Src/AB1805.c **** 
 5187              		.loc 1 988 1 is_stmt 0 view .LVU1106
 5188 0020 2000     		movs	r0, r4
 5189              		@ sp needed
 5190              	.LVL395:
 988:Core/Src/AB1805.c **** 
 5191              		.loc 1 988 1 view .LVU1107
 5192 0022 70BD     		pop	{r4, r5, r6, pc}
 5193              		.cfi_endproc
 5194              	.LFE605:
 5196              		.section	.text.set_TRPT_time_control,"ax",%progbits
 5197              		.align	1
 5198              		.global	set_TRPT_time_control
 5199              		.syntax unified
 5200              		.code	16
 5201              		.thumb_func
 5203              	set_TRPT_time_control:
 5204              	.LVL396:
 5205              	.LFB606:
 991:Core/Src/AB1805.c ****   uint8_t c1;
 5206              		.loc 1 991 1 is_stmt 1 view -0
 5207              		.cfi_startproc
 5208              		@ args = 0, pretend = 0, frame = 0
 5209              		@ frame_needed = 0, uses_anonymous_args = 0
 991:Core/Src/AB1805.c ****   uint8_t c1;
 5210              		.loc 1 991 1 is_stmt 0 view .LVU1109
 5211 0000 70B5     		push	{r4, r5, r6, lr}
 5212              	.LCFI100:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 180


 5213              		.cfi_def_cfa_offset 16
 5214              		.cfi_offset 4, -16
 5215              		.cfi_offset 5, -12
 5216              		.cfi_offset 6, -8
 5217              		.cfi_offset 14, -4
 5218 0002 0500     		movs	r5, r0
 992:Core/Src/AB1805.c ****   c1 = read_rtc_register(TIMER_CONTROL_REGISTER);
 5219              		.loc 1 992 3 is_stmt 1 view .LVU1110
 993:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TRPT_MASK;
 5220              		.loc 1 993 3 view .LVU1111
 993:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TRPT_MASK;
 5221              		.loc 1 993 8 is_stmt 0 view .LVU1112
 5222 0004 1820     		movs	r0, #24
 5223              	.LVL397:
 993:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TRPT_MASK;
 5224              		.loc 1 993 8 view .LVU1113
 5225 0006 FFF7FEFF 		bl	read_rtc_register
 5226              	.LVL398:
 994:Core/Src/AB1805.c ****   if (value)
 5227              		.loc 1 994 3 is_stmt 1 view .LVU1114
 994:Core/Src/AB1805.c ****   if (value)
 5228              		.loc 1 994 6 is_stmt 0 view .LVU1115
 5229 000a 2023     		movs	r3, #32
 5230 000c 9843     		bics	r0, r3
 5231              	.LVL399:
 994:Core/Src/AB1805.c ****   if (value)
 5232              		.loc 1 994 6 view .LVU1116
 5233 000e C4B2     		uxtb	r4, r0
 5234              	.LVL400:
 995:Core/Src/AB1805.c ****   {
 5235              		.loc 1 995 3 is_stmt 1 view .LVU1117
 995:Core/Src/AB1805.c ****   {
 5236              		.loc 1 995 6 is_stmt 0 view .LVU1118
 5237 0010 002D     		cmp	r5, #0
 5238 0012 01D0     		beq	.L256
 997:Core/Src/AB1805.c ****   }
 5239              		.loc 1 997 5 is_stmt 1 view .LVU1119
 997:Core/Src/AB1805.c ****   }
 5240              		.loc 1 997 8 is_stmt 0 view .LVU1120
 5241 0014 1C43     		orrs	r4, r3
 5242              	.LVL401:
 997:Core/Src/AB1805.c ****   }
 5243              		.loc 1 997 8 view .LVU1121
 5244 0016 E4B2     		uxtb	r4, r4
 5245              	.LVL402:
 5246              	.L256:
 999:Core/Src/AB1805.c ****   return c1;
 5247              		.loc 1 999 3 is_stmt 1 view .LVU1122
 5248 0018 2100     		movs	r1, r4
 5249 001a 1820     		movs	r0, #24
 5250 001c FFF7FEFF 		bl	write_rtc_register
 5251              	.LVL403:
1000:Core/Src/AB1805.c **** }
 5252              		.loc 1 1000 3 view .LVU1123
1001:Core/Src/AB1805.c **** 
 5253              		.loc 1 1001 1 is_stmt 0 view .LVU1124
 5254 0020 2000     		movs	r0, r4
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 181


 5255              		@ sp needed
 5256              	.LVL404:
1001:Core/Src/AB1805.c **** 
 5257              		.loc 1 1001 1 view .LVU1125
 5258 0022 70BD     		pop	{r4, r5, r6, pc}
 5259              		.cfi_endproc
 5260              	.LFE606:
 5262              		.section	.text.set_RPT_time_control,"ax",%progbits
 5263              		.align	1
 5264              		.global	set_RPT_time_control
 5265              		.syntax unified
 5266              		.code	16
 5267              		.thumb_func
 5269              	set_RPT_time_control:
 5270              	.LVL405:
 5271              	.LFB607:
1004:Core/Src/AB1805.c ****   uint8_t c1;
 5272              		.loc 1 1004 1 is_stmt 1 view -0
 5273              		.cfi_startproc
 5274              		@ args = 0, pretend = 0, frame = 0
 5275              		@ frame_needed = 0, uses_anonymous_args = 0
1004:Core/Src/AB1805.c ****   uint8_t c1;
 5276              		.loc 1 1004 1 is_stmt 0 view .LVU1127
 5277 0000 70B5     		push	{r4, r5, r6, lr}
 5278              	.LCFI101:
 5279              		.cfi_def_cfa_offset 16
 5280              		.cfi_offset 4, -16
 5281              		.cfi_offset 5, -12
 5282              		.cfi_offset 6, -8
 5283              		.cfi_offset 14, -4
 5284 0002 0500     		movs	r5, r0
1005:Core/Src/AB1805.c ****   c1 = read_rtc_register(TIMER_CONTROL_REGISTER);
 5285              		.loc 1 1005 3 is_stmt 1 view .LVU1128
1006:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_RPT_MASK;
 5286              		.loc 1 1006 3 view .LVU1129
1006:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_RPT_MASK;
 5287              		.loc 1 1006 8 is_stmt 0 view .LVU1130
 5288 0004 1820     		movs	r0, #24
 5289              	.LVL406:
1006:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_RPT_MASK;
 5290              		.loc 1 1006 8 view .LVU1131
 5291 0006 FFF7FEFF 		bl	read_rtc_register
 5292              	.LVL407:
1007:Core/Src/AB1805.c ****   c1 |= (value << 2) & TIMER_CONTROL_RPT_MASK;
 5293              		.loc 1 1007 3 is_stmt 1 view .LVU1132
1007:Core/Src/AB1805.c ****   c1 |= (value << 2) & TIMER_CONTROL_RPT_MASK;
 5294              		.loc 1 1007 6 is_stmt 0 view .LVU1133
 5295 000a 1C23     		movs	r3, #28
 5296 000c 9843     		bics	r0, r3
 5297              	.LVL408:
1007:Core/Src/AB1805.c ****   c1 |= (value << 2) & TIMER_CONTROL_RPT_MASK;
 5298              		.loc 1 1007 6 view .LVU1134
 5299 000e C4B2     		uxtb	r4, r0
 5300              	.LVL409:
1008:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
 5301              		.loc 1 1008 3 is_stmt 1 view .LVU1135
1008:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 182


 5302              		.loc 1 1008 16 is_stmt 0 view .LVU1136
 5303 0010 AD00     		lsls	r5, r5, #2
1008:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
 5304              		.loc 1 1008 22 view .LVU1137
 5305 0012 2B40     		ands	r3, r5
1008:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
 5306              		.loc 1 1008 6 view .LVU1138
 5307 0014 1C43     		orrs	r4, r3
 5308              	.LVL410:
1009:Core/Src/AB1805.c ****   return c1;
 5309              		.loc 1 1009 3 is_stmt 1 view .LVU1139
 5310 0016 2100     		movs	r1, r4
 5311 0018 1820     		movs	r0, #24
 5312 001a FFF7FEFF 		bl	write_rtc_register
 5313              	.LVL411:
1010:Core/Src/AB1805.c **** }
 5314              		.loc 1 1010 3 view .LVU1140
1011:Core/Src/AB1805.c **** 
 5315              		.loc 1 1011 1 is_stmt 0 view .LVU1141
 5316 001e 2000     		movs	r0, r4
 5317              		@ sp needed
 5318              	.LVL412:
1011:Core/Src/AB1805.c **** 
 5319              		.loc 1 1011 1 view .LVU1142
 5320 0020 70BD     		pop	{r4, r5, r6, pc}
 5321              		.cfi_endproc
 5322              	.LFE607:
 5324              		.section	.text.set_datetime_alarm_month,"ax",%progbits
 5325              		.align	1
 5326              		.global	set_datetime_alarm_month
 5327              		.syntax unified
 5328              		.code	16
 5329              		.thumb_func
 5331              	set_datetime_alarm_month:
 5332              	.LVL413:
 5333              	.LFB524:
 204:Core/Src/AB1805.c ****   set_month_alarm(month);
 5334              		.loc 1 204 1 is_stmt 1 view -0
 5335              		.cfi_startproc
 5336              		@ args = 4, pretend = 0, frame = 0
 5337              		@ frame_needed = 0, uses_anonymous_args = 0
 204:Core/Src/AB1805.c ****   set_month_alarm(month);
 5338              		.loc 1 204 1 is_stmt 0 view .LVU1144
 5339 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5340              	.LCFI102:
 5341              		.cfi_def_cfa_offset 24
 5342              		.cfi_offset 3, -24
 5343              		.cfi_offset 4, -20
 5344              		.cfi_offset 5, -16
 5345              		.cfi_offset 6, -12
 5346              		.cfi_offset 7, -8
 5347              		.cfi_offset 14, -4
 5348 0002 0E00     		movs	r6, r1
 5349 0004 1500     		movs	r5, r2
 5350 0006 1C00     		movs	r4, r3
 5351 0008 06AB     		add	r3, sp, #24
 5352              	.LVL414:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 183


 204:Core/Src/AB1805.c ****   set_month_alarm(month);
 5353              		.loc 1 204 1 view .LVU1145
 5354 000a 1F78     		ldrb	r7, [r3]
 205:Core/Src/AB1805.c ****   set_date_alarm(date);
 5355              		.loc 1 205 3 is_stmt 1 view .LVU1146
 5356 000c FFF7FEFF 		bl	set_month_alarm
 5357              	.LVL415:
 206:Core/Src/AB1805.c ****   set_hour_alarm(hour);
 5358              		.loc 1 206 3 view .LVU1147
 5359 0010 3000     		movs	r0, r6
 5360 0012 FFF7FEFF 		bl	set_date_alarm
 5361              	.LVL416:
 207:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 5362              		.loc 1 207 3 view .LVU1148
 5363 0016 2800     		movs	r0, r5
 5364 0018 FFF7FEFF 		bl	set_hour_alarm
 5365              	.LVL417:
 208:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 5366              		.loc 1 208 3 view .LVU1149
 5367 001c 2000     		movs	r0, r4
 5368 001e FFF7FEFF 		bl	set_minute_alarm
 5369              	.LVL418:
 209:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_YEAR);
 5370              		.loc 1 209 3 view .LVU1150
 5371 0022 3800     		movs	r0, r7
 5372 0024 FFF7FEFF 		bl	set_second_alarm
 5373              	.LVL419:
 210:Core/Src/AB1805.c **** }
 5374              		.loc 1 210 3 view .LVU1151
 5375 0028 0120     		movs	r0, #1
 5376 002a FFF7FEFF 		bl	set_RPT_time_control
 5377              	.LVL420:
 211:Core/Src/AB1805.c **** 
 5378              		.loc 1 211 1 is_stmt 0 view .LVU1152
 5379              		@ sp needed
 5380 002e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5381              		.cfi_endproc
 5382              	.LFE524:
 5384              		.section	.text.set_datetime_alarm_date,"ax",%progbits
 5385              		.align	1
 5386              		.global	set_datetime_alarm_date
 5387              		.syntax unified
 5388              		.code	16
 5389              		.thumb_func
 5391              	set_datetime_alarm_date:
 5392              	.LVL421:
 5393              	.LFB525:
 214:Core/Src/AB1805.c ****   set_date_alarm(date);
 5394              		.loc 1 214 1 is_stmt 1 view -0
 5395              		.cfi_startproc
 5396              		@ args = 0, pretend = 0, frame = 0
 5397              		@ frame_needed = 0, uses_anonymous_args = 0
 214:Core/Src/AB1805.c ****   set_date_alarm(date);
 5398              		.loc 1 214 1 is_stmt 0 view .LVU1154
 5399 0000 70B5     		push	{r4, r5, r6, lr}
 5400              	.LCFI103:
 5401              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 184


 5402              		.cfi_offset 4, -16
 5403              		.cfi_offset 5, -12
 5404              		.cfi_offset 6, -8
 5405              		.cfi_offset 14, -4
 5406 0002 0E00     		movs	r6, r1
 5407 0004 1500     		movs	r5, r2
 5408 0006 1C00     		movs	r4, r3
 215:Core/Src/AB1805.c ****   set_hour_alarm(hour);
 5409              		.loc 1 215 3 is_stmt 1 view .LVU1155
 5410 0008 FFF7FEFF 		bl	set_date_alarm
 5411              	.LVL422:
 216:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 5412              		.loc 1 216 3 view .LVU1156
 5413 000c 3000     		movs	r0, r6
 5414 000e FFF7FEFF 		bl	set_hour_alarm
 5415              	.LVL423:
 217:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 5416              		.loc 1 217 3 view .LVU1157
 5417 0012 2800     		movs	r0, r5
 5418 0014 FFF7FEFF 		bl	set_minute_alarm
 5419              	.LVL424:
 218:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_MONTH);
 5420              		.loc 1 218 3 view .LVU1158
 5421 0018 2000     		movs	r0, r4
 5422 001a FFF7FEFF 		bl	set_second_alarm
 5423              	.LVL425:
 219:Core/Src/AB1805.c **** }
 5424              		.loc 1 219 3 view .LVU1159
 5425 001e 0220     		movs	r0, #2
 5426 0020 FFF7FEFF 		bl	set_RPT_time_control
 5427              	.LVL426:
 220:Core/Src/AB1805.c **** 
 5428              		.loc 1 220 1 is_stmt 0 view .LVU1160
 5429              		@ sp needed
 5430 0024 70BD     		pop	{r4, r5, r6, pc}
 5431              		.cfi_endproc
 5432              	.LFE525:
 5434              		.section	.text.set_week_alarm,"ax",%progbits
 5435              		.align	1
 5436              		.global	set_week_alarm
 5437              		.syntax unified
 5438              		.code	16
 5439              		.thumb_func
 5441              	set_week_alarm:
 5442              	.LVL427:
 5443              	.LFB526:
 223:Core/Src/AB1805.c ****   set_weekday_alarm(weekday);
 5444              		.loc 1 223 1 is_stmt 1 view -0
 5445              		.cfi_startproc
 5446              		@ args = 0, pretend = 0, frame = 0
 5447              		@ frame_needed = 0, uses_anonymous_args = 0
 223:Core/Src/AB1805.c ****   set_weekday_alarm(weekday);
 5448              		.loc 1 223 1 is_stmt 0 view .LVU1162
 5449 0000 70B5     		push	{r4, r5, r6, lr}
 5450              	.LCFI104:
 5451              		.cfi_def_cfa_offset 16
 5452              		.cfi_offset 4, -16
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 185


 5453              		.cfi_offset 5, -12
 5454              		.cfi_offset 6, -8
 5455              		.cfi_offset 14, -4
 5456 0002 0E00     		movs	r6, r1
 5457 0004 1500     		movs	r5, r2
 5458 0006 1C00     		movs	r4, r3
 224:Core/Src/AB1805.c ****   set_hour_alarm(hour);
 5459              		.loc 1 224 3 is_stmt 1 view .LVU1163
 5460 0008 FFF7FEFF 		bl	set_weekday_alarm
 5461              	.LVL428:
 225:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 5462              		.loc 1 225 3 view .LVU1164
 5463 000c 3000     		movs	r0, r6
 5464 000e FFF7FEFF 		bl	set_hour_alarm
 5465              	.LVL429:
 226:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 5466              		.loc 1 226 3 view .LVU1165
 5467 0012 2800     		movs	r0, r5
 5468 0014 FFF7FEFF 		bl	set_minute_alarm
 5469              	.LVL430:
 227:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_WEEK);
 5470              		.loc 1 227 3 view .LVU1166
 5471 0018 2000     		movs	r0, r4
 5472 001a FFF7FEFF 		bl	set_second_alarm
 5473              	.LVL431:
 228:Core/Src/AB1805.c **** }
 5474              		.loc 1 228 3 view .LVU1167
 5475 001e 0320     		movs	r0, #3
 5476 0020 FFF7FEFF 		bl	set_RPT_time_control
 5477              	.LVL432:
 229:Core/Src/AB1805.c **** 
 5478              		.loc 1 229 1 is_stmt 0 view .LVU1168
 5479              		@ sp needed
 5480 0024 70BD     		pop	{r4, r5, r6, pc}
 5481              		.cfi_endproc
 5482              	.LFE526:
 5484              		.section	.text.set_datetime_alarm_hour,"ax",%progbits
 5485              		.align	1
 5486              		.global	set_datetime_alarm_hour
 5487              		.syntax unified
 5488              		.code	16
 5489              		.thumb_func
 5491              	set_datetime_alarm_hour:
 5492              	.LVL433:
 5493              	.LFB527:
 232:Core/Src/AB1805.c ****   set_hour_alarm(hour);
 5494              		.loc 1 232 1 is_stmt 1 view -0
 5495              		.cfi_startproc
 5496              		@ args = 0, pretend = 0, frame = 0
 5497              		@ frame_needed = 0, uses_anonymous_args = 0
 232:Core/Src/AB1805.c ****   set_hour_alarm(hour);
 5498              		.loc 1 232 1 is_stmt 0 view .LVU1170
 5499 0000 70B5     		push	{r4, r5, r6, lr}
 5500              	.LCFI105:
 5501              		.cfi_def_cfa_offset 16
 5502              		.cfi_offset 4, -16
 5503              		.cfi_offset 5, -12
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 186


 5504              		.cfi_offset 6, -8
 5505              		.cfi_offset 14, -4
 5506 0002 0D00     		movs	r5, r1
 5507 0004 1400     		movs	r4, r2
 233:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 5508              		.loc 1 233 3 is_stmt 1 view .LVU1171
 5509 0006 FFF7FEFF 		bl	set_hour_alarm
 5510              	.LVL434:
 234:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 5511              		.loc 1 234 3 view .LVU1172
 5512 000a 2800     		movs	r0, r5
 5513 000c FFF7FEFF 		bl	set_minute_alarm
 5514              	.LVL435:
 235:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_DAY);
 5515              		.loc 1 235 3 view .LVU1173
 5516 0010 2000     		movs	r0, r4
 5517 0012 FFF7FEFF 		bl	set_second_alarm
 5518              	.LVL436:
 236:Core/Src/AB1805.c **** }
 5519              		.loc 1 236 3 view .LVU1174
 5520 0016 0420     		movs	r0, #4
 5521 0018 FFF7FEFF 		bl	set_RPT_time_control
 5522              	.LVL437:
 237:Core/Src/AB1805.c **** 
 5523              		.loc 1 237 1 is_stmt 0 view .LVU1175
 5524              		@ sp needed
 5525 001c 70BD     		pop	{r4, r5, r6, pc}
 5526              		.cfi_endproc
 5527              	.LFE527:
 5529              		.section	.text.set_datetime_alarm_minutes,"ax",%progbits
 5530              		.align	1
 5531              		.global	set_datetime_alarm_minutes
 5532              		.syntax unified
 5533              		.code	16
 5534              		.thumb_func
 5536              	set_datetime_alarm_minutes:
 5537              	.LVL438:
 5538              	.LFB528:
 240:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 5539              		.loc 1 240 1 is_stmt 1 view -0
 5540              		.cfi_startproc
 5541              		@ args = 0, pretend = 0, frame = 0
 5542              		@ frame_needed = 0, uses_anonymous_args = 0
 240:Core/Src/AB1805.c ****   set_minute_alarm(minutes);
 5543              		.loc 1 240 1 is_stmt 0 view .LVU1177
 5544 0000 10B5     		push	{r4, lr}
 5545              	.LCFI106:
 5546              		.cfi_def_cfa_offset 8
 5547              		.cfi_offset 4, -8
 5548              		.cfi_offset 14, -4
 5549 0002 0C00     		movs	r4, r1
 241:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 5550              		.loc 1 241 3 is_stmt 1 view .LVU1178
 5551 0004 FFF7FEFF 		bl	set_minute_alarm
 5552              	.LVL439:
 242:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_HOUR);
 5553              		.loc 1 242 3 view .LVU1179
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 187


 5554 0008 2000     		movs	r0, r4
 5555 000a FFF7FEFF 		bl	set_second_alarm
 5556              	.LVL440:
 243:Core/Src/AB1805.c **** }
 5557              		.loc 1 243 3 view .LVU1180
 5558 000e 0520     		movs	r0, #5
 5559 0010 FFF7FEFF 		bl	set_RPT_time_control
 5560              	.LVL441:
 244:Core/Src/AB1805.c **** 
 5561              		.loc 1 244 1 is_stmt 0 view .LVU1181
 5562              		@ sp needed
 5563 0014 10BD     		pop	{r4, pc}
 5564              		.cfi_endproc
 5565              	.LFE528:
 5567              		.section	.text.set_datetime_alarm_seconds,"ax",%progbits
 5568              		.align	1
 5569              		.global	set_datetime_alarm_seconds
 5570              		.syntax unified
 5571              		.code	16
 5572              		.thumb_func
 5574              	set_datetime_alarm_seconds:
 5575              	.LVL442:
 5576              	.LFB529:
 247:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 5577              		.loc 1 247 1 is_stmt 1 view -0
 5578              		.cfi_startproc
 5579              		@ args = 0, pretend = 0, frame = 0
 5580              		@ frame_needed = 0, uses_anonymous_args = 0
 247:Core/Src/AB1805.c ****   set_second_alarm(seconds);
 5581              		.loc 1 247 1 is_stmt 0 view .LVU1183
 5582 0000 10B5     		push	{r4, lr}
 5583              	.LCFI107:
 5584              		.cfi_def_cfa_offset 8
 5585              		.cfi_offset 4, -8
 5586              		.cfi_offset 14, -4
 248:Core/Src/AB1805.c ****   set_RPT_time_control(TIMER_CONTROL_RPT_ONCE_PER_MINUTE);
 5587              		.loc 1 248 3 is_stmt 1 view .LVU1184
 5588 0002 FFF7FEFF 		bl	set_second_alarm
 5589              	.LVL443:
 249:Core/Src/AB1805.c **** }
 5590              		.loc 1 249 3 view .LVU1185
 5591 0006 0620     		movs	r0, #6
 5592 0008 FFF7FEFF 		bl	set_RPT_time_control
 5593              	.LVL444:
 250:Core/Src/AB1805.c **** 
 5594              		.loc 1 250 1 is_stmt 0 view .LVU1186
 5595              		@ sp needed
 5596 000c 10BD     		pop	{r4, pc}
 5597              		.cfi_endproc
 5598              	.LFE529:
 5600              		.section	.text.set_once_second_alarm,"ax",%progbits
 5601              		.align	1
 5602              		.global	set_once_second_alarm
 5603              		.syntax unified
 5604              		.code	16
 5605              		.thumb_func
 5607              	set_once_second_alarm:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 188


 5608              	.LVL445:
 5609              	.LFB530:
 253:Core/Src/AB1805.c ****   // set_second_alarm(seconds);
 5610              		.loc 1 253 1 is_stmt 1 view -0
 5611              		.cfi_startproc
 5612              		@ args = 0, pretend = 0, frame = 0
 5613              		@ frame_needed = 0, uses_anonymous_args = 0
 253:Core/Src/AB1805.c ****   // set_second_alarm(seconds);
 5614              		.loc 1 253 1 is_stmt 0 view .LVU1188
 5615 0000 10B5     		push	{r4, lr}
 5616              	.LCFI108:
 5617              		.cfi_def_cfa_offset 8
 5618              		.cfi_offset 4, -8
 5619              		.cfi_offset 14, -4
 255:Core/Src/AB1805.c **** }
 5620              		.loc 1 255 3 is_stmt 1 view .LVU1189
 5621 0002 0720     		movs	r0, #7
 5622              	.LVL446:
 255:Core/Src/AB1805.c **** }
 5623              		.loc 1 255 3 is_stmt 0 view .LVU1190
 5624 0004 FFF7FEFF 		bl	set_RPT_time_control
 5625              	.LVL447:
 256:Core/Src/AB1805.c **** 
 5626              		.loc 1 256 1 view .LVU1191
 5627              		@ sp needed
 5628 0008 10BD     		pop	{r4, pc}
 5629              		.cfi_endproc
 5630              	.LFE530:
 5632              		.section	.text.set_TFS_time_control,"ax",%progbits
 5633              		.align	1
 5634              		.global	set_TFS_time_control
 5635              		.syntax unified
 5636              		.code	16
 5637              		.thumb_func
 5639              	set_TFS_time_control:
 5640              	.LVL448:
 5641              	.LFB608:
1014:Core/Src/AB1805.c ****   uint8_t c1;
 5642              		.loc 1 1014 1 is_stmt 1 view -0
 5643              		.cfi_startproc
 5644              		@ args = 0, pretend = 0, frame = 0
 5645              		@ frame_needed = 0, uses_anonymous_args = 0
1014:Core/Src/AB1805.c ****   uint8_t c1;
 5646              		.loc 1 1014 1 is_stmt 0 view .LVU1193
 5647 0000 70B5     		push	{r4, r5, r6, lr}
 5648              	.LCFI109:
 5649              		.cfi_def_cfa_offset 16
 5650              		.cfi_offset 4, -16
 5651              		.cfi_offset 5, -12
 5652              		.cfi_offset 6, -8
 5653              		.cfi_offset 14, -4
 5654 0002 0500     		movs	r5, r0
1015:Core/Src/AB1805.c ****   c1 = read_rtc_register(TIMER_CONTROL_REGISTER);
 5655              		.loc 1 1015 3 is_stmt 1 view .LVU1194
1016:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TFS_MASK;
 5656              		.loc 1 1016 3 view .LVU1195
1016:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TFS_MASK;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 189


 5657              		.loc 1 1016 8 is_stmt 0 view .LVU1196
 5658 0004 1820     		movs	r0, #24
 5659              	.LVL449:
1016:Core/Src/AB1805.c ****   c1 &= ~TIMER_CONTROL_TFS_MASK;
 5660              		.loc 1 1016 8 view .LVU1197
 5661 0006 FFF7FEFF 		bl	read_rtc_register
 5662              	.LVL450:
1017:Core/Src/AB1805.c ****   c1 |= value;
 5663              		.loc 1 1017 3 is_stmt 1 view .LVU1198
1017:Core/Src/AB1805.c ****   c1 |= value;
 5664              		.loc 1 1017 6 is_stmt 0 view .LVU1199
 5665 000a 0323     		movs	r3, #3
 5666 000c 9843     		bics	r0, r3
 5667              	.LVL451:
1017:Core/Src/AB1805.c ****   c1 |= value;
 5668              		.loc 1 1017 6 view .LVU1200
 5669 000e C4B2     		uxtb	r4, r0
 5670              	.LVL452:
1018:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
 5671              		.loc 1 1018 3 is_stmt 1 view .LVU1201
1018:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, c1);
 5672              		.loc 1 1018 6 is_stmt 0 view .LVU1202
 5673 0010 2C43     		orrs	r4, r5
 5674              	.LVL453:
1019:Core/Src/AB1805.c ****   return c1;
 5675              		.loc 1 1019 3 is_stmt 1 view .LVU1203
 5676 0012 2100     		movs	r1, r4
 5677 0014 1820     		movs	r0, #24
 5678 0016 FFF7FEFF 		bl	write_rtc_register
 5679              	.LVL454:
1020:Core/Src/AB1805.c **** }
 5680              		.loc 1 1020 3 view .LVU1204
1021:Core/Src/AB1805.c **** 
 5681              		.loc 1 1021 1 is_stmt 0 view .LVU1205
 5682 001a 2000     		movs	r0, r4
 5683              		@ sp needed
 5684              	.LVL455:
1021:Core/Src/AB1805.c **** 
 5685              		.loc 1 1021 1 view .LVU1206
 5686 001c 70BD     		pop	{r4, r5, r6, pc}
 5687              		.cfi_endproc
 5688              	.LFE608:
 5690              		.section	.text.get_outcontrol,"ax",%progbits
 5691              		.align	1
 5692              		.global	get_outcontrol
 5693              		.syntax unified
 5694              		.code	16
 5695              		.thumb_func
 5697              	get_outcontrol:
 5698              	.LFB609:
1025:Core/Src/AB1805.c ****   _outcontrol = read_rtc_register(OCTRL_REGISTER);
 5699              		.loc 1 1025 1 is_stmt 1 view -0
 5700              		.cfi_startproc
 5701              		@ args = 0, pretend = 0, frame = 0
 5702              		@ frame_needed = 0, uses_anonymous_args = 0
 5703 0000 10B5     		push	{r4, lr}
 5704              	.LCFI110:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 190


 5705              		.cfi_def_cfa_offset 8
 5706              		.cfi_offset 4, -8
 5707              		.cfi_offset 14, -4
1026:Core/Src/AB1805.c ****   return _outcontrol;
 5708              		.loc 1 1026 3 view .LVU1208
1026:Core/Src/AB1805.c ****   return _outcontrol;
 5709              		.loc 1 1026 17 is_stmt 0 view .LVU1209
 5710 0002 3020     		movs	r0, #48
 5711 0004 FFF7FEFF 		bl	read_rtc_register
 5712              	.LVL456:
1026:Core/Src/AB1805.c ****   return _outcontrol;
 5713              		.loc 1 1026 15 view .LVU1210
 5714 0008 014B     		ldr	r3, .L267
 5715 000a 1870     		strb	r0, [r3]
1027:Core/Src/AB1805.c **** }
 5716              		.loc 1 1027 3 is_stmt 1 view .LVU1211
1028:Core/Src/AB1805.c **** 
 5717              		.loc 1 1028 1 is_stmt 0 view .LVU1212
 5718              		@ sp needed
 5719 000c 10BD     		pop	{r4, pc}
 5720              	.L268:
 5721 000e C046     		.align	2
 5722              	.L267:
 5723 0010 00000000 		.word	_outcontrol
 5724              		.cfi_endproc
 5725              	.LFE609:
 5727              		.section	.text.get_outcontrol_mask,"ax",%progbits
 5728              		.align	1
 5729              		.global	get_outcontrol_mask
 5730              		.syntax unified
 5731              		.code	16
 5732              		.thumb_func
 5734              	get_outcontrol_mask:
 5735              	.LVL457:
 5736              	.LFB610:
1031:Core/Src/AB1805.c ****   uint8_t ret;
 5737              		.loc 1 1031 1 is_stmt 1 view -0
 5738              		.cfi_startproc
 5739              		@ args = 0, pretend = 0, frame = 0
 5740              		@ frame_needed = 0, uses_anonymous_args = 0
1031:Core/Src/AB1805.c ****   uint8_t ret;
 5741              		.loc 1 1031 1 is_stmt 0 view .LVU1214
 5742 0000 10B5     		push	{r4, lr}
 5743              	.LCFI111:
 5744              		.cfi_def_cfa_offset 8
 5745              		.cfi_offset 4, -8
 5746              		.cfi_offset 14, -4
 5747 0002 0400     		movs	r4, r0
1032:Core/Src/AB1805.c ****   ret = get_outcontrol() & mask;
 5748              		.loc 1 1032 3 is_stmt 1 view .LVU1215
1033:Core/Src/AB1805.c ****   switch (mask)
 5749              		.loc 1 1033 3 view .LVU1216
1033:Core/Src/AB1805.c ****   switch (mask)
 5750              		.loc 1 1033 9 is_stmt 0 view .LVU1217
 5751 0004 FFF7FEFF 		bl	get_outcontrol
 5752              	.LVL458:
1033:Core/Src/AB1805.c ****   switch (mask)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 191


 5753              		.loc 1 1033 7 view .LVU1218
 5754 0008 2040     		ands	r0, r4
 5755              	.LVL459:
1034:Core/Src/AB1805.c ****   {
 5756              		.loc 1 1034 3 is_stmt 1 view .LVU1219
 5757 000a 202C     		cmp	r4, #32
 5758 000c 07D8     		bhi	.L270
 5759 000e 002C     		cmp	r4, #0
 5760 0010 17D0     		beq	.L271
 5761 0012 202C     		cmp	r4, #32
 5762 0014 15D8     		bhi	.L271
 5763 0016 A400     		lsls	r4, r4, #2
 5764 0018 0B4B     		ldr	r3, .L280
 5765 001a 1B59     		ldr	r3, [r3, r4]
 5766 001c 9F46     		mov	pc, r3
 5767              		.section	.rodata.get_outcontrol_mask,"a",%progbits
 5768              		.align	2
 5769              	.L273:
 5770 0000 42000000 		.word	.L271
 5771 0004 28000000 		.word	.L278
 5772 0008 3E000000 		.word	.L277
 5773 000c 42000000 		.word	.L271
 5774 0010 3A000000 		.word	.L276
 5775 0014 42000000 		.word	.L271
 5776 0018 42000000 		.word	.L271
 5777 001c 42000000 		.word	.L271
 5778 0020 36000000 		.word	.L275
 5779 0024 42000000 		.word	.L271
 5780 0028 42000000 		.word	.L271
 5781 002c 42000000 		.word	.L271
 5782 0030 42000000 		.word	.L271
 5783 0034 42000000 		.word	.L271
 5784 0038 42000000 		.word	.L271
 5785 003c 42000000 		.word	.L271
 5786 0040 32000000 		.word	.L274
 5787 0044 42000000 		.word	.L271
 5788 0048 42000000 		.word	.L271
 5789 004c 42000000 		.word	.L271
 5790 0050 42000000 		.word	.L271
 5791 0054 42000000 		.word	.L271
 5792 0058 42000000 		.word	.L271
 5793 005c 42000000 		.word	.L271
 5794 0060 42000000 		.word	.L271
 5795 0064 42000000 		.word	.L271
 5796 0068 42000000 		.word	.L271
 5797 006c 42000000 		.word	.L271
 5798 0070 42000000 		.word	.L271
 5799 0074 42000000 		.word	.L271
 5800 0078 42000000 		.word	.L271
 5801 007c 42000000 		.word	.L271
 5802 0080 2E000000 		.word	.L272
 5803              		.section	.text.get_outcontrol_mask
 5804              	.L270:
 5805 001e 402C     		cmp	r4, #64
 5806 0020 03D0     		beq	.L279
 5807 0022 802C     		cmp	r4, #128
 5808 0024 0DD1     		bne	.L271
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 192


1037:Core/Src/AB1805.c ****     break;
 5809              		.loc 1 1037 5 view .LVU1220
1037:Core/Src/AB1805.c ****     break;
 5810              		.loc 1 1037 9 is_stmt 0 view .LVU1221
 5811 0026 C009     		lsrs	r0, r0, #7
 5812              	.LVL460:
1038:Core/Src/AB1805.c ****   case OCTRL_EXBM_MASK:
 5813              		.loc 1 1038 5 is_stmt 1 view .LVU1222
 5814              	.L278:
1063:Core/Src/AB1805.c **** }
 5815              		.loc 1 1063 3 view .LVU1223
1064:Core/Src/AB1805.c **** 
 5816              		.loc 1 1064 1 is_stmt 0 view .LVU1224
 5817              		@ sp needed
 5818 0028 10BD     		pop	{r4, pc}
 5819              	.L279:
1040:Core/Src/AB1805.c ****     break;
 5820              		.loc 1 1040 5 is_stmt 1 view .LVU1225
1040:Core/Src/AB1805.c ****     break;
 5821              		.loc 1 1040 9 is_stmt 0 view .LVU1226
 5822 002a 8009     		lsrs	r0, r0, #6
 5823              	.LVL461:
1041:Core/Src/AB1805.c ****   case OCTRL_WDDS_MASK:
 5824              		.loc 1 1041 5 is_stmt 1 view .LVU1227
 5825 002c FCE7     		b	.L278
 5826              	.L272:
1043:Core/Src/AB1805.c ****     break;
 5827              		.loc 1 1043 5 view .LVU1228
1043:Core/Src/AB1805.c ****     break;
 5828              		.loc 1 1043 9 is_stmt 0 view .LVU1229
 5829 002e 4009     		lsrs	r0, r0, #5
 5830              	.LVL462:
1044:Core/Src/AB1805.c ****   case OCTRL_EXDS_MASK:
 5831              		.loc 1 1044 5 is_stmt 1 view .LVU1230
 5832 0030 FAE7     		b	.L278
 5833              	.L274:
1046:Core/Src/AB1805.c ****     break;
 5834              		.loc 1 1046 5 view .LVU1231
1046:Core/Src/AB1805.c ****     break;
 5835              		.loc 1 1046 9 is_stmt 0 view .LVU1232
 5836 0032 0009     		lsrs	r0, r0, #4
 5837              	.LVL463:
1047:Core/Src/AB1805.c ****   case OCTRL_RSEN_MASK:
 5838              		.loc 1 1047 5 is_stmt 1 view .LVU1233
 5839 0034 F8E7     		b	.L278
 5840              	.L275:
1049:Core/Src/AB1805.c ****     break;
 5841              		.loc 1 1049 5 view .LVU1234
1049:Core/Src/AB1805.c ****     break;
 5842              		.loc 1 1049 9 is_stmt 0 view .LVU1235
 5843 0036 C008     		lsrs	r0, r0, #3
 5844              	.LVL464:
1050:Core/Src/AB1805.c ****   case OCTRL_O4EN_MASK:
 5845              		.loc 1 1050 5 is_stmt 1 view .LVU1236
 5846 0038 F6E7     		b	.L278
 5847              	.L276:
1052:Core/Src/AB1805.c ****     break;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 193


 5848              		.loc 1 1052 5 view .LVU1237
1052:Core/Src/AB1805.c ****     break;
 5849              		.loc 1 1052 9 is_stmt 0 view .LVU1238
 5850 003a 8008     		lsrs	r0, r0, #2
 5851              	.LVL465:
1053:Core/Src/AB1805.c ****   case OCTRL_O3EN_MASK:
 5852              		.loc 1 1053 5 is_stmt 1 view .LVU1239
 5853 003c F4E7     		b	.L278
 5854              	.L277:
1055:Core/Src/AB1805.c ****     break;
 5855              		.loc 1 1055 5 view .LVU1240
1055:Core/Src/AB1805.c ****     break;
 5856              		.loc 1 1055 9 is_stmt 0 view .LVU1241
 5857 003e 4008     		lsrs	r0, r0, #1
 5858              	.LVL466:
1056:Core/Src/AB1805.c ****   case OCTRL_O1EN_MASK:
 5859              		.loc 1 1056 5 is_stmt 1 view .LVU1242
 5860 0040 F2E7     		b	.L278
 5861              	.L271:
1061:Core/Src/AB1805.c ****   }
 5862              		.loc 1 1061 5 view .LVU1243
1061:Core/Src/AB1805.c ****   }
 5863              		.loc 1 1061 9 is_stmt 0 view .LVU1244
 5864 0042 024B     		ldr	r3, .L280+4
 5865 0044 1878     		ldrb	r0, [r3]
 5866              	.LVL467:
1061:Core/Src/AB1805.c ****   }
 5867              		.loc 1 1061 9 view .LVU1245
 5868 0046 EFE7     		b	.L278
 5869              	.L281:
 5870              		.align	2
 5871              	.L280:
 5872 0048 00000000 		.word	.L273
 5873 004c 00000000 		.word	_outcontrol
 5874              		.cfi_endproc
 5875              	.LFE610:
 5877              		.section	.text.set_outcontrol_value,"ax",%progbits
 5878              		.align	1
 5879              		.global	set_outcontrol_value
 5880              		.syntax unified
 5881              		.code	16
 5882              		.thumb_func
 5884              	set_outcontrol_value:
 5885              	.LVL468:
 5886              	.LFB611:
1067:Core/Src/AB1805.c ****   write_rtc_register(OCTRL_REGISTER, value);
 5887              		.loc 1 1067 1 is_stmt 1 view -0
 5888              		.cfi_startproc
 5889              		@ args = 0, pretend = 0, frame = 0
 5890              		@ frame_needed = 0, uses_anonymous_args = 0
1067:Core/Src/AB1805.c ****   write_rtc_register(OCTRL_REGISTER, value);
 5891              		.loc 1 1067 1 is_stmt 0 view .LVU1247
 5892 0000 10B5     		push	{r4, lr}
 5893              	.LCFI112:
 5894              		.cfi_def_cfa_offset 8
 5895              		.cfi_offset 4, -8
 5896              		.cfi_offset 14, -4
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 194


 5897 0002 0100     		movs	r1, r0
1068:Core/Src/AB1805.c ****   _outcontrol = read_rtc_register(OCTRL_REGISTER);
 5898              		.loc 1 1068 3 is_stmt 1 view .LVU1248
 5899 0004 3020     		movs	r0, #48
 5900              	.LVL469:
1068:Core/Src/AB1805.c ****   _outcontrol = read_rtc_register(OCTRL_REGISTER);
 5901              		.loc 1 1068 3 is_stmt 0 view .LVU1249
 5902 0006 FFF7FEFF 		bl	write_rtc_register
 5903              	.LVL470:
1069:Core/Src/AB1805.c ****   return _outcontrol;
 5904              		.loc 1 1069 3 is_stmt 1 view .LVU1250
1069:Core/Src/AB1805.c ****   return _outcontrol;
 5905              		.loc 1 1069 17 is_stmt 0 view .LVU1251
 5906 000a 3020     		movs	r0, #48
 5907 000c FFF7FEFF 		bl	read_rtc_register
 5908              	.LVL471:
1069:Core/Src/AB1805.c ****   return _outcontrol;
 5909              		.loc 1 1069 15 view .LVU1252
 5910 0010 014B     		ldr	r3, .L283
 5911 0012 1870     		strb	r0, [r3]
1070:Core/Src/AB1805.c **** }
 5912              		.loc 1 1070 3 is_stmt 1 view .LVU1253
1071:Core/Src/AB1805.c **** 
 5913              		.loc 1 1071 1 is_stmt 0 view .LVU1254
 5914              		@ sp needed
 5915 0014 10BD     		pop	{r4, pc}
 5916              	.L284:
 5917 0016 C046     		.align	2
 5918              	.L283:
 5919 0018 00000000 		.word	_outcontrol
 5920              		.cfi_endproc
 5921              	.LFE611:
 5923              		.section	.text.set_outcontrol_value_mask,"ax",%progbits
 5924              		.align	1
 5925              		.global	set_outcontrol_value_mask
 5926              		.syntax unified
 5927              		.code	16
 5928              		.thumb_func
 5930              	set_outcontrol_value_mask:
 5931              	.LVL472:
 5932              	.LFB612:
1074:Core/Src/AB1805.c ****   uint8_t c1;
 5933              		.loc 1 1074 1 is_stmt 1 view -0
 5934              		.cfi_startproc
 5935              		@ args = 0, pretend = 0, frame = 0
 5936              		@ frame_needed = 0, uses_anonymous_args = 0
1074:Core/Src/AB1805.c ****   uint8_t c1;
 5937              		.loc 1 1074 1 is_stmt 0 view .LVU1256
 5938 0000 70B5     		push	{r4, r5, r6, lr}
 5939              	.LCFI113:
 5940              		.cfi_def_cfa_offset 16
 5941              		.cfi_offset 4, -16
 5942              		.cfi_offset 5, -12
 5943              		.cfi_offset 6, -8
 5944              		.cfi_offset 14, -4
 5945 0002 0500     		movs	r5, r0
 5946 0004 0C00     		movs	r4, r1
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 195


1075:Core/Src/AB1805.c ****   uint32_t primask_bit = utils_enter_critical_section();
 5947              		.loc 1 1075 3 is_stmt 1 view .LVU1257
1076:Core/Src/AB1805.c **** 
 5948              		.loc 1 1076 3 view .LVU1258
 5949              	.LBB68:
 5950              	.LBI68:
1522:Core/Src/AB1805.c **** {
 5951              		.loc 1 1522 24 view .LVU1259
 5952              	.LBB69:
1524:Core/Src/AB1805.c ****   __disable_irq();
 5953              		.loc 1 1524 3 view .LVU1260
 5954              	.LBB70:
 5955              	.LBI70:
1204:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 5956              		.loc 3 1204 31 view .LVU1261
 5957              	.LBB71:
1206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 5958              		.loc 3 1206 3 view .LVU1262
1208:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 5959              		.loc 3 1208 3 view .LVU1263
 5960              		.syntax divided
 5961              	@ 1208 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5962 0006 EFF31083 		MRS r3, primask
 5963              	@ 0 "" 2
 5964              	.LVL473:
1209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5965              		.loc 3 1209 3 view .LVU1264
1209:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5966              		.loc 3 1209 3 is_stmt 0 view .LVU1265
 5967              		.thumb
 5968              		.syntax unified
 5969              	.LBE71:
 5970              	.LBE70:
1525:Core/Src/AB1805.c ****   return primask_bit;
 5971              		.loc 1 1525 3 is_stmt 1 view .LVU1266
 5972              	.LBB72:
 5973              	.LBI72:
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 5974              		.loc 3 960 27 view .LVU1267
 5975              	.LBB73:
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 5976              		.loc 3 962 3 view .LVU1268
 5977              		.syntax divided
 5978              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 5979 000a 72B6     		cpsid i
 5980              	@ 0 "" 2
 5981              		.thumb
 5982              		.syntax unified
 5983              	.LBE73:
 5984              	.LBE72:
1526:Core/Src/AB1805.c **** }
 5985              		.loc 1 1526 3 view .LVU1269
 5986              	.LVL474:
1526:Core/Src/AB1805.c **** }
 5987              		.loc 1 1526 3 is_stmt 0 view .LVU1270
 5988              	.LBE69:
 5989              	.LBE68:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 196


1078:Core/Src/AB1805.c ****   switch (mask)
 5990              		.loc 1 1078 3 is_stmt 1 view .LVU1271
1078:Core/Src/AB1805.c ****   switch (mask)
 5991              		.loc 1 1078 8 is_stmt 0 view .LVU1272
 5992 000c FFF7FEFF 		bl	get_outcontrol
 5993              	.LVL475:
1079:Core/Src/AB1805.c ****   {
 5994              		.loc 1 1079 3 is_stmt 1 view .LVU1273
 5995 0010 202C     		cmp	r4, #32
 5996 0012 07D8     		bhi	.L286
 5997 0014 002C     		cmp	r4, #0
 5998 0016 0ED0     		beq	.L287
 5999 0018 202C     		cmp	r4, #32
 6000 001a 0CD8     		bhi	.L287
 6001 001c A400     		lsls	r4, r4, #2
 6002 001e 234B     		ldr	r3, .L296
 6003 0020 1B59     		ldr	r3, [r3, r4]
 6004 0022 9F46     		mov	pc, r3
 6005              		.section	.rodata.set_outcontrol_value_mask,"a",%progbits
 6006              		.align	2
 6007              	.L289:
 6008 0000 36000000 		.word	.L287
 6009 0004 9E000000 		.word	.L294
 6010 0008 8E000000 		.word	.L293
 6011 000c 36000000 		.word	.L287
 6012 0010 7E000000 		.word	.L292
 6013 0014 36000000 		.word	.L287
 6014 0018 36000000 		.word	.L287
 6015 001c 36000000 		.word	.L287
 6016 0020 6E000000 		.word	.L291
 6017 0024 36000000 		.word	.L287
 6018 0028 36000000 		.word	.L287
 6019 002c 36000000 		.word	.L287
 6020 0030 36000000 		.word	.L287
 6021 0034 36000000 		.word	.L287
 6022 0038 36000000 		.word	.L287
 6023 003c 36000000 		.word	.L287
 6024 0040 5E000000 		.word	.L290
 6025 0044 36000000 		.word	.L287
 6026 0048 36000000 		.word	.L287
 6027 004c 36000000 		.word	.L287
 6028 0050 36000000 		.word	.L287
 6029 0054 36000000 		.word	.L287
 6030 0058 36000000 		.word	.L287
 6031 005c 36000000 		.word	.L287
 6032 0060 36000000 		.word	.L287
 6033 0064 36000000 		.word	.L287
 6034 0068 36000000 		.word	.L287
 6035 006c 36000000 		.word	.L287
 6036 0070 36000000 		.word	.L287
 6037 0074 36000000 		.word	.L287
 6038 0078 36000000 		.word	.L287
 6039 007c 36000000 		.word	.L287
 6040 0080 4E000000 		.word	.L288
 6041              		.section	.text.set_outcontrol_value_mask
 6042              	.L286:
 6043 0024 402C     		cmp	r4, #64
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 197


 6044 0026 0AD0     		beq	.L295
 6045 0028 802C     		cmp	r4, #128
 6046 002a 04D1     		bne	.L287
1082:Core/Src/AB1805.c ****     c1 |= (value << 7) & OCTRL_WDBM_MASK;
 6047              		.loc 1 1082 5 view .LVU1274
1082:Core/Src/AB1805.c ****     c1 |= (value << 7) & OCTRL_WDBM_MASK;
 6048              		.loc 1 1082 8 is_stmt 0 view .LVU1275
 6049 002c 7F23     		movs	r3, #127
 6050 002e 0340     		ands	r3, r0
 6051              	.LVL476:
1083:Core/Src/AB1805.c ****     break;
 6052              		.loc 1 1083 5 is_stmt 1 view .LVU1276
1083:Core/Src/AB1805.c ****     break;
 6053              		.loc 1 1083 18 is_stmt 0 view .LVU1277
 6054 0030 ED01     		lsls	r5, r5, #7
1083:Core/Src/AB1805.c ****     break;
 6055              		.loc 1 1083 8 view .LVU1278
 6056 0032 1D43     		orrs	r5, r3
 6057 0034 EDB2     		uxtb	r5, r5
 6058              	.LVL477:
1084:Core/Src/AB1805.c ****   case OCTRL_EXBM_MASK:
 6059              		.loc 1 1084 5 is_stmt 1 view .LVU1279
 6060              	.L287:
1120:Core/Src/AB1805.c ****   utils_exit_critical_section(primask_bit);
 6061              		.loc 1 1120 3 view .LVU1280
1120:Core/Src/AB1805.c ****   utils_exit_critical_section(primask_bit);
 6062              		.loc 1 1120 10 is_stmt 0 view .LVU1281
 6063 0036 2800     		movs	r0, r5
 6064 0038 FFF7FEFF 		bl	set_outcontrol_value
 6065              	.LVL478:
1122:Core/Src/AB1805.c **** 
 6066              		.loc 1 1122 1 view .LVU1282
 6067              		@ sp needed
 6068              	.LVL479:
1122:Core/Src/AB1805.c **** 
 6069              		.loc 1 1122 1 view .LVU1283
 6070 003c 70BD     		pop	{r4, r5, r6, pc}
 6071              	.LVL480:
 6072              	.L295:
1086:Core/Src/AB1805.c ****     c1 |= (value << 6) & OCTRL_EXBM_MASK;
 6073              		.loc 1 1086 5 is_stmt 1 view .LVU1284
1086:Core/Src/AB1805.c ****     c1 |= (value << 6) & OCTRL_EXBM_MASK;
 6074              		.loc 1 1086 8 is_stmt 0 view .LVU1285
 6075 003e 4023     		movs	r3, #64
 6076 0040 9843     		bics	r0, r3
 6077              	.LVL481:
1086:Core/Src/AB1805.c ****     c1 |= (value << 6) & OCTRL_EXBM_MASK;
 6078              		.loc 1 1086 8 view .LVU1286
 6079 0042 C0B2     		uxtb	r0, r0
 6080              	.LVL482:
1087:Core/Src/AB1805.c ****     break;
 6081              		.loc 1 1087 5 is_stmt 1 view .LVU1287
1087:Core/Src/AB1805.c ****     break;
 6082              		.loc 1 1087 18 is_stmt 0 view .LVU1288
 6083 0044 AB01     		lsls	r3, r5, #6
1087:Core/Src/AB1805.c ****     break;
 6084              		.loc 1 1087 24 view .LVU1289
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 198


 6085 0046 4025     		movs	r5, #64
 6086 0048 1D40     		ands	r5, r3
1087:Core/Src/AB1805.c ****     break;
 6087              		.loc 1 1087 8 view .LVU1290
 6088 004a 0543     		orrs	r5, r0
 6089              	.LVL483:
1088:Core/Src/AB1805.c ****   case OCTRL_WDDS_MASK:
 6090              		.loc 1 1088 5 is_stmt 1 view .LVU1291
 6091 004c F3E7     		b	.L287
 6092              	.LVL484:
 6093              	.L288:
1090:Core/Src/AB1805.c ****     c1 |= (value << 5) & OCTRL_WDDS_MASK;
 6094              		.loc 1 1090 5 view .LVU1292
1090:Core/Src/AB1805.c ****     c1 |= (value << 5) & OCTRL_WDDS_MASK;
 6095              		.loc 1 1090 8 is_stmt 0 view .LVU1293
 6096 004e 2023     		movs	r3, #32
 6097 0050 9843     		bics	r0, r3
 6098              	.LVL485:
1090:Core/Src/AB1805.c ****     c1 |= (value << 5) & OCTRL_WDDS_MASK;
 6099              		.loc 1 1090 8 view .LVU1294
 6100 0052 C0B2     		uxtb	r0, r0
 6101              	.LVL486:
1091:Core/Src/AB1805.c ****     break;
 6102              		.loc 1 1091 5 is_stmt 1 view .LVU1295
1091:Core/Src/AB1805.c ****     break;
 6103              		.loc 1 1091 18 is_stmt 0 view .LVU1296
 6104 0054 6B01     		lsls	r3, r5, #5
1091:Core/Src/AB1805.c ****     break;
 6105              		.loc 1 1091 24 view .LVU1297
 6106 0056 2025     		movs	r5, #32
 6107 0058 1D40     		ands	r5, r3
1091:Core/Src/AB1805.c ****     break;
 6108              		.loc 1 1091 8 view .LVU1298
 6109 005a 0543     		orrs	r5, r0
 6110              	.LVL487:
1092:Core/Src/AB1805.c ****   case OCTRL_EXDS_MASK:
 6111              		.loc 1 1092 5 is_stmt 1 view .LVU1299
 6112 005c EBE7     		b	.L287
 6113              	.LVL488:
 6114              	.L290:
1094:Core/Src/AB1805.c ****     c1 |= (value << 4) & OCTRL_EXDS_MASK;
 6115              		.loc 1 1094 5 view .LVU1300
1094:Core/Src/AB1805.c ****     c1 |= (value << 4) & OCTRL_EXDS_MASK;
 6116              		.loc 1 1094 8 is_stmt 0 view .LVU1301
 6117 005e 1023     		movs	r3, #16
 6118 0060 9843     		bics	r0, r3
 6119              	.LVL489:
1094:Core/Src/AB1805.c ****     c1 |= (value << 4) & OCTRL_EXDS_MASK;
 6120              		.loc 1 1094 8 view .LVU1302
 6121 0062 C0B2     		uxtb	r0, r0
 6122              	.LVL490:
1095:Core/Src/AB1805.c ****     break;
 6123              		.loc 1 1095 5 is_stmt 1 view .LVU1303
1095:Core/Src/AB1805.c ****     break;
 6124              		.loc 1 1095 18 is_stmt 0 view .LVU1304
 6125 0064 2B01     		lsls	r3, r5, #4
1095:Core/Src/AB1805.c ****     break;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 199


 6126              		.loc 1 1095 24 view .LVU1305
 6127 0066 1025     		movs	r5, #16
 6128 0068 1D40     		ands	r5, r3
1095:Core/Src/AB1805.c ****     break;
 6129              		.loc 1 1095 8 view .LVU1306
 6130 006a 0543     		orrs	r5, r0
 6131              	.LVL491:
1096:Core/Src/AB1805.c ****   case OCTRL_RSEN_MASK:
 6132              		.loc 1 1096 5 is_stmt 1 view .LVU1307
 6133 006c E3E7     		b	.L287
 6134              	.LVL492:
 6135              	.L291:
1098:Core/Src/AB1805.c ****     c1 |= (value << 3) & OCTRL_RSEN_MASK;
 6136              		.loc 1 1098 5 view .LVU1308
1098:Core/Src/AB1805.c ****     c1 |= (value << 3) & OCTRL_RSEN_MASK;
 6137              		.loc 1 1098 8 is_stmt 0 view .LVU1309
 6138 006e 0823     		movs	r3, #8
 6139 0070 9843     		bics	r0, r3
 6140              	.LVL493:
1098:Core/Src/AB1805.c ****     c1 |= (value << 3) & OCTRL_RSEN_MASK;
 6141              		.loc 1 1098 8 view .LVU1310
 6142 0072 C0B2     		uxtb	r0, r0
 6143              	.LVL494:
1099:Core/Src/AB1805.c ****     break;
 6144              		.loc 1 1099 5 is_stmt 1 view .LVU1311
1099:Core/Src/AB1805.c ****     break;
 6145              		.loc 1 1099 18 is_stmt 0 view .LVU1312
 6146 0074 EB00     		lsls	r3, r5, #3
1099:Core/Src/AB1805.c ****     break;
 6147              		.loc 1 1099 24 view .LVU1313
 6148 0076 0825     		movs	r5, #8
 6149 0078 1D40     		ands	r5, r3
1099:Core/Src/AB1805.c ****     break;
 6150              		.loc 1 1099 8 view .LVU1314
 6151 007a 0543     		orrs	r5, r0
 6152              	.LVL495:
1100:Core/Src/AB1805.c ****   case OCTRL_O4EN_MASK:
 6153              		.loc 1 1100 5 is_stmt 1 view .LVU1315
 6154 007c DBE7     		b	.L287
 6155              	.LVL496:
 6156              	.L292:
1102:Core/Src/AB1805.c ****     c1 |= (value << 2) & OCTRL_O4EN_MASK;
 6157              		.loc 1 1102 5 view .LVU1316
1102:Core/Src/AB1805.c ****     c1 |= (value << 2) & OCTRL_O4EN_MASK;
 6158              		.loc 1 1102 8 is_stmt 0 view .LVU1317
 6159 007e 0423     		movs	r3, #4
 6160 0080 9843     		bics	r0, r3
 6161              	.LVL497:
1102:Core/Src/AB1805.c ****     c1 |= (value << 2) & OCTRL_O4EN_MASK;
 6162              		.loc 1 1102 8 view .LVU1318
 6163 0082 C0B2     		uxtb	r0, r0
 6164              	.LVL498:
1103:Core/Src/AB1805.c ****     break;
 6165              		.loc 1 1103 5 is_stmt 1 view .LVU1319
1103:Core/Src/AB1805.c ****     break;
 6166              		.loc 1 1103 18 is_stmt 0 view .LVU1320
 6167 0084 AB00     		lsls	r3, r5, #2
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 200


1103:Core/Src/AB1805.c ****     break;
 6168              		.loc 1 1103 24 view .LVU1321
 6169 0086 0425     		movs	r5, #4
 6170 0088 1D40     		ands	r5, r3
1103:Core/Src/AB1805.c ****     break;
 6171              		.loc 1 1103 8 view .LVU1322
 6172 008a 0543     		orrs	r5, r0
 6173              	.LVL499:
1104:Core/Src/AB1805.c ****   case OCTRL_O3EN_MASK:
 6174              		.loc 1 1104 5 is_stmt 1 view .LVU1323
 6175 008c D3E7     		b	.L287
 6176              	.LVL500:
 6177              	.L293:
1106:Core/Src/AB1805.c ****     c1 |= (value << 1) & OCTRL_O3EN_MASK;
 6178              		.loc 1 1106 5 view .LVU1324
1106:Core/Src/AB1805.c ****     c1 |= (value << 1) & OCTRL_O3EN_MASK;
 6179              		.loc 1 1106 8 is_stmt 0 view .LVU1325
 6180 008e 0223     		movs	r3, #2
 6181 0090 9843     		bics	r0, r3
 6182              	.LVL501:
1106:Core/Src/AB1805.c ****     c1 |= (value << 1) & OCTRL_O3EN_MASK;
 6183              		.loc 1 1106 8 view .LVU1326
 6184 0092 C0B2     		uxtb	r0, r0
 6185              	.LVL502:
1107:Core/Src/AB1805.c ****     break;
 6186              		.loc 1 1107 5 is_stmt 1 view .LVU1327
1107:Core/Src/AB1805.c ****     break;
 6187              		.loc 1 1107 18 is_stmt 0 view .LVU1328
 6188 0094 6B00     		lsls	r3, r5, #1
1107:Core/Src/AB1805.c ****     break;
 6189              		.loc 1 1107 24 view .LVU1329
 6190 0096 0225     		movs	r5, #2
 6191 0098 1D40     		ands	r5, r3
1107:Core/Src/AB1805.c ****     break;
 6192              		.loc 1 1107 8 view .LVU1330
 6193 009a 0543     		orrs	r5, r0
 6194              	.LVL503:
1108:Core/Src/AB1805.c ****   case OCTRL_O1EN_MASK:
 6195              		.loc 1 1108 5 is_stmt 1 view .LVU1331
 6196 009c CBE7     		b	.L287
 6197              	.LVL504:
 6198              	.L294:
1110:Core/Src/AB1805.c ****     c1 |= (value)&OCTRL_O1EN_MASK;
 6199              		.loc 1 1110 5 view .LVU1332
1110:Core/Src/AB1805.c ****     c1 |= (value)&OCTRL_O1EN_MASK;
 6200              		.loc 1 1110 8 is_stmt 0 view .LVU1333
 6201 009e 0123     		movs	r3, #1
 6202 00a0 9843     		bics	r0, r3
 6203              	.LVL505:
1110:Core/Src/AB1805.c ****     c1 |= (value)&OCTRL_O1EN_MASK;
 6204              		.loc 1 1110 8 view .LVU1334
 6205 00a2 C0B2     		uxtb	r0, r0
 6206              	.LVL506:
1111:Core/Src/AB1805.c ****     break;
 6207              		.loc 1 1111 5 is_stmt 1 view .LVU1335
 6208 00a4 1D40     		ands	r5, r3
 6209 00a6 0543     		orrs	r5, r0
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 201


 6210              	.LVL507:
1112:Core/Src/AB1805.c ****   case CCTRL_SLEEP_MODE_MASK:
 6211              		.loc 1 1112 5 view .LVU1336
 6212 00a8 C5E7     		b	.L287
 6213              	.L297:
 6214 00aa C046     		.align	2
 6215              	.L296:
 6216 00ac 00000000 		.word	.L289
 6217              		.cfi_endproc
 6218              	.LFE612:
 6220              		.section	.text.get_osc_control,"ax",%progbits
 6221              		.align	1
 6222              		.global	get_osc_control
 6223              		.syntax unified
 6224              		.code	16
 6225              		.thumb_func
 6227              	get_osc_control:
 6228              	.LFB613:
1126:Core/Src/AB1805.c ****   _osc_control = read_rtc_register(OSC_CONTROL_REGISTER);
 6229              		.loc 1 1126 1 view -0
 6230              		.cfi_startproc
 6231              		@ args = 0, pretend = 0, frame = 0
 6232              		@ frame_needed = 0, uses_anonymous_args = 0
 6233 0000 10B5     		push	{r4, lr}
 6234              	.LCFI114:
 6235              		.cfi_def_cfa_offset 8
 6236              		.cfi_offset 4, -8
 6237              		.cfi_offset 14, -4
1127:Core/Src/AB1805.c ****   return _osc_control;
 6238              		.loc 1 1127 3 view .LVU1338
1127:Core/Src/AB1805.c ****   return _osc_control;
 6239              		.loc 1 1127 18 is_stmt 0 view .LVU1339
 6240 0002 1C20     		movs	r0, #28
 6241 0004 FFF7FEFF 		bl	read_rtc_register
 6242              	.LVL508:
1127:Core/Src/AB1805.c ****   return _osc_control;
 6243              		.loc 1 1127 16 view .LVU1340
 6244 0008 014B     		ldr	r3, .L299
 6245 000a 1870     		strb	r0, [r3]
1128:Core/Src/AB1805.c **** }
 6246              		.loc 1 1128 3 is_stmt 1 view .LVU1341
1129:Core/Src/AB1805.c **** 
 6247              		.loc 1 1129 1 is_stmt 0 view .LVU1342
 6248              		@ sp needed
 6249 000c 10BD     		pop	{r4, pc}
 6250              	.L300:
 6251 000e C046     		.align	2
 6252              	.L299:
 6253 0010 00000000 		.word	_osc_control
 6254              		.cfi_endproc
 6255              	.LFE613:
 6257              		.section	.text.get_osc_control_mask,"ax",%progbits
 6258              		.align	1
 6259              		.global	get_osc_control_mask
 6260              		.syntax unified
 6261              		.code	16
 6262              		.thumb_func
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 202


 6264              	get_osc_control_mask:
 6265              	.LVL509:
 6266              	.LFB614:
1132:Core/Src/AB1805.c ****   uint8_t ret;
 6267              		.loc 1 1132 1 is_stmt 1 view -0
 6268              		.cfi_startproc
 6269              		@ args = 0, pretend = 0, frame = 0
 6270              		@ frame_needed = 0, uses_anonymous_args = 0
1132:Core/Src/AB1805.c ****   uint8_t ret;
 6271              		.loc 1 1132 1 is_stmt 0 view .LVU1344
 6272 0000 10B5     		push	{r4, lr}
 6273              	.LCFI115:
 6274              		.cfi_def_cfa_offset 8
 6275              		.cfi_offset 4, -8
 6276              		.cfi_offset 14, -4
 6277 0002 0400     		movs	r4, r0
1133:Core/Src/AB1805.c ****   ret = get_osc_control() & mask;
 6278              		.loc 1 1133 3 is_stmt 1 view .LVU1345
1134:Core/Src/AB1805.c ****   switch (mask)
 6279              		.loc 1 1134 3 view .LVU1346
1134:Core/Src/AB1805.c ****   switch (mask)
 6280              		.loc 1 1134 9 is_stmt 0 view .LVU1347
 6281 0004 FFF7FEFF 		bl	get_osc_control
 6282              	.LVL510:
1134:Core/Src/AB1805.c ****   switch (mask)
 6283              		.loc 1 1134 7 view .LVU1348
 6284 0008 2040     		ands	r0, r4
 6285              	.LVL511:
1135:Core/Src/AB1805.c ****   {
 6286              		.loc 1 1135 3 is_stmt 1 view .LVU1349
 6287 000a 102C     		cmp	r4, #16
 6288 000c 07D8     		bhi	.L302
 6289 000e 002C     		cmp	r4, #0
 6290 0010 15D0     		beq	.L303
 6291 0012 102C     		cmp	r4, #16
 6292 0014 13D8     		bhi	.L303
 6293 0016 A400     		lsls	r4, r4, #2
 6294 0018 0A4B     		ldr	r3, .L311
 6295 001a 1B59     		ldr	r3, [r3, r4]
 6296 001c 9F46     		mov	pc, r3
 6297              		.section	.rodata.get_osc_control_mask,"a",%progbits
 6298              		.align	2
 6299              	.L305:
 6300 0000 3E000000 		.word	.L303
 6301 0004 28000000 		.word	.L309
 6302 0008 3A000000 		.word	.L308
 6303 000c 3E000000 		.word	.L303
 6304 0010 36000000 		.word	.L307
 6305 0014 3E000000 		.word	.L303
 6306 0018 3E000000 		.word	.L303
 6307 001c 3E000000 		.word	.L303
 6308 0020 32000000 		.word	.L306
 6309 0024 3E000000 		.word	.L303
 6310 0028 3E000000 		.word	.L303
 6311 002c 3E000000 		.word	.L303
 6312 0030 3E000000 		.word	.L303
 6313 0034 3E000000 		.word	.L303
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 203


 6314 0038 3E000000 		.word	.L303
 6315 003c 3E000000 		.word	.L303
 6316 0040 2E000000 		.word	.L304
 6317              		.section	.text.get_osc_control_mask
 6318              	.L302:
 6319 001e 602C     		cmp	r4, #96
 6320 0020 03D0     		beq	.L310
 6321 0022 802C     		cmp	r4, #128
 6322 0024 0BD1     		bne	.L303
1138:Core/Src/AB1805.c ****     break;
 6323              		.loc 1 1138 5 view .LVU1350
1138:Core/Src/AB1805.c ****     break;
 6324              		.loc 1 1138 9 is_stmt 0 view .LVU1351
 6325 0026 C009     		lsrs	r0, r0, #7
 6326              	.LVL512:
1139:Core/Src/AB1805.c ****   case OSC_CONTROL_ACAL_MASK:
 6327              		.loc 1 1139 5 is_stmt 1 view .LVU1352
 6328              	.L309:
1161:Core/Src/AB1805.c **** }
 6329              		.loc 1 1161 3 view .LVU1353
1162:Core/Src/AB1805.c **** 
 6330              		.loc 1 1162 1 is_stmt 0 view .LVU1354
 6331              		@ sp needed
 6332 0028 10BD     		pop	{r4, pc}
 6333              	.L310:
1141:Core/Src/AB1805.c ****     break;
 6334              		.loc 1 1141 5 is_stmt 1 view .LVU1355
1141:Core/Src/AB1805.c ****     break;
 6335              		.loc 1 1141 9 is_stmt 0 view .LVU1356
 6336 002a 4009     		lsrs	r0, r0, #5
 6337              	.LVL513:
1142:Core/Src/AB1805.c ****   case OSC_CONTROL_AOS_MASK:
 6338              		.loc 1 1142 5 is_stmt 1 view .LVU1357
 6339 002c FCE7     		b	.L309
 6340              	.L304:
1144:Core/Src/AB1805.c ****     break;
 6341              		.loc 1 1144 5 view .LVU1358
1144:Core/Src/AB1805.c ****     break;
 6342              		.loc 1 1144 9 is_stmt 0 view .LVU1359
 6343 002e 0009     		lsrs	r0, r0, #4
 6344              	.LVL514:
1145:Core/Src/AB1805.c ****   case OSC_CONTROL_FOS_MASK:
 6345              		.loc 1 1145 5 is_stmt 1 view .LVU1360
 6346 0030 FAE7     		b	.L309
 6347              	.L306:
1147:Core/Src/AB1805.c ****     break;
 6348              		.loc 1 1147 5 view .LVU1361
1147:Core/Src/AB1805.c ****     break;
 6349              		.loc 1 1147 9 is_stmt 0 view .LVU1362
 6350 0032 C008     		lsrs	r0, r0, #3
 6351              	.LVL515:
1148:Core/Src/AB1805.c ****   case OSC_CONTROL_PWGT_MASK:
 6352              		.loc 1 1148 5 is_stmt 1 view .LVU1363
 6353 0034 F8E7     		b	.L309
 6354              	.L307:
1150:Core/Src/AB1805.c ****     break;
 6355              		.loc 1 1150 5 view .LVU1364
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 204


1150:Core/Src/AB1805.c ****     break;
 6356              		.loc 1 1150 9 is_stmt 0 view .LVU1365
 6357 0036 8008     		lsrs	r0, r0, #2
 6358              	.LVL516:
1151:Core/Src/AB1805.c ****   case OSC_CONTROL_OFIE_MASK:
 6359              		.loc 1 1151 5 is_stmt 1 view .LVU1366
 6360 0038 F6E7     		b	.L309
 6361              	.L308:
1153:Core/Src/AB1805.c ****     break;
 6362              		.loc 1 1153 5 view .LVU1367
1153:Core/Src/AB1805.c ****     break;
 6363              		.loc 1 1153 9 is_stmt 0 view .LVU1368
 6364 003a 4008     		lsrs	r0, r0, #1
 6365              	.LVL517:
1154:Core/Src/AB1805.c ****   case OSC_CONTROL_ACIE_MASK:
 6366              		.loc 1 1154 5 is_stmt 1 view .LVU1369
 6367 003c F4E7     		b	.L309
 6368              	.L303:
1159:Core/Src/AB1805.c ****   }
 6369              		.loc 1 1159 5 view .LVU1370
1159:Core/Src/AB1805.c ****   }
 6370              		.loc 1 1159 9 is_stmt 0 view .LVU1371
 6371 003e 024B     		ldr	r3, .L311+4
 6372 0040 1878     		ldrb	r0, [r3]
 6373              	.LVL518:
1159:Core/Src/AB1805.c ****   }
 6374              		.loc 1 1159 9 view .LVU1372
 6375 0042 F1E7     		b	.L309
 6376              	.L312:
 6377              		.align	2
 6378              	.L311:
 6379 0044 00000000 		.word	.L305
 6380 0048 00000000 		.word	_osc_control
 6381              		.cfi_endproc
 6382              	.LFE614:
 6384              		.section	.text.set_osc_control_value,"ax",%progbits
 6385              		.align	1
 6386              		.global	set_osc_control_value
 6387              		.syntax unified
 6388              		.code	16
 6389              		.thumb_func
 6391              	set_osc_control_value:
 6392              	.LVL519:
 6393              	.LFB615:
1165:Core/Src/AB1805.c ****   write_rtc_register(OSC_CONTROL_REGISTER, value);
 6394              		.loc 1 1165 1 is_stmt 1 view -0
 6395              		.cfi_startproc
 6396              		@ args = 0, pretend = 0, frame = 0
 6397              		@ frame_needed = 0, uses_anonymous_args = 0
1165:Core/Src/AB1805.c ****   write_rtc_register(OSC_CONTROL_REGISTER, value);
 6398              		.loc 1 1165 1 is_stmt 0 view .LVU1374
 6399 0000 10B5     		push	{r4, lr}
 6400              	.LCFI116:
 6401              		.cfi_def_cfa_offset 8
 6402              		.cfi_offset 4, -8
 6403              		.cfi_offset 14, -4
 6404 0002 0100     		movs	r1, r0
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 205


1166:Core/Src/AB1805.c ****   _osc_control = read_rtc_register(OSC_CONTROL_REGISTER);
 6405              		.loc 1 1166 3 is_stmt 1 view .LVU1375
 6406 0004 1C20     		movs	r0, #28
 6407              	.LVL520:
1166:Core/Src/AB1805.c ****   _osc_control = read_rtc_register(OSC_CONTROL_REGISTER);
 6408              		.loc 1 1166 3 is_stmt 0 view .LVU1376
 6409 0006 FFF7FEFF 		bl	write_rtc_register
 6410              	.LVL521:
1167:Core/Src/AB1805.c ****   return _osc_control;
 6411              		.loc 1 1167 3 is_stmt 1 view .LVU1377
1167:Core/Src/AB1805.c ****   return _osc_control;
 6412              		.loc 1 1167 18 is_stmt 0 view .LVU1378
 6413 000a 1C20     		movs	r0, #28
 6414 000c FFF7FEFF 		bl	read_rtc_register
 6415              	.LVL522:
1167:Core/Src/AB1805.c ****   return _osc_control;
 6416              		.loc 1 1167 16 view .LVU1379
 6417 0010 014B     		ldr	r3, .L314
 6418 0012 1870     		strb	r0, [r3]
1168:Core/Src/AB1805.c **** }
 6419              		.loc 1 1168 3 is_stmt 1 view .LVU1380
1169:Core/Src/AB1805.c **** 
 6420              		.loc 1 1169 1 is_stmt 0 view .LVU1381
 6421              		@ sp needed
 6422 0014 10BD     		pop	{r4, pc}
 6423              	.L315:
 6424 0016 C046     		.align	2
 6425              	.L314:
 6426 0018 00000000 		.word	_osc_control
 6427              		.cfi_endproc
 6428              	.LFE615:
 6430              		.section	.text.set_osc_control_value_mask,"ax",%progbits
 6431              		.align	1
 6432              		.global	set_osc_control_value_mask
 6433              		.syntax unified
 6434              		.code	16
 6435              		.thumb_func
 6437              	set_osc_control_value_mask:
 6438              	.LVL523:
 6439              	.LFB616:
1172:Core/Src/AB1805.c ****   uint8_t c1;
 6440              		.loc 1 1172 1 is_stmt 1 view -0
 6441              		.cfi_startproc
 6442              		@ args = 0, pretend = 0, frame = 0
 6443              		@ frame_needed = 0, uses_anonymous_args = 0
1172:Core/Src/AB1805.c ****   uint8_t c1;
 6444              		.loc 1 1172 1 is_stmt 0 view .LVU1383
 6445 0000 70B5     		push	{r4, r5, r6, lr}
 6446              	.LCFI117:
 6447              		.cfi_def_cfa_offset 16
 6448              		.cfi_offset 4, -16
 6449              		.cfi_offset 5, -12
 6450              		.cfi_offset 6, -8
 6451              		.cfi_offset 14, -4
 6452 0002 0500     		movs	r5, r0
 6453 0004 0C00     		movs	r4, r1
1173:Core/Src/AB1805.c ****   c1 = get_osc_control();
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 206


 6454              		.loc 1 1173 3 is_stmt 1 view .LVU1384
1174:Core/Src/AB1805.c ****   switch (mask)
 6455              		.loc 1 1174 3 view .LVU1385
1174:Core/Src/AB1805.c ****   switch (mask)
 6456              		.loc 1 1174 8 is_stmt 0 view .LVU1386
 6457 0006 FFF7FEFF 		bl	get_osc_control
 6458              	.LVL524:
1175:Core/Src/AB1805.c ****   {
 6459              		.loc 1 1175 3 is_stmt 1 view .LVU1387
 6460 000a 102C     		cmp	r4, #16
 6461 000c 07D8     		bhi	.L317
 6462 000e 002C     		cmp	r4, #0
 6463 0010 0ED0     		beq	.L318
 6464 0012 102C     		cmp	r4, #16
 6465 0014 0CD8     		bhi	.L318
 6466 0016 A400     		lsls	r4, r4, #2
 6467 0018 1E4B     		ldr	r3, .L326
 6468 001a 1B59     		ldr	r3, [r3, r4]
 6469 001c 9F46     		mov	pc, r3
 6470              		.section	.rodata.set_osc_control_value_mask,"a",%progbits
 6471              		.align	2
 6472              	.L320:
 6473 0000 30000000 		.word	.L318
 6474 0004 88000000 		.word	.L324
 6475 0008 78000000 		.word	.L323
 6476 000c 30000000 		.word	.L318
 6477 0010 68000000 		.word	.L322
 6478 0014 30000000 		.word	.L318
 6479 0018 30000000 		.word	.L318
 6480 001c 30000000 		.word	.L318
 6481 0020 58000000 		.word	.L321
 6482 0024 30000000 		.word	.L318
 6483 0028 30000000 		.word	.L318
 6484 002c 30000000 		.word	.L318
 6485 0030 30000000 		.word	.L318
 6486 0034 30000000 		.word	.L318
 6487 0038 30000000 		.word	.L318
 6488 003c 30000000 		.word	.L318
 6489 0040 48000000 		.word	.L319
 6490              		.section	.text.set_osc_control_value_mask
 6491              	.L317:
 6492 001e 602C     		cmp	r4, #96
 6493 0020 0AD0     		beq	.L325
 6494 0022 802C     		cmp	r4, #128
 6495 0024 04D1     		bne	.L318
1178:Core/Src/AB1805.c ****     c1 |= (value << 7) & OSC_CONTROL_OSEL_MASK;
 6496              		.loc 1 1178 5 view .LVU1388
1178:Core/Src/AB1805.c ****     c1 |= (value << 7) & OSC_CONTROL_OSEL_MASK;
 6497              		.loc 1 1178 8 is_stmt 0 view .LVU1389
 6498 0026 7F23     		movs	r3, #127
 6499 0028 0340     		ands	r3, r0
 6500              	.LVL525:
1179:Core/Src/AB1805.c ****     break;
 6501              		.loc 1 1179 5 is_stmt 1 view .LVU1390
1179:Core/Src/AB1805.c ****     break;
 6502              		.loc 1 1179 18 is_stmt 0 view .LVU1391
 6503 002a ED01     		lsls	r5, r5, #7
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 207


1179:Core/Src/AB1805.c ****     break;
 6504              		.loc 1 1179 8 view .LVU1392
 6505 002c 1D43     		orrs	r5, r3
 6506 002e EDB2     		uxtb	r5, r5
 6507              	.LVL526:
1180:Core/Src/AB1805.c ****   case OSC_CONTROL_ACAL_MASK:
 6508              		.loc 1 1180 5 is_stmt 1 view .LVU1393
 6509              	.L318:
1208:Core/Src/AB1805.c **** }
 6510              		.loc 1 1208 3 view .LVU1394
1208:Core/Src/AB1805.c **** }
 6511              		.loc 1 1208 10 is_stmt 0 view .LVU1395
 6512 0030 2800     		movs	r0, r5
 6513 0032 FFF7FEFF 		bl	set_osc_control_value
 6514              	.LVL527:
1209:Core/Src/AB1805.c **** 
 6515              		.loc 1 1209 1 view .LVU1396
 6516              		@ sp needed
 6517              	.LVL528:
1209:Core/Src/AB1805.c **** 
 6518              		.loc 1 1209 1 view .LVU1397
 6519 0036 70BD     		pop	{r4, r5, r6, pc}
 6520              	.LVL529:
 6521              	.L325:
1182:Core/Src/AB1805.c ****     c1 |= (value << 5) & OSC_CONTROL_ACAL_MASK;
 6522              		.loc 1 1182 5 is_stmt 1 view .LVU1398
1182:Core/Src/AB1805.c ****     c1 |= (value << 5) & OSC_CONTROL_ACAL_MASK;
 6523              		.loc 1 1182 8 is_stmt 0 view .LVU1399
 6524 0038 6023     		movs	r3, #96
 6525 003a 9843     		bics	r0, r3
 6526              	.LVL530:
1182:Core/Src/AB1805.c ****     c1 |= (value << 5) & OSC_CONTROL_ACAL_MASK;
 6527              		.loc 1 1182 8 view .LVU1400
 6528 003c C0B2     		uxtb	r0, r0
 6529              	.LVL531:
1183:Core/Src/AB1805.c ****     break;
 6530              		.loc 1 1183 5 is_stmt 1 view .LVU1401
1183:Core/Src/AB1805.c ****     break;
 6531              		.loc 1 1183 18 is_stmt 0 view .LVU1402
 6532 003e 6B01     		lsls	r3, r5, #5
1183:Core/Src/AB1805.c ****     break;
 6533              		.loc 1 1183 24 view .LVU1403
 6534 0040 6025     		movs	r5, #96
 6535 0042 1D40     		ands	r5, r3
1183:Core/Src/AB1805.c ****     break;
 6536              		.loc 1 1183 8 view .LVU1404
 6537 0044 0543     		orrs	r5, r0
 6538              	.LVL532:
1184:Core/Src/AB1805.c ****   case OSC_CONTROL_AOS_MASK:
 6539              		.loc 1 1184 5 is_stmt 1 view .LVU1405
 6540 0046 F3E7     		b	.L318
 6541              	.LVL533:
 6542              	.L319:
1186:Core/Src/AB1805.c ****     c1 |= (value << 4) & OSC_CONTROL_AOS_MASK;
 6543              		.loc 1 1186 5 view .LVU1406
1186:Core/Src/AB1805.c ****     c1 |= (value << 4) & OSC_CONTROL_AOS_MASK;
 6544              		.loc 1 1186 8 is_stmt 0 view .LVU1407
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 208


 6545 0048 1023     		movs	r3, #16
 6546 004a 9843     		bics	r0, r3
 6547              	.LVL534:
1186:Core/Src/AB1805.c ****     c1 |= (value << 4) & OSC_CONTROL_AOS_MASK;
 6548              		.loc 1 1186 8 view .LVU1408
 6549 004c C0B2     		uxtb	r0, r0
 6550              	.LVL535:
1187:Core/Src/AB1805.c ****     break;
 6551              		.loc 1 1187 5 is_stmt 1 view .LVU1409
1187:Core/Src/AB1805.c ****     break;
 6552              		.loc 1 1187 18 is_stmt 0 view .LVU1410
 6553 004e 2B01     		lsls	r3, r5, #4
1187:Core/Src/AB1805.c ****     break;
 6554              		.loc 1 1187 24 view .LVU1411
 6555 0050 1025     		movs	r5, #16
 6556 0052 1D40     		ands	r5, r3
1187:Core/Src/AB1805.c ****     break;
 6557              		.loc 1 1187 8 view .LVU1412
 6558 0054 0543     		orrs	r5, r0
 6559              	.LVL536:
1188:Core/Src/AB1805.c ****   case OSC_CONTROL_FOS_MASK:
 6560              		.loc 1 1188 5 is_stmt 1 view .LVU1413
 6561 0056 EBE7     		b	.L318
 6562              	.LVL537:
 6563              	.L321:
1190:Core/Src/AB1805.c ****     c1 |= (value << 3) & OSC_CONTROL_FOS_MASK;
 6564              		.loc 1 1190 5 view .LVU1414
1190:Core/Src/AB1805.c ****     c1 |= (value << 3) & OSC_CONTROL_FOS_MASK;
 6565              		.loc 1 1190 8 is_stmt 0 view .LVU1415
 6566 0058 0823     		movs	r3, #8
 6567 005a 9843     		bics	r0, r3
 6568              	.LVL538:
1190:Core/Src/AB1805.c ****     c1 |= (value << 3) & OSC_CONTROL_FOS_MASK;
 6569              		.loc 1 1190 8 view .LVU1416
 6570 005c C0B2     		uxtb	r0, r0
 6571              	.LVL539:
1191:Core/Src/AB1805.c ****     break;
 6572              		.loc 1 1191 5 is_stmt 1 view .LVU1417
1191:Core/Src/AB1805.c ****     break;
 6573              		.loc 1 1191 18 is_stmt 0 view .LVU1418
 6574 005e EB00     		lsls	r3, r5, #3
1191:Core/Src/AB1805.c ****     break;
 6575              		.loc 1 1191 24 view .LVU1419
 6576 0060 0825     		movs	r5, #8
 6577 0062 1D40     		ands	r5, r3
1191:Core/Src/AB1805.c ****     break;
 6578              		.loc 1 1191 8 view .LVU1420
 6579 0064 0543     		orrs	r5, r0
 6580              	.LVL540:
1192:Core/Src/AB1805.c ****   case OSC_CONTROL_PWGT_MASK:
 6581              		.loc 1 1192 5 is_stmt 1 view .LVU1421
 6582 0066 E3E7     		b	.L318
 6583              	.LVL541:
 6584              	.L322:
1194:Core/Src/AB1805.c ****     c1 |= (value << 2) & OSC_CONTROL_PWGT_MASK;
 6585              		.loc 1 1194 5 view .LVU1422
1194:Core/Src/AB1805.c ****     c1 |= (value << 2) & OSC_CONTROL_PWGT_MASK;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 209


 6586              		.loc 1 1194 8 is_stmt 0 view .LVU1423
 6587 0068 0423     		movs	r3, #4
 6588 006a 9843     		bics	r0, r3
 6589              	.LVL542:
1194:Core/Src/AB1805.c ****     c1 |= (value << 2) & OSC_CONTROL_PWGT_MASK;
 6590              		.loc 1 1194 8 view .LVU1424
 6591 006c C0B2     		uxtb	r0, r0
 6592              	.LVL543:
1195:Core/Src/AB1805.c ****     break;
 6593              		.loc 1 1195 5 is_stmt 1 view .LVU1425
1195:Core/Src/AB1805.c ****     break;
 6594              		.loc 1 1195 18 is_stmt 0 view .LVU1426
 6595 006e AB00     		lsls	r3, r5, #2
1195:Core/Src/AB1805.c ****     break;
 6596              		.loc 1 1195 24 view .LVU1427
 6597 0070 0425     		movs	r5, #4
 6598 0072 1D40     		ands	r5, r3
1195:Core/Src/AB1805.c ****     break;
 6599              		.loc 1 1195 8 view .LVU1428
 6600 0074 0543     		orrs	r5, r0
 6601              	.LVL544:
1196:Core/Src/AB1805.c ****   case OSC_CONTROL_OFIE_MASK:
 6602              		.loc 1 1196 5 is_stmt 1 view .LVU1429
 6603 0076 DBE7     		b	.L318
 6604              	.LVL545:
 6605              	.L323:
1198:Core/Src/AB1805.c ****     c1 |= (value << 1) & OSC_CONTROL_OFIE_MASK;
 6606              		.loc 1 1198 5 view .LVU1430
1198:Core/Src/AB1805.c ****     c1 |= (value << 1) & OSC_CONTROL_OFIE_MASK;
 6607              		.loc 1 1198 8 is_stmt 0 view .LVU1431
 6608 0078 0223     		movs	r3, #2
 6609 007a 9843     		bics	r0, r3
 6610              	.LVL546:
1198:Core/Src/AB1805.c ****     c1 |= (value << 1) & OSC_CONTROL_OFIE_MASK;
 6611              		.loc 1 1198 8 view .LVU1432
 6612 007c C0B2     		uxtb	r0, r0
 6613              	.LVL547:
1199:Core/Src/AB1805.c ****     break;
 6614              		.loc 1 1199 5 is_stmt 1 view .LVU1433
1199:Core/Src/AB1805.c ****     break;
 6615              		.loc 1 1199 18 is_stmt 0 view .LVU1434
 6616 007e 6B00     		lsls	r3, r5, #1
1199:Core/Src/AB1805.c ****     break;
 6617              		.loc 1 1199 24 view .LVU1435
 6618 0080 0225     		movs	r5, #2
 6619 0082 1D40     		ands	r5, r3
1199:Core/Src/AB1805.c ****     break;
 6620              		.loc 1 1199 8 view .LVU1436
 6621 0084 0543     		orrs	r5, r0
 6622              	.LVL548:
1200:Core/Src/AB1805.c ****   case OSC_CONTROL_ACIE_MASK:
 6623              		.loc 1 1200 5 is_stmt 1 view .LVU1437
 6624 0086 D3E7     		b	.L318
 6625              	.LVL549:
 6626              	.L324:
1202:Core/Src/AB1805.c ****     c1 |= (value)&OSC_CONTROL_ACIE_MASK;
 6627              		.loc 1 1202 5 view .LVU1438
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 210


1202:Core/Src/AB1805.c ****     c1 |= (value)&OSC_CONTROL_ACIE_MASK;
 6628              		.loc 1 1202 8 is_stmt 0 view .LVU1439
 6629 0088 0123     		movs	r3, #1
 6630 008a 9843     		bics	r0, r3
 6631              	.LVL550:
1202:Core/Src/AB1805.c ****     c1 |= (value)&OSC_CONTROL_ACIE_MASK;
 6632              		.loc 1 1202 8 view .LVU1440
 6633 008c C0B2     		uxtb	r0, r0
 6634              	.LVL551:
1203:Core/Src/AB1805.c ****     break;
 6635              		.loc 1 1203 5 is_stmt 1 view .LVU1441
 6636 008e 1D40     		ands	r5, r3
 6637 0090 0543     		orrs	r5, r0
 6638              	.LVL552:
1204:Core/Src/AB1805.c ****   default:
 6639              		.loc 1 1204 5 view .LVU1442
 6640 0092 CDE7     		b	.L318
 6641              	.L327:
 6642              		.align	2
 6643              	.L326:
 6644 0094 00000000 		.word	.L320
 6645              		.cfi_endproc
 6646              	.LFE616:
 6648              		.section	.text.get_WDT_register,"ax",%progbits
 6649              		.align	1
 6650              		.global	get_WDT_register
 6651              		.syntax unified
 6652              		.code	16
 6653              		.thumb_func
 6655              	get_WDT_register:
 6656              	.LFB617:
1213:Core/Src/AB1805.c ****   _wdt_register = read_rtc_register(WDT_REGISTER);
 6657              		.loc 1 1213 1 view -0
 6658              		.cfi_startproc
 6659              		@ args = 0, pretend = 0, frame = 0
 6660              		@ frame_needed = 0, uses_anonymous_args = 0
 6661 0000 10B5     		push	{r4, lr}
 6662              	.LCFI118:
 6663              		.cfi_def_cfa_offset 8
 6664              		.cfi_offset 4, -8
 6665              		.cfi_offset 14, -4
1214:Core/Src/AB1805.c ****   return _wdt_register;
 6666              		.loc 1 1214 3 view .LVU1444
1214:Core/Src/AB1805.c ****   return _wdt_register;
 6667              		.loc 1 1214 19 is_stmt 0 view .LVU1445
 6668 0002 1B20     		movs	r0, #27
 6669 0004 FFF7FEFF 		bl	read_rtc_register
 6670              	.LVL553:
1214:Core/Src/AB1805.c ****   return _wdt_register;
 6671              		.loc 1 1214 17 view .LVU1446
 6672 0008 014B     		ldr	r3, .L329
 6673 000a 1870     		strb	r0, [r3]
1215:Core/Src/AB1805.c **** }
 6674              		.loc 1 1215 3 is_stmt 1 view .LVU1447
1216:Core/Src/AB1805.c **** 
 6675              		.loc 1 1216 1 is_stmt 0 view .LVU1448
 6676              		@ sp needed
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 211


 6677 000c 10BD     		pop	{r4, pc}
 6678              	.L330:
 6679 000e C046     		.align	2
 6680              	.L329:
 6681 0010 00000000 		.word	_wdt_register
 6682              		.cfi_endproc
 6683              	.LFE617:
 6685              		.section	.text.get_WDT_register_mask,"ax",%progbits
 6686              		.align	1
 6687              		.global	get_WDT_register_mask
 6688              		.syntax unified
 6689              		.code	16
 6690              		.thumb_func
 6692              	get_WDT_register_mask:
 6693              	.LVL554:
 6694              	.LFB618:
1219:Core/Src/AB1805.c ****   uint8_t ret;
 6695              		.loc 1 1219 1 is_stmt 1 view -0
 6696              		.cfi_startproc
 6697              		@ args = 0, pretend = 0, frame = 0
 6698              		@ frame_needed = 0, uses_anonymous_args = 0
1219:Core/Src/AB1805.c ****   uint8_t ret;
 6699              		.loc 1 1219 1 is_stmt 0 view .LVU1450
 6700 0000 10B5     		push	{r4, lr}
 6701              	.LCFI119:
 6702              		.cfi_def_cfa_offset 8
 6703              		.cfi_offset 4, -8
 6704              		.cfi_offset 14, -4
 6705 0002 0400     		movs	r4, r0
1220:Core/Src/AB1805.c ****   ret = get_WDT_register() & mask;
 6706              		.loc 1 1220 3 is_stmt 1 view .LVU1451
1221:Core/Src/AB1805.c ****   switch (mask)
 6707              		.loc 1 1221 3 view .LVU1452
1221:Core/Src/AB1805.c ****   switch (mask)
 6708              		.loc 1 1221 9 is_stmt 0 view .LVU1453
 6709 0004 FFF7FEFF 		bl	get_WDT_register
 6710              	.LVL555:
1221:Core/Src/AB1805.c ****   switch (mask)
 6711              		.loc 1 1221 7 view .LVU1454
 6712 0008 2040     		ands	r0, r4
 6713              	.LVL556:
1222:Core/Src/AB1805.c ****   {
 6714              		.loc 1 1222 3 is_stmt 1 view .LVU1455
 6715 000a 7C2C     		cmp	r4, #124
 6716 000c 08D0     		beq	.L332
 6717 000e 802C     		cmp	r4, #128
 6718 0010 04D0     		beq	.L333
 6719 0012 032C     		cmp	r4, #3
 6720 0014 03D0     		beq	.L334
1234:Core/Src/AB1805.c ****   }
 6721              		.loc 1 1234 5 view .LVU1456
1234:Core/Src/AB1805.c ****   }
 6722              		.loc 1 1234 9 is_stmt 0 view .LVU1457
 6723 0016 034B     		ldr	r3, .L337
 6724 0018 1878     		ldrb	r0, [r3]
 6725              	.LVL557:
1234:Core/Src/AB1805.c ****   }
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 212


 6726              		.loc 1 1234 9 view .LVU1458
 6727 001a 00E0     		b	.L334
 6728              	.L333:
1225:Core/Src/AB1805.c ****     break;
 6729              		.loc 1 1225 5 is_stmt 1 view .LVU1459
1225:Core/Src/AB1805.c ****     break;
 6730              		.loc 1 1225 9 is_stmt 0 view .LVU1460
 6731 001c C009     		lsrs	r0, r0, #7
 6732              	.LVL558:
1226:Core/Src/AB1805.c ****   case WDT_REGISTER_BMB_MASK:
 6733              		.loc 1 1226 5 is_stmt 1 view .LVU1461
 6734              	.L334:
1236:Core/Src/AB1805.c **** }
 6735              		.loc 1 1236 3 view .LVU1462
1237:Core/Src/AB1805.c **** 
 6736              		.loc 1 1237 1 is_stmt 0 view .LVU1463
 6737              		@ sp needed
 6738 001e 10BD     		pop	{r4, pc}
 6739              	.L332:
1228:Core/Src/AB1805.c ****     break;
 6740              		.loc 1 1228 5 is_stmt 1 view .LVU1464
1228:Core/Src/AB1805.c ****     break;
 6741              		.loc 1 1228 9 is_stmt 0 view .LVU1465
 6742 0020 8008     		lsrs	r0, r0, #2
 6743              	.LVL559:
1229:Core/Src/AB1805.c ****   case WDT_REGISTER_WRB_MASK:
 6744              		.loc 1 1229 5 is_stmt 1 view .LVU1466
 6745 0022 FCE7     		b	.L334
 6746              	.L338:
 6747              		.align	2
 6748              	.L337:
 6749 0024 00000000 		.word	_wdt_register
 6750              		.cfi_endproc
 6751              	.LFE618:
 6753              		.section	.text.set_value,"ax",%progbits
 6754              		.align	1
 6755              		.global	set_value
 6756              		.syntax unified
 6757              		.code	16
 6758              		.thumb_func
 6760              	set_value:
 6761              	.LVL560:
 6762              	.LFB619:
1240:Core/Src/AB1805.c ****   write_rtc_register(WDT_REGISTER, value);
 6763              		.loc 1 1240 1 view -0
 6764              		.cfi_startproc
 6765              		@ args = 0, pretend = 0, frame = 0
 6766              		@ frame_needed = 0, uses_anonymous_args = 0
1240:Core/Src/AB1805.c ****   write_rtc_register(WDT_REGISTER, value);
 6767              		.loc 1 1240 1 is_stmt 0 view .LVU1468
 6768 0000 10B5     		push	{r4, lr}
 6769              	.LCFI120:
 6770              		.cfi_def_cfa_offset 8
 6771              		.cfi_offset 4, -8
 6772              		.cfi_offset 14, -4
 6773 0002 0100     		movs	r1, r0
1241:Core/Src/AB1805.c ****   _wdt_register = read_rtc_register(WDT_REGISTER);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 213


 6774              		.loc 1 1241 3 is_stmt 1 view .LVU1469
 6775 0004 1B20     		movs	r0, #27
 6776              	.LVL561:
1241:Core/Src/AB1805.c ****   _wdt_register = read_rtc_register(WDT_REGISTER);
 6777              		.loc 1 1241 3 is_stmt 0 view .LVU1470
 6778 0006 FFF7FEFF 		bl	write_rtc_register
 6779              	.LVL562:
1242:Core/Src/AB1805.c ****   return _wdt_register;
 6780              		.loc 1 1242 3 is_stmt 1 view .LVU1471
1242:Core/Src/AB1805.c ****   return _wdt_register;
 6781              		.loc 1 1242 19 is_stmt 0 view .LVU1472
 6782 000a 1B20     		movs	r0, #27
 6783 000c FFF7FEFF 		bl	read_rtc_register
 6784              	.LVL563:
1242:Core/Src/AB1805.c ****   return _wdt_register;
 6785              		.loc 1 1242 17 view .LVU1473
 6786 0010 014B     		ldr	r3, .L340
 6787 0012 1870     		strb	r0, [r3]
1243:Core/Src/AB1805.c **** }
 6788              		.loc 1 1243 3 is_stmt 1 view .LVU1474
1244:Core/Src/AB1805.c **** 
 6789              		.loc 1 1244 1 is_stmt 0 view .LVU1475
 6790              		@ sp needed
 6791 0014 10BD     		pop	{r4, pc}
 6792              	.L341:
 6793 0016 C046     		.align	2
 6794              	.L340:
 6795 0018 00000000 		.word	_wdt_register
 6796              		.cfi_endproc
 6797              	.LFE619:
 6799              		.section	.text.set_WDT_register_mask,"ax",%progbits
 6800              		.align	1
 6801              		.global	set_WDT_register_mask
 6802              		.syntax unified
 6803              		.code	16
 6804              		.thumb_func
 6806              	set_WDT_register_mask:
 6807              	.LVL564:
 6808              	.LFB620:
1247:Core/Src/AB1805.c ****   uint8_t c1;
 6809              		.loc 1 1247 1 is_stmt 1 view -0
 6810              		.cfi_startproc
 6811              		@ args = 0, pretend = 0, frame = 0
 6812              		@ frame_needed = 0, uses_anonymous_args = 0
1247:Core/Src/AB1805.c ****   uint8_t c1;
 6813              		.loc 1 1247 1 is_stmt 0 view .LVU1477
 6814 0000 70B5     		push	{r4, r5, r6, lr}
 6815              	.LCFI121:
 6816              		.cfi_def_cfa_offset 16
 6817              		.cfi_offset 4, -16
 6818              		.cfi_offset 5, -12
 6819              		.cfi_offset 6, -8
 6820              		.cfi_offset 14, -4
 6821 0002 0400     		movs	r4, r0
 6822 0004 0D00     		movs	r5, r1
1248:Core/Src/AB1805.c ****   c1 = get_WDT_register();
 6823              		.loc 1 1248 3 is_stmt 1 view .LVU1478
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 214


1249:Core/Src/AB1805.c ****   switch (mask)
 6824              		.loc 1 1249 3 view .LVU1479
1249:Core/Src/AB1805.c ****   switch (mask)
 6825              		.loc 1 1249 8 is_stmt 0 view .LVU1480
 6826 0006 FFF7FEFF 		bl	get_WDT_register
 6827              	.LVL565:
1250:Core/Src/AB1805.c ****   {
 6828              		.loc 1 1250 3 is_stmt 1 view .LVU1481
 6829 000a 7C2D     		cmp	r5, #124
 6830 000c 0DD0     		beq	.L343
 6831 000e 802D     		cmp	r5, #128
 6832 0010 05D0     		beq	.L344
 6833 0012 032D     		cmp	r5, #3
 6834 0014 11D0     		beq	.L347
 6835              	.LVL566:
 6836              	.L346:
1267:Core/Src/AB1805.c **** }
 6837              		.loc 1 1267 3 view .LVU1482
1267:Core/Src/AB1805.c **** }
 6838              		.loc 1 1267 10 is_stmt 0 view .LVU1483
 6839 0016 2000     		movs	r0, r4
 6840 0018 FFF7FEFF 		bl	set_WDT_register_value
 6841              	.LVL567:
1268:Core/Src/AB1805.c **** 
 6842              		.loc 1 1268 1 view .LVU1484
 6843              		@ sp needed
 6844              	.LVL568:
1268:Core/Src/AB1805.c **** 
 6845              		.loc 1 1268 1 view .LVU1485
 6846 001c 70BD     		pop	{r4, r5, r6, pc}
 6847              	.LVL569:
 6848              	.L344:
1253:Core/Src/AB1805.c ****     c1 |= (value << 7) & WDT_REGISTER_WDS_MASK;
 6849              		.loc 1 1253 5 is_stmt 1 view .LVU1486
1253:Core/Src/AB1805.c ****     c1 |= (value << 7) & WDT_REGISTER_WDS_MASK;
 6850              		.loc 1 1253 8 is_stmt 0 view .LVU1487
 6851 001e 7F23     		movs	r3, #127
 6852 0020 0340     		ands	r3, r0
 6853              	.LVL570:
1254:Core/Src/AB1805.c ****     break;
 6854              		.loc 1 1254 5 is_stmt 1 view .LVU1488
1254:Core/Src/AB1805.c ****     break;
 6855              		.loc 1 1254 18 is_stmt 0 view .LVU1489
 6856 0022 E401     		lsls	r4, r4, #7
1254:Core/Src/AB1805.c ****     break;
 6857              		.loc 1 1254 8 view .LVU1490
 6858 0024 1C43     		orrs	r4, r3
 6859 0026 E4B2     		uxtb	r4, r4
 6860              	.LVL571:
1255:Core/Src/AB1805.c ****   case WDT_REGISTER_BMB_MASK:
 6861              		.loc 1 1255 5 is_stmt 1 view .LVU1491
 6862 0028 F5E7     		b	.L346
 6863              	.LVL572:
 6864              	.L343:
1257:Core/Src/AB1805.c ****     c1 |= (value << 2) & WDT_REGISTER_BMB_MASK;
 6865              		.loc 1 1257 5 view .LVU1492
1257:Core/Src/AB1805.c ****     c1 |= (value << 2) & WDT_REGISTER_BMB_MASK;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 215


 6866              		.loc 1 1257 8 is_stmt 0 view .LVU1493
 6867 002a 7C23     		movs	r3, #124
 6868 002c 9843     		bics	r0, r3
 6869              	.LVL573:
1257:Core/Src/AB1805.c ****     c1 |= (value << 2) & WDT_REGISTER_BMB_MASK;
 6870              		.loc 1 1257 8 view .LVU1494
 6871 002e C0B2     		uxtb	r0, r0
 6872              	.LVL574:
1258:Core/Src/AB1805.c ****     break;
 6873              		.loc 1 1258 5 is_stmt 1 view .LVU1495
1258:Core/Src/AB1805.c ****     break;
 6874              		.loc 1 1258 18 is_stmt 0 view .LVU1496
 6875 0030 A300     		lsls	r3, r4, #2
1258:Core/Src/AB1805.c ****     break;
 6876              		.loc 1 1258 24 view .LVU1497
 6877 0032 7C24     		movs	r4, #124
 6878 0034 1C40     		ands	r4, r3
1258:Core/Src/AB1805.c ****     break;
 6879              		.loc 1 1258 8 view .LVU1498
 6880 0036 0443     		orrs	r4, r0
 6881              	.LVL575:
1259:Core/Src/AB1805.c ****   case WDT_REGISTER_WRB_MASK:
 6882              		.loc 1 1259 5 is_stmt 1 view .LVU1499
 6883 0038 EDE7     		b	.L346
 6884              	.LVL576:
 6885              	.L347:
1261:Core/Src/AB1805.c ****     c1 |= (value)&WDT_REGISTER_WRB_MASK;
 6886              		.loc 1 1261 5 view .LVU1500
1261:Core/Src/AB1805.c ****     c1 |= (value)&WDT_REGISTER_WRB_MASK;
 6887              		.loc 1 1261 8 is_stmt 0 view .LVU1501
 6888 003a 0323     		movs	r3, #3
 6889 003c 9843     		bics	r0, r3
 6890              	.LVL577:
1261:Core/Src/AB1805.c ****     c1 |= (value)&WDT_REGISTER_WRB_MASK;
 6891              		.loc 1 1261 8 view .LVU1502
 6892 003e C0B2     		uxtb	r0, r0
 6893              	.LVL578:
1262:Core/Src/AB1805.c ****     break;
 6894              		.loc 1 1262 5 is_stmt 1 view .LVU1503
 6895 0040 1C40     		ands	r4, r3
 6896 0042 0443     		orrs	r4, r0
 6897              	.LVL579:
1263:Core/Src/AB1805.c ****   default:
 6898              		.loc 1 1263 5 view .LVU1504
 6899 0044 E7E7     		b	.L346
 6900              		.cfi_endproc
 6901              	.LFE620:
 6903              		.section	.text.enter_sleep_mode_PWR_value,"ax",%progbits
 6904              		.align	1
 6905              		.global	enter_sleep_mode_PWR_value
 6906              		.syntax unified
 6907              		.code	16
 6908              		.thumb_func
 6910              	enter_sleep_mode_PWR_value:
 6911              	.LVL580:
 6912              	.LFB621:
1276:Core/Src/AB1805.c ****   if (get_SLST_sleep())
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 216


 6913              		.loc 1 1276 1 view -0
 6914              		.cfi_startproc
 6915              		@ args = 0, pretend = 0, frame = 0
 6916              		@ frame_needed = 0, uses_anonymous_args = 0
1276:Core/Src/AB1805.c ****   if (get_SLST_sleep())
 6917              		.loc 1 1276 1 is_stmt 0 view .LVU1506
 6918 0000 10B5     		push	{r4, lr}
 6919              	.LCFI122:
 6920              		.cfi_def_cfa_offset 8
 6921              		.cfi_offset 4, -8
 6922              		.cfi_offset 14, -4
 6923 0002 0400     		movs	r4, r0
1277:Core/Src/AB1805.c ****   { // clean previous sleep
 6924              		.loc 1 1277 3 is_stmt 1 view .LVU1507
1277:Core/Src/AB1805.c ****   { // clean previous sleep
 6925              		.loc 1 1277 7 is_stmt 0 view .LVU1508
 6926 0004 FFF7FEFF 		bl	get_SLST_sleep
 6927              	.LVL581:
1277:Core/Src/AB1805.c ****   { // clean previous sleep
 6928              		.loc 1 1277 6 view .LVU1509
 6929 0008 0028     		cmp	r0, #0
 6930 000a 11D1     		bne	.L350
 6931              	.L349:
1283:Core/Src/AB1805.c **** 
 6932              		.loc 1 1283 3 is_stmt 1 view .LVU1510
 6933 000c 0620     		movs	r0, #6
 6934 000e FFF7FEFF 		bl	set_OUT2S_control2
 6935              	.LVL582:
1287:Core/Src/AB1805.c **** 
 6936              		.loc 1 1287 3 view .LVU1511
 6937 0012 C021     		movs	r1, #192
 6938 0014 0020     		movs	r0, #0
 6939 0016 FFF7FEFF 		bl	set_outcontrol_value_mask
 6940              	.LVL583:
1290:Core/Src/AB1805.c **** 
 6941              		.loc 1 1290 3 view .LVU1512
 6942 001a 0421     		movs	r1, #4
 6943 001c 0020     		movs	r0, #0
 6944 001e FFF7FEFF 		bl	set_osc_control_value_mask
 6945              	.LVL584:
1293:Core/Src/AB1805.c **** 
 6946              		.loc 1 1293 3 view .LVU1513
 6947 0022 2000     		movs	r0, r4
 6948 0024 FFF7FEFF 		bl	set_SLTO_sleep
 6949              	.LVL585:
1296:Core/Src/AB1805.c **** }
 6950              		.loc 1 1296 3 view .LVU1514
 6951 0028 0120     		movs	r0, #1
 6952 002a FFF7FEFF 		bl	set_SLP_sleep
 6953              	.LVL586:
1297:Core/Src/AB1805.c **** 
 6954              		.loc 1 1297 1 is_stmt 0 view .LVU1515
 6955              		@ sp needed
 6956 002e 10BD     		pop	{r4, pc}
 6957              	.L350:
1279:Core/Src/AB1805.c ****   }
 6958              		.loc 1 1279 5 is_stmt 1 view .LVU1516
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 217


 6959 0030 FFF7FEFF 		bl	clean_SLST_sleep
 6960              	.LVL587:
 6961 0034 EAE7     		b	.L349
 6962              		.cfi_endproc
 6963              	.LFE621:
 6965              		.section	.rodata.enter_sleep_mode.str1.4,"aMS",%progbits,1
 6966              		.align	2
 6967              	.LC84:
 6968 0000 0D0A5072 		.ascii	"\015\012Previous Sleep Failed\000"
 6968      6576696F 
 6968      75732053 
 6968      6C656570 
 6968      20466169 
 6969              		.align	2
 6970              	.LC86:
 6971 0018 0D0A5072 		.ascii	"\015\012Previous Sleep Successful\000"
 6971      6576696F 
 6971      75732053 
 6971      6C656570 
 6971      20537563 
 6972              		.align	2
 6973              	.LC88:
 6974 0034 0D0A436C 		.ascii	"\015\012Clear Succ\000"
 6974      65617220 
 6974      53756363 
 6974      00
 6975 0041 000000   		.align	2
 6976              	.LC90:
 6977 0044 0D0A436C 		.ascii	"\015\012Clear Fail\000"
 6977      65617220 
 6977      4661696C 
 6977      00
 6978 0051 000000   		.align	2
 6979              	.LC92:
 6980 0054 0D0A4E6F 		.ascii	"\015\012No trigger interrupts enabled\000"
 6980      20747269 
 6980      67676572 
 6980      20696E74 
 6980      65727275 
 6981              		.align	2
 6982              	.LC94:
 6983 0074 0D0A496E 		.ascii	"\015\012Interrupt pending\000"
 6983      74657272 
 6983      75707420 
 6983      70656E64 
 6983      696E6700 
 6984              		.align	2
 6985              	.LC96:
 6986 0088 0D0A534C 		.ascii	"\015\012SLEEP request successful\000"
 6986      45455020 
 6986      72657175 
 6986      65737420 
 6986      73756363 
 6987              		.section	.text.enter_sleep_mode,"ax",%progbits
 6988              		.align	1
 6989              		.global	enter_sleep_mode
 6990              		.syntax unified
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 218


 6991              		.code	16
 6992              		.thumb_func
 6994              	enter_sleep_mode:
 6995              	.LVL588:
 6996              	.LFB622:
1312:Core/Src/AB1805.c ****   uint8_t ret = 0;
 6997              		.loc 1 1312 1 view -0
 6998              		.cfi_startproc
 6999              		@ args = 0, pretend = 0, frame = 0
 7000              		@ frame_needed = 0, uses_anonymous_args = 0
1312:Core/Src/AB1805.c ****   uint8_t ret = 0;
 7001              		.loc 1 1312 1 is_stmt 0 view .LVU1518
 7002 0000 70B5     		push	{r4, r5, r6, lr}
 7003              	.LCFI123:
 7004              		.cfi_def_cfa_offset 16
 7005              		.cfi_offset 4, -16
 7006              		.cfi_offset 5, -12
 7007              		.cfi_offset 6, -8
 7008              		.cfi_offset 14, -4
 7009 0002 0400     		movs	r4, r0
 7010 0004 0D00     		movs	r5, r1
1313:Core/Src/AB1805.c ****   uint8_t slres = 0;
 7011              		.loc 1 1313 3 is_stmt 1 view .LVU1519
 7012              	.LVL589:
1314:Core/Src/AB1805.c ****   char temp = 0;
 7013              		.loc 1 1314 3 view .LVU1520
1315:Core/Src/AB1805.c **** 
 7014              		.loc 1 1315 3 view .LVU1521
1318:Core/Src/AB1805.c **** 
 7015              		.loc 1 1318 3 view .LVU1522
1318:Core/Src/AB1805.c **** 
 7016              		.loc 1 1318 10 is_stmt 0 view .LVU1523
 7017 0006 FFF7FEFF 		bl	get_SLST_sleep
 7018              	.LVL590:
1320:Core/Src/AB1805.c ****   {
 7019              		.loc 1 1320 3 is_stmt 1 view .LVU1524
1320:Core/Src/AB1805.c ****   {
 7020              		.loc 1 1320 6 is_stmt 0 view .LVU1525
 7021 000a 0028     		cmp	r0, #0
 7022 000c 2AD1     		bne	.L352
1322:Core/Src/AB1805.c ****   }
 7023              		.loc 1 1322 5 is_stmt 1 view .LVU1526
 7024 000e 2848     		ldr	r0, .L365
 7025              	.LVL591:
1322:Core/Src/AB1805.c ****   }
 7026              		.loc 1 1322 5 is_stmt 0 view .LVU1527
 7027 0010 FFF7FEFF 		bl	printf_
 7028              	.LVL592:
 7029              	.L353:
1328:Core/Src/AB1805.c **** 
 7030              		.loc 1 1328 3 is_stmt 1 view .LVU1528
 7031 0014 FFF7FEFF 		bl	clean_SLST_sleep
 7032              	.LVL593:
1330:Core/Src/AB1805.c **** 
 7033              		.loc 1 1330 3 view .LVU1529
1330:Core/Src/AB1805.c **** 
 7034              		.loc 1 1330 10 is_stmt 0 view .LVU1530
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 219


 7035 0018 FFF7FEFF 		bl	get_SLST_sleep
 7036              	.LVL594:
1332:Core/Src/AB1805.c ****   {
 7037              		.loc 1 1332 3 is_stmt 1 view .LVU1531
1332:Core/Src/AB1805.c ****   {
 7038              		.loc 1 1332 6 is_stmt 0 view .LVU1532
 7039 001c 0028     		cmp	r0, #0
 7040 001e 25D1     		bne	.L354
1334:Core/Src/AB1805.c ****   }
 7041              		.loc 1 1334 5 is_stmt 1 view .LVU1533
 7042 0020 2448     		ldr	r0, .L365+4
 7043              	.LVL595:
1334:Core/Src/AB1805.c ****   }
 7044              		.loc 1 1334 5 is_stmt 0 view .LVU1534
 7045 0022 FFF7FEFF 		bl	printf_
 7046              	.LVL596:
 7047              	.L355:
1340:Core/Src/AB1805.c **** #endif
 7048              		.loc 1 1340 3 is_stmt 1 view .LVU1535
 7049 0026 FFF7FEFF 		bl	clean_SLST_sleep
 7050              	.LVL597:
1343:Core/Src/AB1805.c ****   {
 7051              		.loc 1 1343 3 view .LVU1536
1343:Core/Src/AB1805.c ****   {
 7052              		.loc 1 1343 6 is_stmt 0 view .LVU1537
 7053 002a 002D     		cmp	r5, #0
 7054 002c 22D1     		bne	.L363
 7055              	.LVL598:
 7056              	.L356:
1352:Core/Src/AB1805.c ****   set_sleep(temp);                      // Write to the register
 7057              		.loc 1 1352 3 is_stmt 1 view .LVU1538
1353:Core/Src/AB1805.c **** 
 7058              		.loc 1 1353 3 view .LVU1539
 7059 002e 8020     		movs	r0, #128
 7060 0030 4042     		rsbs	r0, r0, #0
 7061 0032 2043     		orrs	r0, r4
 7062 0034 C0B2     		uxtb	r0, r0
 7063 0036 FFF7FEFF 		bl	set_sleep
 7064              	.LVL599:
1357:Core/Src/AB1805.c **** 
 7065              		.loc 1 1357 3 view .LVU1540
1357:Core/Src/AB1805.c **** 
 7066              		.loc 1 1357 10 is_stmt 0 view .LVU1541
 7067 003a FFF7FEFF 		bl	get_SLP_sleep
 7068              	.LVL600:
1359:Core/Src/AB1805.c ****   {
 7069              		.loc 1 1359 3 is_stmt 1 view .LVU1542
1359:Core/Src/AB1805.c ****   {
 7070              		.loc 1 1359 6 is_stmt 0 view .LVU1543
 7071 003e 0028     		cmp	r0, #0
 7072 0040 31D1     		bne	.L357
 7073              	.LBB74:
1361:Core/Src/AB1805.c ****     /* SLEEP did not happen - determine why and return reason. */
 7074              		.loc 1 1361 5 is_stmt 1 view .LVU1544
 7075              	.LVL601:
1363:Core/Src/AB1805.c ****     reg_wdi_value = get_WDT_register();
 7076              		.loc 1 1363 5 view .LVU1545
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 220


1363:Core/Src/AB1805.c ****     reg_wdi_value = get_WDT_register();
 7077              		.loc 1 1363 12 is_stmt 0 view .LVU1546
 7078 0042 FFF7FEFF 		bl	get_interrupt
 7079              	.LVL602:
1363:Core/Src/AB1805.c ****     reg_wdi_value = get_WDT_register();
 7080              		.loc 1 1363 12 view .LVU1547
 7081 0046 0400     		movs	r4, r0
 7082              	.LVL603:
1364:Core/Src/AB1805.c ****     if (((temp & 0x0F) == 0) & (((reg_wdi_value & 0x7C) == 0) || ((reg_wdi_value & 0x80) == 0x80)))
 7083              		.loc 1 1364 5 is_stmt 1 view .LVU1548
1364:Core/Src/AB1805.c ****     if (((temp & 0x0F) == 0) & (((reg_wdi_value & 0x7C) == 0) || ((reg_wdi_value & 0x80) == 0x80)))
 7084              		.loc 1 1364 21 is_stmt 0 view .LVU1549
 7085 0048 FFF7FEFF 		bl	get_WDT_register
 7086              	.LVL604:
1365:Core/Src/AB1805.c ****     {
 7087              		.loc 1 1365 5 is_stmt 1 view .LVU1550
1365:Core/Src/AB1805.c ****     {
 7088              		.loc 1 1365 30 is_stmt 0 view .LVU1551
 7089 004c 0F23     		movs	r3, #15
 7090 004e 2340     		ands	r3, r4
 7091 0050 5A42     		rsbs	r2, r3, #0
 7092 0052 5341     		adcs	r3, r3, r2
 7093 0054 DBB2     		uxtb	r3, r3
1365:Core/Src/AB1805.c ****     {
 7094              		.loc 1 1365 63 view .LVU1552
 7095 0056 7C22     		movs	r2, #124
 7096 0058 0242     		tst	r2, r0
 7097 005a 17D0     		beq	.L361
1365:Core/Src/AB1805.c ****     {
 7098              		.loc 1 1365 63 discriminator 2 view .LVU1553
 7099 005c 0006     		lsls	r0, r0, #24
 7100 005e 13D4     		bmi	.L364
 7101              	.LVL605:
1365:Core/Src/AB1805.c ****     {
 7102              		.loc 1 1365 63 view .LVU1554
 7103 0060 0022     		movs	r2, #0
 7104 0062 14E0     		b	.L358
 7105              	.LVL606:
 7106              	.L352:
1365:Core/Src/AB1805.c ****     {
 7107              		.loc 1 1365 63 view .LVU1555
 7108              	.LBE74:
1326:Core/Src/AB1805.c ****   }
 7109              		.loc 1 1326 5 is_stmt 1 view .LVU1556
 7110 0064 1448     		ldr	r0, .L365+8
 7111              	.LVL607:
1326:Core/Src/AB1805.c ****   }
 7112              		.loc 1 1326 5 is_stmt 0 view .LVU1557
 7113 0066 FFF7FEFF 		bl	printf_
 7114              	.LVL608:
 7115 006a D3E7     		b	.L353
 7116              	.LVL609:
 7117              	.L354:
1338:Core/Src/AB1805.c ****   }
 7118              		.loc 1 1338 5 is_stmt 1 view .LVU1558
 7119 006c 1348     		ldr	r0, .L365+12
 7120              	.LVL610:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 221


1338:Core/Src/AB1805.c ****   }
 7121              		.loc 1 1338 5 is_stmt 0 view .LVU1559
 7122 006e FFF7FEFF 		bl	printf_
 7123              	.LVL611:
 7124 0072 D8E7     		b	.L355
 7125              	.L363:
1346:Core/Src/AB1805.c ****     temp = (temp & 0xE3) | 0x18; // MUST NOT WRITE OUT2S WITH 000
 7126              		.loc 1 1346 5 is_stmt 1 view .LVU1560
1346:Core/Src/AB1805.c ****     temp = (temp & 0xE3) | 0x18; // MUST NOT WRITE OUT2S WITH 000
 7127              		.loc 1 1346 12 is_stmt 0 view .LVU1561
 7128 0074 FFF7FEFF 		bl	get_OUT2S_control2
 7129              	.LVL612:
1347:Core/Src/AB1805.c ****     set_OUT2S_control2(temp);    // Write value to OUT2S
 7130              		.loc 1 1347 5 is_stmt 1 view .LVU1562
1348:Core/Src/AB1805.c ****     slres = 0;
 7131              		.loc 1 1348 5 view .LVU1563
 7132 0078 1C23     		movs	r3, #28
 7133 007a 9843     		bics	r0, r3
 7134              	.LVL613:
1348:Core/Src/AB1805.c ****     slres = 0;
 7135              		.loc 1 1348 5 is_stmt 0 view .LVU1564
 7136 007c 1823     		movs	r3, #24
 7137 007e 1843     		orrs	r0, r3
 7138 0080 C0B2     		uxtb	r0, r0
 7139 0082 FFF7FEFF 		bl	set_OUT2S_control2
 7140              	.LVL614:
1349:Core/Src/AB1805.c ****   }
 7141              		.loc 1 1349 5 is_stmt 1 view .LVU1565
1349:Core/Src/AB1805.c ****   }
 7142              		.loc 1 1349 5 is_stmt 0 view .LVU1566
 7143 0086 D2E7     		b	.L356
 7144              	.LVL615:
 7145              	.L364:
 7146              	.LBB75:
1365:Core/Src/AB1805.c ****     {
 7147              		.loc 1 1365 63 view .LVU1567
 7148 0088 7B3A     		subs	r2, r2, #123
 7149 008a 00E0     		b	.L358
 7150              	.LVL616:
 7151              	.L361:
1365:Core/Src/AB1805.c ****     {
 7152              		.loc 1 1365 63 view .LVU1568
 7153 008c 0122     		movs	r2, #1
 7154              	.LVL617:
 7155              	.L358:
1365:Core/Src/AB1805.c ****     {
 7156              		.loc 1 1365 8 discriminator 6 view .LVU1569
 7157 008e 1A42     		tst	r2, r3
 7158 0090 04D0     		beq	.L359
1367:Core/Src/AB1805.c ****       printf("\r\nNo trigger interrupts enabled");
 7159              		.loc 1 1367 7 is_stmt 1 view .LVU1570
 7160              	.LVL618:
1368:Core/Src/AB1805.c ****     }
 7161              		.loc 1 1368 7 view .LVU1571
 7162 0092 0B48     		ldr	r0, .L365+16
 7163 0094 FFF7FEFF 		bl	printf_
 7164              	.LVL619:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 222


1367:Core/Src/AB1805.c ****       printf("\r\nNo trigger interrupts enabled");
 7165              		.loc 1 1367 11 is_stmt 0 view .LVU1572
 7166 0098 0320     		movs	r0, #3
 7167 009a 08E0     		b	.L360
 7168              	.LVL620:
 7169              	.L359:
1372:Core/Src/AB1805.c ****       printf("\r\nInterrupt pending");
 7170              		.loc 1 1372 7 is_stmt 1 view .LVU1573
1373:Core/Src/AB1805.c ****     }
 7171              		.loc 1 1373 7 view .LVU1574
 7172 009c 0948     		ldr	r0, .L365+20
 7173 009e FFF7FEFF 		bl	printf_
 7174              	.LVL621:
1372:Core/Src/AB1805.c ****       printf("\r\nInterrupt pending");
 7175              		.loc 1 1372 11 is_stmt 0 view .LVU1575
 7176 00a2 0220     		movs	r0, #2
 7177 00a4 03E0     		b	.L360
 7178              	.LVL622:
 7179              	.L357:
1372:Core/Src/AB1805.c ****       printf("\r\nInterrupt pending");
 7180              		.loc 1 1372 11 view .LVU1576
 7181              	.LBE75:
1378:Core/Src/AB1805.c ****     printf("\r\nSLEEP request successful");
 7182              		.loc 1 1378 5 is_stmt 1 view .LVU1577
1379:Core/Src/AB1805.c ****   }
 7183              		.loc 1 1379 5 view .LVU1578
 7184 00a6 0848     		ldr	r0, .L365+24
 7185              	.LVL623:
1379:Core/Src/AB1805.c ****   }
 7186              		.loc 1 1379 5 is_stmt 0 view .LVU1579
 7187 00a8 FFF7FEFF 		bl	printf_
 7188              	.LVL624:
1378:Core/Src/AB1805.c ****     printf("\r\nSLEEP request successful");
 7189              		.loc 1 1378 9 view .LVU1580
 7190 00ac 0020     		movs	r0, #0
 7191              	.LVL625:
 7192              	.L360:
1382:Core/Src/AB1805.c **** }
 7193              		.loc 1 1382 3 is_stmt 1 view .LVU1581
1383:Core/Src/AB1805.c **** 
 7194              		.loc 1 1383 1 is_stmt 0 view .LVU1582
 7195              		@ sp needed
 7196 00ae 70BD     		pop	{r4, r5, r6, pc}
 7197              	.L366:
 7198              		.align	2
 7199              	.L365:
 7200 00b0 00000000 		.word	.LC84
 7201 00b4 34000000 		.word	.LC88
 7202 00b8 18000000 		.word	.LC86
 7203 00bc 44000000 		.word	.LC90
 7204 00c0 54000000 		.word	.LC92
 7205 00c4 74000000 		.word	.LC94
 7206 00c8 88000000 		.word	.LC96
 7207              		.cfi_endproc
 7208              	.LFE622:
 7210              		.section	.rodata.hex_dump.str1.4,"aMS",%progbits,1
 7211              		.align	2
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 223


 7212              	.LC98:
 7213 0000 23203078 		.ascii	"# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
 7213      25303278 
 7213      3A203078 
 7213      25303278 
 7213      20307825 
 7214 0033 20307825 		.ascii	" 0x%02x 0x%02x\015\012\000"
 7214      30327820 
 7214      30782530 
 7214      32780D0A 
 7214      00
 7215              		.section	.text.hex_dump,"ax",%progbits
 7216              		.align	1
 7217              		.global	hex_dump
 7218              		.syntax unified
 7219              		.code	16
 7220              		.thumb_func
 7222              	hex_dump:
 7223              	.LFB626:
1457:Core/Src/AB1805.c ****   uint8_t buffer[9];
 7224              		.loc 1 1457 1 is_stmt 1 view -0
 7225              		.cfi_startproc
 7226              		@ args = 0, pretend = 0, frame = 16
 7227              		@ frame_needed = 0, uses_anonymous_args = 0
 7228 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 7229              	.LCFI124:
 7230              		.cfi_def_cfa_offset 20
 7231              		.cfi_offset 4, -20
 7232              		.cfi_offset 5, -16
 7233              		.cfi_offset 6, -12
 7234              		.cfi_offset 7, -8
 7235              		.cfi_offset 14, -4
 7236 0002 C646     		mov	lr, r8
 7237 0004 00B5     		push	{lr}
 7238              	.LCFI125:
 7239              		.cfi_def_cfa_offset 24
 7240              		.cfi_offset 8, -24
 7241 0006 8AB0     		sub	sp, sp, #40
 7242              	.LCFI126:
 7243              		.cfi_def_cfa_offset 64
1458:Core/Src/AB1805.c ****   for (uint8_t pos = 0; pos < 0x7F; pos += 8)
 7244              		.loc 1 1458 3 view .LVU1584
1459:Core/Src/AB1805.c ****   {
 7245              		.loc 1 1459 3 view .LVU1585
 7246              	.LBB76:
1459:Core/Src/AB1805.c ****   {
 7247              		.loc 1 1459 8 view .LVU1586
 7248              	.LVL626:
1459:Core/Src/AB1805.c ****   {
 7249              		.loc 1 1459 16 is_stmt 0 view .LVU1587
 7250 0008 0025     		movs	r5, #0
1459:Core/Src/AB1805.c ****   {
 7251              		.loc 1 1459 3 view .LVU1588
 7252 000a 22E0     		b	.L368
 7253              	.LVL627:
 7254              	.L369:
 7255              	.LBB77:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 224


1465:Core/Src/AB1805.c ****     }
 7256              		.loc 1 1465 7 is_stmt 1 discriminator 3 view .LVU1589
1465:Core/Src/AB1805.c ****     }
 7257              		.loc 1 1465 20 is_stmt 0 discriminator 3 view .LVU1590
 7258 000c 2819     		adds	r0, r5, r4
 7259 000e C0B2     		uxtb	r0, r0
 7260 0010 FFF7FEFF 		bl	read_rtc_register
 7261              	.LVL628:
1465:Core/Src/AB1805.c ****     }
 7262              		.loc 1 1465 18 discriminator 3 view .LVU1591
 7263 0014 07AB     		add	r3, sp, #28
 7264 0016 1855     		strb	r0, [r3, r4]
1463:Core/Src/AB1805.c ****     {
 7265              		.loc 1 1463 28 is_stmt 1 discriminator 3 view .LVU1592
 7266 0018 0134     		adds	r4, r4, #1
 7267              	.LVL629:
1463:Core/Src/AB1805.c ****     {
 7268              		.loc 1 1463 28 is_stmt 0 discriminator 3 view .LVU1593
 7269 001a E4B2     		uxtb	r4, r4
 7270              	.LVL630:
 7271              	.L370:
1463:Core/Src/AB1805.c ****     {
 7272              		.loc 1 1463 21 is_stmt 1 discriminator 1 view .LVU1594
 7273 001c 062C     		cmp	r4, #6
 7274 001e F5D9     		bls	.L369
1467:Core/Src/AB1805.c ****   }
 7275              		.loc 1 1467 5 discriminator 2 view .LVU1595
1467:Core/Src/AB1805.c ****   }
 7276              		.loc 1 1467 96 is_stmt 0 discriminator 2 view .LVU1596
 7277 0020 07A9     		add	r1, sp, #28
 7278 0022 0A78     		ldrb	r2, [r1]
1467:Core/Src/AB1805.c ****   }
 7279              		.loc 1 1467 107 discriminator 2 view .LVU1597
 7280 0024 4B78     		ldrb	r3, [r1, #1]
1467:Core/Src/AB1805.c ****   }
 7281              		.loc 1 1467 118 discriminator 2 view .LVU1598
 7282 0026 8C78     		ldrb	r4, [r1, #2]
 7283              	.LVL631:
1467:Core/Src/AB1805.c ****   }
 7284              		.loc 1 1467 129 discriminator 2 view .LVU1599
 7285 0028 CE78     		ldrb	r6, [r1, #3]
1467:Core/Src/AB1805.c ****   }
 7286              		.loc 1 1467 140 discriminator 2 view .LVU1600
 7287 002a 0F79     		ldrb	r7, [r1, #4]
1467:Core/Src/AB1805.c ****   }
 7288              		.loc 1 1467 151 discriminator 2 view .LVU1601
 7289 002c 4879     		ldrb	r0, [r1, #5]
 7290 002e 8446     		mov	ip, r0
1467:Core/Src/AB1805.c ****   }
 7291              		.loc 1 1467 162 discriminator 2 view .LVU1602
 7292 0030 8879     		ldrb	r0, [r1, #6]
 7293 0032 8046     		mov	r8, r0
1467:Core/Src/AB1805.c ****   }
 7294              		.loc 1 1467 173 discriminator 2 view .LVU1603
 7295 0034 C979     		ldrb	r1, [r1, #7]
1467:Core/Src/AB1805.c ****   }
 7296              		.loc 1 1467 5 discriminator 2 view .LVU1604
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 225


 7297 0036 0B48     		ldr	r0, .L373
 7298 0038 0591     		str	r1, [sp, #20]
 7299 003a 4146     		mov	r1, r8
 7300 003c 0491     		str	r1, [sp, #16]
 7301 003e 6146     		mov	r1, ip
 7302 0040 0391     		str	r1, [sp, #12]
 7303 0042 0297     		str	r7, [sp, #8]
 7304 0044 0196     		str	r6, [sp, #4]
 7305 0046 0094     		str	r4, [sp]
 7306 0048 2900     		movs	r1, r5
 7307 004a FFF7FEFF 		bl	printf_
 7308              	.LVL632:
 7309              	.LBE77:
1459:Core/Src/AB1805.c ****   {
 7310              		.loc 1 1459 41 is_stmt 1 discriminator 2 view .LVU1605
 7311 004e 0835     		adds	r5, r5, #8
 7312              	.LVL633:
1459:Core/Src/AB1805.c ****   {
 7313              		.loc 1 1459 41 is_stmt 0 discriminator 2 view .LVU1606
 7314 0050 EDB2     		uxtb	r5, r5
 7315              	.LVL634:
 7316              	.L368:
1459:Core/Src/AB1805.c ****   {
 7317              		.loc 1 1459 29 is_stmt 1 discriminator 1 view .LVU1607
 7318 0052 7E2D     		cmp	r5, #126
 7319 0054 01D8     		bhi	.L372
 7320              	.LBB78:
1463:Core/Src/AB1805.c ****     {
 7321              		.loc 1 1463 13 is_stmt 0 view .LVU1608
 7322 0056 0024     		movs	r4, #0
 7323 0058 E0E7     		b	.L370
 7324              	.L372:
 7325              	.LBE78:
 7326              	.LBE76:
1469:Core/Src/AB1805.c **** 
 7327              		.loc 1 1469 1 view .LVU1609
 7328 005a 0AB0     		add	sp, sp, #40
 7329              		@ sp needed
 7330              	.LVL635:
1469:Core/Src/AB1805.c **** 
 7331              		.loc 1 1469 1 view .LVU1610
 7332 005c 80BC     		pop	{r7}
 7333 005e B846     		mov	r8, r7
 7334 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 7335              	.L374:
 7336 0062 C046     		.align	2
 7337              	.L373:
 7338 0064 00000000 		.word	.LC98
 7339              		.cfi_endproc
 7340              	.LFE626:
 7342              		.section	.rodata.resetConfig.str1.4,"aMS",%progbits,1
 7343              		.align	2
 7344              	.LC100:
 7345 0000 72657365 		.ascii	"resetConfig\012\000"
 7345      74436F6E 
 7345      6669670A 
 7345      00
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 226


 7346              		.section	.text.resetConfig,"ax",%progbits
 7347              		.align	1
 7348              		.global	resetConfig
 7349              		.syntax unified
 7350              		.code	16
 7351              		.thumb_func
 7353              	resetConfig:
 7354              	.LFB627:
1472:Core/Src/AB1805.c ****   printf("resetConfig\n");
 7355              		.loc 1 1472 1 is_stmt 1 view -0
 7356              		.cfi_startproc
 7357              		@ args = 0, pretend = 0, frame = 0
 7358              		@ frame_needed = 0, uses_anonymous_args = 0
 7359 0000 10B5     		push	{r4, lr}
 7360              	.LCFI127:
 7361              		.cfi_def_cfa_offset 8
 7362              		.cfi_offset 4, -8
 7363              		.cfi_offset 14, -4
1473:Core/Src/AB1805.c **** 
 7364              		.loc 1 1473 3 view .LVU1612
 7365 0002 2248     		ldr	r0, .L376
 7366 0004 FFF7FEFF 		bl	printf_
 7367              	.LVL636:
1500:Core/Src/AB1805.c ****   write_rtc_register(CONTROL1_REGISTER, 0x13);      //!< Control register 1, 0b00010011 (OUT | RSO 
 7368              		.loc 1 1500 3 view .LVU1613
 7369 0008 0021     		movs	r1, #0
 7370 000a 0F20     		movs	r0, #15
 7371 000c FFF7FEFF 		bl	write_rtc_register
 7372              	.LVL637:
1501:Core/Src/AB1805.c ****   write_rtc_register(CONTROL2_REGISTER, 0x3c);      //!< Control register 2, 0b00111100 (OUT2S = OU
 7373              		.loc 1 1501 3 view .LVU1614
 7374 0010 1321     		movs	r1, #19
 7375 0012 1020     		movs	r0, #16
 7376 0014 FFF7FEFF 		bl	write_rtc_register
 7377              	.LVL638:
1502:Core/Src/AB1805.c ****   write_rtc_register(INT_MASK_REGISTER, 0xe0);      //!< Interrupt mask, default 0b11100000 (CEB | 
 7378              		.loc 1 1502 3 view .LVU1615
 7379 0018 3C21     		movs	r1, #60
 7380 001a 1120     		movs	r0, #17
 7381 001c FFF7FEFF 		bl	write_rtc_register
 7382              	.LVL639:
1503:Core/Src/AB1805.c ****   write_rtc_register(SQW_REGISTER, 0x26);           //!< Square wave output control, default 0b0010
 7383              		.loc 1 1503 3 view .LVU1616
 7384 0020 E021     		movs	r1, #224
 7385 0022 1220     		movs	r0, #18
 7386 0024 FFF7FEFF 		bl	write_rtc_register
 7387              	.LVL640:
1504:Core/Src/AB1805.c ****   write_rtc_register(SLEEP_CONTROL_REGISTER, 0x00); //!< Sleep control default (0b00000000)
 7388              		.loc 1 1504 3 view .LVU1617
 7389 0028 2621     		movs	r1, #38
 7390 002a 1320     		movs	r0, #19
 7391 002c FFF7FEFF 		bl	write_rtc_register
 7392              	.LVL641:
1505:Core/Src/AB1805.c ****   write_rtc_register(TIMER_CONTROL_REGISTER, 0x23); //!< Timer control default (0b00010011)//!< Cou
 7393              		.loc 1 1505 3 view .LVU1618
 7394 0030 0021     		movs	r1, #0
 7395 0032 1720     		movs	r0, #23
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 227


 7396 0034 FFF7FEFF 		bl	write_rtc_register
 7397              	.LVL642:
1506:Core/Src/AB1805.c ****   write_rtc_register(TIMER_REGISTER, 0x00);         //!< Countdown timer current value register def
 7398              		.loc 1 1506 3 view .LVU1619
 7399 0038 2321     		movs	r1, #35
 7400 003a 1820     		movs	r0, #24
 7401 003c FFF7FEFF 		bl	write_rtc_register
 7402              	.LVL643:
1507:Core/Src/AB1805.c ****   write_rtc_register(TIMER_INITIAL_REGISTER, 0x0);  //!< Countdown timer inital value register defa
 7403              		.loc 1 1507 3 view .LVU1620
 7404 0040 0021     		movs	r1, #0
 7405 0042 1920     		movs	r0, #25
 7406 0044 FFF7FEFF 		bl	write_rtc_register
 7407              	.LVL644:
1508:Core/Src/AB1805.c ****   write_rtc_register(WDT_REGISTER, 0x0);            //!< Watchdog timer control, default value
 7408              		.loc 1 1508 3 view .LVU1621
 7409 0048 0021     		movs	r1, #0
 7410 004a 1A20     		movs	r0, #26
 7411 004c FFF7FEFF 		bl	write_rtc_register
 7412              	.LVL645:
1509:Core/Src/AB1805.c ****   write_rtc_register(OSC_CONTROL_REGISTER, 0x0);    //!< Oscillator control register, default value
 7413              		.loc 1 1509 3 view .LVU1622
 7414 0050 0021     		movs	r1, #0
 7415 0052 1B20     		movs	r0, #27
 7416 0054 FFF7FEFF 		bl	write_rtc_register
 7417              	.LVL646:
1510:Core/Src/AB1805.c ****   write_rtc_register(TRICKLE_REGISTER, 0x0);        //!< Trickle charger control register, default 
 7418              		.loc 1 1510 3 view .LVU1623
 7419 0058 0021     		movs	r1, #0
 7420 005a 1C20     		movs	r0, #28
 7421 005c FFF7FEFF 		bl	write_rtc_register
 7422              	.LVL647:
1511:Core/Src/AB1805.c ****   write_rtc_register(BREF_CONTROL_REGISTER, 0xf0);  //!< Wakeup control system default 0b11110000
 7423              		.loc 1 1511 3 view .LVU1624
 7424 0060 0021     		movs	r1, #0
 7425 0062 2020     		movs	r0, #32
 7426 0064 FFF7FEFF 		bl	write_rtc_register
 7427              	.LVL648:
1512:Core/Src/AB1805.c ****   write_rtc_register(AFCTRL_REGISTER, 0x0);         //!< Auto-calibration filter, default
 7428              		.loc 1 1512 3 view .LVU1625
 7429 0068 F021     		movs	r1, #240
 7430 006a 2120     		movs	r0, #33
 7431 006c FFF7FEFF 		bl	write_rtc_register
 7432              	.LVL649:
1513:Core/Src/AB1805.c ****   write_rtc_register(BATMODE_REGISTER, 0x80);       //!< Brownout control for IO interface, default
 7433              		.loc 1 1513 3 view .LVU1626
 7434 0070 0021     		movs	r1, #0
 7435 0072 2620     		movs	r0, #38
 7436 0074 FFF7FEFF 		bl	write_rtc_register
 7437              	.LVL650:
1514:Core/Src/AB1805.c ****   write_rtc_register(OCTRL_REGISTER, 0x0);          //!< Output control register, default
 7438              		.loc 1 1514 3 view .LVU1627
 7439 0078 8021     		movs	r1, #128
 7440 007a 2720     		movs	r0, #39
 7441 007c FFF7FEFF 		bl	write_rtc_register
 7442              	.LVL651:
1515:Core/Src/AB1805.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 228


 7443              		.loc 1 1515 3 view .LVU1628
 7444 0080 0021     		movs	r1, #0
 7445 0082 3020     		movs	r0, #48
 7446 0084 FFF7FEFF 		bl	write_rtc_register
 7447              	.LVL652:
1519:Core/Src/AB1805.c **** }
 7448              		.loc 1 1519 3 view .LVU1629
1520:Core/Src/AB1805.c **** 
 7449              		.loc 1 1520 1 is_stmt 0 view .LVU1630
 7450 0088 0120     		movs	r0, #1
 7451              		@ sp needed
 7452 008a 10BD     		pop	{r4, pc}
 7453              	.L377:
 7454              		.align	2
 7455              	.L376:
 7456 008c 00000000 		.word	.LC100
 7457              		.cfi_endproc
 7458              	.LFE627:
 7460              		.global	_wdt_register
 7461              		.section	.bss._wdt_register,"aw",%nobits
 7464              	_wdt_register:
 7465 0000 00       		.space	1
 7466              		.global	_osc_control
 7467              		.section	.bss._osc_control,"aw",%nobits
 7470              	_osc_control:
 7471 0000 00       		.space	1
 7472              		.global	_outcontrol
 7473              		.section	.bss._outcontrol,"aw",%nobits
 7476              	_outcontrol:
 7477 0000 00       		.space	1
 7478              		.global	_timer_control_mode
 7479              		.section	.bss._timer_control_mode,"aw",%nobits
 7482              	_timer_control_mode:
 7483 0000 00       		.space	1
 7484              		.global	_sleep_mode
 7485              		.section	.bss._sleep_mode,"aw",%nobits
 7488              	_sleep_mode:
 7489 0000 00       		.space	1
 7490              		.global	_interrupt
 7491              		.section	.bss._interrupt,"aw",%nobits
 7494              	_interrupt:
 7495 0000 00       		.space	1
 7496              		.global	_control2
 7497              		.section	.bss._control2,"aw",%nobits
 7500              	_control2:
 7501 0000 00       		.space	1
 7502              		.global	_control1
 7503              		.section	.bss._control1,"aw",%nobits
 7506              	_control1:
 7507 0000 00       		.space	1
 7508              		.global	_status
 7509              		.section	.bss._status,"aw",%nobits
 7512              	_status:
 7513 0000 00       		.space	1
 7514              		.global	data_time_string
 7515              		.section	.bss.data_time_string,"aw",%nobits
 7516              		.align	2
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 229


 7519              	data_time_string:
 7520 0000 00000000 		.space	30
 7520      00000000 
 7520      00000000 
 7520      00000000 
 7520      00000000 
 7521              		.global	_alarm_second
 7522              		.section	.bss._alarm_second,"aw",%nobits
 7525              	_alarm_second:
 7526 0000 00       		.space	1
 7527              		.global	_alarm_minute
 7528              		.section	.bss._alarm_minute,"aw",%nobits
 7531              	_alarm_minute:
 7532 0000 00       		.space	1
 7533              		.global	_alarm_hour
 7534              		.section	.bss._alarm_hour,"aw",%nobits
 7537              	_alarm_hour:
 7538 0000 00       		.space	1
 7539              		.global	_alarm_weekday
 7540              		.section	.bss._alarm_weekday,"aw",%nobits
 7543              	_alarm_weekday:
 7544 0000 00       		.space	1
 7545              		.global	_alarm_date
 7546              		.section	.bss._alarm_date,"aw",%nobits
 7549              	_alarm_date:
 7550 0000 00       		.space	1
 7551              		.global	_alarm_month
 7552              		.section	.bss._alarm_month,"aw",%nobits
 7555              	_alarm_month:
 7556 0000 00       		.space	1
 7557              		.global	_alarm_year
 7558              		.section	.bss._alarm_year,"aw",%nobits
 7561              	_alarm_year:
 7562 0000 00       		.space	1
 7563              		.global	_hundredth
 7564              		.section	.bss._hundredth,"aw",%nobits
 7567              	_hundredth:
 7568 0000 00       		.space	1
 7569              		.global	_second
 7570              		.section	.bss._second,"aw",%nobits
 7573              	_second:
 7574 0000 00       		.space	1
 7575              		.global	_minute
 7576              		.section	.bss._minute,"aw",%nobits
 7579              	_minute:
 7580 0000 00       		.space	1
 7581              		.global	_hour
 7582              		.section	.bss._hour,"aw",%nobits
 7585              	_hour:
 7586 0000 00       		.space	1
 7587              		.global	_weekday
 7588              		.section	.bss._weekday,"aw",%nobits
 7591              	_weekday:
 7592 0000 00       		.space	1
 7593              		.global	_date
 7594              		.section	.bss._date,"aw",%nobits
 7597              	_date:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 230


 7598 0000 00       		.space	1
 7599              		.global	_month
 7600              		.section	.bss._month,"aw",%nobits
 7603              	_month:
 7604 0000 00       		.space	1
 7605              		.global	_year
 7606              		.section	.bss._year,"aw",%nobits
 7609              	_year:
 7610 0000 00       		.space	1
 7611              		.text
 7612              	.Letext0:
 7613              		.file 4 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 7614              		.file 5 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 7615              		.file 6 "Drivers/CMSIS/Device/ST/STM32U0xx/Include/stm32u073xx.h"
 7616              		.file 7 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 7617              		.file 8 "Core\\Inc/AB1805.h"
 7618              		.file 9 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_dma.h"
 7619              		.file 10 "Drivers/CMSIS/Device/ST/STM32U0xx/Include/stm32u0xx.h"
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 231


DEFINED SYMBOLS
                            *ABS*:00000000 AB1805.c
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:19     .text.SPI1_SendByte:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:24     .text.SPI1_SendByte:00000000 SPI1_SendByte
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:136    .text.SPI1_SendByte:0000003c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:141    .text.read_rtc_register:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:146    .text.read_rtc_register:00000000 read_rtc_register
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:261    .text.read_rtc_register:0000002c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:266    .text.spi_select_slave:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:272    .text.spi_select_slave:00000000 spi_select_slave
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:304    .text.spi_select_slave:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:309    .text.write_rtc_register:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:314    .text.write_rtc_register:00000000 write_rtc_register
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:453    .text.write_rtc_register:0000004c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:459    .text.get_rtc_data:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:465    .text.get_rtc_data:00000000 get_rtc_data
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:492    .text.get_hundredths:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:498    .text.get_hundredths:00000000 get_hundredths
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:522    .text.get_second:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:528    .text.get_second:00000000 get_second
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:552    .text.get_minute:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:558    .text.get_minute:00000000 get_minute
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:582    .text.get_hour:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:588    .text.get_hour:00000000 get_hour
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:612    .text.get_weekday:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:618    .text.get_weekday:00000000 get_weekday
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:642    .text.get_date:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:648    .text.get_date:00000000 get_date
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:672    .text.get_month:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:678    .text.get_month:00000000 get_month
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:702    .text.get_year:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:708    .text.get_year:00000000 get_year
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:732    .text.get_datetime:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:738    .text.get_datetime:00000000 get_datetime
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:804    .text.get_datetime:0000003c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7573   .bss._second:00000000 _second
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7579   .bss._minute:00000000 _minute
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7585   .bss._hour:00000000 _hour
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7591   .bss._weekday:00000000 _weekday
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7597   .bss._date:00000000 _date
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7603   .bss._month:00000000 _month
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7609   .bss._year:00000000 _year
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:815    .text.get_second_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:821    .text.get_second_alarm:00000000 get_second_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:851    .text.get_second_alarm:00000014 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7525   .bss._alarm_second:00000000 _alarm_second
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:856    .text.get_minute_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:862    .text.get_minute_alarm:00000000 get_minute_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:892    .text.get_minute_alarm:00000014 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7531   .bss._alarm_minute:00000000 _alarm_minute
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:897    .text.get_hour_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:903    .text.get_hour_alarm:00000000 get_hour_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:933    .text.get_hour_alarm:00000014 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7537   .bss._alarm_hour:00000000 _alarm_hour
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:938    .text.get_weekday_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:944    .text.get_weekday_alarm:00000000 get_weekday_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:974    .text.get_weekday_alarm:00000014 $d
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 232


C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7543   .bss._alarm_weekday:00000000 _alarm_weekday
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:979    .text.get_date_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:985    .text.get_date_alarm:00000000 get_date_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1015   .text.get_date_alarm:00000014 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7549   .bss._alarm_date:00000000 _alarm_date
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1020   .text.get_month_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1026   .text.get_month_alarm:00000000 get_month_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1056   .text.get_month_alarm:00000014 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7555   .bss._alarm_month:00000000 _alarm_month
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1062   .text.set_second:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1068   .text.set_second:00000000 set_second
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1102   .text.set_second:0000001c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1107   .text.set_minute:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1113   .text.set_minute:00000000 set_minute
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1147   .text.set_minute:0000001c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1152   .text.set_hour:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1158   .text.set_hour:00000000 set_hour
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1192   .text.set_hour:0000001c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1197   .text.set_weekday:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1203   .text.set_weekday:00000000 set_weekday
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1237   .text.set_weekday:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1242   .text.set_date:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1248   .text.set_date:00000000 set_date
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1282   .text.set_date:0000001c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1287   .text.set_month:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1293   .text.set_month:00000000 set_month
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1327   .text.set_month:0000001c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1332   .text.set_year:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1338   .text.set_year:00000000 set_year
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1368   .text.set_year:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1373   .text.set_datetime:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1379   .text.set_datetime:00000000 set_datetime
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1461   .text.set_second_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1467   .text.set_second_alarm:00000000 set_second_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1517   .text.set_second_alarm:0000002c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1522   .text.set_minute_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1528   .text.set_minute_alarm:00000000 set_minute_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1578   .text.set_minute_alarm:0000002c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1583   .text.set_hour_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1589   .text.set_hour_alarm:00000000 set_hour_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1639   .text.set_hour_alarm:0000002c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1644   .text.set_weekday_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1650   .text.set_weekday_alarm:00000000 set_weekday_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1700   .text.set_weekday_alarm:00000028 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1705   .text.set_date_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1711   .text.set_date_alarm:00000000 set_date_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1761   .text.set_date_alarm:0000002c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1766   .text.set_month_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1772   .text.set_month_alarm:00000000 set_month_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1822   .text.set_month_alarm:0000002c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1827   .text.get_date_time:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:1833   .text.get_date_time:00000000 get_date_time
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2053   .text.get_date_time:000000b0 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7519   .bss.data_time_string:00000000 data_time_string
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7567   .bss._hundredth:00000000 _hundredth
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2065   .text.dec_hex:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2071   .text.dec_hex:00000000 dec_hex
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 233


C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2098   .text.hex_dec:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2104   .text.hex_dec:00000000 hex_dec
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2136   .text.get_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2142   .text.get_status:00000000 get_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2169   .text.get_status:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7512   .bss._status:00000000 _status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2174   .text.get_CB_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2180   .text.get_CB_status:00000000 get_CB_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2206   .text.get_CB_status:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2211   .text.get_BAT_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2217   .text.get_BAT_status:00000000 get_BAT_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2243   .text.get_BAT_status:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2248   .text.get_WDT_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2254   .text.get_WDT_status:00000000 get_WDT_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2280   .text.get_WDT_status:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2285   .text.get_BL_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2291   .text.get_BL_status:00000000 get_BL_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2317   .text.get_BL_status:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2322   .text.get_TIM_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2328   .text.get_TIM_status:00000000 get_TIM_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2354   .text.get_TIM_status:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2359   .text.get_ALM_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2365   .text.get_ALM_status:00000000 get_ALM_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2391   .text.get_ALM_status:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2396   .text.get_EX2_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2402   .text.get_EX2_status:00000000 get_EX2_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2428   .text.get_EX2_status:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2433   .text.get_EX1_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2439   .text.get_EX1_status:00000000 get_EX1_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2465   .text.get_EX1_status:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2470   .text.clean_CB_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2476   .text.clean_CB_status:00000000 clean_CB_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2511   .text.clean_BAT_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2517   .text.clean_BAT_status:00000000 clean_BAT_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2555   .text.clean_WDT_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2561   .text.clean_WDT_status:00000000 clean_WDT_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2599   .text.clean_BL_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2605   .text.clean_BL_status:00000000 clean_BL_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2643   .text.clean_TIM_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2649   .text.clean_TIM_status:00000000 clean_TIM_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2687   .text.clean_ALM_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2693   .text.clean_ALM_status:00000000 clean_ALM_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2731   .text.clean_EX2_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2737   .text.clean_EX2_status:00000000 clean_EX2_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2775   .text.clean_EX1_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2781   .text.clean_EX1_status:00000000 clean_EX1_status
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2820   .text.set_control1:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2826   .text.set_control1:00000000 set_control1
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2861   .text.set_control1:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7506   .bss._control1:00000000 _control1
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2866   .text.set_1224:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2872   .text.set_1224:00000000 set_1224
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2927   .text.set_RSP:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2933   .text.set_RSP:00000000 set_RSP
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2988   .text.set_ARST:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:2994   .text.set_ARST:00000000 set_ARST
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3049   .text.set_PWR2:00000000 $t
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 234


C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3055   .text.set_PWR2:00000000 set_PWR2
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3110   .text.set_WRTC:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3116   .text.set_WRTC:00000000 set_WRTC
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3171   .text.get_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3177   .text.get_interrupt:00000000 get_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3203   .text.get_interrupt:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7494   .bss._interrupt:00000000 _interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3208   .text.get_BLIE_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3214   .text.get_BLIE_interrupt:00000000 get_BLIE_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3240   .text.get_BLIE_interrupt:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3245   .text.get_TIE_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3251   .text.get_TIE_interrupt:00000000 get_TIE_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3277   .text.get_TIE_interrupt:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3282   .text.get_AIE_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3288   .text.get_AIE_interrupt:00000000 get_AIE_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3314   .text.get_AIE_interrupt:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3319   .text.get_EX2E_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3325   .text.get_EX2E_interrupt:00000000 get_EX2E_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3351   .text.get_EX2E_interrupt:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3356   .text.get_EX1E_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3362   .text.get_EX1E_interrupt:00000000 get_EX1E_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3388   .text.get_EX1E_interrupt:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3393   .text.set_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3399   .text.set_interrupt:00000000 set_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3434   .text.set_interrupt:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3439   .text.set_BLIE_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3445   .text.set_BLIE_interrupt:00000000 set_BLIE_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3500   .text.set_TIE_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3506   .text.set_TIE_interrupt:00000000 set_TIE_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3561   .text.set_AIE_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3567   .text.set_AIE_interrupt:00000000 set_AIE_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3622   .text.set_EX1E_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3628   .text.set_EX1E_interrupt:00000000 set_EX1E_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3683   .text.set_EX2E_interrupt:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3689   .text.set_EX2E_interrupt:00000000 set_EX2E_interrupt
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3744   .text.get_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3750   .text.get_control2:00000000 get_control2
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3776   .text.get_control2:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7500   .bss._control2:00000000 _control2
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3781   .text.get_RS1E_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3787   .text.get_RS1E_control2:00000000 get_RS1E_control2
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3813   .text.get_RS1E_control2:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3818   .text.get_OUT2S_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3824   .text.get_OUT2S_control2:00000000 get_OUT2S_control2
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3850   .text.get_OUT2S_control2:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3855   .text.get_OUT1S_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3861   .text.get_OUT1S_control2:00000000 get_OUT1S_control2
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3887   .text.get_OUT1S_control2:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3892   .text.set_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3898   .text.set_control2:00000000 set_control2
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3933   .text.set_control2:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3938   .text.set_RS1E_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:3944   .text.set_RS1E_control2:00000000 set_RS1E_control2
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4004   .text.set_OUT2S_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4010   .text.set_OUT2S_control2:00000000 set_OUT2S_control2
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4066   .text.set_OUT1S_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4072   .text.set_OUT1S_control2:00000000 set_OUT1S_control2
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 235


C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4125   .text.get_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4131   .text.get_sleep:00000000 get_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4157   .text.get_sleep:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7488   .bss._sleep_mode:00000000 _sleep_mode
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4162   .text.get_SLP_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4168   .text.get_SLP_sleep:00000000 get_SLP_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4194   .text.get_SLP_sleep:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4199   .text.get_SLRES_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4205   .text.get_SLRES_sleep:00000000 get_SLRES_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4231   .text.get_SLRES_sleep:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4236   .text.get_EX2P_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4242   .text.get_EX2P_sleep:00000000 get_EX2P_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4268   .text.get_EX2P_sleep:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4273   .text.get_EX1P_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4279   .text.get_EX1P_sleep:00000000 get_EX1P_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4305   .text.get_EX1P_sleep:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4310   .text.get_SLST_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4316   .text.get_SLST_sleep:00000000 get_SLST_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4342   .text.get_SLST_sleep:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4347   .text.get_SLTO_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4353   .text.get_SLTO_sleep:00000000 get_SLTO_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4379   .text.get_SLTO_sleep:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4384   .text.set_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4390   .text.set_sleep:00000000 set_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4425   .text.set_sleep:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4430   .text.set_SLP_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4436   .text.set_SLP_sleep:00000000 set_SLP_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4495   .text.set_SLRES_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4501   .text.set_SLRES_sleep:00000000 set_SLRES_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4561   .text.set_EX2P_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4567   .text.set_EX2P_sleep:00000000 set_EX2P_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4627   .text.set_EX1P_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4633   .text.set_EX1P_sleep:00000000 set_EX1P_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4693   .text.clean_SLST_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4699   .text.clean_SLST_sleep:00000000 clean_SLST_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4740   .text.set_SLTO_sleep:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4746   .text.set_SLTO_sleep:00000000 set_SLTO_sleep
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4798   .text.get_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4804   .text.get_time_control:00000000 get_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4830   .text.get_time_control:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7482   .bss._timer_control_mode:00000000 _timer_control_mode
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4835   .text.get_TE_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4841   .text.get_TE_time_control:00000000 get_TE_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4867   .text.get_TE_time_control:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4872   .text.get_TM_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4878   .text.get_TM_time_control:00000000 get_TM_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4904   .text.get_TM_time_control:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4909   .text.get_TRPT_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4915   .text.get_TRPT_time_control:00000000 get_TRPT_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4941   .text.get_TRPT_time_control:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4946   .text.get_RPT_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4952   .text.get_RPT_time_control:00000000 get_RPT_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4978   .text.get_RPT_time_control:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4983   .text.get_TFS_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:4989   .text.get_TFS_time_control:00000000 get_TFS_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5015   .text.get_TFS_time_control:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5020   .text.set_time_control:00000000 $t
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 236


C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5026   .text.set_time_control:00000000 set_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5061   .text.set_time_control:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5066   .text.set_TE_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5072   .text.set_TE_time_control:00000000 set_TE_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5131   .text.set_TM_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5137   .text.set_TM_time_control:00000000 set_TM_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5197   .text.set_TRPT_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5203   .text.set_TRPT_time_control:00000000 set_TRPT_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5263   .text.set_RPT_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5269   .text.set_RPT_time_control:00000000 set_RPT_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5325   .text.set_datetime_alarm_month:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5331   .text.set_datetime_alarm_month:00000000 set_datetime_alarm_month
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5385   .text.set_datetime_alarm_date:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5391   .text.set_datetime_alarm_date:00000000 set_datetime_alarm_date
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5435   .text.set_week_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5441   .text.set_week_alarm:00000000 set_week_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5485   .text.set_datetime_alarm_hour:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5491   .text.set_datetime_alarm_hour:00000000 set_datetime_alarm_hour
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5530   .text.set_datetime_alarm_minutes:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5536   .text.set_datetime_alarm_minutes:00000000 set_datetime_alarm_minutes
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5568   .text.set_datetime_alarm_seconds:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5574   .text.set_datetime_alarm_seconds:00000000 set_datetime_alarm_seconds
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5601   .text.set_once_second_alarm:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5607   .text.set_once_second_alarm:00000000 set_once_second_alarm
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5633   .text.set_TFS_time_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5639   .text.set_TFS_time_control:00000000 set_TFS_time_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5691   .text.get_outcontrol:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5697   .text.get_outcontrol:00000000 get_outcontrol
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5723   .text.get_outcontrol:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7476   .bss._outcontrol:00000000 _outcontrol
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5728   .text.get_outcontrol_mask:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5734   .text.get_outcontrol_mask:00000000 get_outcontrol_mask
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5768   .rodata.get_outcontrol_mask:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5872   .text.get_outcontrol_mask:00000048 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5878   .text.set_outcontrol_value:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5884   .text.set_outcontrol_value:00000000 set_outcontrol_value
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5919   .text.set_outcontrol_value:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5924   .text.set_outcontrol_value_mask:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:5930   .text.set_outcontrol_value_mask:00000000 set_outcontrol_value_mask
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6006   .rodata.set_outcontrol_value_mask:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6216   .text.set_outcontrol_value_mask:000000ac $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6221   .text.get_osc_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6227   .text.get_osc_control:00000000 get_osc_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6253   .text.get_osc_control:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7470   .bss._osc_control:00000000 _osc_control
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6258   .text.get_osc_control_mask:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6264   .text.get_osc_control_mask:00000000 get_osc_control_mask
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6298   .rodata.get_osc_control_mask:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6379   .text.get_osc_control_mask:00000044 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6385   .text.set_osc_control_value:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6391   .text.set_osc_control_value:00000000 set_osc_control_value
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6426   .text.set_osc_control_value:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6431   .text.set_osc_control_value_mask:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6437   .text.set_osc_control_value_mask:00000000 set_osc_control_value_mask
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6471   .rodata.set_osc_control_value_mask:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6644   .text.set_osc_control_value_mask:00000094 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6649   .text.get_WDT_register:00000000 $t
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s 			page 237


C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6655   .text.get_WDT_register:00000000 get_WDT_register
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6681   .text.get_WDT_register:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7464   .bss._wdt_register:00000000 _wdt_register
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6686   .text.get_WDT_register_mask:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6692   .text.get_WDT_register_mask:00000000 get_WDT_register_mask
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6749   .text.get_WDT_register_mask:00000024 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6754   .text.set_value:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6760   .text.set_value:00000000 set_value
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6795   .text.set_value:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6800   .text.set_WDT_register_mask:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6806   .text.set_WDT_register_mask:00000000 set_WDT_register_mask
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6904   .text.enter_sleep_mode_PWR_value:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6910   .text.enter_sleep_mode_PWR_value:00000000 enter_sleep_mode_PWR_value
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6966   .rodata.enter_sleep_mode.str1.4:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6988   .text.enter_sleep_mode:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:6994   .text.enter_sleep_mode:00000000 enter_sleep_mode
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7200   .text.enter_sleep_mode:000000b0 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7211   .rodata.hex_dump.str1.4:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7216   .text.hex_dump:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7222   .text.hex_dump:00000000 hex_dump
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7338   .text.hex_dump:00000064 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7343   .rodata.resetConfig.str1.4:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7347   .text.resetConfig:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7353   .text.resetConfig:00000000 resetConfig
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7456   .text.resetConfig:0000008c $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7465   .bss._wdt_register:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7471   .bss._osc_control:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7477   .bss._outcontrol:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7483   .bss._timer_control_mode:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7489   .bss._sleep_mode:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7495   .bss._interrupt:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7501   .bss._control2:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7507   .bss._control1:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7513   .bss._status:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7516   .bss.data_time_string:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7526   .bss._alarm_second:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7532   .bss._alarm_minute:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7538   .bss._alarm_hour:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7544   .bss._alarm_weekday:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7550   .bss._alarm_date:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7556   .bss._alarm_month:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7561   .bss._alarm_year:00000000 _alarm_year
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7562   .bss._alarm_year:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7568   .bss._hundredth:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7574   .bss._second:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7580   .bss._minute:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7586   .bss._hour:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7592   .bss._weekday:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7598   .bss._date:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7604   .bss._month:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccJvkbjI.s:7610   .bss._year:00000000 $d

UNDEFINED SYMBOLS
__aeabi_uidivmod
set_WDT_register_value
printf_
