ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.__NVIC_SystemReset,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	__NVIC_SystemReset:
  25              	.LFB39:
  26              		.file 2 "Drivers/CMSIS/Include/core_cm0plus.h"
   1:Drivers/CMSIS/Include/core_cm0plus.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:Drivers/CMSIS/Include/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0plus.h ****  * @version  V5.0.9
   5:Drivers/CMSIS/Include/core_cm0plus.h ****  * @date     21. August 2019
   6:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0plus.h **** /*
   8:Drivers/CMSIS/Include/core_cm0plus.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  10:Drivers/CMSIS/Include/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  12:Drivers/CMSIS/Include/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  16:Drivers/CMSIS/Include/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0plus.h ****  *
  18:Drivers/CMSIS/Include/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm0plus.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  24:Drivers/CMSIS/Include/core_cm0plus.h **** 
  25:Drivers/CMSIS/Include/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0plus.h **** 
  31:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 2


  33:Drivers/CMSIS/Include/core_cm0plus.h **** 
  34:Drivers/CMSIS/Include/core_cm0plus.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0plus.h **** 
  36:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0plus.h **** 
  40:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  41:Drivers/CMSIS/Include/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0plus.h **** 
  44:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0plus.h **** 
  47:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0plus.h **** 
  50:Drivers/CMSIS/Include/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  53:Drivers/CMSIS/Include/core_cm0plus.h **** 
  54:Drivers/CMSIS/Include/core_cm0plus.h **** 
  55:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0plus.h **** /**
  59:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup Cortex-M0+
  60:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0plus.h ****  */
  62:Drivers/CMSIS/Include/core_cm0plus.h **** 
  63:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0plus.h ****  
  65:Drivers/CMSIS/Include/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:Drivers/CMSIS/Include/core_cm0plus.h **** 
  71:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:Drivers/CMSIS/Include/core_cm0plus.h **** 
  73:Drivers/CMSIS/Include/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0plus.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0plus.h **** */
  76:Drivers/CMSIS/Include/core_cm0plus.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0plus.h **** 
  78:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0plus.h **** 
  83:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARM_FP
  85:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0plus.h **** 
  88:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 3


  90:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0plus.h **** 
  93:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0plus.h **** 
  98:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0plus.h **** 
 103:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0plus.h **** 
 108:Drivers/CMSIS/Include/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0plus.h **** 
 113:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0plus.h **** 
 115:Drivers/CMSIS/Include/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0plus.h **** 
 117:Drivers/CMSIS/Include/core_cm0plus.h **** 
 118:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0plus.h **** }
 120:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0plus.h **** 
 122:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0plus.h **** 
 124:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0plus.h **** 
 126:Drivers/CMSIS/Include/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0plus.h **** 
 129:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0plus.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0plus.h **** 
 133:Drivers/CMSIS/Include/core_cm0plus.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0plus.h **** 
 140:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0plus.h **** 
 145:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 4


 147:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0plus.h **** 
 150:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 154:Drivers/CMSIS/Include/core_cm0plus.h **** 
 155:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:Drivers/CMSIS/Include/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:Drivers/CMSIS/Include/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 160:Drivers/CMSIS/Include/core_cm0plus.h **** 
 161:Drivers/CMSIS/Include/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 163:Drivers/CMSIS/Include/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:Drivers/CMSIS/Include/core_cm0plus.h **** 
 165:Drivers/CMSIS/Include/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:Drivers/CMSIS/Include/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:Drivers/CMSIS/Include/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:Drivers/CMSIS/Include/core_cm0plus.h **** */
 169:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef __cplusplus
 170:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 172:Drivers/CMSIS/Include/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 174:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:Drivers/CMSIS/Include/core_cm0plus.h **** 
 177:Drivers/CMSIS/Include/core_cm0plus.h **** /* following defines should be used for structure members */
 178:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:Drivers/CMSIS/Include/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:Drivers/CMSIS/Include/core_cm0plus.h **** 
 182:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:Drivers/CMSIS/Include/core_cm0plus.h **** 
 184:Drivers/CMSIS/Include/core_cm0plus.h **** 
 185:Drivers/CMSIS/Include/core_cm0plus.h **** 
 186:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 187:Drivers/CMSIS/Include/core_cm0plus.h ****  *                 Register Abstraction
 188:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Register contain:
 189:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register
 190:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Register
 191:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SCB Register
 192:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Register
 193:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core MPU Register
 194:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 195:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 196:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:Drivers/CMSIS/Include/core_cm0plus.h **** */
 199:Drivers/CMSIS/Include/core_cm0plus.h **** 
 200:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 201:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Core Register type definitions.
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 5


 204:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 205:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 206:Drivers/CMSIS/Include/core_cm0plus.h **** 
 207:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 208:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 210:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 211:Drivers/CMSIS/Include/core_cm0plus.h **** {
 212:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 213:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 214:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:Drivers/CMSIS/Include/core_cm0plus.h **** } APSR_Type;
 222:Drivers/CMSIS/Include/core_cm0plus.h **** 
 223:Drivers/CMSIS/Include/core_cm0plus.h **** /* APSR Register Definitions */
 224:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:Drivers/CMSIS/Include/core_cm0plus.h **** 
 227:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:Drivers/CMSIS/Include/core_cm0plus.h **** 
 230:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 231:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:Drivers/CMSIS/Include/core_cm0plus.h **** 
 233:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:Drivers/CMSIS/Include/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:Drivers/CMSIS/Include/core_cm0plus.h **** 
 236:Drivers/CMSIS/Include/core_cm0plus.h **** 
 237:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 238:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 240:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 241:Drivers/CMSIS/Include/core_cm0plus.h **** {
 242:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 243:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 244:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:Drivers/CMSIS/Include/core_cm0plus.h **** } IPSR_Type;
 249:Drivers/CMSIS/Include/core_cm0plus.h **** 
 250:Drivers/CMSIS/Include/core_cm0plus.h **** /* IPSR Register Definitions */
 251:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:Drivers/CMSIS/Include/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:Drivers/CMSIS/Include/core_cm0plus.h **** 
 254:Drivers/CMSIS/Include/core_cm0plus.h **** 
 255:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 256:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 258:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 259:Drivers/CMSIS/Include/core_cm0plus.h **** {
 260:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 6


 261:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 262:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:Drivers/CMSIS/Include/core_cm0plus.h **** } xPSR_Type;
 273:Drivers/CMSIS/Include/core_cm0plus.h **** 
 274:Drivers/CMSIS/Include/core_cm0plus.h **** /* xPSR Register Definitions */
 275:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0plus.h **** 
 278:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0plus.h **** 
 281:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:Drivers/CMSIS/Include/core_cm0plus.h **** 
 284:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:Drivers/CMSIS/Include/core_cm0plus.h **** 
 287:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 288:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:Drivers/CMSIS/Include/core_cm0plus.h **** 
 290:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:Drivers/CMSIS/Include/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:Drivers/CMSIS/Include/core_cm0plus.h **** 
 293:Drivers/CMSIS/Include/core_cm0plus.h **** 
 294:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 295:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 297:Drivers/CMSIS/Include/core_cm0plus.h **** typedef union
 298:Drivers/CMSIS/Include/core_cm0plus.h **** {
 299:Drivers/CMSIS/Include/core_cm0plus.h ****   struct
 300:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 301:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:Drivers/CMSIS/Include/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:Drivers/CMSIS/Include/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:Drivers/CMSIS/Include/core_cm0plus.h **** } CONTROL_Type;
 307:Drivers/CMSIS/Include/core_cm0plus.h **** 
 308:Drivers/CMSIS/Include/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:Drivers/CMSIS/Include/core_cm0plus.h **** 
 312:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:Drivers/CMSIS/Include/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:Drivers/CMSIS/Include/core_cm0plus.h **** 
 315:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:Drivers/CMSIS/Include/core_cm0plus.h **** 
 317:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 7


 318:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 319:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 323:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 324:Drivers/CMSIS/Include/core_cm0plus.h **** 
 325:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 326:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 328:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 329:Drivers/CMSIS/Include/core_cm0plus.h **** {
 330:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1[31U];
 334:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:Drivers/CMSIS/Include/core_cm0plus.h **** }  NVIC_Type;
 341:Drivers/CMSIS/Include/core_cm0plus.h **** 
 342:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:Drivers/CMSIS/Include/core_cm0plus.h **** 
 344:Drivers/CMSIS/Include/core_cm0plus.h **** 
 345:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 346:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 350:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 351:Drivers/CMSIS/Include/core_cm0plus.h **** 
 352:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 353:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 355:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 356:Drivers/CMSIS/Include/core_cm0plus.h **** {
 357:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 362:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED0;
 363:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 364:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:Drivers/CMSIS/Include/core_cm0plus.h ****         uint32_t RESERVED1;
 368:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:Drivers/CMSIS/Include/core_cm0plus.h **** } SCB_Type;
 371:Drivers/CMSIS/Include/core_cm0plus.h **** 
 372:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 8


 375:Drivers/CMSIS/Include/core_cm0plus.h **** 
 376:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0plus.h **** 
 379:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0plus.h **** 
 382:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0plus.h **** 
 385:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0plus.h **** 
 388:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0plus.h **** 
 392:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0plus.h **** 
 395:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0plus.h **** 
 398:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0plus.h **** 
 401:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 402:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0plus.h **** 
 404:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0plus.h **** 
 407:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0plus.h **** 
 410:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0plus.h **** 
 413:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:Drivers/CMSIS/Include/core_cm0plus.h **** 
 416:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 421:Drivers/CMSIS/Include/core_cm0plus.h **** 
 422:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:Drivers/CMSIS/Include/core_cm0plus.h **** 
 426:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:Drivers/CMSIS/Include/core_cm0plus.h **** 
 429:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 9


 432:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0plus.h **** 
 435:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:Drivers/CMSIS/Include/core_cm0plus.h **** 
 438:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0plus.h **** 
 442:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0plus.h **** 
 445:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:Drivers/CMSIS/Include/core_cm0plus.h **** 
 448:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0plus.h **** 
 452:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0plus.h **** 
 455:Drivers/CMSIS/Include/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0plus.h **** 
 459:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:Drivers/CMSIS/Include/core_cm0plus.h **** 
 461:Drivers/CMSIS/Include/core_cm0plus.h **** 
 462:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 463:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 467:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 468:Drivers/CMSIS/Include/core_cm0plus.h **** 
 469:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 470:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 472:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 473:Drivers/CMSIS/Include/core_cm0plus.h **** {
 474:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:Drivers/CMSIS/Include/core_cm0plus.h **** } SysTick_Type;
 479:Drivers/CMSIS/Include/core_cm0plus.h **** 
 480:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0plus.h **** 
 484:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0plus.h **** 
 487:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 10


 489:Drivers/CMSIS/Include/core_cm0plus.h **** 
 490:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:Drivers/CMSIS/Include/core_cm0plus.h **** 
 493:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:Drivers/CMSIS/Include/core_cm0plus.h **** 
 497:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:Drivers/CMSIS/Include/core_cm0plus.h **** 
 501:Drivers/CMSIS/Include/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:Drivers/CMSIS/Include/core_cm0plus.h **** 
 505:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0plus.h **** 
 508:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0plus.h **** 
 511:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:Drivers/CMSIS/Include/core_cm0plus.h **** 
 513:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 515:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 516:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 519:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 520:Drivers/CMSIS/Include/core_cm0plus.h **** 
 521:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 522:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 524:Drivers/CMSIS/Include/core_cm0plus.h **** typedef struct
 525:Drivers/CMSIS/Include/core_cm0plus.h **** {
 526:Drivers/CMSIS/Include/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:Drivers/CMSIS/Include/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:Drivers/CMSIS/Include/core_cm0plus.h **** } MPU_Type;
 532:Drivers/CMSIS/Include/core_cm0plus.h **** 
 533:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:Drivers/CMSIS/Include/core_cm0plus.h **** 
 535:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:Drivers/CMSIS/Include/core_cm0plus.h **** 
 539:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:Drivers/CMSIS/Include/core_cm0plus.h **** 
 542:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:Drivers/CMSIS/Include/core_cm0plus.h **** 
 545:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Control Register Definitions */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 11


 546:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:Drivers/CMSIS/Include/core_cm0plus.h **** 
 549:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:Drivers/CMSIS/Include/core_cm0plus.h **** 
 552:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:Drivers/CMSIS/Include/core_cm0plus.h **** 
 555:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:Drivers/CMSIS/Include/core_cm0plus.h **** 
 559:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:Drivers/CMSIS/Include/core_cm0plus.h **** 
 563:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:Drivers/CMSIS/Include/core_cm0plus.h **** 
 566:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:Drivers/CMSIS/Include/core_cm0plus.h **** 
 569:Drivers/CMSIS/Include/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:Drivers/CMSIS/Include/core_cm0plus.h **** 
 573:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:Drivers/CMSIS/Include/core_cm0plus.h **** 
 576:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:Drivers/CMSIS/Include/core_cm0plus.h **** 
 579:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:Drivers/CMSIS/Include/core_cm0plus.h **** 
 582:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:Drivers/CMSIS/Include/core_cm0plus.h **** 
 585:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:Drivers/CMSIS/Include/core_cm0plus.h **** 
 588:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:Drivers/CMSIS/Include/core_cm0plus.h **** 
 591:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:Drivers/CMSIS/Include/core_cm0plus.h **** 
 594:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:Drivers/CMSIS/Include/core_cm0plus.h **** 
 597:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:Drivers/CMSIS/Include/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:Drivers/CMSIS/Include/core_cm0plus.h **** 
 600:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 602:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 12


 603:Drivers/CMSIS/Include/core_cm0plus.h **** 
 604:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 605:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:Drivers/CMSIS/Include/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 610:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 611:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:Drivers/CMSIS/Include/core_cm0plus.h **** 
 613:Drivers/CMSIS/Include/core_cm0plus.h **** 
 614:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 615:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 619:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 620:Drivers/CMSIS/Include/core_cm0plus.h **** 
 621:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 622:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted value.
 626:Drivers/CMSIS/Include/core_cm0plus.h **** */
 627:Drivers/CMSIS/Include/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:Drivers/CMSIS/Include/core_cm0plus.h **** 
 629:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 630:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:Drivers/CMSIS/Include/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:Drivers/CMSIS/Include/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:Drivers/CMSIS/Include/core_cm0plus.h **** */
 635:Drivers/CMSIS/Include/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:Drivers/CMSIS/Include/core_cm0plus.h **** 
 637:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:Drivers/CMSIS/Include/core_cm0plus.h **** 
 639:Drivers/CMSIS/Include/core_cm0plus.h **** 
 640:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 641:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 645:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 646:Drivers/CMSIS/Include/core_cm0plus.h **** 
 647:Drivers/CMSIS/Include/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:Drivers/CMSIS/Include/core_cm0plus.h **** 
 653:Drivers/CMSIS/Include/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:Drivers/CMSIS/Include/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:Drivers/CMSIS/Include/core_cm0plus.h **** 
 657:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:Drivers/CMSIS/Include/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 13


 660:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 661:Drivers/CMSIS/Include/core_cm0plus.h **** 
 662:Drivers/CMSIS/Include/core_cm0plus.h **** /*@} */
 663:Drivers/CMSIS/Include/core_cm0plus.h **** 
 664:Drivers/CMSIS/Include/core_cm0plus.h **** 
 665:Drivers/CMSIS/Include/core_cm0plus.h **** 
 666:Drivers/CMSIS/Include/core_cm0plus.h **** /*******************************************************************************
 667:Drivers/CMSIS/Include/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:Drivers/CMSIS/Include/core_cm0plus.h ****   Core Function Interface contains:
 669:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core NVIC Functions
 670:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core SysTick Functions
 671:Drivers/CMSIS/Include/core_cm0plus.h ****   - Core Register Access Functions
 672:Drivers/CMSIS/Include/core_cm0plus.h ****  ******************************************************************************/
 673:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 674:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:Drivers/CMSIS/Include/core_cm0plus.h **** */
 676:Drivers/CMSIS/Include/core_cm0plus.h **** 
 677:Drivers/CMSIS/Include/core_cm0plus.h **** 
 678:Drivers/CMSIS/Include/core_cm0plus.h **** 
 679:Drivers/CMSIS/Include/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 681:Drivers/CMSIS/Include/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:Drivers/CMSIS/Include/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:Drivers/CMSIS/Include/core_cm0plus.h ****   @{
 685:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 686:Drivers/CMSIS/Include/core_cm0plus.h **** 
 687:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 691:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 693:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:Drivers/CMSIS/Include/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:Drivers/CMSIS/Include/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:Drivers/CMSIS/Include/core_cm0plus.h **** 
 707:Drivers/CMSIS/Include/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:Drivers/CMSIS/Include/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:Drivers/CMSIS/Include/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:Drivers/CMSIS/Include/core_cm0plus.h ****   #endif
 711:Drivers/CMSIS/Include/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 713:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:Drivers/CMSIS/Include/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:Drivers/CMSIS/Include/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 14


 717:Drivers/CMSIS/Include/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:Drivers/CMSIS/Include/core_cm0plus.h **** 
 719:Drivers/CMSIS/Include/core_cm0plus.h **** 
 720:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:Drivers/CMSIS/Include/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:Drivers/CMSIS/Include/core_cm0plus.h **** 
 725:Drivers/CMSIS/Include/core_cm0plus.h **** 
 726:Drivers/CMSIS/Include/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:Drivers/CMSIS/Include/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:Drivers/CMSIS/Include/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:Drivers/CMSIS/Include/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:Drivers/CMSIS/Include/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:Drivers/CMSIS/Include/core_cm0plus.h **** 
 732:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:Drivers/CMSIS/Include/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:Drivers/CMSIS/Include/core_cm0plus.h **** 
 735:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 736:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Enable Interrupt
 737:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 741:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:Drivers/CMSIS/Include/core_cm0plus.h **** {
 743:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 744:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 745:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 746:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 747:Drivers/CMSIS/Include/core_cm0plus.h ****     __COMPILER_BARRIER();
 748:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 749:Drivers/CMSIS/Include/core_cm0plus.h **** }
 750:Drivers/CMSIS/Include/core_cm0plus.h **** 
 751:Drivers/CMSIS/Include/core_cm0plus.h **** 
 752:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 753:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 754:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 755:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 756:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 757:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 758:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 759:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 760:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 761:Drivers/CMSIS/Include/core_cm0plus.h **** {
 762:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 763:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 764:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 765:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 766:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 767:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 768:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 769:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 770:Drivers/CMSIS/Include/core_cm0plus.h **** }
 771:Drivers/CMSIS/Include/core_cm0plus.h **** 
 772:Drivers/CMSIS/Include/core_cm0plus.h **** 
 773:Drivers/CMSIS/Include/core_cm0plus.h **** /**
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 15


 774:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Disable Interrupt
 775:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 776:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 777:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 778:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 779:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 780:Drivers/CMSIS/Include/core_cm0plus.h **** {
 781:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 782:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 783:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 784:Drivers/CMSIS/Include/core_cm0plus.h ****     __DSB();
 785:Drivers/CMSIS/Include/core_cm0plus.h ****     __ISB();
 786:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 787:Drivers/CMSIS/Include/core_cm0plus.h **** }
 788:Drivers/CMSIS/Include/core_cm0plus.h **** 
 789:Drivers/CMSIS/Include/core_cm0plus.h **** 
 790:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 791:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Pending Interrupt
 792:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 793:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 794:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 795:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 796:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 797:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 798:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 799:Drivers/CMSIS/Include/core_cm0plus.h **** {
 800:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 801:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 802:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 803:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 804:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 805:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 806:Drivers/CMSIS/Include/core_cm0plus.h ****     return(0U);
 807:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 808:Drivers/CMSIS/Include/core_cm0plus.h **** }
 809:Drivers/CMSIS/Include/core_cm0plus.h **** 
 810:Drivers/CMSIS/Include/core_cm0plus.h **** 
 811:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 812:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Pending Interrupt
 813:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 814:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 815:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
 816:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 817:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 818:Drivers/CMSIS/Include/core_cm0plus.h **** {
 819:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 820:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 821:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 822:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 823:Drivers/CMSIS/Include/core_cm0plus.h **** }
 824:Drivers/CMSIS/Include/core_cm0plus.h **** 
 825:Drivers/CMSIS/Include/core_cm0plus.h **** 
 826:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 827:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 828:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 829:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 830:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    IRQn must not be negative.
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 16


 831:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 832:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 833:Drivers/CMSIS/Include/core_cm0plus.h **** {
 834:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 835:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 836:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 837:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 838:Drivers/CMSIS/Include/core_cm0plus.h **** }
 839:Drivers/CMSIS/Include/core_cm0plus.h **** 
 840:Drivers/CMSIS/Include/core_cm0plus.h **** 
 841:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 842:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Priority
 843:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 844:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 845:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 846:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 847:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 848:Drivers/CMSIS/Include/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 849:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 850:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 851:Drivers/CMSIS/Include/core_cm0plus.h **** {
 852:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 853:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 854:Drivers/CMSIS/Include/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 855:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 856:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 857:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 858:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 859:Drivers/CMSIS/Include/core_cm0plus.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 860:Drivers/CMSIS/Include/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 861:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 862:Drivers/CMSIS/Include/core_cm0plus.h **** }
 863:Drivers/CMSIS/Include/core_cm0plus.h **** 
 864:Drivers/CMSIS/Include/core_cm0plus.h **** 
 865:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 866:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Priority
 867:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 868:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 869:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 870:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn  Interrupt number.
 871:Drivers/CMSIS/Include/core_cm0plus.h ****   \return             Interrupt Priority.
 872:Drivers/CMSIS/Include/core_cm0plus.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 873:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 874:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 875:Drivers/CMSIS/Include/core_cm0plus.h **** {
 876:Drivers/CMSIS/Include/core_cm0plus.h **** 
 877:Drivers/CMSIS/Include/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 878:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 879:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 880:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 881:Drivers/CMSIS/Include/core_cm0plus.h ****   else
 882:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 883:Drivers/CMSIS/Include/core_cm0plus.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 884:Drivers/CMSIS/Include/core_cm0plus.h ****   }
 885:Drivers/CMSIS/Include/core_cm0plus.h **** }
 886:Drivers/CMSIS/Include/core_cm0plus.h **** 
 887:Drivers/CMSIS/Include/core_cm0plus.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 17


 888:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 889:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Encode Priority
 890:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Encodes the priority for an interrupt with the given priority group,
 891:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value, and subpriority value.
 892:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 893:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 894:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 895:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 896:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 897:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 898:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 899:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 900:Drivers/CMSIS/Include/core_cm0plus.h **** {
 901:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 902:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 903:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 904:Drivers/CMSIS/Include/core_cm0plus.h **** 
 905:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 906:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 907:Drivers/CMSIS/Include/core_cm0plus.h **** 
 908:Drivers/CMSIS/Include/core_cm0plus.h ****   return (
 909:Drivers/CMSIS/Include/core_cm0plus.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 910:Drivers/CMSIS/Include/core_cm0plus.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 911:Drivers/CMSIS/Include/core_cm0plus.h ****          );
 912:Drivers/CMSIS/Include/core_cm0plus.h **** }
 913:Drivers/CMSIS/Include/core_cm0plus.h **** 
 914:Drivers/CMSIS/Include/core_cm0plus.h **** 
 915:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 916:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Decode Priority
 917:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Decodes an interrupt priority value with a given priority group to
 918:Drivers/CMSIS/Include/core_cm0plus.h ****            preemptive priority value and subpriority value.
 919:Drivers/CMSIS/Include/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 920:Drivers/CMSIS/Include/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 921:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 922:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 923:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 924:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 925:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 926:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 927:Drivers/CMSIS/Include/core_cm0plus.h **** {
 928:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 929:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 930:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t SubPriorityBits;
 931:Drivers/CMSIS/Include/core_cm0plus.h **** 
 932:Drivers/CMSIS/Include/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 933:Drivers/CMSIS/Include/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 934:Drivers/CMSIS/Include/core_cm0plus.h **** 
 935:Drivers/CMSIS/Include/core_cm0plus.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
 936:Drivers/CMSIS/Include/core_cm0plus.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 937:Drivers/CMSIS/Include/core_cm0plus.h **** }
 938:Drivers/CMSIS/Include/core_cm0plus.h **** 
 939:Drivers/CMSIS/Include/core_cm0plus.h **** 
 940:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 941:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Set Interrupt Vector
 942:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 943:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 944:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 18


 945:Drivers/CMSIS/Include/core_cm0plus.h ****            VTOR must been relocated to SRAM before.
 946:Drivers/CMSIS/Include/core_cm0plus.h ****            If VTOR is not present address 0 must be mapped to SRAM.
 947:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number
 948:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   vector    Address of interrupt handler function
 949:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 950:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 951:Drivers/CMSIS/Include/core_cm0plus.h **** {
 952:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 953:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 954:Drivers/CMSIS/Include/core_cm0plus.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 955:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 956:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt 
 957:Drivers/CMSIS/Include/core_cm0plus.h ****   *(vectors + (int32_t)IRQn) = vector;                              /* use pointer arithmetic to ac
 958:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 959:Drivers/CMSIS/Include/core_cm0plus.h ****   /* ARM Application Note 321 states that the M0+ does not require the architectural barrier */
 960:Drivers/CMSIS/Include/core_cm0plus.h **** }
 961:Drivers/CMSIS/Include/core_cm0plus.h **** 
 962:Drivers/CMSIS/Include/core_cm0plus.h **** 
 963:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 964:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   Get Interrupt Vector
 965:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Reads an interrupt vector from interrupt vector table.
 966:Drivers/CMSIS/Include/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 967:Drivers/CMSIS/Include/core_cm0plus.h ****            or negative to specify a processor exception.
 968:Drivers/CMSIS/Include/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number.
 969:Drivers/CMSIS/Include/core_cm0plus.h ****   \return                 Address of interrupt handler function
 970:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 971:Drivers/CMSIS/Include/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 972:Drivers/CMSIS/Include/core_cm0plus.h **** {
 973:Drivers/CMSIS/Include/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 974:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 975:Drivers/CMSIS/Include/core_cm0plus.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
 976:Drivers/CMSIS/Include/core_cm0plus.h **** #else
 977:Drivers/CMSIS/Include/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)(NVIC_USER_IRQ_OFFSET << 2);      /* point to 1st user interrupt 
 978:Drivers/CMSIS/Include/core_cm0plus.h ****   return *(vectors + (int32_t)IRQn);                                /* use pointer arithmetic to ac
 979:Drivers/CMSIS/Include/core_cm0plus.h **** #endif
 980:Drivers/CMSIS/Include/core_cm0plus.h **** }
 981:Drivers/CMSIS/Include/core_cm0plus.h **** 
 982:Drivers/CMSIS/Include/core_cm0plus.h **** 
 983:Drivers/CMSIS/Include/core_cm0plus.h **** /**
 984:Drivers/CMSIS/Include/core_cm0plus.h ****   \brief   System Reset
 985:Drivers/CMSIS/Include/core_cm0plus.h ****   \details Initiates a system reset request to reset the MCU.
 986:Drivers/CMSIS/Include/core_cm0plus.h ****  */
 987:Drivers/CMSIS/Include/core_cm0plus.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
 988:Drivers/CMSIS/Include/core_cm0plus.h **** {
  27              		.loc 2 988 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 989:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure all outstanding memor
  33              		.loc 2 989 3 view .LVU1
  34              	.LBB12:
  35              	.LBI12:
  36              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 19


   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 20


  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 21


 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 22


 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 23


 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
  37              		.loc 3 269 27 view .LVU2
  38              	.LBB13:
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  39              		.loc 3 271 3 view .LVU3
  40              		.syntax divided
  41              	@ 271 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  42 0000 BFF34F8F 		dsb 0xF
  43              	@ 0 "" 2
  44              		.thumb
  45              		.syntax unified
  46              	.LBE13:
  47              	.LBE12:
 990:Drivers/CMSIS/Include/core_cm0plus.h ****                                                                        buffered write are completed
 991:Drivers/CMSIS/Include/core_cm0plus.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
  48              		.loc 2 991 3 view .LVU4
  49              		.loc 2 991 15 is_stmt 0 view .LVU5
  50 0004 034B     		ldr	r3, .L3
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 24


  51 0006 044A     		ldr	r2, .L3+4
  52 0008 DA60     		str	r2, [r3, #12]
 992:Drivers/CMSIS/Include/core_cm0plus.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 993:Drivers/CMSIS/Include/core_cm0plus.h ****   __DSB();                                                          /* Ensure completion of memory 
  53              		.loc 2 993 3 is_stmt 1 view .LVU6
  54              	.LBB14:
  55              	.LBI14:
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  56              		.loc 3 269 27 view .LVU7
  57              	.LBB15:
  58              		.loc 3 271 3 view .LVU8
  59              		.syntax divided
  60              	@ 271 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  61 000a BFF34F8F 		dsb 0xF
  62              	@ 0 "" 2
  63              		.thumb
  64              		.syntax unified
  65              	.L2:
  66              	.LBE15:
  67              	.LBE14:
 994:Drivers/CMSIS/Include/core_cm0plus.h **** 
 995:Drivers/CMSIS/Include/core_cm0plus.h ****   for(;;)                                                           /* wait until reset */
  68              		.loc 2 995 3 discriminator 1 view .LVU9
 996:Drivers/CMSIS/Include/core_cm0plus.h ****   {
 997:Drivers/CMSIS/Include/core_cm0plus.h ****     __NOP();
  69              		.loc 2 997 5 discriminator 1 view .LVU10
  70              		.syntax divided
  71              	@ 997 "Drivers/CMSIS/Include/core_cm0plus.h" 1
  72 000e C046     		nop
  73              	@ 0 "" 2
 995:Drivers/CMSIS/Include/core_cm0plus.h ****   {
  74              		.loc 2 995 3 discriminator 1 view .LVU11
  75              		.thumb
  76              		.syntax unified
  77 0010 FDE7     		b	.L2
  78              	.L4:
  79 0012 C046     		.align	2
  80              	.L3:
  81 0014 00ED00E0 		.word	-536810240
  82 0018 0400FA05 		.word	100270084
  83              		.cfi_endproc
  84              	.LFE39:
  86              		.section	.text.timeout_reset,"ax",%progbits
  87              		.align	1
  88              		.global	timeout_reset
  89              		.syntax unified
  90              		.code	16
  91              		.thumb_func
  93              	timeout_reset:
  94              	.LFB503:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 25


   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "adc.h"
  22:Core/Src/main.c **** #include "i2c.h"
  23:Core/Src/main.c **** #include "rtc.h"
  24:Core/Src/main.c **** #include "spi.h"
  25:Core/Src/main.c **** #include "usart.h"
  26:Core/Src/main.c **** #include "gpio.h"
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** #include "printf.h"
  32:Core/Src/main.c **** #include "AB1805_RK.h"
  33:Core/Src/main.c **** #include "stm32u0xx_ll_spi.h"
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END Includes */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PTD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE END PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  48:Core/Src/main.c **** /* USER CODE BEGIN PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE BEGIN PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE END PV */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  59:Core/Src/main.c **** void SystemClock_Config(void);
  60:Core/Src/main.c **** void timeout_reset(void);
  61:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE END PFP */
  64:Core/Src/main.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 26


  65:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  66:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* USER CODE END 0 */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /**
  71:Core/Src/main.c ****  * @brief  The application entry point.
  72:Core/Src/main.c ****  * @retval int
  73:Core/Src/main.c ****  */
  74:Core/Src/main.c **** int main(void)
  75:Core/Src/main.c **** {
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* USER CODE END 1 */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  84:Core/Src/main.c ****   HAL_Init();
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* USER CODE END Init */
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Configure the system clock */
  91:Core/Src/main.c ****   SystemClock_Config();
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END SysInit */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Initialize all configured peripherals */
  98:Core/Src/main.c ****   MX_GPIO_Init();
  99:Core/Src/main.c ****   MX_ADC1_Init();
 100:Core/Src/main.c ****   MX_I2C1_Init();
 101:Core/Src/main.c ****   MX_RTC_Init();
 102:Core/Src/main.c ****   MX_SPI1_Init();
 103:Core/Src/main.c ****   MX_USART2_UART_Init();
 104:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   LL_SPI_Enable(SPI1);
 107:Core/Src/main.c ****   LED1_ON();
 108:Core/Src/main.c ****   uint32_t clk = HAL_RCC_GetSysClockFreq();
 109:Core/Src/main.c ****   printf("\nMAIN. Power ON.   %d\n", clk);
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   resetConfig(0);
 112:Core/Src/main.c ****   HAL_Delay(1500);
 113:Core/Src/main.c ****   deepPowerDown(30);
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* USER CODE END 2 */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* Infinite loop */
 118:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   HAL_Delay(2000);
 121:Core/Src/main.c ****   // resetConfig();
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 27


 122:Core/Src/main.c ****   // hex_dump();
 123:Core/Src/main.c ****   // enter_sleep_mode(30, 1);
 124:Core/Src/main.c ****   LED1_OFF();
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   while (1)
 127:Core/Src/main.c ****   {
 128:Core/Src/main.c ****     /* USER CODE END WHILE */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****     LED1_ON();
 133:Core/Src/main.c ****     HAL_Delay(100);
 134:Core/Src/main.c ****     LED1_OFF();
 135:Core/Src/main.c ****     //    hex_dump();
 136:Core/Src/main.c ****     HAL_Delay(100);
 137:Core/Src/main.c ****   }
 138:Core/Src/main.c ****   /* USER CODE END 3 */
 139:Core/Src/main.c **** }
 140:Core/Src/main.c **** 
 141:Core/Src/main.c **** /**
 142:Core/Src/main.c ****  * @brief System Clock Configuration
 143:Core/Src/main.c ****  * @retval None
 144:Core/Src/main.c ****  */
 145:Core/Src/main.c **** void SystemClock_Config(void)
 146:Core/Src/main.c **** {
 147:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 148:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 151:Core/Src/main.c ****    */
 152:Core/Src/main.c ****   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 155:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 156:Core/Src/main.c ****    */
 157:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 158:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 159:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 160:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 161:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 162:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 163:Core/Src/main.c ****   {
 164:Core/Src/main.c ****     Error_Handler();
 165:Core/Src/main.c ****   }
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 168:Core/Src/main.c ****    */
 169:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 170:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 171:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 172:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 175:Core/Src/main.c ****   {
 176:Core/Src/main.c ****     Error_Handler();
 177:Core/Src/main.c ****   }
 178:Core/Src/main.c **** }
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 28


 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c **** void print_error(const char *func, uint32_t line)
 183:Core/Src/main.c **** {
 184:Core/Src/main.c ****   printf(" *** Error:  %s ,   %d\n", func, line);
 185:Core/Src/main.c ****   HAL_Delay(1000);
 186:Core/Src/main.c ****   timeout_reset();
 187:Core/Src/main.c **** }
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** void timeout_reset(void)
 190:Core/Src/main.c **** {
  95              		.loc 1 190 1 view -0
  96              		.cfi_startproc
  97              		@ Volatile: function does not return.
  98              		@ args = 0, pretend = 0, frame = 0
  99              		@ frame_needed = 0, uses_anonymous_args = 0
 100 0000 10B5     		push	{r4, lr}
 101              	.LCFI0:
 102              		.cfi_def_cfa_offset 8
 103              		.cfi_offset 4, -8
 104              		.cfi_offset 14, -4
 191:Core/Src/main.c ****   LL_PWR_ClearFlag_CSB(); // Clear standby flag
 105              		.loc 1 191 3 view .LVU13
 106              	.LBB16:
 107              	.LBI16:
 108              		.file 4 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h"
   1:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
   2:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   ******************************************************************************
   3:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @file    stm32u0xx_ll_pwr.h
   4:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @author  MCD Application Team
   5:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief   Header file of PWR LL module.
   6:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   ******************************************************************************
   7:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @attention
   8:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *
   9:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * Copyright (c) 2023 STMicroelectronics.
  10:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * All rights reserved.
  11:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *
  12:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * in the root directory of this software component.
  14:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *
  16:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   ******************************************************************************
  17:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
  18:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  19:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #ifndef STM32U0xx_LL_PWR_H
  21:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define STM32U0xx_LL_PWR_H
  22:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  23:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #ifdef __cplusplus
  24:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** extern "C" {
  25:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #endif
  26:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  27:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #include "stm32u0xx.h"
  29:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  30:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @addtogroup STM32U0xx_LL_Driver
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 29


  31:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
  32:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
  33:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  34:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #if defined(PWR)
  35:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  36:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL PWR
  37:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
  38:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
  39:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  40:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /* Private constants ---------------------------------------------------------*/
  43:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /* Private macros ------------------------------------------------------------*/
  44:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /* Exported types ------------------------------------------------------------*/
  45:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /* Exported constants --------------------------------------------------------*/
  46:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  47:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_Exported_Constants PWR Exported Constants
  48:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
  49:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
  50:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  51:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_CLEAR_FLAG Clear Flags Defines
  52:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief    Flags defines which can be used with LL_PWR_WriteReg function
  53:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
  54:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
  55:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SCR_CSBF                    PWR_SCR_CSBF
  56:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SCR_CWUF7                   PWR_SCR_CWUF7
  57:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SCR_CWUF5                   PWR_SCR_CWUF5
  58:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SCR_CWUF4                   PWR_SCR_CWUF4
  59:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SCR_CWUF3                   PWR_SCR_CWUF3
  60:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SCR_CWUF2                   PWR_SCR_CWUF2
  61:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SCR_CWUF1                   PWR_SCR_CWUF1
  62:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
  63:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
  64:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
  65:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  66:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_GET_FLAG Get Flags Defines
  67:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief    Flags defines which can be used with LL_PWR_ReadReg function
  68:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
  69:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
  70:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_WUFI                    PWR_SR1_WUFI
  71:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_STOP2                   (PWR_SR1_STOPF_2 | PWR_SR1_STOPF_1)
  72:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_STOP1                   (PWR_SR1_STOPF_2 | PWR_SR1_STOPF_0)
  73:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_STOP0                   PWR_SR1_STOPF_2
  74:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_SBF                     PWR_SR1_SBF
  75:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_WUF7                    PWR_SR1_WUF7
  76:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_WUF5                    PWR_SR1_WUF5
  77:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_WUF4                    PWR_SR1_WUF4
  78:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_WUF3                    PWR_SR1_WUF3
  79:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_WUF2                    PWR_SR1_WUF2
  80:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR1_WUF1                    PWR_SR1_WUF1
  81:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR2_PVMO4                   PWR_SR2_PVMO4
  82:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR2_PVMO3                   PWR_SR2_PVMO3
  83:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR2_PVMO1                   PWR_SR2_PVMO1
  84:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR2_PVDO                    PWR_SR2_PVDO
  85:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR2_VOSF                    PWR_SR2_VOSF
  86:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR2_REGLPF                  PWR_SR2_REGLPF
  87:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR2_REGLPS                  PWR_SR2_REGLPS
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 30


  88:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_SR2_FLASHRDY                PWR_SR2_FLASH_RDY
  89:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
  90:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
  91:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
  92:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
  93:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_REGU_VOLTAGE REGU VOLTAGE
  94:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
  95:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
  96:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_CR1_LPR                     PWR_CR1_LPR
  97:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
  98:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
  99:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 100:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 101:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_REGU_VOLTAGE REGU VOLTAGE
 102:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 103:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 104:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_REGU_VOLTAGE_SCALE1         PWR_CR1_VOS_0
 105:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_REGU_VOLTAGE_SCALE2         PWR_CR1_VOS_1
 106:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 107:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 108:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 109:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 110:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_MODE_PWR MODE PWR
 111:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 112:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 113:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_MODE_STOP0                  0x00000000U
 114:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_MODE_STOP1                  PWR_CR1_LPMS_0
 115:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_MODE_STOP2                  PWR_CR1_LPMS_1
 116:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_MODE_STANDBY                (PWR_CR1_LPMS_1 | PWR_CR1_LPMS_0)
 117:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_MODE_SHUTDOWN               PWR_CR1_LPMS_2
 118:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 119:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 120:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 121:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 122:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_CR1_DBP                    PWR_CR1_DBP
 123:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_CR1_FPD_LPSLP              PWR_CR1_FPD_LPSLP
 124:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_CR1_FPD_LPRUN              PWR_CR1_FPD_LPRUN
 125:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_CR1_FPD_STOP               PWR_CR1_FPD_STOP
 126:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 127:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_PVM_VDDUSB_1 Peripheral voltage monitoring
 128:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 129:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 130:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #if defined(USB_DRD_FS)
 131:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVM_VDDUSB_1_2V             PWR_CR2_PVME1             /* Monitoring VDDUSB vs. 1.2V 
 132:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #endif /* USB_DRD_FS */
 133:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVM_VDDA_1_62V              PWR_CR2_PVME3             /* Monitoring VDDA_P vs. 1.62V
 134:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVM_VDDA_2_2V               PWR_CR2_PVME4             /* Monitoring VDDA_P vs. 2.2V 
 135:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 136:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 137:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 138:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 139:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_PVDLEVEL PVDLEVEL
 140:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 141:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 142:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_0       0x00000000U                                       /* VPVD0 around 2
 143:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_1       PWR_CR2_PLS_0                                     /* VPVD1 around 2
 144:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_2       PWR_CR2_PLS_1                                     /* VPVD2 around 2
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 31


 145:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_3       (PWR_CR2_PLS_1 | PWR_CR2_PLS_0)                   /* VPVD3 around 2
 146:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_4       PWR_CR2_PLS_2                                     /* VPVD4 around 2
 147:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_5       (PWR_CR2_PLS_2 | PWR_CR2_PLS_0)                   /* VPVD5 around 2
 148:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_6       (PWR_CR2_PLS_2 | PWR_CR2_PLS_1)                   /* VPVD6 around 2
 149:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_PVDLEVEL_7       (PWR_CR2_PLS_2 | PWR_CR2_PLS_1 | PWR_CR2_PLS_0)   /* External input
 150:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****                                                                                      (Compare inter
 151:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 152:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 153:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 154:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 155:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_WAKEUP WAKEUP
 156:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 157:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 158:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN1                 PWR_CR3_EWUP1
 159:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN2                 PWR_CR3_EWUP2
 160:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN3                 PWR_CR3_EWUP3
 161:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN4                 PWR_CR3_EWUP4
 162:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN5                 PWR_CR3_EWUP5
 163:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_WAKEUP_PIN7                 PWR_CR3_EWUP7
 164:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 165:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 166:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 167:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 168:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_BATT_CHARG_RESISTOR BATT CHARG RESISTOR
 169:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 170:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 171:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_BATT_CHARG_RESISTOR_5K      0U
 172:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_BATT_CHARGRESISTOR_1_5K     PWR_CR4_VBRS
 173:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 174:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 175:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 176:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 177:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_SRAM_CONTENT_RETENTION SRAM CONTENT RETENTION
 178:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 179:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 180:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_NO_SRAM_RETENTION        0U
 181:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_FULL_SRAM_RETENTION      PWR_CR3_RRS
 182:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 183:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 184:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 185:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 186:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_GPIO GPIO
 187:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 188:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 189:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_A                      ((uint32_t)(&(PWR->PUCRA)))
 190:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_B                      ((uint32_t)(&(PWR->PUCRB)))
 191:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_C                      ((uint32_t)(&(PWR->PUCRC)))
 192:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_D                      ((uint32_t)(&(PWR->PUCRD)))
 193:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #if defined (GPIOE)
 194:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_E                      ((uint32_t)(&(PWR->PUCRE)))
 195:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #endif /* GPIOE */
 196:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_F                      ((uint32_t)(&(PWR->PUCRF)))
 197:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 198:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 199:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 200:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 201:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EC_GPIO_BIT GPIO BIT
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 32


 202:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 203:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 204:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_0                  0x00000001U
 205:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_1                  0x00000002U
 206:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_2                  0x00000004U
 207:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_3                  0x00000008U
 208:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_4                  0x00000010U
 209:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_5                  0x00000020U
 210:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_6                  0x00000040U
 211:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_7                  0x00000080U
 212:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_8                  0x00000100U
 213:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_9                  0x00000200U
 214:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_10                 0x00000400U
 215:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_11                 0x00000800U
 216:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_12                 0x00001000U
 217:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_13                 0x00002000U
 218:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_14                 0x00004000U
 219:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_GPIO_BIT_15                 0x00008000U
 220:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 221:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 222:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 223:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 224:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 225:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 226:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 227:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 228:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /* Exported macro ------------------------------------------------------------*/
 229:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_Exported_Macros PWR Exported Macros
 230:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 231:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 232:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 233:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EM_WRITE_READ Common Write and read registers Macros
 234:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 235:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 236:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 237:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 238:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Write a value in PWR register
 239:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  __REG__ Register to be written
 240:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  __VALUE__ Value to be written in the register
 241:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 242:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 243:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_WriteReg(__REG__, __VALUE__) WRITE_REG(PWR->__REG__, (__VALUE__))
 244:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 245:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 246:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Read a value in PWR register
 247:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  __REG__ Register to be read
 248:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval Register value
 249:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 250:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #define LL_PWR_ReadReg(__REG__) READ_REG(PWR->__REG__)
 251:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 252:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 253:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 254:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 255:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 256:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
 257:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 258:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 33


 259:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /* Exported functions --------------------------------------------------------*/
 260:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_Exported_Functions PWR Exported Functions
 261:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 262:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 263:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 264:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EF_Configuration Configuration
 265:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
 266:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 267:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 268:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 269:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Set Low-Power mode
 270:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          LPMS          LL_PWR_SetPowerMode
 271:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  LowPowerMode This parameter can be one of the following values:
 272:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP0
 273:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP1
 274:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP2
 275:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STANDBY
 276:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_SHUTDOWN
 277:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 278:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 279:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
 280:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 281:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 282:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 283:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 284:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 285:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Low-Power mode
 286:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          LPMS          LL_PWR_GetPowerMode
 287:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 288:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP0
 289:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP1
 290:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STOP2
 291:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_STANDBY
 292:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_MODE_SHUTDOWN
 293:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 294:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetPowerMode(void)
 295:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 296:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_LPMS));
 297:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 298:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 299:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 300:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable Flash Pwr Down Mode during Stop
 301:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          FPD_STOP           LL_PWR_EnableFlashPWRDownModeDuringStop
 302:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 303:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 304:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableFlashPWRDownModeDuringStop(void)
 305:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 306:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR1, PWR_CR1_FPD_STOP);
 307:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 308:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 309:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 310:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable Flash Pwr Down Mode during Stop
 311:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          FPD_STOP          LL_PWR_DisableFlashPWRDownModeDuringStop
 312:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 313:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 314:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableFlashPWRDownModeDuringStop(void)
 315:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 34


 316:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR1, PWR_CR1_FPD_STOP);
 317:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 318:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 319:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 320:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if Flash Pwr Down Mode during Stop is enabled
 321:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          FPD_STOP           LL_PWR_IsEnabledFlashPWRDownModeDuringSTOP
 322:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 323:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 324:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledFlashPWRDownModeDuringSTOP(void)
 325:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 326:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR1, PWR_CR1_FPD_STOP) == (PWR_CR1_FPD_STOP)) ? 1UL : 0UL);
 327:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 328:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 329:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 330:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable Flash Pwr Down Mode during LP run
 331:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          FPD_LPRUN           LL_PWR_EnableFlashPWRDownModeDuringLPRun
 332:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 333:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 334:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableFlashPWRDownModeDuringLPRun(void)
 335:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 336:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR1, PWR_CR1_FPD_LPRUN);
 337:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 338:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 339:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 340:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable Flash Pwr Down Mode during LP run
 341:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          FPD_LPRUN          LL_PWR_DisableFlashPWRDownModeDuringLPRun
 342:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 343:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 344:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableFlashPWRDownModeDuringLPRun(void)
 345:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 346:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR1, PWR_CR1_FPD_LPRUN);
 347:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 348:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 349:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 350:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if Flash Pwr Down Mode during LP run is enabled
 351:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          FPD_LPRUN           LL_PWR_IsEnabledFlashPWRDownModeDuringLPRun
 352:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 353:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 354:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledFlashPWRDownModeDuringLPRun(void)
 355:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 356:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR1, PWR_CR1_FPD_LPRUN) == (PWR_CR1_FPD_LPRUN)) ? 1UL : 0UL);
 357:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 358:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 359:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 360:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable Flash Pwr Down Mode during LP Sleep
 361:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          FPD_LPSLP           LL_PWR_EnableFlashPWRDownModeDuringSleeep
 362:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 363:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 364:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableFlashPWRDownModeDuringSleeep(void)
 365:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 366:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR1, PWR_CR1_FPD_LPSLP);
 367:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 368:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 369:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 370:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable Flash Pwr Down Mode during LP Sleep
 371:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          FPD_LPSLP           LL_PWR_DisableFlashPWRDownModeDuringSleeep
 372:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 35


 373:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 374:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableFlashPWRDownModeDuringSleeep(void)
 375:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 376:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR1, PWR_CR1_FPD_LPSLP);
 377:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 378:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 379:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 380:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if Flash Pwr Down Mode is enabled during Sleep
 381:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          FPD_LPSLP           LL_PWR_IsEnabledFlashPWRDownModeDuringSleeep
 382:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 383:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 384:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledFlashPWRDownModeDuringSleeep(void)
 385:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 386:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR1, PWR_CR1_FPD_LPSLP) == (PWR_CR1_FPD_LPSLP)) ? 1UL : 0UL);
 387:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 388:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 389:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 390:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable access to the backup domain
 391:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
 392:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 393:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 394:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
 395:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 396:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR1, PWR_CR1_DBP);
 397:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 398:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 399:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 400:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable access to the backup domain
 401:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          DBP           LL_PWR_DisableBkUpAccess
 402:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 403:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 404:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBkUpAccess(void)
 405:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 406:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 407:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 408:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 409:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 410:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if the backup domain is enabled
 411:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
 412:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 413:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 414:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
 415:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 416:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 417:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 418:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 419:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 420:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Set the main internal regulator output voltage
 421:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          VOS           LL_PWR_SetRegulVoltageScaling
 422:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  VoltageScaling This parameter can be one of the following values:
 423:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
 424:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
 425:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 426:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 427:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
 428:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 429:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 36


 430:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 431:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 432:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 433:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get the main internal regulator output voltage
 434:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          VOS           LL_PWR_GetRegulVoltageScaling
 435:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 436:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
 437:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
 438:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 439:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
 440:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 441:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 442:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 443:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 444:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Switch the regulator from main mode to low-power mode
 445:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_EnableLowPowerRunMode
 446:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 447:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 448:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableLowPowerRunMode(void)
 449:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 450:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR1, PWR_CR1_LPR);
 451:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 452:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 453:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 454:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Switch the regulator from low-power mode to main mode
 455:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_DisableLowPowerRunMode
 456:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 457:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 458:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableLowPowerRunMode(void)
 459:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 460:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 461:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 462:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 463:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**  * @brief  Switch from run main mode to run low-power mode.
 464:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_EnterLowPowerRunMode
 465:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 466:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 467:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnterLowPowerRunMode(void)
 468:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 469:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   LL_PWR_EnableLowPowerRunMode();
 470:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 471:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 472:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 473:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Switch from run main mode to low-power mode.
 474:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_ExitLowPowerRunMode
 475:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 476:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 477:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ExitLowPowerRunMode(void)
 478:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 479:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   LL_PWR_DisableLowPowerRunMode();
 480:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 481:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 482:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 483:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if the regulator is in low-power mode
 484:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR1          LPR           LL_PWR_IsEnabledLowPowerRunMode
 485:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 486:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 37


 487:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledLowPowerRunMode(void)
 488:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 489:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR1, PWR_CR1_LPR) == (PWR_CR1_LPR)) ? 1UL : 0UL);
 490:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 491:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 492:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 493:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable Power Voltage Detector
 494:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          PVDE          LL_PWR_EnablePVD
 495:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 496:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 497:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnablePVD(void)
 498:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 499:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 500:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 501:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 502:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 503:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable Power Voltage Detector
 504:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          PVDE          LL_PWR_DisablePVD
 505:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 506:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 507:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisablePVD(void)
 508:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 509:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 510:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 511:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 512:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 513:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if Power Voltage Detector is enabled
 514:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          PVDE          LL_PWR_IsEnabledPVD
 515:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 516:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 517:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledPVD(void)
 518:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 519:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR2, PWR_CR2_PVDE) == (PWR_CR2_PVDE)) ? 1UL : 0UL);
 520:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 521:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 522:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 523:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Configure the voltage threshold detected by the Power Voltage Detector
 524:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          PLS           LL_PWR_SetPVDLevel
 525:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  PVDLevel This parameter can be one of the following values:
 526:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_0
 527:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_1
 528:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_2
 529:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_3
 530:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_4
 531:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_5
 532:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_6
 533:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_7
 534:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 535:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 536:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetPVDLevel(uint32_t PVDLevel)
 537:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 538:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   MODIFY_REG(PWR->CR2, PWR_CR2_PLS, PVDLevel);
 539:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 540:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 541:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 542:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get the voltage threshold detection
 543:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          PLS           LL_PWR_GetPVDLevel
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 38


 544:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 545:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_0
 546:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_1
 547:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_2
 548:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_3
 549:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_4
 550:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_5
 551:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_6
 552:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVDLEVEL_7
 553:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 554:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetPVDLevel(void)
 555:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 556:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR2, PWR_CR2_PLS));
 557:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 558:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 559:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 560:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable the Power Voltage Monitoring on a peripheral
 561:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          PVME1         LL_PWR_EnablePVM\n
 562:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR2          PVME2         LL_PWR_EnablePVM\n
 563:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR2          PVME3         LL_PWR_EnablePVM\n
 564:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  PeriphVoltage This parameter can be one of the following values:
 565:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDUSB_1_2V (*)
 566:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_1_62V
 567:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_2_2V
 568:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *
 569:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         (*) value not defined in all devices
 570:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 571:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 572:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnablePVM(uint32_t PeriphVoltage)
 573:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 574:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR2, PeriphVoltage);
 575:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 576:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 577:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 578:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable the Power Voltage Monitoring on a peripheral
 579:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          PVME1         LL_PWR_DisablePVM\n
 580:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR2          PVME2         LL_PWR_DisablePVM\n
 581:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR2          PVME3         LL_PWR_DisablePVM\n
 582:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  PeriphVoltage This parameter can be one of the following values:
 583:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDUSB_1_2V (*)
 584:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_1_62V
 585:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_2_2V
 586:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *
 587:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         (*) value not defined in all devices
 588:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 589:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 590:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisablePVM(uint32_t PeriphVoltage)
 591:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 592:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR2, PeriphVoltage);
 593:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 594:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 595:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 596:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if Power Voltage Monitoring is enabled on a peripheral
 597:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          PVME1         LL_PWR_IsEnabledPVM\n
 598:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR2          PVME2         LL_PWR_IsEnabledPVM\n
 599:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR2          PVME3         LL_PWR_IsEnabledPVM\n
 600:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  PeriphVoltage This parameter can be one of the following values:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 39


 601:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDUSB_1_2V (*)
 602:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_1_62V
 603:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_PVM_VDDA_2_2V
 604:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *
 605:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         (*) value not defined in all devices
 606:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 607:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 608:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledPVM(uint32_t PeriphVoltage)
 609:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 610:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR2, PeriphVoltage) == (PeriphVoltage)) ? 1UL : 0UL);
 611:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 612:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 613:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #if defined(USB_DRD_FS)
 614:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 615:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable VDDUSB supply
 616:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          USV           LL_PWR_EnableVddUSB
 617:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 618:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 619:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableVddUSB(void)
 620:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 621:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR2, PWR_CR2_USV);
 622:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 623:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 624:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 625:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable VDDUSB supply
 626:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          USV           LL_PWR_DisableVddUSB
 627:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 628:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 629:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableVddUSB(void)
 630:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 631:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 632:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 633:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 634:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 635:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if VDDUSB supply is enabled
 636:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR2          USV           LL_PWR_IsEnabledVddUSB
 637:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 638:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 639:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledVddUSB(void)
 640:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 641:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR2, PWR_CR2_USV) == (PWR_CR2_USV)) ? 1UL : 0UL);
 642:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 643:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #endif /* USB_DRD_FS */
 644:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 645:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 646:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable the WakeUp PINx functionality
 647:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          EWUP1         LL_PWR_EnableWakeUpPin\n
 648:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP2         LL_PWR_EnableWakeUpPin\n
 649:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP3         LL_PWR_EnableWakeUpPin\n
 650:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP4         LL_PWR_EnableWakeUpPin\n
 651:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP5         LL_PWR_EnableWakeUpPin\n
 652:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP7         LL_PWR_EnableWakeUpPin\n
 653:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 654:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 655:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 656:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 657:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN4
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 40


 658:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN5
 659:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN7
 660:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 661:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 662:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
 663:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 664:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR3, WakeUpPin);
 665:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 666:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 667:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 668:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable the WakeUp PINx functionality
 669:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          EWUP1         LL_PWR_DisableWakeUpPin\n
 670:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP2         LL_PWR_DisableWakeUpPin\n
 671:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP3         LL_PWR_DisableWakeUpPin\n
 672:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP4         LL_PWR_DisableWakeUpPin\n
 673:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP5         LL_PWR_DisableWakeUpPin\n
 674:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP7         LL_PWR_DisableWakeUpPin\n
 675:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 676:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 677:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 678:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 679:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN4
 680:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN5
 681:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN7
 682:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 683:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 684:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
 685:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 686:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, WakeUpPin);
 687:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 688:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 689:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 690:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if the WakeUp PINx functionality is enabled
 691:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          EWUP1         LL_PWR_IsEnabledWakeUpPin\n
 692:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP2         LL_PWR_IsEnabledWakeUpPin\n
 693:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP3         LL_PWR_IsEnabledWakeUpPin\n
 694:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP4         LL_PWR_IsEnabledWakeUpPin\n
 695:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP5         LL_PWR_IsEnabledWakeUpPin\n
 696:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR3          EWUP7         LL_PWR_IsEnabledWakeUpPin\n
 697:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 698:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 699:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 700:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 701:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN4
 702:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN5
 703:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN7
 704:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 705:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 706:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledWakeUpPin(uint32_t WakeUpPin)
 707:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 708:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, WakeUpPin) == (WakeUpPin)) ? 1UL : 0UL);
 709:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 710:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 711:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 712:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable SRAM full content retention in Standby mode
 713:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          RRS           LL_PWR_EnableSRAMRetention
 714:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 41


 715:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 716:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableSRAMRetention(void)
 717:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 718:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   MODIFY_REG(PWR->CR3, PWR_CR3_RRS, LL_PWR_FULL_SRAM_RETENTION);
 719:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 720:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 721:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 722:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable SRAM content retention in Standby mode
 723:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          RRS           LL_PWR_DisableSRAMRetention
 724:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 725:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 726:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableSRAMRetention(void)
 727:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 728:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 729:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 730:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 731:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 732:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if SRAM full content retention in Standby mode is enabled
 733:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          RRS           LL_PWR_IsEnabledSRAMRetention
 734:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 735:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 736:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledSRAMRetention(void)
 737:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 738:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_RRS) == (LL_PWR_FULL_SRAM_RETENTION)) ? 1UL : 0UL);
 739:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 740:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 741:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 742:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Set SRAM content retention in Standby mode
 743:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          RRS          LL_PWR_SetSRAMContentRetention
 744:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  SRAMSize This parameter can be one of the following values:
 745:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_NO_SRAM_RETENTION
 746:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_FULL_SRAM_RETENTION
 747:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @note  Setting LL_PWR_NO_SRAM_RETENTION is same as calling LL_PWR_DisableSRAMRetention()
 748:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @note  Setting LL_PWR_FULL_SRAM_RETENTION is same as calling LL_PWR_EnableSRAMRetention()
 749:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 750:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 751:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetSRAMContentRetention(uint32_t SRAMSize)
 752:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 753:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   MODIFY_REG(PWR->CR3, PWR_CR3_RRS, SRAMSize);
 754:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 755:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 756:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 757:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get SRAM content retention in Standby mode
 758:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          RRS          LL_PWR_GetSRAMContentRetention
 759:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 760:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_NO_SRAM_RETENTION
 761:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_FULL_SRAM_RETENTION
 762:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 763:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetSRAMContentRetention(void)
 764:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 765:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR3, PWR_CR3_RRS));
 766:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 767:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 768:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 769:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable Ultra Low Power BORL, BORH and PVD for STOP2 and Standby modes
 770:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          ENULP        LL_PWR_EnableBORPVD_ULP
 771:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 42


 772:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 773:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBORPVD_ULP(void)
 774:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 775:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_ENULP);
 776:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 777:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 778:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 779:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable Ultra Low Power BORL, BORH and PVD for STOP2 and Standby modes
 780:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          ENULP        LL_PWR_DisableBORPVD_ULP
 781:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 782:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 783:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBORPVD_ULP(void)
 784:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 785:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_ENULP);
 786:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 787:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 788:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 789:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if Ultra Low Power BORL, BORH and PVD for STOP2 and Standby modes is enabled
 790:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          ENULP        LL_PWR_IsEnabledBORPVD_ULP
 791:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 792:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 793:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBORPVD_ULP(void)
 794:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 795:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_ENULP) == (PWR_CR3_ENULP)) ? 1UL : 0UL);
 796:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 797:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 798:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 799:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable pull-up and pull-down configuration
 800:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          APC           LL_PWR_EnablePUPDCfg
 801:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 802:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 803:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnablePUPDCfg(void)
 804:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 805:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_APC);
 806:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 807:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 808:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 809:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable pull-up and pull-down configuration
 810:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          APC           LL_PWR_DisablePUPDCfg
 811:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 812:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 813:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisablePUPDCfg(void)
 814:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 815:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 816:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 817:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 818:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 819:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if pull-up and pull-down configuration is enabled
 820:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          APC           LL_PWR_IsEnabledPUPDCfg
 821:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 822:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 823:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledPUPDCfg(void)
 824:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 825:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_APC) == (PWR_CR3_APC)) ? 1UL : 0UL);
 826:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 827:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 828:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 43


 829:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable Internal Wake-up line
 830:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          EIWUL          LL_PWR_EnableInternWU
 831:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 832:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 833:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableInternWU(void)
 834:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 835:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR3, PWR_CR3_EIWUL);
 836:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 837:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 838:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 839:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable Internal Wake-up line
 840:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          EIWUL          LL_PWR_DisableInternWU
 841:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 842:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 843:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableInternWU(void)
 844:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 845:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR3, PWR_CR3_EIWUL);
 846:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 847:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 848:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 849:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if Internal Wake-up line is enabled
 850:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR3          EIWUL          LL_PWR_IsEnabledInternWU
 851:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 852:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 853:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledInternWU(void)
 854:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 855:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR3, PWR_CR3_EIWUL) == (PWR_CR3_EIWUL)) ? 1UL : 0UL);
 856:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 857:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 858:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 859:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Set the Wake-Up pin polarity low for the event detection
 860:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR4          WP1           LL_PWR_SetWakeUpPinPolarityLow\n
 861:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP2           LL_PWR_SetWakeUpPinPolarityLow\n
 862:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP3           LL_PWR_SetWakeUpPinPolarityLow\n
 863:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP4           LL_PWR_SetWakeUpPinPolarityLow\n
 864:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP5           LL_PWR_SetWakeUpPinPolarityLow\n
 865:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP7           LL_PWR_SetWakeUpPinPolarityLow
 866:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 867:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 868:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 869:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 870:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN4
 871:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN5
 872:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN7
 873:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 874:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 875:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityLow(uint32_t WakeUpPin)
 876:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 877:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR4, WakeUpPin);
 878:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 879:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 880:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 881:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Set the Wake-Up pin polarity high for the event detection
 882:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR4          WP1           LL_PWR_SetWakeUpPinPolarityHigh\n
 883:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP2           LL_PWR_SetWakeUpPinPolarityHigh\n
 884:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP3           LL_PWR_SetWakeUpPinPolarityHigh\n
 885:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP4           LL_PWR_SetWakeUpPinPolarityHigh\n
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 44


 886:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP5           LL_PWR_SetWakeUpPinPolarityHigh\n
 887:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP7           LL_PWR_SetWakeUpPinPolarityHigh\n
 888:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 889:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 890:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 891:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 892:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN4
 893:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN5
 894:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN7
 895:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 896:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 897:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetWakeUpPinPolarityHigh(uint32_t WakeUpPin)
 898:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 899:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR4, WakeUpPin);
 900:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 901:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 902:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 903:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get the Wake-Up pin polarity for the event detection
 904:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR4          WP1           LL_PWR_IsWakeUpPinPolarityLow\n
 905:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP2           LL_PWR_IsWakeUpPinPolarityLow\n
 906:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP3           LL_PWR_IsWakeUpPinPolarityLow\n
 907:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP4           LL_PWR_IsWakeUpPinPolarityLow\n
 908:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP5           LL_PWR_IsWakeUpPinPolarityLow\n
 909:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         CR4          WP7           LL_PWR_IsWakeUpPinPolarityLow\n
 910:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  WakeUpPin This parameter can be one of the following values:
 911:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN1
 912:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN2
 913:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN3
 914:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN4
 915:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN5
 916:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_WAKEUP_PIN7
 917:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 918:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 919:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsWakeUpPinPolarityLow(uint32_t WakeUpPin)
 920:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 921:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR4, WakeUpPin) == (WakeUpPin)) ? 1UL : 0UL);
 922:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 923:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 924:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 925:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable battery charging
 926:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR4          VBE           LL_PWR_EnableBatteryCharging
 927:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 928:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 929:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableBatteryCharging(void)
 930:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 931:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(PWR->CR4, PWR_CR4_VBE);
 932:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 933:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 934:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 935:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable battery charging
 936:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR4          VBE           LL_PWR_DisableBatteryCharging
 937:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 938:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 939:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableBatteryCharging(void)
 940:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 941:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 942:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 45


 943:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 944:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 945:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if battery charging is enabled
 946:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR4          VBE           LL_PWR_IsEnabledBatteryCharging
 947:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
 948:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 949:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledBatteryCharging(void)
 950:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 951:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->CR4, PWR_CR4_VBE) == (PWR_CR4_VBE)) ? 1UL : 0UL);
 952:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 953:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 954:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 955:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Set the resistor impedance
 956:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR4          VBRS          LL_PWR_SetBattChargResistor
 957:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  Resistor This parameter can be one of the following values:
 958:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARG_RESISTOR_5K
 959:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARGRESISTOR_1_5K
 960:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
 961:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 962:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_SetBattChargResistor(uint32_t Resistor)
 963:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 964:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, Resistor);
 965:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 966:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 967:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 968:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get the resistor impedance
 969:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll CR4          VBRS          LL_PWR_GetBattChargResistor
 970:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval Returned value can be one of the following values:
 971:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARG_RESISTOR_5K
 972:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_BATT_CHARGRESISTOR_1_5K
 973:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
 974:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_GetBattChargResistor(void)
 975:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
 976:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return (uint32_t)(READ_BIT(PWR->CR4, PWR_CR4_VBRS));
 977:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
 978:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
 979:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
 980:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable GPIO pull-up state in Standby and Shutdown modes
 981:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll PUCRA        PU0-15        LL_PWR_EnableGPIOPullUp\n
 982:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_EnableGPIOPullUp\n
 983:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_EnableGPIOPullUp\n
 984:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRD        PU0-13        LL_PWR_EnableGPIOPullUp\n
 985:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRE        PU3,PU7-9     LL_PWR_EnableGPIOPullUp\n
 986:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRF        PU0-3         LL_PWR_EnableGPIOPullUp\n
 987:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
 988:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
 989:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
 990:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
 991:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_D
 992:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_E
 993:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_F
 994:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
 995:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
 996:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
 997:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
 998:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
 999:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 46


1000:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1001:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1002:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1003:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1004:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1005:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1006:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1007:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1008:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1009:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1010:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1011:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1012:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1013:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
1014:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1015:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
1016:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1017:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1018:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1019:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable GPIO pull-up state in Standby and Shutdown modes
1020:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll PUCRA        PU0-15        LL_PWR_DisableGPIOPullUp\n
1021:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_EnableGPIOPullUp\n
1022:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_EnableGPIOPullUp\n
1023:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRD        PU0-13        LL_PWR_EnableGPIOPullUp\n
1024:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRE        PU3,PU7-9     LL_PWR_EnableGPIOPullUp\n
1025:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRF        PU0-3         LL_PWR_EnableGPIOPullUp\n
1026:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1027:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1028:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1029:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1030:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_D
1031:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_E
1032:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_F
1033:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1034:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1035:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1036:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1037:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1038:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1039:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1040:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1041:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1042:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1043:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1044:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1045:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1046:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1047:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1048:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1049:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1050:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1051:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1052:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
1053:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1054:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
1055:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1056:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 47


1057:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1058:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if GPIO pull-up state is enabled
1059:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll PUCRA        PU0-15        LL_PWR_IsEnabledGPIOPullUp\n
1060:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_EnableGPIOPullUp\n
1061:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_EnableGPIOPullUp\n
1062:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRD        PU0-13        LL_PWR_EnableGPIOPullUp\n
1063:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRE        PU3,PU7-9     LL_PWR_EnableGPIOPullUp\n
1064:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRF        PU0-3         LL_PWR_EnableGPIOPullUp\n
1065:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1066:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1067:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1068:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1069:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_D
1070:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_E
1071:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_F
1072:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1073:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1074:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1075:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1076:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1077:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1078:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1079:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1080:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1081:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1082:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1083:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1084:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1085:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1086:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1087:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1088:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1089:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1090:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1091:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
1092:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1093:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(*((__IO uint32_t *)GPIO), GPIONumber) == (GPIONumber)) ? 1UL : 0UL);
1094:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1095:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1096:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1097:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Enable GPIO pull-down state in Standby and Shutdown modes
1098:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll PDCRA        PD0-15        LL_PWR_EnableGPIOPullDown\n
1099:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_EnableGPIOPullUp\n
1100:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_EnableGPIOPullUp\n
1101:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRD        PU0-13        LL_PWR_EnableGPIOPullUp\n
1102:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRE        PU3,PU7-9     LL_PWR_EnableGPIOPullUp\n
1103:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRF        PU0-3         LL_PWR_EnableGPIOPullUp\n
1104:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1105:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1106:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1107:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1108:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_D
1109:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_E
1110:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_F
1111:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1112:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1113:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 48


1114:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1115:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1116:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1117:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1118:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1119:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1120:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1121:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1122:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1123:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1124:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1125:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1126:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1127:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1128:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1129:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1130:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
1131:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1132:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   SET_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
1133:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1134:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1135:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1136:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Disable GPIO pull-down state in Standby and Shutdown modes
1137:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll PDCRA        PD0-15        LL_PWR_DisableGPIOPullDown\n
1138:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_EnableGPIOPullUp\n
1139:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_EnableGPIOPullUp\n
1140:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRD        PU0-13        LL_PWR_EnableGPIOPullUp\n
1141:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRE        PU3,PU7-9     LL_PWR_EnableGPIOPullUp\n
1142:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRF        PU0-3         LL_PWR_EnableGPIOPullUp\n
1143:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1144:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1145:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1146:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1147:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_D
1148:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_E
1149:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_F
1150:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1151:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1152:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1153:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1154:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1155:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1156:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1157:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1158:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1159:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1160:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1161:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1162:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1163:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1164:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1165:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1166:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1167:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1168:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1169:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
1170:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 49


1171:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber);
1172:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1173:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1174:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1175:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Check if GPIO pull-down state is enabled
1176:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll PDCRA        PD0-15        LL_PWR_IsEnabledGPIOPullDown\n
1177:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRB        PU0-15        LL_PWR_EnableGPIOPullUp\n
1178:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRC        PU0-15        LL_PWR_EnableGPIOPullUp\n
1179:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRD        PU0-13        LL_PWR_EnableGPIOPullUp\n
1180:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRE        PU3,PU7-9     LL_PWR_EnableGPIOPullUp\n
1181:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         PUCRF        PU0-3         LL_PWR_EnableGPIOPullUp\n
1182:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIO This parameter can be one of the following values:
1183:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_A
1184:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_B
1185:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_C
1186:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_D
1187:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_E
1188:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_F
1189:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @param  GPIONumber This parameter can be one of the following values:
1190:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_0
1191:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_1
1192:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_2
1193:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_3
1194:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_4
1195:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_5
1196:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_6
1197:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_7
1198:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_8
1199:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_9
1200:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_10
1201:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_11
1202:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_12
1203:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_13
1204:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_14
1205:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         @arg @ref LL_PWR_GPIO_BIT_15
1206:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1207:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1208:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsEnabledGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
1209:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1210:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(*((__IO uint32_t *)(GPIO + 4U)), GPIONumber) == (GPIONumber)) ? 1UL : 0UL);
1211:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1212:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1213:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @}
1214:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1215:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1216:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /** @defgroup PWR_LL_EF_FLAG_Management FLAG_Management
1217:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @{
1218:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1219:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1220:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1221:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Wake-up Flag 1
1222:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          WUF1          LL_PWR_IsActiveFlag_WU1
1223:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1224:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1225:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU1(void)
1226:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1227:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF1) == (PWR_SR1_WUF1)) ? 1UL : 0UL);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 50


1228:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1229:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1230:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1231:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Wake-up Flag 2
1232:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          WUF2          LL_PWR_IsActiveFlag_WU2
1233:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1234:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1235:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU2(void)
1236:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1237:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF2) == (PWR_SR1_WUF2)) ? 1UL : 0UL);
1238:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1239:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1240:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1241:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Wake-up Flag 3
1242:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          WUF3          LL_PWR_IsActiveFlag_WU3
1243:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1244:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1245:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU3(void)
1246:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1247:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF3) == (PWR_SR1_WUF3)) ? 1UL : 0UL);
1248:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1249:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1250:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1251:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Wake-up Flag 4
1252:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          WUF4          LL_PWR_IsActiveFlag_WU4
1253:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1254:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1255:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU4(void)
1256:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1257:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF4) == (PWR_SR1_WUF4)) ? 1UL : 0UL);
1258:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1259:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1260:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1261:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Wake-up Flag 5
1262:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          WUF5          LL_PWR_IsActiveFlag_WU5
1263:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1264:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1265:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU5(void)
1266:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1267:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF5) == (PWR_SR1_WUF5)) ? 1UL : 0UL);
1268:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1269:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1270:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1271:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Wake-up Flag 7
1272:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          WUF7          LL_PWR_IsActiveFlag_WU7
1273:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1274:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1275:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_WU7(void)
1276:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1277:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUF7) == (PWR_SR1_WUF7)) ? 1UL : 0UL);
1278:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1279:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1280:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1281:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Stand-By Flag
1282:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          SBF           LL_PWR_IsActiveFlag_SB
1283:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1284:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 51


1285:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_SB(void)
1286:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1287:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_SBF) == (PWR_SR1_SBF)) ? 1UL : 0UL);
1288:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1289:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1290:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1291:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Stop Flag
1292:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          STOPF 0          LL_PWR_IsActiveFlag_Stop
1293:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1294:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1295:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_Stop0(void)
1296:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1297:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, LL_PWR_SR1_STOP0) == (LL_PWR_SR1_STOP0)) ? 1UL : 0UL);
1298:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1299:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1300:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1301:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Stop Flag
1302:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          STOPF 1         LL_PWR_IsActiveFlag_Stop
1303:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1304:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1305:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_Stop1(void)
1306:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1307:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, LL_PWR_SR1_STOP1) == (LL_PWR_SR1_STOP1)) ? 1UL : 0UL);
1308:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1309:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1310:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Stop Flag
1311:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          STOPF 2          LL_PWR_IsActiveFlag_Stop
1312:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1313:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1314:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_Stop2(void)
1315:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1316:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, LL_PWR_SR1_STOP2) == (LL_PWR_SR1_STOP2)) ? 1UL : 0UL);
1317:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1318:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1319:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1320:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Get Internal Wake-up line Flag
1321:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR1          WUFI          LL_PWR_IsActiveFlag_InternWU
1322:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1323:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1324:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_InternWU(void)
1325:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1326:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR1, PWR_SR1_WUFI) == (PWR_SR1_WUFI)) ? 1UL : 0UL);
1327:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1328:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1329:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1330:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Indicate whether or not the flash is ready
1331:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR2          FLASH_RDY        LL_PWR_IsActiveFlag_FLASH_RDY
1332:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1333:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1334:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_FLASH_RDY(void)
1335:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1336:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_FLASH_RDY) == (PWR_SR2_FLASH_RDY)) ? 1UL : 0UL);
1337:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1338:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1339:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1340:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Indicate whether or not the low-power regulator is ready
1341:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR2          REGLPS        LL_PWR_IsActiveFlag_REGLPS
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 52


1342:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1343:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1344:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGLPS(void)
1345:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1346:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_REGLPS) == (PWR_SR2_REGLPS)) ? 1UL : 0UL);
1347:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1348:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1349:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1350:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Indicate whether the regulator is ready in main mode or is in low-power mode
1351:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @note   Take care, return value "0" means the regulator is ready. Return value "1" means the ou
1352:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         is still changing.
1353:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR2          REGLPF        LL_PWR_IsActiveFlag_REGLPF
1354:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1355:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1356:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_REGLPF(void)
1357:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1358:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_REGLPF) == (PWR_SR2_REGLPF)) ? 1UL : 0UL);
1359:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1360:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1361:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1362:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output 
1363:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   *         still changing to the required voltage level
1364:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
1365:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1366:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1367:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
1368:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1369:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
1370:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1371:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1372:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1373:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Indicate whether VDD voltage is below or above the selected PVD threshold
1374:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR2          PVDO          LL_PWR_IsActiveFlag_PVDO
1375:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1376:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1377:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_PVDO(void)
1378:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1379:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_PVDO) == (PWR_SR2_PVDO)) ? 1UL : 0UL);
1380:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1381:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1382:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #if defined(USB_DRD_FS)
1383:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1384:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Indicate whether VDDUSB voltage is below or above PVMO1 threshold
1385:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR2          PVMO1         LL_PWR_IsActiveFlag_PVMO_1
1386:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1387:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1388:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_PVMO_1(void)
1389:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1390:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_PVMO1) == (PWR_SR2_PVMO1)) ? 1UL : 0UL);
1391:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1392:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** #endif /* USB_DRD_FS */
1393:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1394:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1395:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Indicate whether VDDA ADC voltage is below or above PVMO3 threshold
1396:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR2          PVMO3         LL_PWR_IsActiveFlag_PVMO_3
1397:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1398:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 53


1399:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_PVMO_3(void)
1400:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1401:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_PVMO3) == (PWR_SR2_PVMO3)) ? 1UL : 0UL);
1402:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1403:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1404:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1405:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Indicate whether VDDA voltage is below or above PVMO4 threshold
1406:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SR2          PVMO4         LL_PWR_IsActiveFlag_PVMO_4
1407:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval State of bit (1 or 0).
1408:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1409:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_PVMO_4(void)
1410:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1411:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   return ((READ_BIT(PWR->SR2, PWR_SR2_PVMO4) == (PWR_SR2_PVMO4)) ? 1UL : 0UL);
1412:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1413:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1414:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1415:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 1
1416:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SCR          CWUF1         LL_PWR_ClearFlag_WU1
1417:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1418:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1419:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU1(void)
1420:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1421:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF1);
1422:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1423:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1424:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1425:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 2
1426:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SCR          CWUF2         LL_PWR_ClearFlag_WU2
1427:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1428:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1429:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU2(void)
1430:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1431:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF2);
1432:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1433:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1434:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1435:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 3
1436:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SCR          CWUF3         LL_PWR_ClearFlag_WU3
1437:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1438:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1439:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU3(void)
1440:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1441:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF3);
1442:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1443:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1444:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1445:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 4
1446:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SCR          CWUF4         LL_PWR_ClearFlag_WU4
1447:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1448:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1449:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU4(void)
1450:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1451:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF4);
1452:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1453:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1454:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1455:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 5
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 54


1456:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SCR          CWUF5         LL_PWR_ClearFlag_WU5
1457:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1458:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1459:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU5(void)
1460:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1461:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF5);
1462:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1463:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1464:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1465:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Clear Wake-up Flag 7
1466:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SCR          CWUF7         LL_PWR_ClearFlag_WU7
1467:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1468:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1469:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_WU7(void)
1470:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1471:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CWUF7);
1472:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** }
1473:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** 
1474:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** /**
1475:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @brief  Clear standby and stop Flags
1476:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @rmtoll SCR          CSBF          LL_PWR_ClearFlag_CSB
1477:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   * @retval None
1478:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   */
1479:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** __STATIC_INLINE void LL_PWR_ClearFlag_CSB(void)
 109              		.loc 4 1479 22 view .LVU14
 110              	.LBB17:
1480:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h **** {
1481:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_pwr.h ****   WRITE_REG(PWR->SCR, PWR_SCR_CSBF);
 111              		.loc 4 1481 3 view .LVU15
 112 0002 054B     		ldr	r3, .L6
 113 0004 8022     		movs	r2, #128
 114 0006 5200     		lsls	r2, r2, #1
 115 0008 9A61     		str	r2, [r3, #24]
 116              	.LBE17:
 117              	.LBE16:
 192:Core/Src/main.c ****   // printf(" *** timeout_reset:  %s    %d\n", func, line);
 193:Core/Src/main.c ****   HAL_Delay(1000);
 118              		.loc 1 193 3 view .LVU16
 119 000a FA20     		movs	r0, #250
 120 000c 8000     		lsls	r0, r0, #2
 121 000e FFF7FEFF 		bl	HAL_Delay
 122              	.LVL0:
 194:Core/Src/main.c ****   NVIC_SystemReset();
 123              		.loc 1 194 3 view .LVU17
 124 0012 FFF7FEFF 		bl	__NVIC_SystemReset
 125              	.LVL1:
 126              	.L7:
 127 0016 C046     		.align	2
 128              	.L6:
 129 0018 00700040 		.word	1073770496
 130              		.cfi_endproc
 131              	.LFE503:
 133              		.section	.rodata.print_error.str1.4,"aMS",%progbits,1
 134              		.align	2
 135              	.LC0:
 136 0000 202A2A2A 		.ascii	" *** Error:  %s ,   %d\012\000"
 136      20457272 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 55


 136      6F723A20 
 136      20257320 
 136      2C202020 
 137              		.section	.text.print_error,"ax",%progbits
 138              		.align	1
 139              		.global	print_error
 140              		.syntax unified
 141              		.code	16
 142              		.thumb_func
 144              	print_error:
 145              	.LVL2:
 146              	.LFB502:
 183:Core/Src/main.c ****   printf(" *** Error:  %s ,   %d\n", func, line);
 147              		.loc 1 183 1 view -0
 148              		.cfi_startproc
 149              		@ Volatile: function does not return.
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 183:Core/Src/main.c ****   printf(" *** Error:  %s ,   %d\n", func, line);
 152              		.loc 1 183 1 is_stmt 0 view .LVU19
 153 0000 10B5     		push	{r4, lr}
 154              	.LCFI1:
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 4, -8
 157              		.cfi_offset 14, -4
 158 0002 0A00     		movs	r2, r1
 184:Core/Src/main.c ****   HAL_Delay(1000);
 159              		.loc 1 184 3 is_stmt 1 view .LVU20
 160 0004 054B     		ldr	r3, .L9
 161 0006 0100     		movs	r1, r0
 162              	.LVL3:
 184:Core/Src/main.c ****   HAL_Delay(1000);
 163              		.loc 1 184 3 is_stmt 0 view .LVU21
 164 0008 1800     		movs	r0, r3
 165              	.LVL4:
 184:Core/Src/main.c ****   HAL_Delay(1000);
 166              		.loc 1 184 3 view .LVU22
 167 000a FFF7FEFF 		bl	printf_
 168              	.LVL5:
 185:Core/Src/main.c ****   timeout_reset();
 169              		.loc 1 185 3 is_stmt 1 view .LVU23
 170 000e FA20     		movs	r0, #250
 171 0010 8000     		lsls	r0, r0, #2
 172 0012 FFF7FEFF 		bl	HAL_Delay
 173              	.LVL6:
 186:Core/Src/main.c **** }
 174              		.loc 1 186 3 view .LVU24
 175 0016 FFF7FEFF 		bl	timeout_reset
 176              	.LVL7:
 177              	.L10:
 178 001a C046     		.align	2
 179              	.L9:
 180 001c 00000000 		.word	.LC0
 181              		.cfi_endproc
 182              	.LFE502:
 184              		.section	.text.Error_Handler,"ax",%progbits
 185              		.align	1
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 56


 186              		.global	Error_Handler
 187              		.syntax unified
 188              		.code	16
 189              		.thumb_func
 191              	Error_Handler:
 192              	.LFB504:
 195:Core/Src/main.c **** }
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** /* USER CODE END 4 */
 198:Core/Src/main.c **** 
 199:Core/Src/main.c **** /**
 200:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 201:Core/Src/main.c ****  * @retval None
 202:Core/Src/main.c ****  */
 203:Core/Src/main.c **** void Error_Handler(void)
 204:Core/Src/main.c **** {
 193              		.loc 1 204 1 view -0
 194              		.cfi_startproc
 195              		@ Volatile: function does not return.
 196              		@ args = 0, pretend = 0, frame = 0
 197              		@ frame_needed = 0, uses_anonymous_args = 0
 198              		@ link register save eliminated.
 205:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 206:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 207:Core/Src/main.c ****   __disable_irq();
 199              		.loc 1 207 3 view .LVU26
 200              	.LBB18:
 201              	.LBI18:
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 57


 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 58


 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 59


 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 60


 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 61


 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 62


 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 63


 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 64


 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 65


 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 66


 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 67


 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 68


 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 202              		.loc 3 960 27 view .LVU27
 203              	.LBB19:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 204              		.loc 3 962 3 view .LVU28
 205              		.syntax divided
 206              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 207 0000 72B6     		cpsid i
 208              	@ 0 "" 2
 209              		.thumb
 210              		.syntax unified
 211              	.L12:
 212              	.LBE19:
 213              	.LBE18:
 208:Core/Src/main.c ****   while (1)
 214              		.loc 1 208 3 discriminator 1 view .LVU29
 209:Core/Src/main.c ****   {
 210:Core/Src/main.c ****   }
 215              		.loc 1 210 3 discriminator 1 view .LVU30
 208:Core/Src/main.c ****   while (1)
 216              		.loc 1 208 9 discriminator 1 view .LVU31
 217 0002 FEE7     		b	.L12
 218              		.cfi_endproc
 219              	.LFE504:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 69


 221              		.section	.text.SystemClock_Config,"ax",%progbits
 222              		.align	1
 223              		.global	SystemClock_Config
 224              		.syntax unified
 225              		.code	16
 226              		.thumb_func
 228              	SystemClock_Config:
 229              	.LFB501:
 146:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 230              		.loc 1 146 1 view -0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 96
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234 0000 00B5     		push	{lr}
 235              	.LCFI2:
 236              		.cfi_def_cfa_offset 4
 237              		.cfi_offset 14, -4
 238 0002 99B0     		sub	sp, sp, #100
 239              	.LCFI3:
 240              		.cfi_def_cfa_offset 104
 147:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 241              		.loc 1 147 3 view .LVU33
 147:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 242              		.loc 1 147 22 is_stmt 0 view .LVU34
 243 0004 4C22     		movs	r2, #76
 244 0006 0021     		movs	r1, #0
 245 0008 05A8     		add	r0, sp, #20
 246 000a FFF7FEFF 		bl	memset
 247              	.LVL8:
 148:Core/Src/main.c **** 
 248              		.loc 1 148 3 is_stmt 1 view .LVU35
 148:Core/Src/main.c **** 
 249              		.loc 1 148 22 is_stmt 0 view .LVU36
 250 000e 1022     		movs	r2, #16
 251 0010 0021     		movs	r1, #0
 252 0012 01A8     		add	r0, sp, #4
 253 0014 FFF7FEFF 		bl	memset
 254              	.LVL9:
 152:Core/Src/main.c **** 
 255              		.loc 1 152 3 is_stmt 1 view .LVU37
 256 0018 8020     		movs	r0, #128
 257 001a C000     		lsls	r0, r0, #3
 258 001c FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 259              	.LVL10:
 157:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 260              		.loc 1 157 3 view .LVU38
 157:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 261              		.loc 1 157 36 is_stmt 0 view .LVU39
 262 0020 0A23     		movs	r3, #10
 263 0022 0593     		str	r3, [sp, #20]
 158:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 264              		.loc 1 158 3 is_stmt 1 view .LVU40
 158:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 265              		.loc 1 158 30 is_stmt 0 view .LVU41
 266 0024 F633     		adds	r3, r3, #246
 267 0026 0893     		str	r3, [sp, #32]
 159:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 70


 268              		.loc 1 159 3 is_stmt 1 view .LVU42
 159:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 269              		.loc 1 159 41 is_stmt 0 view .LVU43
 270 0028 C03B     		subs	r3, r3, #192
 271 002a 0993     		str	r3, [sp, #36]
 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 272              		.loc 1 160 3 is_stmt 1 view .LVU44
 160:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 273              		.loc 1 160 30 is_stmt 0 view .LVU45
 274 002c 3F3B     		subs	r3, r3, #63
 275 002e 0A93     		str	r3, [sp, #40]
 161:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 276              		.loc 1 161 3 is_stmt 1 view .LVU46
 161:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 277              		.loc 1 161 34 is_stmt 0 view .LVU47
 278 0030 0023     		movs	r3, #0
 279 0032 1093     		str	r3, [sp, #64]
 162:Core/Src/main.c ****   {
 280              		.loc 1 162 3 is_stmt 1 view .LVU48
 162:Core/Src/main.c ****   {
 281              		.loc 1 162 7 is_stmt 0 view .LVU49
 282 0034 05A8     		add	r0, sp, #20
 283 0036 FFF7FEFF 		bl	HAL_RCC_OscConfig
 284              	.LVL11:
 162:Core/Src/main.c ****   {
 285              		.loc 1 162 6 view .LVU50
 286 003a 0028     		cmp	r0, #0
 287 003c 0ED1     		bne	.L16
 169:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 288              		.loc 1 169 3 is_stmt 1 view .LVU51
 169:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 289              		.loc 1 169 31 is_stmt 0 view .LVU52
 290 003e 0723     		movs	r3, #7
 291 0040 0193     		str	r3, [sp, #4]
 170:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 292              		.loc 1 170 3 is_stmt 1 view .LVU53
 170:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 293              		.loc 1 170 34 is_stmt 0 view .LVU54
 294 0042 063B     		subs	r3, r3, #6
 295 0044 0293     		str	r3, [sp, #8]
 171:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 296              		.loc 1 171 3 is_stmt 1 view .LVU55
 171:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 297              		.loc 1 171 35 is_stmt 0 view .LVU56
 298 0046 0023     		movs	r3, #0
 299 0048 0393     		str	r3, [sp, #12]
 172:Core/Src/main.c **** 
 300              		.loc 1 172 3 is_stmt 1 view .LVU57
 172:Core/Src/main.c **** 
 301              		.loc 1 172 36 is_stmt 0 view .LVU58
 302 004a 0493     		str	r3, [sp, #16]
 174:Core/Src/main.c ****   {
 303              		.loc 1 174 3 is_stmt 1 view .LVU59
 174:Core/Src/main.c ****   {
 304              		.loc 1 174 7 is_stmt 0 view .LVU60
 305 004c 0121     		movs	r1, #1
 306 004e 01A8     		add	r0, sp, #4
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 71


 307 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 308              	.LVL12:
 174:Core/Src/main.c ****   {
 309              		.loc 1 174 6 view .LVU61
 310 0054 0028     		cmp	r0, #0
 311 0056 03D1     		bne	.L17
 178:Core/Src/main.c **** 
 312              		.loc 1 178 1 view .LVU62
 313 0058 19B0     		add	sp, sp, #100
 314              		@ sp needed
 315 005a 00BD     		pop	{pc}
 316              	.L16:
 164:Core/Src/main.c ****   }
 317              		.loc 1 164 5 is_stmt 1 view .LVU63
 318 005c FFF7FEFF 		bl	Error_Handler
 319              	.LVL13:
 320              	.L17:
 176:Core/Src/main.c ****   }
 321              		.loc 1 176 5 view .LVU64
 322 0060 FFF7FEFF 		bl	Error_Handler
 323              	.LVL14:
 324              		.cfi_endproc
 325              	.LFE501:
 327              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 328              		.align	2
 329              	.LC2:
 330 0000 0A4D4149 		.ascii	"\012MAIN. Power ON.   %d\012\000"
 330      4E2E2050 
 330      6F776572 
 330      204F4E2E 
 330      20202025 
 331              		.section	.text.main,"ax",%progbits
 332              		.align	1
 333              		.global	main
 334              		.syntax unified
 335              		.code	16
 336              		.thumb_func
 338              	main:
 339              	.LFB500:
  75:Core/Src/main.c **** 
 340              		.loc 1 75 1 view -0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344 0000 10B5     		push	{r4, lr}
 345              	.LCFI4:
 346              		.cfi_def_cfa_offset 8
 347              		.cfi_offset 4, -8
 348              		.cfi_offset 14, -4
  84:Core/Src/main.c **** 
 349              		.loc 1 84 3 view .LVU66
 350 0002 FFF7FEFF 		bl	HAL_Init
 351              	.LVL15:
  91:Core/Src/main.c **** 
 352              		.loc 1 91 3 view .LVU67
 353 0006 FFF7FEFF 		bl	SystemClock_Config
 354              	.LVL16:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 72


  98:Core/Src/main.c ****   MX_ADC1_Init();
 355              		.loc 1 98 3 view .LVU68
 356 000a FFF7FEFF 		bl	MX_GPIO_Init
 357              	.LVL17:
  99:Core/Src/main.c ****   MX_I2C1_Init();
 358              		.loc 1 99 3 view .LVU69
 359 000e FFF7FEFF 		bl	MX_ADC1_Init
 360              	.LVL18:
 100:Core/Src/main.c ****   MX_RTC_Init();
 361              		.loc 1 100 3 view .LVU70
 362 0012 FFF7FEFF 		bl	MX_I2C1_Init
 363              	.LVL19:
 101:Core/Src/main.c ****   MX_SPI1_Init();
 364              		.loc 1 101 3 view .LVU71
 365 0016 FFF7FEFF 		bl	MX_RTC_Init
 366              	.LVL20:
 102:Core/Src/main.c ****   MX_USART2_UART_Init();
 367              		.loc 1 102 3 view .LVU72
 368 001a FFF7FEFF 		bl	MX_SPI1_Init
 369              	.LVL21:
 103:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 370              		.loc 1 103 3 view .LVU73
 371 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 372              	.LVL22:
 106:Core/Src/main.c ****   LED1_ON();
 373              		.loc 1 106 3 view .LVU74
 374              	.LBB20:
 375              	.LBI20:
 376              		.file 5 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h"
   1:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
   2:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   ******************************************************************************
   3:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @file    stm32u0xx_ll_spi.h
   4:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @author  MCD Application Team
   5:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief   Header file of SPI LL module.
   6:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   ******************************************************************************
   7:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @attention
   8:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *
   9:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * Copyright (c) 2023 STMicroelectronics.
  10:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * All rights reserved.
  11:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *
  12:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * in the root directory of this software component.
  14:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   *
  16:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   ******************************************************************************
  17:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
  18:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  19:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #ifndef STM32U0xx_LL_SPI_H
  21:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define STM32U0xx_LL_SPI_H
  22:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  23:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #ifdef __cplusplus
  24:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** extern "C" {
  25:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #endif
  26:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  27:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #include "stm32u0xx.h"
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 73


  29:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  30:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @addtogroup STM32U0xx_LL_Driver
  31:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
  32:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
  33:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  34:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #if defined (SPI1) || defined (SPI2) || defined (SPI3)
  35:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  36:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL SPI
  37:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
  38:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
  39:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  40:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Private macros ------------------------------------------------------------*/
  43:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  44:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Exported types ------------------------------------------------------------*/
  45:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #if defined(USE_FULL_LL_DRIVER)
  46:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_ES_INIT SPI Exported Init structure
  47:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
  48:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
  49:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  50:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
  51:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  SPI Init structures definition
  52:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
  53:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** typedef struct
  54:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
  55:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t TransferDirection;       /*!< Specifies the SPI unidirectional or bidirectional data mod
  56:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_TRANSFER_M
  57:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  58:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  59:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  60:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t Mode;                    /*!< Specifies the SPI mode (Master/Slave).
  61:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_MODE.
  62:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  63:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  64:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  65:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t DataWidth;               /*!< Specifies the SPI data width.
  66:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_DATAWIDTH.
  67:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  68:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  69:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  70:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t ClockPolarity;           /*!< Specifies the serial clock steady state.
  71:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_POLARITY.
  72:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  73:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  74:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  75:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t ClockPhase;              /*!< Specifies the clock active edge for the bit capture.
  76:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_PHASE.
  77:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  78:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  79:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  80:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t NSS;                     /*!< Specifies whether the NSS signal is managed by hardware (N
  81:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_NSS_MODE.
  82:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  83:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  84:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  85:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t BaudRate;                /*!< Specifies the BaudRate prescaler value which will be used 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 74


  86:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_BAUDRATEPR
  87:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          @note The communication clock is derived from the master c
  88:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  89:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  90:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  91:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t BitOrder;                /*!< Specifies whether data transfers start from MSB or LSB bit
  92:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_BIT_ORDER.
  93:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  94:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
  95:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  96:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t CRCCalculation;          /*!< Specifies if the CRC calculation is enabled or not.
  97:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter can be a value of @ref SPI_LL_EC_CRC_CALCUL
  98:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
  99:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
 100:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 101:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   uint32_t CRCPoly;                 /*!< Specifies the polynomial used for the CRC calculation.
 102:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This parameter must be a number between Min_Data = 0x00 an
 103:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 104:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****                                          This feature can be modified afterwards using unitary func
 105:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 106:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** } LL_SPI_InitTypeDef;
 107:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 108:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 109:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 110:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 111:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #endif /* USE_FULL_LL_DRIVER */
 112:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 113:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Exported constants --------------------------------------------------------*/
 114:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_Exported_Constants SPI Exported Constants
 115:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 116:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 117:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 118:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_GET_FLAG Get Flags Defines
 119:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief    Flags defines which can be used with LL_SPI_ReadReg function
 120:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 121:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 122:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_RXNE                     SPI_SR_RXNE               /*!< Rx buffer not empty flag 
 123:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_TXE                      SPI_SR_TXE                /*!< Tx buffer empty flag     
 124:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_BSY                      SPI_SR_BSY                /*!< Busy flag                
 125:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_CRCERR                   SPI_SR_CRCERR             /*!< CRC error flag           
 126:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_MODF                     SPI_SR_MODF               /*!< Mode fault flag          
 127:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_OVR                      SPI_SR_OVR                /*!< Overrun flag             
 128:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SR_FRE                      SPI_SR_FRE                /*!< TI mode frame format erro
 129:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 130:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 131:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 132:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 133:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_IT IT Defines
 134:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief    IT defines which can be used with LL_SPI_ReadReg and  LL_SPI_WriteReg functions
 135:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 136:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 137:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CR2_RXNEIE                  SPI_CR2_RXNEIE            /*!< Rx buffer not empty inter
 138:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CR2_TXEIE                   SPI_CR2_TXEIE             /*!< Tx buffer empty interrupt
 139:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CR2_ERRIE                   SPI_CR2_ERRIE             /*!< Error interrupt enable   
 140:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 141:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 142:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 75


 143:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 144:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_MODE Operation Mode
 145:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 146:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 147:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_MODE_MASTER                 (SPI_CR1_MSTR | SPI_CR1_SSI)    /*!< Master configuratio
 148:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_MODE_SLAVE                  0x00000000U                     /*!< Slave configuration
 149:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 150:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 151:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 152:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 153:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_PROTOCOL Serial Protocol
 154:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 155:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 156:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_PROTOCOL_MOTOROLA           0x00000000U               /*!< Motorola mode. Used as de
 157:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_PROTOCOL_TI                 (SPI_CR2_FRF)             /*!< TI mode                  
 158:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 159:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 160:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 161:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 162:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_PHASE Clock Phase
 163:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 164:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 165:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_PHASE_1EDGE                 0x00000000U               /*!< First clock transition is
 166:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_PHASE_2EDGE                 (SPI_CR1_CPHA)            /*!< Second clock transition i
 167:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 168:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 169:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 170:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 171:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_POLARITY Clock Polarity
 172:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 173:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 174:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_POLARITY_LOW                0x00000000U               /*!< Clock to 0 when idle */
 175:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_POLARITY_HIGH               (SPI_CR1_CPOL)            /*!< Clock to 1 when idle */
 176:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 177:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 178:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 179:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 180:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_BAUDRATEPRESCALER Baud Rate Prescaler
 181:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 182:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 183:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV2      0x00000000U                                    /*!< Baud
 184:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV4      (SPI_CR1_BR_0)                                 /*!< Baud
 185:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV8      (SPI_CR1_BR_1)                                 /*!< Baud
 186:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV16     (SPI_CR1_BR_1 | SPI_CR1_BR_0)                  /*!< Baud
 187:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV32     (SPI_CR1_BR_2)                                 /*!< Baud
 188:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV64     (SPI_CR1_BR_2 | SPI_CR1_BR_0)                  /*!< Baud
 189:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV128    (SPI_CR1_BR_2 | SPI_CR1_BR_1)                  /*!< Baud
 190:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_BAUDRATEPRESCALER_DIV256    (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0)   /*!< Baud
 191:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 192:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 193:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 194:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 195:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_BIT_ORDER Transmission Bit Order
 196:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 197:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 198:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_LSB_FIRST                   (SPI_CR1_LSBFIRST)        /*!< Data is transmitted/recei
 199:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_MSB_FIRST                   0x00000000U               /*!< Data is transmitted/recei
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 76


 200:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 201:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 202:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 203:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 204:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_TRANSFER_MODE Transfer Mode
 205:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 206:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 207:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_FULL_DUPLEX                 0x00000000U                          /*!< Full-Duplex mo
 208:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_SIMPLEX_RX                  (SPI_CR1_RXONLY)                     /*!< Simplex Rx mod
 209:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_HALF_DUPLEX_RX              (SPI_CR1_BIDIMODE)                   /*!< Half-Duplex Rx
 210:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_HALF_DUPLEX_TX              (SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE)  /*!< Half-Duplex Tx
 211:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 212:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 213:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 214:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 215:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_NSS_MODE Slave Select Pin Mode
 216:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 217:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 218:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_NSS_SOFT                    (SPI_CR1_SSM)                     /*!< NSS managed inter
 219:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_NSS_HARD_INPUT              0x00000000U                       /*!< NSS pin used in I
 220:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_NSS_HARD_OUTPUT             (((uint32_t)SPI_CR2_SSOE << 16U)) /*!< NSS pin used in O
 221:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 222:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 223:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 224:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 225:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_DATAWIDTH Datawidth
 226:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 227:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 228:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_4BIT              (SPI_CR2_DS_0 | SPI_CR2_DS_1)                           
 229:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_5BIT              (SPI_CR2_DS_2)                                          
 230:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_6BIT              (SPI_CR2_DS_2 | SPI_CR2_DS_0)                           
 231:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_7BIT              (SPI_CR2_DS_2 | SPI_CR2_DS_1)                           
 232:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_8BIT              (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0)            
 233:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_9BIT              (SPI_CR2_DS_3)                                          
 234:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_10BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_0)                           
 235:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_11BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_1)                           
 236:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_12BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_1 | SPI_CR2_DS_0)            
 237:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_13BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_2)                           
 238:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_14BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_2 | SPI_CR2_DS_0)            
 239:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_15BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_2 | SPI_CR2_DS_1)            
 240:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DATAWIDTH_16BIT             (SPI_CR2_DS_3 | SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS
 241:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 242:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 243:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 244:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #if defined(USE_FULL_LL_DRIVER)
 245:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 246:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_CRC_CALCULATION CRC Calculation
 247:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 248:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 249:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CRCCALCULATION_DISABLE      0x00000000U               /*!< CRC calculation disabled 
 250:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CRCCALCULATION_ENABLE       (SPI_CR1_CRCEN)           /*!< CRC calculation enabled  
 251:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 252:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 253:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 254:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #endif /* USE_FULL_LL_DRIVER */
 255:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 256:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_CRC_LENGTH CRC Length
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 77


 257:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 258:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 259:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CRC_8BIT                    0x00000000U               /*!<  8-bit CRC length */
 260:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_CRC_16BIT                   (SPI_CR1_CRCL)            /*!< 16-bit CRC length */
 261:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 262:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 263:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 264:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 265:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_RX_FIFO_TH RX FIFO Threshold
 266:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 267:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 268:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_TH_HALF             0x00000000U               /*!< RXNE event is generated i
 269:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_TH_QUARTER          (SPI_CR2_FRXTH)           /*!< RXNE event is generated i
 270:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 271:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 272:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 273:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 274:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_RX_FIFO RX FIFO Level
 275:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 276:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 277:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_EMPTY               0x00000000U                       /*!< FIFO reception em
 278:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_QUARTER_FULL        (SPI_SR_FRLVL_0)                  /*!< FIFO reception 1/
 279:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_HALF_FULL           (SPI_SR_FRLVL_1)                  /*!< FIFO reception 1/
 280:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_RX_FIFO_FULL                (SPI_SR_FRLVL_1 | SPI_SR_FRLVL_0) /*!< FIFO reception fu
 281:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 282:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 283:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 284:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 285:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_TX_FIFO TX FIFO Level
 286:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 287:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 288:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_TX_FIFO_EMPTY               0x00000000U                       /*!< FIFO transmission
 289:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_TX_FIFO_QUARTER_FULL        (SPI_SR_FTLVL_0)                  /*!< FIFO transmission
 290:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_TX_FIFO_HALF_FULL           (SPI_SR_FTLVL_1)                  /*!< FIFO transmission
 291:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_TX_FIFO_FULL                (SPI_SR_FTLVL_1 | SPI_SR_FTLVL_0) /*!< FIFO transmission
 292:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 293:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 294:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 295:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 296:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EC_DMA_PARITY DMA Parity
 297:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 298:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 299:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DMA_PARITY_EVEN             0x00000000U   /*!< Select DMA parity Even */
 300:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_DMA_PARITY_ODD              0x00000001U   /*!< Select DMA parity Odd  */
 301:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 302:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 303:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 304:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 305:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 306:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 307:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 308:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 309:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 310:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Exported macro ------------------------------------------------------------*/
 311:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_Exported_Macros SPI Exported Macros
 312:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 313:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 78


 314:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 315:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EM_WRITE_READ Common Write and read registers Macros
 316:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 317:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 318:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 319:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 320:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Write a value in SPI register
 321:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  __INSTANCE__ SPI Instance
 322:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  __REG__ Register to be written
 323:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  __VALUE__ Value to be written in the register
 324:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 325:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 326:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 327:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 328:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 329:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Read a value in SPI register
 330:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  __INSTANCE__ SPI Instance
 331:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  __REG__ Register to be read
 332:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval Register value
 333:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 334:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** #define LL_SPI_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 335:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 336:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 337:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 338:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 339:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 340:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @}
 341:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 342:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 343:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /* Exported functions --------------------------------------------------------*/
 344:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_Exported_Functions SPI Exported Functions
 345:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 346:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 347:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 348:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /** @defgroup SPI_LL_EF_Configuration Configuration
 349:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @{
 350:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 351:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** 
 352:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** /**
 353:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @brief  Enable SPI peripheral
 354:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @rmtoll CR1          SPE           LL_SPI_Enable
 355:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @param  SPIx SPI Instance
 356:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   * @retval None
 357:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   */
 358:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** __STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
 377              		.loc 5 358 22 view .LVU75
 378              	.LBB21:
 359:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h **** {
 360:Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_spi.h ****   SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 379              		.loc 5 360 3 view .LVU76
 380 0022 164A     		ldr	r2, .L20
 381 0024 1368     		ldr	r3, [r2]
 382 0026 4021     		movs	r1, #64
 383 0028 0B43     		orrs	r3, r1
 384 002a 1360     		str	r3, [r2]
 385              	.LVL23:
 386              		.loc 5 360 3 is_stmt 0 view .LVU77
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 79


 387              	.LBE21:
 388              	.LBE20:
 107:Core/Src/main.c ****   uint32_t clk = HAL_RCC_GetSysClockFreq();
 389              		.loc 1 107 3 is_stmt 1 view .LVU78
 390 002c 144C     		ldr	r4, .L20+4
 391 002e 0223     		movs	r3, #2
 392 0030 A361     		str	r3, [r4, #24]
 108:Core/Src/main.c ****   printf("\nMAIN. Power ON.   %d\n", clk);
 393              		.loc 1 108 3 view .LVU79
 108:Core/Src/main.c ****   printf("\nMAIN. Power ON.   %d\n", clk);
 394              		.loc 1 108 18 is_stmt 0 view .LVU80
 395 0032 FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 396              	.LVL24:
 397 0036 0100     		movs	r1, r0
 398              	.LVL25:
 109:Core/Src/main.c **** 
 399              		.loc 1 109 3 is_stmt 1 view .LVU81
 400 0038 124B     		ldr	r3, .L20+8
 401 003a 1800     		movs	r0, r3
 402              	.LVL26:
 109:Core/Src/main.c **** 
 403              		.loc 1 109 3 is_stmt 0 view .LVU82
 404 003c FFF7FEFF 		bl	printf_
 405              	.LVL27:
 111:Core/Src/main.c ****   HAL_Delay(1500);
 406              		.loc 1 111 3 is_stmt 1 view .LVU83
 407 0040 0020     		movs	r0, #0
 408 0042 FFF7FEFF 		bl	resetConfig
 409              	.LVL28:
 112:Core/Src/main.c ****   deepPowerDown(30);
 410              		.loc 1 112 3 view .LVU84
 411 0046 1048     		ldr	r0, .L20+12
 412 0048 FFF7FEFF 		bl	HAL_Delay
 413              	.LVL29:
 113:Core/Src/main.c **** 
 414              		.loc 1 113 3 view .LVU85
 415 004c 1E20     		movs	r0, #30
 416 004e FFF7FEFF 		bl	deepPowerDown
 417              	.LVL30:
 120:Core/Src/main.c ****   // resetConfig();
 418              		.loc 1 120 3 view .LVU86
 419 0052 FA20     		movs	r0, #250
 420 0054 C000     		lsls	r0, r0, #3
 421 0056 FFF7FEFF 		bl	HAL_Delay
 422              	.LVL31:
 124:Core/Src/main.c **** 
 423              		.loc 1 124 3 view .LVU87
 424 005a 8023     		movs	r3, #128
 425 005c 9B02     		lsls	r3, r3, #10
 426 005e A361     		str	r3, [r4, #24]
 427              	.L19:
 126:Core/Src/main.c ****   {
 428              		.loc 1 126 3 discriminator 1 view .LVU88
 132:Core/Src/main.c ****     HAL_Delay(100);
 429              		.loc 1 132 5 discriminator 1 view .LVU89
 430 0060 074C     		ldr	r4, .L20+4
 431 0062 0223     		movs	r3, #2
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 80


 432 0064 A361     		str	r3, [r4, #24]
 133:Core/Src/main.c ****     LED1_OFF();
 433              		.loc 1 133 5 discriminator 1 view .LVU90
 434 0066 6420     		movs	r0, #100
 435 0068 FFF7FEFF 		bl	HAL_Delay
 436              	.LVL32:
 134:Core/Src/main.c ****     //    hex_dump();
 437              		.loc 1 134 5 discriminator 1 view .LVU91
 438 006c 8023     		movs	r3, #128
 439 006e 9B02     		lsls	r3, r3, #10
 440 0070 A361     		str	r3, [r4, #24]
 136:Core/Src/main.c ****   }
 441              		.loc 1 136 5 discriminator 1 view .LVU92
 442 0072 6420     		movs	r0, #100
 443 0074 FFF7FEFF 		bl	HAL_Delay
 444              	.LVL33:
 126:Core/Src/main.c ****   {
 445              		.loc 1 126 9 discriminator 1 view .LVU93
 446 0078 F2E7     		b	.L19
 447              	.L21:
 448 007a C046     		.align	2
 449              	.L20:
 450 007c 00300140 		.word	1073819648
 451 0080 00040050 		.word	1342178304
 452 0084 00000000 		.word	.LC2
 453 0088 DC050000 		.word	1500
 454              		.cfi_endproc
 455              	.LFE500:
 457              		.text
 458              	.Letext0:
 459              		.file 6 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 460              		.file 7 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 461              		.file 8 "Drivers/CMSIS/Device/ST/STM32U0xx/Include/stm32u073xx.h"
 462              		.file 9 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_def.h"
 463              		.file 10 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_rcc.h"
 464              		.file 11 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_pwr_ex.h"
 465              		.file 12 "Core/Inc/AB1805_RK.h"
 466              		.file 13 "Core/Inc/printf.h"
 467              		.file 14 "Core/Inc/usart.h"
 468              		.file 15 "Core/Inc/spi.h"
 469              		.file 16 "Core/Inc/rtc.h"
 470              		.file 17 "Core/Inc/i2c.h"
 471              		.file 18 "Core/Inc/adc.h"
 472              		.file 19 "Core/Inc/gpio.h"
 473              		.file 20 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal.h"
 474              		.file 21 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_dma.h"
 475              		.file 22 "<built-in>"
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s 			page 81


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:19     .text.__NVIC_SystemReset:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:24     .text.__NVIC_SystemReset:00000000 __NVIC_SystemReset
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:81     .text.__NVIC_SystemReset:00000014 $d
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:87     .text.timeout_reset:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:93     .text.timeout_reset:00000000 timeout_reset
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:129    .text.timeout_reset:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:134    .rodata.print_error.str1.4:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:138    .text.print_error:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:144    .text.print_error:00000000 print_error
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:180    .text.print_error:0000001c $d
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:185    .text.Error_Handler:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:191    .text.Error_Handler:00000000 Error_Handler
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:222    .text.SystemClock_Config:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:228    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:328    .rodata.main.str1.4:00000000 $d
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:332    .text.main:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:338    .text.main:00000000 main
C:\Users\upo\AppData\Local\Temp\ccOT3xNF.s:450    .text.main:0000007c $d

UNDEFINED SYMBOLS
HAL_Delay
printf_
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_ADC1_Init
MX_I2C1_Init
MX_RTC_Init
MX_SPI1_Init
MX_USART2_UART_Init
HAL_RCC_GetSysClockFreq
resetConfig
deepPowerDown
