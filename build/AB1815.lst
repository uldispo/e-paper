ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"AB1815.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/AB1815.c"
  18              		.section	.text.spi_select_slave,"ax",%progbits
  19              		.align	1
  20              		.global	spi_select_slave
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	spi_select_slave:
  26              	.LVL0:
  27              	.LFB428:
   1:Core/Src/AB1815.c **** /**
   2:Core/Src/AB1815.c ****  *     An Abracon AB18X5 Real-Time Clock library for Arduino
   3:Core/Src/AB1815.c ****  *     Copyright (C) 2015 NigelB
   4:Core/Src/AB1815.c ****  *
   5:Core/Src/AB1815.c ****  *     This program is free software; you can redistribute it and/or modify
   6:Core/Src/AB1815.c ****  *     it under the terms of the GNU General Public License as published by
   7:Core/Src/AB1815.c ****  *     the Free Software Foundation; either version 2 of the License, or
   8:Core/Src/AB1815.c ****  *     (at your option) any later version.
   9:Core/Src/AB1815.c ****  *
  10:Core/Src/AB1815.c ****  *     This program is distributed in the hope that it will be useful,
  11:Core/Src/AB1815.c ****  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:Core/Src/AB1815.c ****  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:Core/Src/AB1815.c ****  *     GNU General Public License for more details.
  14:Core/Src/AB1815.c ****  *
  15:Core/Src/AB1815.c ****  *     You should have received a copy of the GNU General Public License along
  16:Core/Src/AB1815.c ****  *     with this program; if not, write to the Free Software Foundation, Inc.,
  17:Core/Src/AB1815.c ****  *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  18:Core/Src/AB1815.c ****  **/
  19:Core/Src/AB1815.c **** 
  20:Core/Src/AB1815.c **** // #include "AB1815_Arduino.h"
  21:Core/Src/AB1815.c **** #include "SPI.h"
  22:Core/Src/AB1815.c **** #include "stdarg.h"
  23:Core/Src/AB1815.c **** #include "AB1815_A.h"
  24:Core/Src/AB1815.c **** #include "AB1815.h"
  25:Core/Src/AB1815.c **** #include "TimeLib.h"
  26:Core/Src/AB1815.c **** 
  27:Core/Src/AB1815.c **** void spi_select_slave(bool select) // 1 = high, 0 = low
  28:Core/Src/AB1815.c **** {
  28              		.loc 1 28 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 2


  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  29:Core/Src/AB1815.c **** 	if (select)
  33              		.loc 1 29 2 view .LVU1
  34              		.loc 1 29 5 is_stmt 0 view .LVU2
  35 0000 0028     		cmp	r0, #0
  36 0002 04D0     		beq	.L2
  30:Core/Src/AB1815.c **** 	{
  31:Core/Src/AB1815.c **** 		RTC_H();
  37              		.loc 1 31 3 is_stmt 1 view .LVU3
  38 0004 044B     		ldr	r3, .L4
  39 0006 8022     		movs	r2, #128
  40 0008 D201     		lsls	r2, r2, #7
  41 000a 9A61     		str	r2, [r3, #24]
  42              	.L1:
  32:Core/Src/AB1815.c **** 	}
  33:Core/Src/AB1815.c **** 	else
  34:Core/Src/AB1815.c **** 	{
  35:Core/Src/AB1815.c **** 		RTC_L();
  36:Core/Src/AB1815.c **** 	}
  37:Core/Src/AB1815.c **** }
  43              		.loc 1 37 1 is_stmt 0 view .LVU4
  44              		@ sp needed
  45 000c 7047     		bx	lr
  46              	.L2:
  35:Core/Src/AB1815.c **** 	}
  47              		.loc 1 35 3 is_stmt 1 view .LVU5
  48 000e 024B     		ldr	r3, .L4
  49 0010 8022     		movs	r2, #128
  50 0012 D205     		lsls	r2, r2, #23
  51 0014 9A61     		str	r2, [r3, #24]
  52              		.loc 1 37 1 is_stmt 0 view .LVU6
  53 0016 F9E7     		b	.L1
  54              	.L5:
  55              		.align	2
  56              	.L4:
  57 0018 00040050 		.word	1342178304
  58              		.cfi_endproc
  59              	.LFE428:
  61              		.section	.text.read,"ax",%progbits
  62              		.align	1
  63              		.global	read
  64              		.syntax unified
  65              		.code	16
  66              		.thumb_func
  68              	read:
  69              	.LVL1:
  70              	.LFB429:
  38:Core/Src/AB1815.c **** 
  39:Core/Src/AB1815.c **** bool read(uint8_t offset, uint8_t *buf, uint8_t length)
  40:Core/Src/AB1815.c **** {
  71              		.loc 1 40 1 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 8
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		.loc 1 40 1 is_stmt 0 view .LVU8
  76 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 3


  77              	.LCFI0:
  78              		.cfi_def_cfa_offset 16
  79              		.cfi_offset 4, -16
  80              		.cfi_offset 5, -12
  81              		.cfi_offset 6, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 24
  86 0004 0C00     		movs	r4, r1
  87 0006 1500     		movs	r5, r2
  41:Core/Src/AB1815.c **** 	uint8_t address = AB1815_SPI_READ(offset);
  88              		.loc 1 41 2 is_stmt 1 view .LVU9
  89              		.loc 1 41 20 is_stmt 0 view .LVU10
  90 0008 7F23     		movs	r3, #127
  91 000a 0340     		ands	r3, r0
  92              		.loc 1 41 10 view .LVU11
  93 000c 6A46     		mov	r2, sp
  94              	.LVL2:
  95              		.loc 1 41 10 view .LVU12
  96 000e D61D     		adds	r6, r2, #7
  97 0010 D371     		strb	r3, [r2, #7]
  42:Core/Src/AB1815.c **** 
  43:Core/Src/AB1815.c **** 	spi_select_slave(0);
  98              		.loc 1 43 2 is_stmt 1 view .LVU13
  99 0012 0020     		movs	r0, #0
 100              	.LVL3:
 101              		.loc 1 43 2 is_stmt 0 view .LVU14
 102 0014 FFF7FEFF 		bl	spi_select_slave
 103              	.LVL4:
  44:Core/Src/AB1815.c **** 	// SPI.transfer(address);
  45:Core/Src/AB1815.c **** 	// HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint
  46:Core/Src/AB1815.c **** 	if (HAL_SPI_Transmit(&hspi1, &address, 1, 3000) != HAL_OK)
 104              		.loc 1 46 2 is_stmt 1 view .LVU15
 105              		.loc 1 46 6 is_stmt 0 view .LVU16
 106 0018 0E48     		ldr	r0, .L11
 107 001a 0F4B     		ldr	r3, .L11+4
 108 001c 0122     		movs	r2, #1
 109 001e 3100     		movs	r1, r6
 110 0020 FFF7FEFF 		bl	HAL_SPI_Transmit
 111              	.LVL5:
 112              		.loc 1 46 5 view .LVU17
 113 0024 0028     		cmp	r0, #0
 114 0026 0ED1     		bne	.L9
 115              	.L7:
  47:Core/Src/AB1815.c **** 	{
  48:Core/Src/AB1815.c **** 		Error_Handler();
  49:Core/Src/AB1815.c **** 	}
  50:Core/Src/AB1815.c **** 
  51:Core/Src/AB1815.c **** 	if (HAL_SPI_Receive(&hspi1, buf, length, 3000) != HAL_OK)
 116              		.loc 1 51 2 is_stmt 1 view .LVU18
 117              		.loc 1 51 6 is_stmt 0 view .LVU19
 118 0028 0A48     		ldr	r0, .L11
 119 002a 0B4B     		ldr	r3, .L11+4
 120 002c 2A00     		movs	r2, r5
 121 002e 2100     		movs	r1, r4
 122 0030 FFF7FEFF 		bl	HAL_SPI_Receive
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 4


 123              	.LVL6:
 124              		.loc 1 51 5 view .LVU20
 125 0034 0028     		cmp	r0, #0
 126 0036 09D1     		bne	.L10
 127              	.L8:
  52:Core/Src/AB1815.c **** 	{
  53:Core/Src/AB1815.c **** 		Error_Handler();
  54:Core/Src/AB1815.c **** 	}
  55:Core/Src/AB1815.c **** 
  56:Core/Src/AB1815.c **** 	spi_select_slave(1);
 128              		.loc 1 56 2 is_stmt 1 view .LVU21
 129 0038 0120     		movs	r0, #1
 130 003a FFF7FEFF 		bl	spi_select_slave
 131              	.LVL7:
  57:Core/Src/AB1815.c **** 	return ab1815_status_e_OK;
 132              		.loc 1 57 2 view .LVU22
 133              		.loc 1 57 9 is_stmt 0 view .LVU23
 134 003e 074B     		ldr	r3, .L11+8
 135 0040 1878     		ldrb	r0, [r3]
  58:Core/Src/AB1815.c **** };
 136              		.loc 1 58 1 view .LVU24
 137 0042 02B0     		add	sp, sp, #8
 138              		@ sp needed
 139              	.LVL8:
 140              		.loc 1 58 1 view .LVU25
 141 0044 70BD     		pop	{r4, r5, r6, pc}
 142              	.LVL9:
 143              	.L9:
  48:Core/Src/AB1815.c **** 	}
 144              		.loc 1 48 3 is_stmt 1 view .LVU26
 145 0046 FFF7FEFF 		bl	Error_Handler
 146              	.LVL10:
 147 004a EDE7     		b	.L7
 148              	.L10:
  53:Core/Src/AB1815.c **** 	}
 149              		.loc 1 53 3 view .LVU27
 150 004c FFF7FEFF 		bl	Error_Handler
 151              	.LVL11:
 152 0050 F2E7     		b	.L8
 153              	.L12:
 154 0052 C046     		.align	2
 155              	.L11:
 156 0054 00000000 		.word	hspi1
 157 0058 B80B0000 		.word	3000
 158 005c 00000000 		.word	ab1815_status_e_OK
 159              		.cfi_endproc
 160              	.LFE429:
 162              		.section	.text.write,"ax",%progbits
 163              		.align	1
 164              		.global	write
 165              		.syntax unified
 166              		.code	16
 167              		.thumb_func
 169              	write:
 170              	.LVL12:
 171              	.LFB430:
  59:Core/Src/AB1815.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 5


  60:Core/Src/AB1815.c **** bool write(uint8_t offset, uint8_t *buf, uint8_t length)
  61:Core/Src/AB1815.c **** {
 172              		.loc 1 61 1 view -0
 173              		.cfi_startproc
 174              		@ args = 0, pretend = 0, frame = 8
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		.loc 1 61 1 is_stmt 0 view .LVU29
 177 0000 70B5     		push	{r4, r5, r6, lr}
 178              	.LCFI2:
 179              		.cfi_def_cfa_offset 16
 180              		.cfi_offset 4, -16
 181              		.cfi_offset 5, -12
 182              		.cfi_offset 6, -8
 183              		.cfi_offset 14, -4
 184 0002 82B0     		sub	sp, sp, #8
 185              	.LCFI3:
 186              		.cfi_def_cfa_offset 24
 187 0004 0C00     		movs	r4, r1
 188 0006 1500     		movs	r5, r2
  62:Core/Src/AB1815.c **** 	uint8_t address = AB1815_SPI_WRITE(offset);
 189              		.loc 1 62 2 is_stmt 1 view .LVU30
 190              		.loc 1 62 10 is_stmt 0 view .LVU31
 191 0008 6B46     		mov	r3, sp
 192 000a DE1D     		adds	r6, r3, #7
 193 000c 8023     		movs	r3, #128
 194 000e 5B42     		rsbs	r3, r3, #0
 195 0010 0343     		orrs	r3, r0
 196 0012 3370     		strb	r3, [r6]
  63:Core/Src/AB1815.c **** 	spi_select_slave(0);
 197              		.loc 1 63 2 is_stmt 1 view .LVU32
 198 0014 0020     		movs	r0, #0
 199              	.LVL13:
 200              		.loc 1 63 2 is_stmt 0 view .LVU33
 201 0016 FFF7FEFF 		bl	spi_select_slave
 202              	.LVL14:
  64:Core/Src/AB1815.c **** 
  65:Core/Src/AB1815.c **** 	if (HAL_SPI_Transmit(&hspi1, &address, 1, 3000) != HAL_OK)
 203              		.loc 1 65 2 is_stmt 1 view .LVU34
 204              		.loc 1 65 6 is_stmt 0 view .LVU35
 205 001a 0E48     		ldr	r0, .L18
 206 001c 0E4B     		ldr	r3, .L18+4
 207 001e 0122     		movs	r2, #1
 208 0020 3100     		movs	r1, r6
 209 0022 FFF7FEFF 		bl	HAL_SPI_Transmit
 210              	.LVL15:
 211              		.loc 1 65 5 view .LVU36
 212 0026 0028     		cmp	r0, #0
 213 0028 0ED1     		bne	.L16
 214              	.L14:
  66:Core/Src/AB1815.c **** 	{
  67:Core/Src/AB1815.c **** 		Error_Handler();
  68:Core/Src/AB1815.c **** 	}
  69:Core/Src/AB1815.c **** 
  70:Core/Src/AB1815.c **** 	if (HAL_SPI_Transmit(&hspi1, buf, length, 3000) != HAL_OK)
 215              		.loc 1 70 2 is_stmt 1 view .LVU37
 216              		.loc 1 70 6 is_stmt 0 view .LVU38
 217 002a 0A48     		ldr	r0, .L18
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 6


 218 002c 0A4B     		ldr	r3, .L18+4
 219 002e 2A00     		movs	r2, r5
 220 0030 2100     		movs	r1, r4
 221 0032 FFF7FEFF 		bl	HAL_SPI_Transmit
 222              	.LVL16:
 223              		.loc 1 70 5 view .LVU39
 224 0036 0028     		cmp	r0, #0
 225 0038 09D1     		bne	.L17
 226              	.L15:
  71:Core/Src/AB1815.c **** 	{
  72:Core/Src/AB1815.c **** 		Error_Handler();
  73:Core/Src/AB1815.c **** 	}
  74:Core/Src/AB1815.c **** 
  75:Core/Src/AB1815.c **** 	spi_select_slave(1); // set 1
 227              		.loc 1 75 2 is_stmt 1 view .LVU40
 228 003a 0120     		movs	r0, #1
 229 003c FFF7FEFF 		bl	spi_select_slave
 230              	.LVL17:
  76:Core/Src/AB1815.c **** 	return ab1815_status_e_OK;
 231              		.loc 1 76 2 view .LVU41
 232              		.loc 1 76 9 is_stmt 0 view .LVU42
 233 0040 064B     		ldr	r3, .L18+8
 234 0042 1878     		ldrb	r0, [r3]
  77:Core/Src/AB1815.c **** };
 235              		.loc 1 77 1 view .LVU43
 236 0044 02B0     		add	sp, sp, #8
 237              		@ sp needed
 238              	.LVL18:
 239              		.loc 1 77 1 view .LVU44
 240 0046 70BD     		pop	{r4, r5, r6, pc}
 241              	.LVL19:
 242              	.L16:
  67:Core/Src/AB1815.c **** 	}
 243              		.loc 1 67 3 is_stmt 1 view .LVU45
 244 0048 FFF7FEFF 		bl	Error_Handler
 245              	.LVL20:
 246 004c EDE7     		b	.L14
 247              	.L17:
  72:Core/Src/AB1815.c **** 	}
 248              		.loc 1 72 3 view .LVU46
 249 004e FFF7FEFF 		bl	Error_Handler
 250              	.LVL21:
 251 0052 F2E7     		b	.L15
 252              	.L19:
 253              		.align	2
 254              	.L18:
 255 0054 00000000 		.word	hspi1
 256 0058 B80B0000 		.word	3000
 257 005c 00000000 		.word	ab1815_status_e_OK
 258              		.cfi_endproc
 259              	.LFE430:
 261              		.section	.text.clear_hundrdeds,"ax",%progbits
 262              		.align	1
 263              		.global	clear_hundrdeds
 264              		.syntax unified
 265              		.code	16
 266              		.thumb_func
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 7


 268              	clear_hundrdeds:
 269              	.LFB431:
  78:Core/Src/AB1815.c **** 
  79:Core/Src/AB1815.c **** // // 0x00
  80:Core/Src/AB1815.c **** // time_t get()
  81:Core/Src/AB1815.c **** // {
  82:Core/Src/AB1815.c **** // 	tmElements_t tm;
  83:Core/Src/AB1815.c **** // 	get_time(&tm);
  84:Core/Src/AB1815.c **** // 	return makeTime(tm); // ???
  85:Core/Src/AB1815.c **** // }
  86:Core/Src/AB1815.c **** 
  87:Core/Src/AB1815.c **** // // 0x00
  88:Core/Src/AB1815.c **** // void set(time_t time)
  89:Core/Src/AB1815.c **** // {
  90:Core/Src/AB1815.c **** // 	ab1815_tmElements_t tm;
  91:Core/Src/AB1815.c **** // 	breakTime(time, tm); // void breakTime(time_t timeInput, ab1815_tmElements_t tm)
  92:Core/Src/AB1815.c **** // 	set_time(&tm);		 // bool set_time(ab1815_tmElements_t *time)
  93:Core/Src/AB1815.c **** // }
  94:Core/Src/AB1815.c **** 
  95:Core/Src/AB1815.c **** // // 0x00
  96:Core/Src/AB1815.c **** // bool get_time(ab1815_tmElements_t *time)
  97:Core/Src/AB1815.c **** // {
  98:Core/Src/AB1815.c **** // 	bool to_ret = ab1815_status_e_ERROR;
  99:Core/Src/AB1815.c **** // 	size_t length = (AB1815_REG_ALARM_HUNDREDTHS - AB1815_REG_TIME_HUNDREDTHS);
 100:Core/Src/AB1815.c **** // 	uint8_t buffer[length];
 101:Core/Src/AB1815.c **** // 	memset(buffer, 0, length);
 102:Core/Src/AB1815.c **** // 	if (read(AB1815_REG_TIME_HUNDREDTHS, buffer, length) == ab1815_status_e_OK)
 103:Core/Src/AB1815.c **** // 	{
 104:Core/Src/AB1815.c **** // 		to_ret = ab1815_status_e_OK;
 105:Core/Src/AB1815.c **** // 		time->Hundredth = bcd2bin(buffer[0]);
 106:Core/Src/AB1815.c **** // 		time->Second = bcd2bin(0x7F & buffer[1]);
 107:Core/Src/AB1815.c **** // 		time->Minute = bcd2bin(0x7F & buffer[2]);
 108:Core/Src/AB1815.c **** // 		time->Hour = bcd2bin(0x3F & buffer[3]);
 109:Core/Src/AB1815.c **** // 		time->Day = bcd2bin(0x3F & buffer[4]);
 110:Core/Src/AB1815.c **** // 		time->Month = bcd2bin(0x1F & buffer[5]);
 111:Core/Src/AB1815.c **** // 		time->Year = y2kYearToTm(bcd2bin(buffer[6]));
 112:Core/Src/AB1815.c **** // 		time->Wday = bcd2bin(0x07 & buffer[7]);
 113:Core/Src/AB1815.c **** // 	}
 114:Core/Src/AB1815.c **** // 	return to_ret;
 115:Core/Src/AB1815.c **** // }
 116:Core/Src/AB1815.c **** 
 117:Core/Src/AB1815.c **** // // 0x00
 118:Core/Src/AB1815.c **** // bool set_time(ab1815_tmElements_t *time)
 119:Core/Src/AB1815.c **** // {
 120:Core/Src/AB1815.c **** // 	size_t length = (AB1815_REG_ALARM_HUNDREDTHS - AB1815_REG_TIME_HUNDREDTHS);
 121:Core/Src/AB1815.c **** // 	uint8_t buffer[length];
 122:Core/Src/AB1815.c **** // 	bool result = ab1815_status_e_ERROR;
 123:Core/Src/AB1815.c **** 
 124:Core/Src/AB1815.c **** // 	memset(buffer, 0, length);
 125:Core/Src/AB1815.c **** // 	buffer[0] = bin2bcd(time->Hundredth);
 126:Core/Src/AB1815.c **** // 	buffer[1] = bin2bcd(0x7F & time->Second);
 127:Core/Src/AB1815.c **** // 	buffer[2] = bin2bcd(0x7F & time->Minute);
 128:Core/Src/AB1815.c **** // 	buffer[3] = bin2bcd(0x3F & time->Hour);
 129:Core/Src/AB1815.c **** // 	buffer[4] = bin2bcd(0x3F & time->Day);
 130:Core/Src/AB1815.c **** // 	buffer[5] = bin2bcd(0x1F & time->Month);
 131:Core/Src/AB1815.c **** // 	buffer[6] = bin2bcd(tmYearToY2k(time->Year));
 132:Core/Src/AB1815.c **** // 	buffer[7] = bin2bcd(0x07 & time->Wday);
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 8


 133:Core/Src/AB1815.c **** 
 134:Core/Src/AB1815.c **** // 	if (write(AB1815_REG_TIME_HUNDREDTHS, buffer, length) == ab1815_status_e_OK)
 135:Core/Src/AB1815.c **** // 	{
 136:Core/Src/AB1815.c **** // 		result = ab1815_status_e_OK;
 137:Core/Src/AB1815.c **** // 	}
 138:Core/Src/AB1815.c **** 
 139:Core/Src/AB1815.c **** // 	return result;
 140:Core/Src/AB1815.c **** // };
 141:Core/Src/AB1815.c **** 
 142:Core/Src/AB1815.c **** bool clear_hundrdeds()
 143:Core/Src/AB1815.c **** {
 270              		.loc 1 143 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 8
 273              		@ frame_needed = 0, uses_anonymous_args = 0
 274 0000 00B5     		push	{lr}
 275              	.LCFI4:
 276              		.cfi_def_cfa_offset 4
 277              		.cfi_offset 14, -4
 278 0002 83B0     		sub	sp, sp, #12
 279              	.LCFI5:
 280              		.cfi_def_cfa_offset 16
 144:Core/Src/AB1815.c **** 	uint8_t buf[1];
 281              		.loc 1 144 2 view .LVU48
 145:Core/Src/AB1815.c **** 	buf[0] = 0;
 282              		.loc 1 145 2 view .LVU49
 283              		.loc 1 145 9 is_stmt 0 view .LVU50
 284 0004 01A9     		add	r1, sp, #4
 285 0006 0023     		movs	r3, #0
 286 0008 0B70     		strb	r3, [r1]
 146:Core/Src/AB1815.c **** 	return write(AB1815_REG_TIME_HUNDREDTHS, buf, 1);
 287              		.loc 1 146 2 is_stmt 1 view .LVU51
 288              		.loc 1 146 9 is_stmt 0 view .LVU52
 289 000a 0122     		movs	r2, #1
 290 000c 0020     		movs	r0, #0
 291 000e FFF7FEFF 		bl	write
 292              	.LVL22:
 147:Core/Src/AB1815.c **** };
 293              		.loc 1 147 1 view .LVU53
 294 0012 03B0     		add	sp, sp, #12
 295              		@ sp needed
 296 0014 00BD     		pop	{pc}
 297              		.cfi_endproc
 298              	.LFE431:
 300              		.section	.text.set_status,"ax",%progbits
 301              		.align	1
 302              		.global	set_status
 303              		.syntax unified
 304              		.code	16
 305              		.thumb_func
 307              	set_status:
 308              	.LVL23:
 309              	.LFB432:
 148:Core/Src/AB1815.c **** 
 149:Core/Src/AB1815.c **** // 0x08
 150:Core/Src/AB1815.c **** // bool get_alarm(ab1815_tmElements_t *time, ab1815_alarm_repeat_mode *alarm_mode)
 151:Core/Src/AB1815.c **** // {
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 9


 152:Core/Src/AB1815.c **** // 	bool to_ret = ab1815_status_e_ERROR;
 153:Core/Src/AB1815.c **** // 	size_t length = AB1815_REG_STATUS - AB1815_REG_ALARM_HUNDREDTHS;
 154:Core/Src/AB1815.c **** // 	uint8_t buffer[length];
 155:Core/Src/AB1815.c **** // 	memset(buffer, 0, length);
 156:Core/Src/AB1815.c **** // 	countdown_control_t cd_reg;
 157:Core/Src/AB1815.c **** // 	uint32_t *val = (uint32_t *)alarm_mode;
 158:Core/Src/AB1815.c **** 
 159:Core/Src/AB1815.c **** // 	if (get_countdown_control(&cd_reg) == ab1815_status_e_OK)
 160:Core/Src/AB1815.c **** // 	{
 161:Core/Src/AB1815.c **** // 		if (read(AB1815_REG_ALARM_HUNDREDTHS, buffer, length) == ab1815_status_e_OK)
 162:Core/Src/AB1815.c **** // 		{
 163:Core/Src/AB1815.c **** // 			to_ret = ab1815_status_e_OK;
 164:Core/Src/AB1815.c **** // 			time->Hundredth = bcd2bin(buffer[0]);
 165:Core/Src/AB1815.c **** // 			time->Second = bcd2bin(0x7F & buffer[1]);
 166:Core/Src/AB1815.c **** // 			time->Minute = bcd2bin(0x7F & buffer[2]);
 167:Core/Src/AB1815.c **** // 			time->Hour = bcd2bin(0x3F & buffer[3]);
 168:Core/Src/AB1815.c **** // 			time->Day = bcd2bin(0x3F & buffer[4]);
 169:Core/Src/AB1815.c **** // 			time->Month = bcd2bin(0x1F & buffer[5]);
 170:Core/Src/AB1815.c **** // 			time->Wday = bcd2bin(0x07 & buffer[6]);
 171:Core/Src/AB1815.c **** // 		}
 172:Core/Src/AB1815.c **** // 		*alarm_mode = (ab1815_alarm_repeat_mode)cd_reg.fields.RPT;
 173:Core/Src/AB1815.c **** // 		if (cd_reg.fields.RPT == 7)
 174:Core/Src/AB1815.c **** // 		{
 175:Core/Src/AB1815.c **** // 			if ((time->Hundredth & 0xF0) == 0xF0)
 176:Core/Src/AB1815.c **** // 			{
 177:Core/Src/AB1815.c **** 
 178:Core/Src/AB1815.c **** // 				(*val)++;
 179:Core/Src/AB1815.c **** // 				if ((time->Hundredth & 0xFF) == 0xFF)
 180:Core/Src/AB1815.c **** // 				{
 181:Core/Src/AB1815.c **** // 					(*val)++;
 182:Core/Src/AB1815.c **** // 				}
 183:Core/Src/AB1815.c **** // 			}
 184:Core/Src/AB1815.c **** // 		}
 185:Core/Src/AB1815.c **** // 	}
 186:Core/Src/AB1815.c **** // 	return to_ret;
 187:Core/Src/AB1815.c **** // };
 188:Core/Src/AB1815.c **** 
 189:Core/Src/AB1815.c **** // // 0x08
 190:Core/Src/AB1815.c **** // bool set_alarm(ab1815_tmElements_t *time, ab1815_alarm_repeat_mode alarm_mode)
 191:Core/Src/AB1815.c **** // {
 192:Core/Src/AB1815.c **** // 	size_t length = AB1815_REG_STATUS - AB1815_REG_ALARM_HUNDREDTHS;
 193:Core/Src/AB1815.c **** // 	uint8_t buffer[length];
 194:Core/Src/AB1815.c **** // 	bool result = ab1815_status_e_ERROR;
 195:Core/Src/AB1815.c **** // 	uint8_t repeat = alarm_mode;
 196:Core/Src/AB1815.c **** 
 197:Core/Src/AB1815.c **** // 	memset(buffer, 0, length);
 198:Core/Src/AB1815.c **** // 	buffer[0] = bin2bcd(time->Hundredth);
 199:Core/Src/AB1815.c **** // 	buffer[1] = bin2bcd(0x7F & time->Second);
 200:Core/Src/AB1815.c **** // 	buffer[2] = bin2bcd(0x7F & time->Minute);
 201:Core/Src/AB1815.c **** // 	buffer[3] = bin2bcd(0x3F & time->Hour);
 202:Core/Src/AB1815.c **** // 	buffer[4] = bin2bcd(0x3F & time->Day);
 203:Core/Src/AB1815.c **** // 	buffer[5] = bin2bcd(0x1F & time->Month);
 204:Core/Src/AB1815.c **** // 	buffer[6] = bin2bcd(0x07 & time->Wday);
 205:Core/Src/AB1815.c **** 
 206:Core/Src/AB1815.c **** // 	switch (alarm_mode)
 207:Core/Src/AB1815.c **** // 	{
 208:Core/Src/AB1815.c **** // 	case ab1815_alarm_repeat_once_per_tenth:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 10


 209:Core/Src/AB1815.c **** // 		repeat = 7;
 210:Core/Src/AB1815.c **** // 		buffer[0] |= 0xF0;
 211:Core/Src/AB1815.c **** // 		break;
 212:Core/Src/AB1815.c **** // 	case ab1815_alarm_repeat_once_per_hundredth:
 213:Core/Src/AB1815.c **** // 		repeat = 7;
 214:Core/Src/AB1815.c **** // 		buffer[0] = 0xFF;
 215:Core/Src/AB1815.c **** // 		break;
 216:Core/Src/AB1815.c **** // 	default:
 217:Core/Src/AB1815.c **** // 		repeat = alarm_mode;
 218:Core/Src/AB1815.c **** // 	}
 219:Core/Src/AB1815.c **** 
 220:Core/Src/AB1815.c **** // 	if (write(AB1815_REG_ALARM_HUNDREDTHS, buffer, length) == ab1815_status_e_OK)
 221:Core/Src/AB1815.c **** // 	{
 222:Core/Src/AB1815.c **** // 		countdown_control_t cd_reg;
 223:Core/Src/AB1815.c **** 
 224:Core/Src/AB1815.c **** // 		if (get_countdown_control(&cd_reg) == ab1815_status_e_OK)
 225:Core/Src/AB1815.c **** // 		{
 226:Core/Src/AB1815.c **** // 			cd_reg.fields.RPT = repeat;
 227:Core/Src/AB1815.c **** // 			return set_countdown_control(&cd_reg);
 228:Core/Src/AB1815.c **** // 		}
 229:Core/Src/AB1815.c **** // 	}
 230:Core/Src/AB1815.c **** // 	return result;
 231:Core/Src/AB1815.c **** // };
 232:Core/Src/AB1815.c **** 
 233:Core/Src/AB1815.c **** // 0x0F - See also: ARST in Control1.
 234:Core/Src/AB1815.c **** //	If ARST is a 1, a read of the Status register will produce the current state of all
 235:Core/Src/AB1815.c **** //	the interrupt flags and then clear them
 236:Core/Src/AB1815.c **** bool set_status(status_t *status)
 237:Core/Src/AB1815.c **** {
 310              		.loc 1 237 1 is_stmt 1 view -0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		.loc 1 237 1 is_stmt 0 view .LVU55
 315 0000 10B5     		push	{r4, lr}
 316              	.LCFI6:
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 4, -8
 319              		.cfi_offset 14, -4
 320 0002 0100     		movs	r1, r0
 238:Core/Src/AB1815.c **** 	return write(AB1815_REG_STATUS, &status->value, 1);
 321              		.loc 1 238 2 is_stmt 1 view .LVU56
 322              		.loc 1 238 9 is_stmt 0 view .LVU57
 323 0004 0122     		movs	r2, #1
 324 0006 0F20     		movs	r0, #15
 325              	.LVL24:
 326              		.loc 1 238 9 view .LVU58
 327 0008 FFF7FEFF 		bl	write
 328              	.LVL25:
 239:Core/Src/AB1815.c **** };
 329              		.loc 1 239 1 view .LVU59
 330              		@ sp needed
 331 000c 10BD     		pop	{r4, pc}
 332              		.cfi_endproc
 333              	.LFE432:
 335              		.section	.text.get_status,"ax",%progbits
 336              		.align	1
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 11


 337              		.global	get_status
 338              		.syntax unified
 339              		.code	16
 340              		.thumb_func
 342              	get_status:
 343              	.LVL26:
 344              	.LFB433:
 240:Core/Src/AB1815.c **** 
 241:Core/Src/AB1815.c **** bool get_status(status_t *status)
 242:Core/Src/AB1815.c **** {
 345              		.loc 1 242 1 is_stmt 1 view -0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349              		.loc 1 242 1 is_stmt 0 view .LVU61
 350 0000 10B5     		push	{r4, lr}
 351              	.LCFI7:
 352              		.cfi_def_cfa_offset 8
 353              		.cfi_offset 4, -8
 354              		.cfi_offset 14, -4
 355 0002 0100     		movs	r1, r0
 243:Core/Src/AB1815.c **** 	return read(AB1815_REG_STATUS, &status->value, 1);
 356              		.loc 1 243 2 is_stmt 1 view .LVU62
 357              		.loc 1 243 9 is_stmt 0 view .LVU63
 358 0004 0122     		movs	r2, #1
 359 0006 0F20     		movs	r0, #15
 360              	.LVL27:
 361              		.loc 1 243 9 view .LVU64
 362 0008 FFF7FEFF 		bl	read
 363              	.LVL28:
 244:Core/Src/AB1815.c **** };
 364              		.loc 1 244 1 view .LVU65
 365              		@ sp needed
 366 000c 10BD     		pop	{r4, pc}
 367              		.cfi_endproc
 368              	.LFE433:
 370              		.section	.text.set_control1,"ax",%progbits
 371              		.align	1
 372              		.global	set_control1
 373              		.syntax unified
 374              		.code	16
 375              		.thumb_func
 377              	set_control1:
 378              	.LVL29:
 379              	.LFB434:
 245:Core/Src/AB1815.c **** 
 246:Core/Src/AB1815.c **** // 0x10
 247:Core/Src/AB1815.c **** bool set_control1(control1_t *control1)
 248:Core/Src/AB1815.c **** {
 380              		.loc 1 248 1 is_stmt 1 view -0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 0, uses_anonymous_args = 0
 384              		.loc 1 248 1 is_stmt 0 view .LVU67
 385 0000 10B5     		push	{r4, lr}
 386              	.LCFI8:
 387              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 12


 388              		.cfi_offset 4, -8
 389              		.cfi_offset 14, -4
 390 0002 0100     		movs	r1, r0
 249:Core/Src/AB1815.c **** 	return write(AB1815_REG_CONTROL1, &control1->value, 1);
 391              		.loc 1 249 2 is_stmt 1 view .LVU68
 392              		.loc 1 249 9 is_stmt 0 view .LVU69
 393 0004 0122     		movs	r2, #1
 394 0006 1020     		movs	r0, #16
 395              	.LVL30:
 396              		.loc 1 249 9 view .LVU70
 397 0008 FFF7FEFF 		bl	write
 398              	.LVL31:
 250:Core/Src/AB1815.c **** };
 399              		.loc 1 250 1 view .LVU71
 400              		@ sp needed
 401 000c 10BD     		pop	{r4, pc}
 402              		.cfi_endproc
 403              	.LFE434:
 405              		.section	.text.get_control1,"ax",%progbits
 406              		.align	1
 407              		.global	get_control1
 408              		.syntax unified
 409              		.code	16
 410              		.thumb_func
 412              	get_control1:
 413              	.LVL32:
 414              	.LFB435:
 251:Core/Src/AB1815.c **** 
 252:Core/Src/AB1815.c **** bool get_control1(control1_t *control1)
 253:Core/Src/AB1815.c **** {
 415              		.loc 1 253 1 is_stmt 1 view -0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419              		.loc 1 253 1 is_stmt 0 view .LVU73
 420 0000 10B5     		push	{r4, lr}
 421              	.LCFI9:
 422              		.cfi_def_cfa_offset 8
 423              		.cfi_offset 4, -8
 424              		.cfi_offset 14, -4
 425 0002 0100     		movs	r1, r0
 254:Core/Src/AB1815.c **** 	return read(AB1815_REG_CONTROL1, &control1->value, 1);
 426              		.loc 1 254 2 is_stmt 1 view .LVU74
 427              		.loc 1 254 9 is_stmt 0 view .LVU75
 428 0004 0122     		movs	r2, #1
 429 0006 1020     		movs	r0, #16
 430              	.LVL33:
 431              		.loc 1 254 9 view .LVU76
 432 0008 FFF7FEFF 		bl	read
 433              	.LVL34:
 255:Core/Src/AB1815.c **** };
 434              		.loc 1 255 1 view .LVU77
 435              		@ sp needed
 436 000c 10BD     		pop	{r4, pc}
 437              		.cfi_endproc
 438              	.LFE435:
 440              		.section	.text.set_control2,"ax",%progbits
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 13


 441              		.align	1
 442              		.global	set_control2
 443              		.syntax unified
 444              		.code	16
 445              		.thumb_func
 447              	set_control2:
 448              	.LVL35:
 449              	.LFB436:
 256:Core/Src/AB1815.c **** 
 257:Core/Src/AB1815.c **** // 0x11
 258:Core/Src/AB1815.c **** bool set_control2(control2_t *control2)
 259:Core/Src/AB1815.c **** {
 450              		.loc 1 259 1 is_stmt 1 view -0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              		.loc 1 259 1 is_stmt 0 view .LVU79
 455 0000 10B5     		push	{r4, lr}
 456              	.LCFI10:
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 4, -8
 459              		.cfi_offset 14, -4
 460 0002 0100     		movs	r1, r0
 260:Core/Src/AB1815.c **** 	return write(AB1815_REG_CONTROL2, &control2->value, 1);
 461              		.loc 1 260 2 is_stmt 1 view .LVU80
 462              		.loc 1 260 9 is_stmt 0 view .LVU81
 463 0004 0122     		movs	r2, #1
 464 0006 1120     		movs	r0, #17
 465              	.LVL36:
 466              		.loc 1 260 9 view .LVU82
 467 0008 FFF7FEFF 		bl	write
 468              	.LVL37:
 261:Core/Src/AB1815.c **** };
 469              		.loc 1 261 1 view .LVU83
 470              		@ sp needed
 471 000c 10BD     		pop	{r4, pc}
 472              		.cfi_endproc
 473              	.LFE436:
 475              		.section	.text.get_control2,"ax",%progbits
 476              		.align	1
 477              		.global	get_control2
 478              		.syntax unified
 479              		.code	16
 480              		.thumb_func
 482              	get_control2:
 483              	.LVL38:
 484              	.LFB437:
 262:Core/Src/AB1815.c **** 
 263:Core/Src/AB1815.c **** bool get_control2(control2_t *control2)
 264:Core/Src/AB1815.c **** {
 485              		.loc 1 264 1 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 0
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		.loc 1 264 1 is_stmt 0 view .LVU85
 490 0000 10B5     		push	{r4, lr}
 491              	.LCFI11:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 14


 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 4, -8
 494              		.cfi_offset 14, -4
 495 0002 0100     		movs	r1, r0
 265:Core/Src/AB1815.c **** 	return read(AB1815_REG_CONTROL2, &control2->value, 1);
 496              		.loc 1 265 2 is_stmt 1 view .LVU86
 497              		.loc 1 265 9 is_stmt 0 view .LVU87
 498 0004 0122     		movs	r2, #1
 499 0006 1120     		movs	r0, #17
 500              	.LVL39:
 501              		.loc 1 265 9 view .LVU88
 502 0008 FFF7FEFF 		bl	read
 503              	.LVL40:
 266:Core/Src/AB1815.c **** };
 504              		.loc 1 266 1 view .LVU89
 505              		@ sp needed
 506 000c 10BD     		pop	{r4, pc}
 507              		.cfi_endproc
 508              	.LFE437:
 510              		.section	.text.set_interrupt_mask,"ax",%progbits
 511              		.align	1
 512              		.global	set_interrupt_mask
 513              		.syntax unified
 514              		.code	16
 515              		.thumb_func
 517              	set_interrupt_mask:
 518              	.LVL41:
 519              	.LFB438:
 267:Core/Src/AB1815.c **** 
 268:Core/Src/AB1815.c **** // 0x12
 269:Core/Src/AB1815.c **** bool set_interrupt_mask(inturrupt_mask_t *inturrupt_mask)
 270:Core/Src/AB1815.c **** {
 520              		.loc 1 270 1 is_stmt 1 view -0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              		.loc 1 270 1 is_stmt 0 view .LVU91
 525 0000 10B5     		push	{r4, lr}
 526              	.LCFI12:
 527              		.cfi_def_cfa_offset 8
 528              		.cfi_offset 4, -8
 529              		.cfi_offset 14, -4
 530 0002 0100     		movs	r1, r0
 271:Core/Src/AB1815.c **** 	return write(AB1815_REG_INTERRUPT_MASK, &inturrupt_mask->value, 1);
 531              		.loc 1 271 2 is_stmt 1 view .LVU92
 532              		.loc 1 271 9 is_stmt 0 view .LVU93
 533 0004 0122     		movs	r2, #1
 534 0006 1220     		movs	r0, #18
 535              	.LVL42:
 536              		.loc 1 271 9 view .LVU94
 537 0008 FFF7FEFF 		bl	write
 538              	.LVL43:
 272:Core/Src/AB1815.c **** };
 539              		.loc 1 272 1 view .LVU95
 540              		@ sp needed
 541 000c 10BD     		pop	{r4, pc}
 542              		.cfi_endproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 15


 543              	.LFE438:
 545              		.section	.text.get_interrupt_mask,"ax",%progbits
 546              		.align	1
 547              		.global	get_interrupt_mask
 548              		.syntax unified
 549              		.code	16
 550              		.thumb_func
 552              	get_interrupt_mask:
 553              	.LVL44:
 554              	.LFB439:
 273:Core/Src/AB1815.c **** 
 274:Core/Src/AB1815.c **** bool get_interrupt_mask(inturrupt_mask_t *inturrupt_mask)
 275:Core/Src/AB1815.c **** {
 555              		.loc 1 275 1 is_stmt 1 view -0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 0
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559              		.loc 1 275 1 is_stmt 0 view .LVU97
 560 0000 10B5     		push	{r4, lr}
 561              	.LCFI13:
 562              		.cfi_def_cfa_offset 8
 563              		.cfi_offset 4, -8
 564              		.cfi_offset 14, -4
 565 0002 0100     		movs	r1, r0
 276:Core/Src/AB1815.c **** 	return read(AB1815_REG_INTERRUPT_MASK, &inturrupt_mask->value, 1);
 566              		.loc 1 276 2 is_stmt 1 view .LVU98
 567              		.loc 1 276 9 is_stmt 0 view .LVU99
 568 0004 0122     		movs	r2, #1
 569 0006 1220     		movs	r0, #18
 570              	.LVL45:
 571              		.loc 1 276 9 view .LVU100
 572 0008 FFF7FEFF 		bl	read
 573              	.LVL46:
 277:Core/Src/AB1815.c **** };
 574              		.loc 1 277 1 view .LVU101
 575              		@ sp needed
 576 000c 10BD     		pop	{r4, pc}
 577              		.cfi_endproc
 578              	.LFE439:
 580              		.section	.text.set_square_wave,"ax",%progbits
 581              		.align	1
 582              		.global	set_square_wave
 583              		.syntax unified
 584              		.code	16
 585              		.thumb_func
 587              	set_square_wave:
 588              	.LVL47:
 589              	.LFB440:
 278:Core/Src/AB1815.c **** 
 279:Core/Src/AB1815.c **** // 0x13
 280:Core/Src/AB1815.c **** bool set_square_wave(square_wave_t *square_wave)
 281:Core/Src/AB1815.c **** {
 590              		.loc 1 281 1 is_stmt 1 view -0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              		.loc 1 281 1 is_stmt 0 view .LVU103
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 16


 595 0000 10B5     		push	{r4, lr}
 596              	.LCFI14:
 597              		.cfi_def_cfa_offset 8
 598              		.cfi_offset 4, -8
 599              		.cfi_offset 14, -4
 600 0002 0100     		movs	r1, r0
 282:Core/Src/AB1815.c **** 	return write(AB1815_REG_SQW, &square_wave->value, 1);
 601              		.loc 1 282 2 is_stmt 1 view .LVU104
 602              		.loc 1 282 9 is_stmt 0 view .LVU105
 603 0004 0122     		movs	r2, #1
 604 0006 1320     		movs	r0, #19
 605              	.LVL48:
 606              		.loc 1 282 9 view .LVU106
 607 0008 FFF7FEFF 		bl	write
 608              	.LVL49:
 283:Core/Src/AB1815.c **** }
 609              		.loc 1 283 1 view .LVU107
 610              		@ sp needed
 611 000c 10BD     		pop	{r4, pc}
 612              		.cfi_endproc
 613              	.LFE440:
 615              		.section	.text.get_square_wave,"ax",%progbits
 616              		.align	1
 617              		.global	get_square_wave
 618              		.syntax unified
 619              		.code	16
 620              		.thumb_func
 622              	get_square_wave:
 623              	.LVL50:
 624              	.LFB441:
 284:Core/Src/AB1815.c **** 
 285:Core/Src/AB1815.c **** bool get_square_wave(square_wave_t *square_wave)
 286:Core/Src/AB1815.c **** {
 625              		.loc 1 286 1 is_stmt 1 view -0
 626              		.cfi_startproc
 627              		@ args = 0, pretend = 0, frame = 0
 628              		@ frame_needed = 0, uses_anonymous_args = 0
 629              		.loc 1 286 1 is_stmt 0 view .LVU109
 630 0000 10B5     		push	{r4, lr}
 631              	.LCFI15:
 632              		.cfi_def_cfa_offset 8
 633              		.cfi_offset 4, -8
 634              		.cfi_offset 14, -4
 635 0002 0100     		movs	r1, r0
 287:Core/Src/AB1815.c **** 	return read(AB1815_REG_SQW, &square_wave->value, 1);
 636              		.loc 1 287 2 is_stmt 1 view .LVU110
 637              		.loc 1 287 9 is_stmt 0 view .LVU111
 638 0004 0122     		movs	r2, #1
 639 0006 1320     		movs	r0, #19
 640              	.LVL51:
 641              		.loc 1 287 9 view .LVU112
 642 0008 FFF7FEFF 		bl	read
 643              	.LVL52:
 288:Core/Src/AB1815.c **** }
 644              		.loc 1 288 1 view .LVU113
 645              		@ sp needed
 646 000c 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 17


 647              		.cfi_endproc
 648              	.LFE441:
 650              		.section	.text.set_cal_xt,"ax",%progbits
 651              		.align	1
 652              		.global	set_cal_xt
 653              		.syntax unified
 654              		.code	16
 655              		.thumb_func
 657              	set_cal_xt:
 658              	.LVL53:
 659              	.LFB442:
 289:Core/Src/AB1815.c **** 
 290:Core/Src/AB1815.c **** // 0x14
 291:Core/Src/AB1815.c **** bool set_cal_xt(cal_xt_t *cal_xt)
 292:Core/Src/AB1815.c **** {
 660              		.loc 1 292 1 is_stmt 1 view -0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664              		.loc 1 292 1 is_stmt 0 view .LVU115
 665 0000 10B5     		push	{r4, lr}
 666              	.LCFI16:
 667              		.cfi_def_cfa_offset 8
 668              		.cfi_offset 4, -8
 669              		.cfi_offset 14, -4
 670 0002 0100     		movs	r1, r0
 293:Core/Src/AB1815.c **** 	return write(AB1815_REG_CAL_XT, &cal_xt->value, 1);
 671              		.loc 1 293 2 is_stmt 1 view .LVU116
 672              		.loc 1 293 9 is_stmt 0 view .LVU117
 673 0004 0122     		movs	r2, #1
 674 0006 1420     		movs	r0, #20
 675              	.LVL54:
 676              		.loc 1 293 9 view .LVU118
 677 0008 FFF7FEFF 		bl	write
 678              	.LVL55:
 294:Core/Src/AB1815.c **** }
 679              		.loc 1 294 1 view .LVU119
 680              		@ sp needed
 681 000c 10BD     		pop	{r4, pc}
 682              		.cfi_endproc
 683              	.LFE442:
 685              		.section	.text.get_cal_xt,"ax",%progbits
 686              		.align	1
 687              		.global	get_cal_xt
 688              		.syntax unified
 689              		.code	16
 690              		.thumb_func
 692              	get_cal_xt:
 693              	.LVL56:
 694              	.LFB443:
 295:Core/Src/AB1815.c **** 
 296:Core/Src/AB1815.c **** bool get_cal_xt(cal_xt_t *cal_xt)
 297:Core/Src/AB1815.c **** {
 695              		.loc 1 297 1 is_stmt 1 view -0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 18


 699              		.loc 1 297 1 is_stmt 0 view .LVU121
 700 0000 10B5     		push	{r4, lr}
 701              	.LCFI17:
 702              		.cfi_def_cfa_offset 8
 703              		.cfi_offset 4, -8
 704              		.cfi_offset 14, -4
 705 0002 0100     		movs	r1, r0
 298:Core/Src/AB1815.c **** 	return read(AB1815_REG_CAL_XT, &cal_xt->value, 1);
 706              		.loc 1 298 2 is_stmt 1 view .LVU122
 707              		.loc 1 298 9 is_stmt 0 view .LVU123
 708 0004 0122     		movs	r2, #1
 709 0006 1420     		movs	r0, #20
 710              	.LVL57:
 711              		.loc 1 298 9 view .LVU124
 712 0008 FFF7FEFF 		bl	read
 713              	.LVL58:
 299:Core/Src/AB1815.c **** }
 714              		.loc 1 299 1 view .LVU125
 715              		@ sp needed
 716 000c 10BD     		pop	{r4, pc}
 717              		.cfi_endproc
 718              	.LFE443:
 720              		.section	.text.set_cal_rc_hi,"ax",%progbits
 721              		.align	1
 722              		.global	set_cal_rc_hi
 723              		.syntax unified
 724              		.code	16
 725              		.thumb_func
 727              	set_cal_rc_hi:
 728              	.LVL59:
 729              	.LFB444:
 300:Core/Src/AB1815.c **** 
 301:Core/Src/AB1815.c **** // 0x15
 302:Core/Src/AB1815.c **** bool set_cal_rc_hi(cal_rc_hi_t *cal_rc_hi)
 303:Core/Src/AB1815.c **** {
 730              		.loc 1 303 1 is_stmt 1 view -0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734              		.loc 1 303 1 is_stmt 0 view .LVU127
 735 0000 10B5     		push	{r4, lr}
 736              	.LCFI18:
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 4, -8
 739              		.cfi_offset 14, -4
 740 0002 0100     		movs	r1, r0
 304:Core/Src/AB1815.c **** 	return write(AB1815_REG_CAL_RC_HI, &cal_rc_hi->value, 1);
 741              		.loc 1 304 2 is_stmt 1 view .LVU128
 742              		.loc 1 304 9 is_stmt 0 view .LVU129
 743 0004 0122     		movs	r2, #1
 744 0006 1520     		movs	r0, #21
 745              	.LVL60:
 746              		.loc 1 304 9 view .LVU130
 747 0008 FFF7FEFF 		bl	write
 748              	.LVL61:
 305:Core/Src/AB1815.c **** }
 749              		.loc 1 305 1 view .LVU131
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 19


 750              		@ sp needed
 751 000c 10BD     		pop	{r4, pc}
 752              		.cfi_endproc
 753              	.LFE444:
 755              		.section	.text.get_cal_rc_hi,"ax",%progbits
 756              		.align	1
 757              		.global	get_cal_rc_hi
 758              		.syntax unified
 759              		.code	16
 760              		.thumb_func
 762              	get_cal_rc_hi:
 763              	.LVL62:
 764              	.LFB445:
 306:Core/Src/AB1815.c **** 
 307:Core/Src/AB1815.c **** bool get_cal_rc_hi(cal_rc_hi_t *cal_rc_hi)
 308:Core/Src/AB1815.c **** {
 765              		.loc 1 308 1 is_stmt 1 view -0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 0
 768              		@ frame_needed = 0, uses_anonymous_args = 0
 769              		.loc 1 308 1 is_stmt 0 view .LVU133
 770 0000 10B5     		push	{r4, lr}
 771              	.LCFI19:
 772              		.cfi_def_cfa_offset 8
 773              		.cfi_offset 4, -8
 774              		.cfi_offset 14, -4
 775 0002 0100     		movs	r1, r0
 309:Core/Src/AB1815.c **** 	return read(AB1815_REG_CAL_RC_HI, &cal_rc_hi->value, 1);
 776              		.loc 1 309 2 is_stmt 1 view .LVU134
 777              		.loc 1 309 9 is_stmt 0 view .LVU135
 778 0004 0122     		movs	r2, #1
 779 0006 1520     		movs	r0, #21
 780              	.LVL63:
 781              		.loc 1 309 9 view .LVU136
 782 0008 FFF7FEFF 		bl	read
 783              	.LVL64:
 310:Core/Src/AB1815.c **** }
 784              		.loc 1 310 1 view .LVU137
 785              		@ sp needed
 786 000c 10BD     		pop	{r4, pc}
 787              		.cfi_endproc
 788              	.LFE445:
 790              		.section	.text.set_cal_rc_low,"ax",%progbits
 791              		.align	1
 792              		.global	set_cal_rc_low
 793              		.syntax unified
 794              		.code	16
 795              		.thumb_func
 797              	set_cal_rc_low:
 798              	.LVL65:
 799              	.LFB446:
 311:Core/Src/AB1815.c **** 
 312:Core/Src/AB1815.c **** // 0x16
 313:Core/Src/AB1815.c **** bool set_cal_rc_low(cal_rc_low_t *cal_rc_low)
 314:Core/Src/AB1815.c **** {
 800              		.loc 1 314 1 is_stmt 1 view -0
 801              		.cfi_startproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 20


 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804              		.loc 1 314 1 is_stmt 0 view .LVU139
 805 0000 10B5     		push	{r4, lr}
 806              	.LCFI20:
 807              		.cfi_def_cfa_offset 8
 808              		.cfi_offset 4, -8
 809              		.cfi_offset 14, -4
 810 0002 0100     		movs	r1, r0
 315:Core/Src/AB1815.c **** 	return write(AB1815_REG_CAL_RC_LOW, &cal_rc_low->OFFSETR, 1);
 811              		.loc 1 315 2 is_stmt 1 view .LVU140
 812              		.loc 1 315 9 is_stmt 0 view .LVU141
 813 0004 0122     		movs	r2, #1
 814 0006 1620     		movs	r0, #22
 815              	.LVL66:
 816              		.loc 1 315 9 view .LVU142
 817 0008 FFF7FEFF 		bl	write
 818              	.LVL67:
 316:Core/Src/AB1815.c **** }
 819              		.loc 1 316 1 view .LVU143
 820              		@ sp needed
 821 000c 10BD     		pop	{r4, pc}
 822              		.cfi_endproc
 823              	.LFE446:
 825              		.section	.text.get_cal_rc_low,"ax",%progbits
 826              		.align	1
 827              		.global	get_cal_rc_low
 828              		.syntax unified
 829              		.code	16
 830              		.thumb_func
 832              	get_cal_rc_low:
 833              	.LVL68:
 834              	.LFB447:
 317:Core/Src/AB1815.c **** 
 318:Core/Src/AB1815.c **** bool get_cal_rc_low(cal_rc_low_t *cal_rc_low)
 319:Core/Src/AB1815.c **** {
 835              		.loc 1 319 1 is_stmt 1 view -0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 0
 838              		@ frame_needed = 0, uses_anonymous_args = 0
 839              		.loc 1 319 1 is_stmt 0 view .LVU145
 840 0000 10B5     		push	{r4, lr}
 841              	.LCFI21:
 842              		.cfi_def_cfa_offset 8
 843              		.cfi_offset 4, -8
 844              		.cfi_offset 14, -4
 845 0002 0100     		movs	r1, r0
 320:Core/Src/AB1815.c **** 	return read(AB1815_REG_CAL_RC_LOW, &cal_rc_low->OFFSETR, 1);
 846              		.loc 1 320 2 is_stmt 1 view .LVU146
 847              		.loc 1 320 9 is_stmt 0 view .LVU147
 848 0004 0122     		movs	r2, #1
 849 0006 1620     		movs	r0, #22
 850              	.LVL69:
 851              		.loc 1 320 9 view .LVU148
 852 0008 FFF7FEFF 		bl	read
 853              	.LVL70:
 321:Core/Src/AB1815.c **** }
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 21


 854              		.loc 1 321 1 view .LVU149
 855              		@ sp needed
 856 000c 10BD     		pop	{r4, pc}
 857              		.cfi_endproc
 858              	.LFE447:
 860              		.section	.text.set_sleep_control,"ax",%progbits
 861              		.align	1
 862              		.global	set_sleep_control
 863              		.syntax unified
 864              		.code	16
 865              		.thumb_func
 867              	set_sleep_control:
 868              	.LVL71:
 869              	.LFB448:
 322:Core/Src/AB1815.c **** 
 323:Core/Src/AB1815.c **** // 0x17 sleep_control_t
 324:Core/Src/AB1815.c **** bool set_sleep_control(sleep_control_t *sleep_control)
 325:Core/Src/AB1815.c **** {
 870              		.loc 1 325 1 is_stmt 1 view -0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              		.loc 1 325 1 is_stmt 0 view .LVU151
 875 0000 10B5     		push	{r4, lr}
 876              	.LCFI22:
 877              		.cfi_def_cfa_offset 8
 878              		.cfi_offset 4, -8
 879              		.cfi_offset 14, -4
 880 0002 0100     		movs	r1, r0
 326:Core/Src/AB1815.c **** 	return write(AB1815_REG_SLEEP_CONTROL, &sleep_control->value, 1);
 881              		.loc 1 326 2 is_stmt 1 view .LVU152
 882              		.loc 1 326 9 is_stmt 0 view .LVU153
 883 0004 0122     		movs	r2, #1
 884 0006 1720     		movs	r0, #23
 885              	.LVL72:
 886              		.loc 1 326 9 view .LVU154
 887 0008 FFF7FEFF 		bl	write
 888              	.LVL73:
 327:Core/Src/AB1815.c **** };
 889              		.loc 1 327 1 view .LVU155
 890              		@ sp needed
 891 000c 10BD     		pop	{r4, pc}
 892              		.cfi_endproc
 893              	.LFE448:
 895              		.section	.text.get_sleep_control,"ax",%progbits
 896              		.align	1
 897              		.global	get_sleep_control
 898              		.syntax unified
 899              		.code	16
 900              		.thumb_func
 902              	get_sleep_control:
 903              	.LVL74:
 904              	.LFB449:
 328:Core/Src/AB1815.c **** 
 329:Core/Src/AB1815.c **** bool get_sleep_control(sleep_control_t *sleep_control)
 330:Core/Src/AB1815.c **** {
 905              		.loc 1 330 1 is_stmt 1 view -0
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 22


 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 0
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909              		.loc 1 330 1 is_stmt 0 view .LVU157
 910 0000 10B5     		push	{r4, lr}
 911              	.LCFI23:
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 4, -8
 914              		.cfi_offset 14, -4
 915 0002 0100     		movs	r1, r0
 331:Core/Src/AB1815.c **** 	return read(AB1815_REG_SLEEP_CONTROL, &sleep_control->value, 1);
 916              		.loc 1 331 2 is_stmt 1 view .LVU158
 917              		.loc 1 331 9 is_stmt 0 view .LVU159
 918 0004 0122     		movs	r2, #1
 919 0006 1720     		movs	r0, #23
 920              	.LVL75:
 921              		.loc 1 331 9 view .LVU160
 922 0008 FFF7FEFF 		bl	read
 923              	.LVL76:
 332:Core/Src/AB1815.c **** };
 924              		.loc 1 332 1 view .LVU161
 925              		@ sp needed
 926 000c 10BD     		pop	{r4, pc}
 927              		.cfi_endproc
 928              	.LFE449:
 930              		.section	.text.set_countdown_control,"ax",%progbits
 931              		.align	1
 932              		.global	set_countdown_control
 933              		.syntax unified
 934              		.code	16
 935              		.thumb_func
 937              	set_countdown_control:
 938              	.LVL77:
 939              	.LFB450:
 333:Core/Src/AB1815.c **** 
 334:Core/Src/AB1815.c **** // 0x18
 335:Core/Src/AB1815.c **** bool set_countdown_control(countdown_control_t *countdown_control)
 336:Core/Src/AB1815.c **** {
 940              		.loc 1 336 1 is_stmt 1 view -0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 0
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 944              		.loc 1 336 1 is_stmt 0 view .LVU163
 945 0000 10B5     		push	{r4, lr}
 946              	.LCFI24:
 947              		.cfi_def_cfa_offset 8
 948              		.cfi_offset 4, -8
 949              		.cfi_offset 14, -4
 950 0002 0100     		movs	r1, r0
 337:Core/Src/AB1815.c **** 	return write(AB1815_REG_COUNTDOWN_TIMER_CONTROL, &countdown_control->value, 1);
 951              		.loc 1 337 2 is_stmt 1 view .LVU164
 952              		.loc 1 337 9 is_stmt 0 view .LVU165
 953 0004 0122     		movs	r2, #1
 954 0006 1820     		movs	r0, #24
 955              	.LVL78:
 956              		.loc 1 337 9 view .LVU166
 957 0008 FFF7FEFF 		bl	write
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 23


 958              	.LVL79:
 338:Core/Src/AB1815.c **** };
 959              		.loc 1 338 1 view .LVU167
 960              		@ sp needed
 961 000c 10BD     		pop	{r4, pc}
 962              		.cfi_endproc
 963              	.LFE450:
 965              		.section	.text.get_countdown_control,"ax",%progbits
 966              		.align	1
 967              		.global	get_countdown_control
 968              		.syntax unified
 969              		.code	16
 970              		.thumb_func
 972              	get_countdown_control:
 973              	.LVL80:
 974              	.LFB451:
 339:Core/Src/AB1815.c **** 
 340:Core/Src/AB1815.c **** bool get_countdown_control(countdown_control_t *countdown_control)
 341:Core/Src/AB1815.c **** {
 975              		.loc 1 341 1 is_stmt 1 view -0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 979              		.loc 1 341 1 is_stmt 0 view .LVU169
 980 0000 10B5     		push	{r4, lr}
 981              	.LCFI25:
 982              		.cfi_def_cfa_offset 8
 983              		.cfi_offset 4, -8
 984              		.cfi_offset 14, -4
 985 0002 0100     		movs	r1, r0
 342:Core/Src/AB1815.c **** 	return read(AB1815_REG_COUNTDOWN_TIMER_CONTROL, &countdown_control->value, 1);
 986              		.loc 1 342 2 is_stmt 1 view .LVU170
 987              		.loc 1 342 9 is_stmt 0 view .LVU171
 988 0004 0122     		movs	r2, #1
 989 0006 1820     		movs	r0, #24
 990              	.LVL81:
 991              		.loc 1 342 9 view .LVU172
 992 0008 FFF7FEFF 		bl	read
 993              	.LVL82:
 343:Core/Src/AB1815.c **** };
 994              		.loc 1 343 1 view .LVU173
 995              		@ sp needed
 996 000c 10BD     		pop	{r4, pc}
 997              		.cfi_endproc
 998              	.LFE451:
 1000              		.section	.text.set_countdown_timer,"ax",%progbits
 1001              		.align	1
 1002              		.global	set_countdown_timer
 1003              		.syntax unified
 1004              		.code	16
 1005              		.thumb_func
 1007              	set_countdown_timer:
 1008              	.LVL83:
 1009              	.LFB452:
 344:Core/Src/AB1815.c **** 
 345:Core/Src/AB1815.c **** // 0x19
 346:Core/Src/AB1815.c **** bool set_countdown_timer(uint8_t timer_value)
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 24


 347:Core/Src/AB1815.c **** {
 1010              		.loc 1 347 1 is_stmt 1 view -0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 8
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014              		.loc 1 347 1 is_stmt 0 view .LVU175
 1015 0000 00B5     		push	{lr}
 1016              	.LCFI26:
 1017              		.cfi_def_cfa_offset 4
 1018              		.cfi_offset 14, -4
 1019 0002 83B0     		sub	sp, sp, #12
 1020              	.LCFI27:
 1021              		.cfi_def_cfa_offset 16
 1022 0004 6B46     		mov	r3, sp
 1023 0006 D91D     		adds	r1, r3, #7
 1024 0008 0870     		strb	r0, [r1]
 348:Core/Src/AB1815.c **** 	return write(AB1815_REG_COUNTDOWN_TIMER, &timer_value, 1);
 1025              		.loc 1 348 2 is_stmt 1 view .LVU176
 1026              		.loc 1 348 9 is_stmt 0 view .LVU177
 1027 000a 0122     		movs	r2, #1
 1028 000c 1920     		movs	r0, #25
 1029              	.LVL84:
 1030              		.loc 1 348 9 view .LVU178
 1031 000e FFF7FEFF 		bl	write
 1032              	.LVL85:
 349:Core/Src/AB1815.c **** }
 1033              		.loc 1 349 1 view .LVU179
 1034 0012 03B0     		add	sp, sp, #12
 1035              		@ sp needed
 1036 0014 00BD     		pop	{pc}
 1037              		.cfi_endproc
 1038              	.LFE452:
 1040              		.section	.text.get_countdown_timer,"ax",%progbits
 1041              		.align	1
 1042              		.global	get_countdown_timer
 1043              		.syntax unified
 1044              		.code	16
 1045              		.thumb_func
 1047              	get_countdown_timer:
 1048              	.LVL86:
 1049              	.LFB453:
 350:Core/Src/AB1815.c **** 
 351:Core/Src/AB1815.c **** bool get_countdown_timer(uint8_t *timer_value)
 352:Core/Src/AB1815.c **** {
 1050              		.loc 1 352 1 is_stmt 1 view -0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054              		.loc 1 352 1 is_stmt 0 view .LVU181
 1055 0000 10B5     		push	{r4, lr}
 1056              	.LCFI28:
 1057              		.cfi_def_cfa_offset 8
 1058              		.cfi_offset 4, -8
 1059              		.cfi_offset 14, -4
 1060 0002 0100     		movs	r1, r0
 353:Core/Src/AB1815.c **** 	return read(AB1815_REG_COUNTDOWN_TIMER, timer_value, 1);
 1061              		.loc 1 353 2 is_stmt 1 view .LVU182
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 25


 1062              		.loc 1 353 9 is_stmt 0 view .LVU183
 1063 0004 0122     		movs	r2, #1
 1064 0006 1920     		movs	r0, #25
 1065              	.LVL87:
 1066              		.loc 1 353 9 view .LVU184
 1067 0008 FFF7FEFF 		bl	read
 1068              	.LVL88:
 354:Core/Src/AB1815.c **** }
 1069              		.loc 1 354 1 view .LVU185
 1070              		@ sp needed
 1071 000c 10BD     		pop	{r4, pc}
 1072              		.cfi_endproc
 1073              	.LFE453:
 1075              		.section	.text.set_countdown_timer_initial_value,"ax",%progbits
 1076              		.align	1
 1077              		.global	set_countdown_timer_initial_value
 1078              		.syntax unified
 1079              		.code	16
 1080              		.thumb_func
 1082              	set_countdown_timer_initial_value:
 1083              	.LVL89:
 1084              	.LFB454:
 355:Core/Src/AB1815.c **** 
 356:Core/Src/AB1815.c **** // 0x1A
 357:Core/Src/AB1815.c **** bool set_countdown_timer_initial_value(uint8_t timer_value)
 358:Core/Src/AB1815.c **** {
 1085              		.loc 1 358 1 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 8
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		.loc 1 358 1 is_stmt 0 view .LVU187
 1090 0000 00B5     		push	{lr}
 1091              	.LCFI29:
 1092              		.cfi_def_cfa_offset 4
 1093              		.cfi_offset 14, -4
 1094 0002 83B0     		sub	sp, sp, #12
 1095              	.LCFI30:
 1096              		.cfi_def_cfa_offset 16
 1097 0004 6B46     		mov	r3, sp
 1098 0006 D91D     		adds	r1, r3, #7
 1099 0008 0870     		strb	r0, [r1]
 359:Core/Src/AB1815.c **** 	return write(AB1815_REG_COUNTDOWN_TIMER_INITIAL, &timer_value, 1);
 1100              		.loc 1 359 2 is_stmt 1 view .LVU188
 1101              		.loc 1 359 9 is_stmt 0 view .LVU189
 1102 000a 0122     		movs	r2, #1
 1103 000c 1A20     		movs	r0, #26
 1104              	.LVL90:
 1105              		.loc 1 359 9 view .LVU190
 1106 000e FFF7FEFF 		bl	write
 1107              	.LVL91:
 360:Core/Src/AB1815.c **** }
 1108              		.loc 1 360 1 view .LVU191
 1109 0012 03B0     		add	sp, sp, #12
 1110              		@ sp needed
 1111 0014 00BD     		pop	{pc}
 1112              		.cfi_endproc
 1113              	.LFE454:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 26


 1115              		.section	.text.get_countdown_timer_initial_value,"ax",%progbits
 1116              		.align	1
 1117              		.global	get_countdown_timer_initial_value
 1118              		.syntax unified
 1119              		.code	16
 1120              		.thumb_func
 1122              	get_countdown_timer_initial_value:
 1123              	.LVL92:
 1124              	.LFB455:
 361:Core/Src/AB1815.c **** 
 362:Core/Src/AB1815.c **** bool get_countdown_timer_initial_value(uint8_t *timer_value)
 363:Core/Src/AB1815.c **** {
 1125              		.loc 1 363 1 is_stmt 1 view -0
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 0
 1128              		@ frame_needed = 0, uses_anonymous_args = 0
 1129              		.loc 1 363 1 is_stmt 0 view .LVU193
 1130 0000 10B5     		push	{r4, lr}
 1131              	.LCFI31:
 1132              		.cfi_def_cfa_offset 8
 1133              		.cfi_offset 4, -8
 1134              		.cfi_offset 14, -4
 1135 0002 0100     		movs	r1, r0
 364:Core/Src/AB1815.c **** 	return read(AB1815_REG_COUNTDOWN_TIMER_INITIAL, timer_value, 1);
 1136              		.loc 1 364 2 is_stmt 1 view .LVU194
 1137              		.loc 1 364 9 is_stmt 0 view .LVU195
 1138 0004 0122     		movs	r2, #1
 1139 0006 1A20     		movs	r0, #26
 1140              	.LVL93:
 1141              		.loc 1 364 9 view .LVU196
 1142 0008 FFF7FEFF 		bl	read
 1143              	.LVL94:
 365:Core/Src/AB1815.c **** }
 1144              		.loc 1 365 1 view .LVU197
 1145              		@ sp needed
 1146 000c 10BD     		pop	{r4, pc}
 1147              		.cfi_endproc
 1148              	.LFE455:
 1150              		.section	.text.set_watchdog_timer,"ax",%progbits
 1151              		.align	1
 1152              		.global	set_watchdog_timer
 1153              		.syntax unified
 1154              		.code	16
 1155              		.thumb_func
 1157              	set_watchdog_timer:
 1158              	.LVL95:
 1159              	.LFB456:
 366:Core/Src/AB1815.c **** 
 367:Core/Src/AB1815.c **** // 0x1B
 368:Core/Src/AB1815.c **** bool set_watchdog_timer(watchdog_timer_t *watchdog_timer)
 369:Core/Src/AB1815.c **** {
 1160              		.loc 1 369 1 is_stmt 1 view -0
 1161              		.cfi_startproc
 1162              		@ args = 0, pretend = 0, frame = 0
 1163              		@ frame_needed = 0, uses_anonymous_args = 0
 1164              		.loc 1 369 1 is_stmt 0 view .LVU199
 1165 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 27


 1166              	.LCFI32:
 1167              		.cfi_def_cfa_offset 8
 1168              		.cfi_offset 4, -8
 1169              		.cfi_offset 14, -4
 1170 0002 0100     		movs	r1, r0
 370:Core/Src/AB1815.c **** 	return write(AB1815_REG_WATCHDOG_TIMER, &watchdog_timer->value, 1);
 1171              		.loc 1 370 2 is_stmt 1 view .LVU200
 1172              		.loc 1 370 9 is_stmt 0 view .LVU201
 1173 0004 0122     		movs	r2, #1
 1174 0006 1B20     		movs	r0, #27
 1175              	.LVL96:
 1176              		.loc 1 370 9 view .LVU202
 1177 0008 FFF7FEFF 		bl	write
 1178              	.LVL97:
 371:Core/Src/AB1815.c **** }
 1179              		.loc 1 371 1 view .LVU203
 1180              		@ sp needed
 1181 000c 10BD     		pop	{r4, pc}
 1182              		.cfi_endproc
 1183              	.LFE456:
 1185              		.section	.text.get_watchdog_timer,"ax",%progbits
 1186              		.align	1
 1187              		.global	get_watchdog_timer
 1188              		.syntax unified
 1189              		.code	16
 1190              		.thumb_func
 1192              	get_watchdog_timer:
 1193              	.LVL98:
 1194              	.LFB457:
 372:Core/Src/AB1815.c **** 
 373:Core/Src/AB1815.c **** bool get_watchdog_timer(watchdog_timer_t *watchdog_timer)
 374:Core/Src/AB1815.c **** {
 1195              		.loc 1 374 1 is_stmt 1 view -0
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 0
 1198              		@ frame_needed = 0, uses_anonymous_args = 0
 1199              		.loc 1 374 1 is_stmt 0 view .LVU205
 1200 0000 10B5     		push	{r4, lr}
 1201              	.LCFI33:
 1202              		.cfi_def_cfa_offset 8
 1203              		.cfi_offset 4, -8
 1204              		.cfi_offset 14, -4
 1205 0002 0100     		movs	r1, r0
 375:Core/Src/AB1815.c **** 	return read(AB1815_REG_WATCHDOG_TIMER, &watchdog_timer->value, 1);
 1206              		.loc 1 375 2 is_stmt 1 view .LVU206
 1207              		.loc 1 375 9 is_stmt 0 view .LVU207
 1208 0004 0122     		movs	r2, #1
 1209 0006 1B20     		movs	r0, #27
 1210              	.LVL99:
 1211              		.loc 1 375 9 view .LVU208
 1212 0008 FFF7FEFF 		bl	read
 1213              	.LVL100:
 376:Core/Src/AB1815.c **** }
 1214              		.loc 1 376 1 view .LVU209
 1215              		@ sp needed
 1216 000c 10BD     		pop	{r4, pc}
 1217              		.cfi_endproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 28


 1218              	.LFE457:
 1220              		.section	.text.get_oscillator_control,"ax",%progbits
 1221              		.align	1
 1222              		.global	get_oscillator_control
 1223              		.syntax unified
 1224              		.code	16
 1225              		.thumb_func
 1227              	get_oscillator_control:
 1228              	.LVL101:
 1229              	.LFB458:
 377:Core/Src/AB1815.c **** 
 378:Core/Src/AB1815.c **** // 0x1C Get the oscillator control register
 379:Core/Src/AB1815.c **** bool get_oscillator_control(oscillator_control_t *oscillator_control)
 380:Core/Src/AB1815.c **** {
 1230              		.loc 1 380 1 is_stmt 1 view -0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 0, uses_anonymous_args = 0
 1234              		.loc 1 380 1 is_stmt 0 view .LVU211
 1235 0000 10B5     		push	{r4, lr}
 1236              	.LCFI34:
 1237              		.cfi_def_cfa_offset 8
 1238              		.cfi_offset 4, -8
 1239              		.cfi_offset 14, -4
 1240 0002 0100     		movs	r1, r0
 381:Core/Src/AB1815.c **** 	return read(AB1815_REG_OSCILLATOR_CONTROL, &oscillator_control->value, 1);
 1241              		.loc 1 381 2 is_stmt 1 view .LVU212
 1242              		.loc 1 381 9 is_stmt 0 view .LVU213
 1243 0004 0122     		movs	r2, #1
 1244 0006 1C20     		movs	r0, #28
 1245              	.LVL102:
 1246              		.loc 1 381 9 view .LVU214
 1247 0008 FFF7FEFF 		bl	read
 1248              	.LVL103:
 382:Core/Src/AB1815.c **** };
 1249              		.loc 1 382 1 view .LVU215
 1250              		@ sp needed
 1251 000c 10BD     		pop	{r4, pc}
 1252              		.cfi_endproc
 1253              	.LFE458:
 1255              		.section	.text.set_oscillator_status,"ax",%progbits
 1256              		.align	1
 1257              		.global	set_oscillator_status
 1258              		.syntax unified
 1259              		.code	16
 1260              		.thumb_func
 1262              	set_oscillator_status:
 1263              	.LVL104:
 1264              	.LFB460:
 383:Core/Src/AB1815.c **** 
 384:Core/Src/AB1815.c **** bool set_oscillator_control(oscillator_control_t *oscillator_control)
 385:Core/Src/AB1815.c **** {
 386:Core/Src/AB1815.c **** 	if (set_configuration_key(ab1815_oscillator_control) != ab1815_status_e_OK)
 387:Core/Src/AB1815.c **** 	{
 388:Core/Src/AB1815.c **** 		return ab1815_status_e_ERROR;
 389:Core/Src/AB1815.c **** 	}
 390:Core/Src/AB1815.c **** 	return write(AB1815_REG_OSCILLATOR_CONTROL, &oscillator_control->value, 1);
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 29


 391:Core/Src/AB1815.c **** };
 392:Core/Src/AB1815.c **** 
 393:Core/Src/AB1815.c **** // 0x1D
 394:Core/Src/AB1815.c **** bool set_oscillator_status(oscillator_status_t *oscillator_status)
 395:Core/Src/AB1815.c **** {
 1265              		.loc 1 395 1 is_stmt 1 view -0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 0
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 1269              		.loc 1 395 1 is_stmt 0 view .LVU217
 1270 0000 10B5     		push	{r4, lr}
 1271              	.LCFI35:
 1272              		.cfi_def_cfa_offset 8
 1273              		.cfi_offset 4, -8
 1274              		.cfi_offset 14, -4
 1275 0002 0100     		movs	r1, r0
 396:Core/Src/AB1815.c **** 	return write(AB1815_REG_OSCILLATOR_STATUS, &oscillator_status->value, 1);
 1276              		.loc 1 396 2 is_stmt 1 view .LVU218
 1277              		.loc 1 396 9 is_stmt 0 view .LVU219
 1278 0004 0122     		movs	r2, #1
 1279 0006 1D20     		movs	r0, #29
 1280              	.LVL105:
 1281              		.loc 1 396 9 view .LVU220
 1282 0008 FFF7FEFF 		bl	write
 1283              	.LVL106:
 397:Core/Src/AB1815.c **** }
 1284              		.loc 1 397 1 view .LVU221
 1285              		@ sp needed
 1286 000c 10BD     		pop	{r4, pc}
 1287              		.cfi_endproc
 1288              	.LFE460:
 1290              		.section	.text.get_oscillator_status,"ax",%progbits
 1291              		.align	1
 1292              		.global	get_oscillator_status
 1293              		.syntax unified
 1294              		.code	16
 1295              		.thumb_func
 1297              	get_oscillator_status:
 1298              	.LVL107:
 1299              	.LFB461:
 398:Core/Src/AB1815.c **** 
 399:Core/Src/AB1815.c **** bool get_oscillator_status(oscillator_status_t *oscillator_status)
 400:Core/Src/AB1815.c **** {
 1300              		.loc 1 400 1 is_stmt 1 view -0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 0
 1303              		@ frame_needed = 0, uses_anonymous_args = 0
 1304              		.loc 1 400 1 is_stmt 0 view .LVU223
 1305 0000 10B5     		push	{r4, lr}
 1306              	.LCFI36:
 1307              		.cfi_def_cfa_offset 8
 1308              		.cfi_offset 4, -8
 1309              		.cfi_offset 14, -4
 1310 0002 0100     		movs	r1, r0
 401:Core/Src/AB1815.c **** 	return read(AB1815_REG_OSCILLATOR_STATUS, &oscillator_status->value, 1);
 1311              		.loc 1 401 2 is_stmt 1 view .LVU224
 1312              		.loc 1 401 9 is_stmt 0 view .LVU225
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 30


 1313 0004 0122     		movs	r2, #1
 1314 0006 1D20     		movs	r0, #29
 1315              	.LVL108:
 1316              		.loc 1 401 9 view .LVU226
 1317 0008 FFF7FEFF 		bl	read
 1318              	.LVL109:
 402:Core/Src/AB1815.c **** }
 1319              		.loc 1 402 1 view .LVU227
 1320              		@ sp needed
 1321 000c 10BD     		pop	{r4, pc}
 1322              		.cfi_endproc
 1323              	.LFE461:
 1325              		.section	.text.set_configuration_key,"ax",%progbits
 1326              		.align	1
 1327              		.global	set_configuration_key
 1328              		.syntax unified
 1329              		.code	16
 1330              		.thumb_func
 1332              	set_configuration_key:
 1333              	.LVL110:
 1334              	.LFB462:
 403:Core/Src/AB1815.c **** 
 404:Core/Src/AB1815.c **** // 0x1E - Nothing on the AB1815
 405:Core/Src/AB1815.c **** // 0x1F
 406:Core/Src/AB1815.c **** bool set_configuration_key(configuration_key_e configuration_key)
 407:Core/Src/AB1815.c **** {
 1335              		.loc 1 407 1 is_stmt 1 view -0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 8
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              		.loc 1 407 1 is_stmt 0 view .LVU229
 1340 0000 00B5     		push	{lr}
 1341              	.LCFI37:
 1342              		.cfi_def_cfa_offset 4
 1343              		.cfi_offset 14, -4
 1344 0002 83B0     		sub	sp, sp, #12
 1345              	.LCFI38:
 1346              		.cfi_def_cfa_offset 16
 1347 0004 6B46     		mov	r3, sp
 1348 0006 D91D     		adds	r1, r3, #7
 1349 0008 0870     		strb	r0, [r1]
 408:Core/Src/AB1815.c **** 	return write(AB1815_REG_CONFIGURATION_KEY, (uint8_t *)&configuration_key, 1);
 1350              		.loc 1 408 2 is_stmt 1 view .LVU230
 1351              		.loc 1 408 9 is_stmt 0 view .LVU231
 1352 000a 0122     		movs	r2, #1
 1353 000c 1F20     		movs	r0, #31
 1354              	.LVL111:
 1355              		.loc 1 408 9 view .LVU232
 1356 000e FFF7FEFF 		bl	write
 1357              	.LVL112:
 409:Core/Src/AB1815.c **** };
 1358              		.loc 1 409 1 view .LVU233
 1359 0012 03B0     		add	sp, sp, #12
 1360              		@ sp needed
 1361 0014 00BD     		pop	{pc}
 1362              		.cfi_endproc
 1363              	.LFE462:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 31


 1365              		.section	.text.set_oscillator_control,"ax",%progbits
 1366              		.align	1
 1367              		.global	set_oscillator_control
 1368              		.syntax unified
 1369              		.code	16
 1370              		.thumb_func
 1372              	set_oscillator_control:
 1373              	.LVL113:
 1374              	.LFB459:
 385:Core/Src/AB1815.c **** 	if (set_configuration_key(ab1815_oscillator_control) != ab1815_status_e_OK)
 1375              		.loc 1 385 1 is_stmt 1 view -0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 0
 1378              		@ frame_needed = 0, uses_anonymous_args = 0
 385:Core/Src/AB1815.c **** 	if (set_configuration_key(ab1815_oscillator_control) != ab1815_status_e_OK)
 1379              		.loc 1 385 1 is_stmt 0 view .LVU235
 1380 0000 10B5     		push	{r4, lr}
 1381              	.LCFI39:
 1382              		.cfi_def_cfa_offset 8
 1383              		.cfi_offset 4, -8
 1384              		.cfi_offset 14, -4
 1385 0002 0400     		movs	r4, r0
 386:Core/Src/AB1815.c **** 	{
 1386              		.loc 1 386 2 is_stmt 1 view .LVU236
 386:Core/Src/AB1815.c **** 	{
 1387              		.loc 1 386 6 is_stmt 0 view .LVU237
 1388 0004 A120     		movs	r0, #161
 1389              	.LVL114:
 386:Core/Src/AB1815.c **** 	{
 1390              		.loc 1 386 6 view .LVU238
 1391 0006 FFF7FEFF 		bl	set_configuration_key
 1392              	.LVL115:
 386:Core/Src/AB1815.c **** 	{
 1393              		.loc 1 386 55 view .LVU239
 1394 000a 064B     		ldr	r3, .L54
 1395 000c 1B78     		ldrb	r3, [r3]
 386:Core/Src/AB1815.c **** 	{
 1396              		.loc 1 386 5 view .LVU240
 1397 000e 9842     		cmp	r0, r3
 1398 0010 02D0     		beq	.L52
 388:Core/Src/AB1815.c **** 	}
 1399              		.loc 1 388 3 is_stmt 1 view .LVU241
 388:Core/Src/AB1815.c **** 	}
 1400              		.loc 1 388 10 is_stmt 0 view .LVU242
 1401 0012 054B     		ldr	r3, .L54+4
 1402 0014 1878     		ldrb	r0, [r3]
 1403              	.L53:
 391:Core/Src/AB1815.c **** 
 1404              		.loc 1 391 1 view .LVU243
 1405              		@ sp needed
 1406              	.LVL116:
 391:Core/Src/AB1815.c **** 
 1407              		.loc 1 391 1 view .LVU244
 1408 0016 10BD     		pop	{r4, pc}
 1409              	.LVL117:
 1410              	.L52:
 390:Core/Src/AB1815.c **** };
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 32


 1411              		.loc 1 390 2 is_stmt 1 view .LVU245
 390:Core/Src/AB1815.c **** };
 1412              		.loc 1 390 9 is_stmt 0 view .LVU246
 1413 0018 0122     		movs	r2, #1
 1414 001a 2100     		movs	r1, r4
 1415 001c 1C20     		movs	r0, #28
 1416 001e FFF7FEFF 		bl	write
 1417              	.LVL118:
 1418 0022 F8E7     		b	.L53
 1419              	.L55:
 1420              		.align	2
 1421              	.L54:
 1422 0024 00000000 		.word	ab1815_status_e_OK
 1423 0028 00000000 		.word	ab1815_status_e_ERROR
 1424              		.cfi_endproc
 1425              	.LFE459:
 1427              		.section	.text.set_trickle,"ax",%progbits
 1428              		.align	1
 1429              		.global	set_trickle
 1430              		.syntax unified
 1431              		.code	16
 1432              		.thumb_func
 1434              	set_trickle:
 1435              	.LVL119:
 1436              	.LFB463:
 410:Core/Src/AB1815.c **** 
 411:Core/Src/AB1815.c **** // 0x20
 412:Core/Src/AB1815.c **** bool set_trickle(trickle_t *trickle)
 413:Core/Src/AB1815.c **** {
 1437              		.loc 1 413 1 is_stmt 1 view -0
 1438              		.cfi_startproc
 1439              		@ args = 0, pretend = 0, frame = 0
 1440              		@ frame_needed = 0, uses_anonymous_args = 0
 1441              		.loc 1 413 1 is_stmt 0 view .LVU248
 1442 0000 10B5     		push	{r4, lr}
 1443              	.LCFI40:
 1444              		.cfi_def_cfa_offset 8
 1445              		.cfi_offset 4, -8
 1446              		.cfi_offset 14, -4
 1447 0002 0100     		movs	r1, r0
 414:Core/Src/AB1815.c **** 	return write(AB1815_REG_TRICKLE_CONTROL, &trickle->value, 1);
 1448              		.loc 1 414 2 is_stmt 1 view .LVU249
 1449              		.loc 1 414 9 is_stmt 0 view .LVU250
 1450 0004 0122     		movs	r2, #1
 1451 0006 2020     		movs	r0, #32
 1452              	.LVL120:
 1453              		.loc 1 414 9 view .LVU251
 1454 0008 FFF7FEFF 		bl	write
 1455              	.LVL121:
 415:Core/Src/AB1815.c **** }
 1456              		.loc 1 415 1 view .LVU252
 1457              		@ sp needed
 1458 000c 10BD     		pop	{r4, pc}
 1459              		.cfi_endproc
 1460              	.LFE463:
 1462              		.section	.text.get_trickle,"ax",%progbits
 1463              		.align	1
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 33


 1464              		.global	get_trickle
 1465              		.syntax unified
 1466              		.code	16
 1467              		.thumb_func
 1469              	get_trickle:
 1470              	.LVL122:
 1471              	.LFB464:
 416:Core/Src/AB1815.c **** 
 417:Core/Src/AB1815.c **** bool get_trickle(trickle_t *trickle)
 418:Core/Src/AB1815.c **** {
 1472              		.loc 1 418 1 is_stmt 1 view -0
 1473              		.cfi_startproc
 1474              		@ args = 0, pretend = 0, frame = 0
 1475              		@ frame_needed = 0, uses_anonymous_args = 0
 1476              		.loc 1 418 1 is_stmt 0 view .LVU254
 1477 0000 10B5     		push	{r4, lr}
 1478              	.LCFI41:
 1479              		.cfi_def_cfa_offset 8
 1480              		.cfi_offset 4, -8
 1481              		.cfi_offset 14, -4
 1482 0002 0100     		movs	r1, r0
 419:Core/Src/AB1815.c **** 	return read(AB1815_REG_TRICKLE_CONTROL, &trickle->value, 1);
 1483              		.loc 1 419 2 is_stmt 1 view .LVU255
 1484              		.loc 1 419 9 is_stmt 0 view .LVU256
 1485 0004 0122     		movs	r2, #1
 1486 0006 2020     		movs	r0, #32
 1487              	.LVL123:
 1488              		.loc 1 419 9 view .LVU257
 1489 0008 FFF7FEFF 		bl	read
 1490              	.LVL124:
 420:Core/Src/AB1815.c **** }
 1491              		.loc 1 420 1 view .LVU258
 1492              		@ sp needed
 1493 000c 10BD     		pop	{r4, pc}
 1494              		.cfi_endproc
 1495              	.LFE464:
 1497              		.section	.text.set_bref_control,"ax",%progbits
 1498              		.align	1
 1499              		.global	set_bref_control
 1500              		.syntax unified
 1501              		.code	16
 1502              		.thumb_func
 1504              	set_bref_control:
 1505              	.LVL125:
 1506              	.LFB465:
 421:Core/Src/AB1815.c **** 
 422:Core/Src/AB1815.c **** // 0x21
 423:Core/Src/AB1815.c **** bool set_bref_control(bref_control_t *bref_control)
 424:Core/Src/AB1815.c **** {
 1507              		.loc 1 424 1 is_stmt 1 view -0
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 0
 1510              		@ frame_needed = 0, uses_anonymous_args = 0
 1511              		.loc 1 424 1 is_stmt 0 view .LVU260
 1512 0000 10B5     		push	{r4, lr}
 1513              	.LCFI42:
 1514              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 34


 1515              		.cfi_offset 4, -8
 1516              		.cfi_offset 14, -4
 1517 0002 0100     		movs	r1, r0
 425:Core/Src/AB1815.c **** 	return write(AB1815_REG_BREF_CONTROL, &bref_control->value, 1);
 1518              		.loc 1 425 2 is_stmt 1 view .LVU261
 1519              		.loc 1 425 9 is_stmt 0 view .LVU262
 1520 0004 0122     		movs	r2, #1
 1521 0006 2120     		movs	r0, #33
 1522              	.LVL126:
 1523              		.loc 1 425 9 view .LVU263
 1524 0008 FFF7FEFF 		bl	write
 1525              	.LVL127:
 426:Core/Src/AB1815.c **** }
 1526              		.loc 1 426 1 view .LVU264
 1527              		@ sp needed
 1528 000c 10BD     		pop	{r4, pc}
 1529              		.cfi_endproc
 1530              	.LFE465:
 1532              		.section	.text.get_bref_control,"ax",%progbits
 1533              		.align	1
 1534              		.global	get_bref_control
 1535              		.syntax unified
 1536              		.code	16
 1537              		.thumb_func
 1539              	get_bref_control:
 1540              	.LVL128:
 1541              	.LFB466:
 427:Core/Src/AB1815.c **** 
 428:Core/Src/AB1815.c **** bool get_bref_control(bref_control_t *bref_control)
 429:Core/Src/AB1815.c **** {
 1542              		.loc 1 429 1 is_stmt 1 view -0
 1543              		.cfi_startproc
 1544              		@ args = 0, pretend = 0, frame = 0
 1545              		@ frame_needed = 0, uses_anonymous_args = 0
 1546              		.loc 1 429 1 is_stmt 0 view .LVU266
 1547 0000 10B5     		push	{r4, lr}
 1548              	.LCFI43:
 1549              		.cfi_def_cfa_offset 8
 1550              		.cfi_offset 4, -8
 1551              		.cfi_offset 14, -4
 1552 0002 0100     		movs	r1, r0
 430:Core/Src/AB1815.c **** 	return read(AB1815_REG_BREF_CONTROL, &bref_control->value, 1);
 1553              		.loc 1 430 2 is_stmt 1 view .LVU267
 1554              		.loc 1 430 9 is_stmt 0 view .LVU268
 1555 0004 0122     		movs	r2, #1
 1556 0006 2120     		movs	r0, #33
 1557              	.LVL129:
 1558              		.loc 1 430 9 view .LVU269
 1559 0008 FFF7FEFF 		bl	read
 1560              	.LVL130:
 431:Core/Src/AB1815.c **** }
 1561              		.loc 1 431 1 view .LVU270
 1562              		@ sp needed
 1563 000c 10BD     		pop	{r4, pc}
 1564              		.cfi_endproc
 1565              	.LFE466:
 1567              		.section	.text.set_afctrl,"ax",%progbits
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 35


 1568              		.align	1
 1569              		.global	set_afctrl
 1570              		.syntax unified
 1571              		.code	16
 1572              		.thumb_func
 1574              	set_afctrl:
 1575              	.LVL131:
 1576              	.LFB467:
 432:Core/Src/AB1815.c **** 
 433:Core/Src/AB1815.c **** // 0x26
 434:Core/Src/AB1815.c **** bool set_afctrl(afctrl_e afctrl)
 435:Core/Src/AB1815.c **** {
 1577              		.loc 1 435 1 is_stmt 1 view -0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 8
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 1581              		.loc 1 435 1 is_stmt 0 view .LVU272
 1582 0000 00B5     		push	{lr}
 1583              	.LCFI44:
 1584              		.cfi_def_cfa_offset 4
 1585              		.cfi_offset 14, -4
 1586 0002 83B0     		sub	sp, sp, #12
 1587              	.LCFI45:
 1588              		.cfi_def_cfa_offset 16
 1589 0004 6B46     		mov	r3, sp
 1590 0006 D91D     		adds	r1, r3, #7
 1591 0008 0870     		strb	r0, [r1]
 436:Core/Src/AB1815.c **** 	return write(AB1815_REG_AFCTRL, (uint8_t *)&afctrl, 1);
 1592              		.loc 1 436 2 is_stmt 1 view .LVU273
 1593              		.loc 1 436 9 is_stmt 0 view .LVU274
 1594 000a 0122     		movs	r2, #1
 1595 000c 2620     		movs	r0, #38
 1596              	.LVL132:
 1597              		.loc 1 436 9 view .LVU275
 1598 000e FFF7FEFF 		bl	write
 1599              	.LVL133:
 437:Core/Src/AB1815.c **** }
 1600              		.loc 1 437 1 view .LVU276
 1601 0012 03B0     		add	sp, sp, #12
 1602              		@ sp needed
 1603 0014 00BD     		pop	{pc}
 1604              		.cfi_endproc
 1605              	.LFE467:
 1607              		.section	.text.get_,"ax",%progbits
 1608              		.align	1
 1609              		.global	get_
 1610              		.syntax unified
 1611              		.code	16
 1612              		.thumb_func
 1614              	get_:
 1615              	.LVL134:
 1616              	.LFB468:
 438:Core/Src/AB1815.c **** 
 439:Core/Src/AB1815.c **** bool get_(afctrl_e *afctrl)
 440:Core/Src/AB1815.c **** {
 1617              		.loc 1 440 1 is_stmt 1 view -0
 1618              		.cfi_startproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 36


 1619              		@ args = 0, pretend = 0, frame = 0
 1620              		@ frame_needed = 0, uses_anonymous_args = 0
 1621              		.loc 1 440 1 is_stmt 0 view .LVU278
 1622 0000 10B5     		push	{r4, lr}
 1623              	.LCFI46:
 1624              		.cfi_def_cfa_offset 8
 1625              		.cfi_offset 4, -8
 1626              		.cfi_offset 14, -4
 1627 0002 0100     		movs	r1, r0
 441:Core/Src/AB1815.c **** 	return read(AB1815_REG_AFCTRL, (uint8_t *)afctrl, 1);
 1628              		.loc 1 441 2 is_stmt 1 view .LVU279
 1629              		.loc 1 441 9 is_stmt 0 view .LVU280
 1630 0004 0122     		movs	r2, #1
 1631 0006 2620     		movs	r0, #38
 1632              	.LVL135:
 1633              		.loc 1 441 9 view .LVU281
 1634 0008 FFF7FEFF 		bl	read
 1635              	.LVL136:
 442:Core/Src/AB1815.c **** }
 1636              		.loc 1 442 1 view .LVU282
 1637              		@ sp needed
 1638 000c 10BD     		pop	{r4, pc}
 1639              		.cfi_endproc
 1640              	.LFE468:
 1642              		.section	.text.set_batmodeio,"ax",%progbits
 1643              		.align	1
 1644              		.global	set_batmodeio
 1645              		.syntax unified
 1646              		.code	16
 1647              		.thumb_func
 1649              	set_batmodeio:
 1650              	.LVL137:
 1651              	.LFB469:
 443:Core/Src/AB1815.c **** 
 444:Core/Src/AB1815.c **** // 0x27
 445:Core/Src/AB1815.c **** bool set_batmodeio(ab1815_batmodeio_e mode)
 446:Core/Src/AB1815.c **** {
 1652              		.loc 1 446 1 is_stmt 1 view -0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 8
 1655              		@ frame_needed = 0, uses_anonymous_args = 0
 1656              		.loc 1 446 1 is_stmt 0 view .LVU284
 1657 0000 10B5     		push	{r4, lr}
 1658              	.LCFI47:
 1659              		.cfi_def_cfa_offset 8
 1660              		.cfi_offset 4, -8
 1661              		.cfi_offset 14, -4
 1662 0002 82B0     		sub	sp, sp, #8
 1663              	.LCFI48:
 1664              		.cfi_def_cfa_offset 16
 1665 0004 0400     		movs	r4, r0
 447:Core/Src/AB1815.c **** 	if (set_configuration_key(ab1815_reg_control) != ab1815_status_e_OK)
 1666              		.loc 1 447 2 is_stmt 1 view .LVU285
 1667              		.loc 1 447 6 is_stmt 0 view .LVU286
 1668 0006 9D20     		movs	r0, #157
 1669              	.LVL138:
 1670              		.loc 1 447 6 view .LVU287
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 37


 1671 0008 FFF7FEFF 		bl	set_configuration_key
 1672              	.LVL139:
 1673              		.loc 1 447 48 view .LVU288
 1674 000c 074B     		ldr	r3, .L65
 1675 000e 1B78     		ldrb	r3, [r3]
 1676              		.loc 1 447 5 view .LVU289
 1677 0010 9842     		cmp	r0, r3
 1678 0012 03D0     		beq	.L63
 448:Core/Src/AB1815.c **** 	{
 449:Core/Src/AB1815.c **** 		return ab1815_status_e_ERROR;
 1679              		.loc 1 449 3 is_stmt 1 view .LVU290
 1680              		.loc 1 449 10 is_stmt 0 view .LVU291
 1681 0014 064B     		ldr	r3, .L65+4
 1682 0016 1878     		ldrb	r0, [r3]
 1683              	.L64:
 450:Core/Src/AB1815.c **** 	}
 451:Core/Src/AB1815.c **** 	uint8_t buf[1];
 452:Core/Src/AB1815.c **** 	buf[0] = mode;
 453:Core/Src/AB1815.c **** 	return write(AB1815_REG_BATMODE_IO, buf, 1);
 454:Core/Src/AB1815.c **** };
 1684              		.loc 1 454 1 view .LVU292
 1685 0018 02B0     		add	sp, sp, #8
 1686              		@ sp needed
 1687 001a 10BD     		pop	{r4, pc}
 1688              	.L63:
 451:Core/Src/AB1815.c **** 	buf[0] = mode;
 1689              		.loc 1 451 2 is_stmt 1 view .LVU293
 452:Core/Src/AB1815.c **** 	return write(AB1815_REG_BATMODE_IO, buf, 1);
 1690              		.loc 1 452 2 view .LVU294
 452:Core/Src/AB1815.c **** 	return write(AB1815_REG_BATMODE_IO, buf, 1);
 1691              		.loc 1 452 9 is_stmt 0 view .LVU295
 1692 001c 01A9     		add	r1, sp, #4
 1693 001e 0C70     		strb	r4, [r1]
 453:Core/Src/AB1815.c **** };
 1694              		.loc 1 453 2 is_stmt 1 view .LVU296
 453:Core/Src/AB1815.c **** };
 1695              		.loc 1 453 9 is_stmt 0 view .LVU297
 1696 0020 0122     		movs	r2, #1
 1697 0022 2720     		movs	r0, #39
 1698 0024 FFF7FEFF 		bl	write
 1699              	.LVL140:
 1700 0028 F6E7     		b	.L64
 1701              	.L66:
 1702 002a C046     		.align	2
 1703              	.L65:
 1704 002c 00000000 		.word	ab1815_status_e_OK
 1705 0030 00000000 		.word	ab1815_status_e_ERROR
 1706              		.cfi_endproc
 1707              	.LFE469:
 1709              		.section	.text.get_batmodeio,"ax",%progbits
 1710              		.align	1
 1711              		.global	get_batmodeio
 1712              		.syntax unified
 1713              		.code	16
 1714              		.thumb_func
 1716              	get_batmodeio:
 1717              	.LVL141:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 38


 1718              	.LFB470:
 455:Core/Src/AB1815.c **** 
 456:Core/Src/AB1815.c **** bool get_batmodeio(ab1815_batmodeio_e *mode)
 457:Core/Src/AB1815.c **** {
 1719              		.loc 1 457 1 is_stmt 1 view -0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
 1723              		.loc 1 457 1 is_stmt 0 view .LVU299
 1724 0000 10B5     		push	{r4, lr}
 1725              	.LCFI49:
 1726              		.cfi_def_cfa_offset 8
 1727              		.cfi_offset 4, -8
 1728              		.cfi_offset 14, -4
 1729 0002 0100     		movs	r1, r0
 458:Core/Src/AB1815.c **** 	return read(AB1815_REG_BATMODE_IO, (uint8_t *)mode, 1);
 1730              		.loc 1 458 2 is_stmt 1 view .LVU300
 1731              		.loc 1 458 9 is_stmt 0 view .LVU301
 1732 0004 0122     		movs	r2, #1
 1733 0006 2720     		movs	r0, #39
 1734              	.LVL142:
 1735              		.loc 1 458 9 view .LVU302
 1736 0008 FFF7FEFF 		bl	read
 1737              	.LVL143:
 459:Core/Src/AB1815.c **** }
 1738              		.loc 1 459 1 view .LVU303
 1739              		@ sp needed
 1740 000c 10BD     		pop	{r4, pc}
 1741              		.cfi_endproc
 1742              	.LFE470:
 1744              		.section	.text.get_id,"ax",%progbits
 1745              		.align	1
 1746              		.global	get_id
 1747              		.syntax unified
 1748              		.code	16
 1749              		.thumb_func
 1751              	get_id:
 1752              	.LVL144:
 1753              	.LFB471:
 460:Core/Src/AB1815.c **** 
 461:Core/Src/AB1815.c **** // 0x28
 462:Core/Src/AB1815.c **** bool get_id(ab1815_id_t *id)
 463:Core/Src/AB1815.c **** {
 1754              		.loc 1 463 1 is_stmt 1 view -0
 1755              		.cfi_startproc
 1756              		@ args = 0, pretend = 0, frame = 8
 1757              		@ frame_needed = 0, uses_anonymous_args = 0
 1758              		.loc 1 463 1 is_stmt 0 view .LVU305
 1759 0000 30B5     		push	{r4, r5, lr}
 1760              	.LCFI50:
 1761              		.cfi_def_cfa_offset 12
 1762              		.cfi_offset 4, -12
 1763              		.cfi_offset 5, -8
 1764              		.cfi_offset 14, -4
 1765 0002 83B0     		sub	sp, sp, #12
 1766              	.LCFI51:
 1767              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 39


 1768 0004 0400     		movs	r4, r0
 464:Core/Src/AB1815.c **** 	size_t length = AB1815_REG_ID6 - AB1815_REG_ID0;
 1769              		.loc 1 464 2 is_stmt 1 view .LVU306
 1770              	.LVL145:
 465:Core/Src/AB1815.c **** 	uint8_t buffer[length];
 1771              		.loc 1 465 2 view .LVU307
 466:Core/Src/AB1815.c **** 	memset(buffer, 0, length);
 1772              		.loc 1 466 2 view .LVU308
 1773 0006 0622     		movs	r2, #6
 1774 0008 0021     		movs	r1, #0
 1775 000a 6846     		mov	r0, sp
 1776              	.LVL146:
 1777              		.loc 1 466 2 is_stmt 0 view .LVU309
 1778 000c FFF7FEFF 		bl	memset
 1779              	.LVL147:
 467:Core/Src/AB1815.c **** 	bool result = ab1815_status_e_ERROR;
 1780              		.loc 1 467 2 is_stmt 1 view .LVU310
 468:Core/Src/AB1815.c **** 
 469:Core/Src/AB1815.c **** 	result = read(AB1815_REG_ID0, buffer, length);
 1781              		.loc 1 469 2 view .LVU311
 1782              		.loc 1 469 11 is_stmt 0 view .LVU312
 1783 0010 0622     		movs	r2, #6
 1784 0012 6946     		mov	r1, sp
 1785 0014 2820     		movs	r0, #40
 1786 0016 FFF7FEFF 		bl	read
 1787              	.LVL148:
 470:Core/Src/AB1815.c **** 	if (result == ab1815_status_e_OK)
 1788              		.loc 1 470 2 is_stmt 1 view .LVU313
 1789              		.loc 1 470 13 is_stmt 0 view .LVU314
 1790 001a 234B     		ldr	r3, .L71
 1791 001c 1B78     		ldrb	r3, [r3]
 1792              		.loc 1 470 5 view .LVU315
 1793 001e 8342     		cmp	r3, r0
 1794 0020 01D0     		beq	.L70
 1795              	.L69:
 471:Core/Src/AB1815.c **** 	{
 472:Core/Src/AB1815.c **** 		id->ID0 = bcd2bin(buffer[0]);
 473:Core/Src/AB1815.c **** 		id->ID1 = bcd2bin(buffer[1]);
 474:Core/Src/AB1815.c **** 		id->ID2.value = buffer[2];
 475:Core/Src/AB1815.c **** 		id->ID3 = bcd2bin(buffer[3]);
 476:Core/Src/AB1815.c **** 		id->ID4 = bcd2bin(buffer[4]);
 477:Core/Src/AB1815.c **** 		id->ID5 = bcd2bin(buffer[5]);
 478:Core/Src/AB1815.c **** 		id->ID6 = bcd2bin(buffer[6]);
 479:Core/Src/AB1815.c **** 	}
 480:Core/Src/AB1815.c **** 
 481:Core/Src/AB1815.c **** 	return result;
 1796              		.loc 1 481 2 is_stmt 1 view .LVU316
 482:Core/Src/AB1815.c **** };
 1797              		.loc 1 482 1 is_stmt 0 view .LVU317
 1798 0022 03B0     		add	sp, sp, #12
 1799              	.LVL149:
 1800              		.loc 1 482 1 view .LVU318
 1801              		@ sp needed
 1802              	.LVL150:
 1803              		.loc 1 482 1 view .LVU319
 1804 0024 30BD     		pop	{r4, r5, pc}
 1805              	.LVL151:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 40


 1806              	.L70:
 472:Core/Src/AB1815.c **** 		id->ID1 = bcd2bin(buffer[1]);
 1807              		.loc 1 472 3 is_stmt 1 view .LVU320
 472:Core/Src/AB1815.c **** 		id->ID1 = bcd2bin(buffer[1]);
 1808              		.loc 1 472 13 is_stmt 0 view .LVU321
 1809 0026 6B46     		mov	r3, sp
 1810 0028 1A78     		ldrb	r2, [r3]
 1811              	.LVL152:
 1812              	.LBB14:
 1813              	.LBI14:
 1814              		.file 2 "Core\\Inc/AB1815_A.h"
   1:Core\Inc/AB1815_A.h **** /**
   2:Core\Inc/AB1815_A.h ****  *     An Abracon AB18X5 Real-Time Clock library for Arduino
   3:Core\Inc/AB1815_A.h ****  *     Copyright (C) 2015 NigelB
   4:Core\Inc/AB1815_A.h ****  *
   5:Core\Inc/AB1815_A.h ****  *     This program is free software; you can redistribute it and/or modify
   6:Core\Inc/AB1815_A.h ****  *     it under the terms of the GNU General Public License as published by
   7:Core\Inc/AB1815_A.h ****  *     the Free Software Foundation; either version 2 of the License, or
   8:Core\Inc/AB1815_A.h ****  *     (at your option) any later version.
   9:Core\Inc/AB1815_A.h ****  *
  10:Core\Inc/AB1815_A.h ****  *     This program is distributed in the hope that it will be useful,
  11:Core\Inc/AB1815_A.h ****  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:Core\Inc/AB1815_A.h ****  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:Core\Inc/AB1815_A.h ****  *     GNU General Public License for more details.
  14:Core\Inc/AB1815_A.h ****  *
  15:Core\Inc/AB1815_A.h ****  *     You should have received a copy of the GNU General Public License along
  16:Core\Inc/AB1815_A.h ****  *     with this program; if not, write to the Free Software Foundation, Inc.,
  17:Core\Inc/AB1815_A.h ****  *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  18:Core\Inc/AB1815_A.h ****  **/
  19:Core\Inc/AB1815_A.h **** 
  20:Core\Inc/AB1815_A.h **** #ifndef AB1815_H_
  21:Core\Inc/AB1815_A.h **** #define AB1815_H_
  22:Core\Inc/AB1815_A.h **** 
  23:Core\Inc/AB1815_A.h **** #include "AB1815_registers.h"
  24:Core\Inc/AB1815_A.h **** #include <stdbool.h>
  25:Core\Inc/AB1815_A.h **** #include <Time.h>
  26:Core\Inc/AB1815_A.h **** 
  27:Core\Inc/AB1815_A.h **** // Base structure representing time elements
  28:Core\Inc/AB1815_A.h **** typedef struct
  29:Core\Inc/AB1815_A.h **** {
  30:Core\Inc/AB1815_A.h **** 	uint8_t Second;
  31:Core\Inc/AB1815_A.h **** 	uint8_t Minute;
  32:Core\Inc/AB1815_A.h **** 	uint8_t Hour;
  33:Core\Inc/AB1815_A.h **** 	uint8_t Wday; // day of week, sunday is day 1
  34:Core\Inc/AB1815_A.h **** 	uint8_t Day;
  35:Core\Inc/AB1815_A.h **** 	uint8_t Month;
  36:Core\Inc/AB1815_A.h **** 	uint8_t Year; // offset from 1970;
  37:Core\Inc/AB1815_A.h **** } tmElements_t;
  38:Core\Inc/AB1815_A.h **** 
  39:Core\Inc/AB1815_A.h **** // Extended structure that includes base structure and adds a new member
  40:Core\Inc/AB1815_A.h **** typedef struct
  41:Core\Inc/AB1815_A.h **** {
  42:Core\Inc/AB1815_A.h **** 	uint8_t Second;
  43:Core\Inc/AB1815_A.h **** 	uint8_t Minute;
  44:Core\Inc/AB1815_A.h **** 	uint8_t Hour;
  45:Core\Inc/AB1815_A.h **** 	uint8_t Wday; // day of week, sunday is day 1
  46:Core\Inc/AB1815_A.h **** 	uint8_t Day;
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 41


  47:Core\Inc/AB1815_A.h **** 	uint8_t Month;
  48:Core\Inc/AB1815_A.h **** 	uint8_t Year; // offset from 1970;
  49:Core\Inc/AB1815_A.h **** 	uint8_t Hundredth;
  50:Core\Inc/AB1815_A.h **** } ab1815_tmElements_t;
  51:Core\Inc/AB1815_A.h **** 
  52:Core\Inc/AB1815_A.h **** // 0x0F
  53:Core\Inc/AB1815_A.h **** typedef struct
  54:Core\Inc/AB1815_A.h **** {
  55:Core\Inc/AB1815_A.h **** 	union
  56:Core\Inc/AB1815_A.h **** 	{
  57:Core\Inc/AB1815_A.h **** 		uint8_t value;
  58:Core\Inc/AB1815_A.h **** 		struct
  59:Core\Inc/AB1815_A.h **** 		{
  60:Core\Inc/AB1815_A.h **** 			bool EX1 : 1;
  61:Core\Inc/AB1815_A.h **** 			bool EX2 : 1;
  62:Core\Inc/AB1815_A.h **** 			bool ALM : 1;
  63:Core\Inc/AB1815_A.h **** 			bool TIM : 1;
  64:Core\Inc/AB1815_A.h **** 			bool BL : 1;
  65:Core\Inc/AB1815_A.h **** 			bool WD_T : 1;
  66:Core\Inc/AB1815_A.h **** 			bool BAT : 1;
  67:Core\Inc/AB1815_A.h **** 			bool CB : 1;
  68:Core\Inc/AB1815_A.h **** 		} fields;
  69:Core\Inc/AB1815_A.h **** 	};
  70:Core\Inc/AB1815_A.h **** } status_t;
  71:Core\Inc/AB1815_A.h **** 
  72:Core\Inc/AB1815_A.h **** // 0x10
  73:Core\Inc/AB1815_A.h **** typedef struct
  74:Core\Inc/AB1815_A.h **** {
  75:Core\Inc/AB1815_A.h **** 	union
  76:Core\Inc/AB1815_A.h **** 	{
  77:Core\Inc/AB1815_A.h **** 		uint8_t value;
  78:Core\Inc/AB1815_A.h **** 		struct
  79:Core\Inc/AB1815_A.h **** 		{
  80:Core\Inc/AB1815_A.h **** 			bool WRTC : 1;
  81:Core\Inc/AB1815_A.h **** 			bool PWR2 : 1;
  82:Core\Inc/AB1815_A.h **** 			bool ARST : 1;
  83:Core\Inc/AB1815_A.h **** 			bool RSP : 1;
  84:Core\Inc/AB1815_A.h **** 			bool OUT : 1;
  85:Core\Inc/AB1815_A.h **** 			bool OUTB : 1;
  86:Core\Inc/AB1815_A.h **** 			bool _12_24 : 1;
  87:Core\Inc/AB1815_A.h **** 			bool STOP : 1;
  88:Core\Inc/AB1815_A.h **** 		} fields;
  89:Core\Inc/AB1815_A.h **** 	};
  90:Core\Inc/AB1815_A.h **** } control1_t;
  91:Core\Inc/AB1815_A.h **** 
  92:Core\Inc/AB1815_A.h **** // 0x11
  93:Core\Inc/AB1815_A.h **** typedef struct control2_t
  94:Core\Inc/AB1815_A.h **** {
  95:Core\Inc/AB1815_A.h **** 	union
  96:Core\Inc/AB1815_A.h **** 	{
  97:Core\Inc/AB1815_A.h **** 		uint8_t value;
  98:Core\Inc/AB1815_A.h **** 		struct
  99:Core\Inc/AB1815_A.h **** 		{
 100:Core\Inc/AB1815_A.h **** 			uint8_t OUT1S : 2;
 101:Core\Inc/AB1815_A.h **** 			uint8_t OUT2S : 3;
 102:Core\Inc/AB1815_A.h **** 			bool RS1E : 1;
 103:Core\Inc/AB1815_A.h **** 			bool PAD : 1;
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 42


 104:Core\Inc/AB1815_A.h **** 			bool OUTPP : 1;
 105:Core\Inc/AB1815_A.h **** 		} fields;
 106:Core\Inc/AB1815_A.h **** 	};
 107:Core\Inc/AB1815_A.h **** } control2_t;
 108:Core\Inc/AB1815_A.h **** 
 109:Core\Inc/AB1815_A.h **** // 0x12
 110:Core\Inc/AB1815_A.h **** typedef struct inturrupt_mask_t
 111:Core\Inc/AB1815_A.h **** {
 112:Core\Inc/AB1815_A.h **** 	union
 113:Core\Inc/AB1815_A.h **** 	{
 114:Core\Inc/AB1815_A.h **** 		uint8_t value;
 115:Core\Inc/AB1815_A.h **** 		struct
 116:Core\Inc/AB1815_A.h **** 		{
 117:Core\Inc/AB1815_A.h **** 			bool EX1E : 1;
 118:Core\Inc/AB1815_A.h **** 			bool EX2E : 1;
 119:Core\Inc/AB1815_A.h **** 			bool AIE : 1;
 120:Core\Inc/AB1815_A.h **** 			bool TIE : 1;
 121:Core\Inc/AB1815_A.h **** 			bool BLIE : 1;
 122:Core\Inc/AB1815_A.h **** 			uint8_t IM : 2;
 123:Core\Inc/AB1815_A.h **** 			bool CEB : 1;
 124:Core\Inc/AB1815_A.h **** 		} fields;
 125:Core\Inc/AB1815_A.h **** 	};
 126:Core\Inc/AB1815_A.h **** } inturrupt_mask_t;
 127:Core\Inc/AB1815_A.h **** 
 128:Core\Inc/AB1815_A.h **** // 0x13
 129:Core\Inc/AB1815_A.h **** typedef struct
 130:Core\Inc/AB1815_A.h **** {
 131:Core\Inc/AB1815_A.h **** 	union
 132:Core\Inc/AB1815_A.h **** 	{
 133:Core\Inc/AB1815_A.h **** 		uint8_t value;
 134:Core\Inc/AB1815_A.h **** 		struct
 135:Core\Inc/AB1815_A.h **** 		{
 136:Core\Inc/AB1815_A.h **** 			uint8_t SQFS : 5;
 137:Core\Inc/AB1815_A.h **** 			uint8_t PAD : 2;
 138:Core\Inc/AB1815_A.h **** 			bool SQWE : 1;
 139:Core\Inc/AB1815_A.h **** 		} fields;
 140:Core\Inc/AB1815_A.h **** 	};
 141:Core\Inc/AB1815_A.h **** } square_wave_t;
 142:Core\Inc/AB1815_A.h **** 
 143:Core\Inc/AB1815_A.h **** // 0x14
 144:Core\Inc/AB1815_A.h **** typedef struct
 145:Core\Inc/AB1815_A.h **** {
 146:Core\Inc/AB1815_A.h **** 	union
 147:Core\Inc/AB1815_A.h **** 	{
 148:Core\Inc/AB1815_A.h **** 		uint8_t value;
 149:Core\Inc/AB1815_A.h **** 		struct
 150:Core\Inc/AB1815_A.h **** 		{
 151:Core\Inc/AB1815_A.h **** 			uint8_t OFFSETX : 7;
 152:Core\Inc/AB1815_A.h **** 			uint8_t CMDX : 1;
 153:Core\Inc/AB1815_A.h **** 		} fields;
 154:Core\Inc/AB1815_A.h **** 	};
 155:Core\Inc/AB1815_A.h **** } cal_xt_t;
 156:Core\Inc/AB1815_A.h **** 
 157:Core\Inc/AB1815_A.h **** // 0x15
 158:Core\Inc/AB1815_A.h **** typedef struct
 159:Core\Inc/AB1815_A.h **** {
 160:Core\Inc/AB1815_A.h **** 	union
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 43


 161:Core\Inc/AB1815_A.h **** 	{
 162:Core\Inc/AB1815_A.h **** 		uint8_t value;
 163:Core\Inc/AB1815_A.h **** 		struct
 164:Core\Inc/AB1815_A.h **** 		{
 165:Core\Inc/AB1815_A.h **** 			uint8_t OFFSETR : 6;
 166:Core\Inc/AB1815_A.h **** 			uint8_t CMDR : 2;
 167:Core\Inc/AB1815_A.h **** 		} fields;
 168:Core\Inc/AB1815_A.h **** 	};
 169:Core\Inc/AB1815_A.h **** } cal_rc_hi_t;
 170:Core\Inc/AB1815_A.h **** 
 171:Core\Inc/AB1815_A.h **** // 0x16
 172:Core\Inc/AB1815_A.h **** typedef struct
 173:Core\Inc/AB1815_A.h **** {
 174:Core\Inc/AB1815_A.h **** 	uint8_t OFFSETR;
 175:Core\Inc/AB1815_A.h **** } cal_rc_low_t;
 176:Core\Inc/AB1815_A.h **** 
 177:Core\Inc/AB1815_A.h **** // 0x17
 178:Core\Inc/AB1815_A.h **** typedef struct
 179:Core\Inc/AB1815_A.h **** {
 180:Core\Inc/AB1815_A.h **** 	union
 181:Core\Inc/AB1815_A.h **** 	{
 182:Core\Inc/AB1815_A.h **** 		uint8_t value;
 183:Core\Inc/AB1815_A.h **** 		struct
 184:Core\Inc/AB1815_A.h **** 		{
 185:Core\Inc/AB1815_A.h **** 			uint8_t SLTO : 3;
 186:Core\Inc/AB1815_A.h **** 			uint8_t SLST : 1;
 187:Core\Inc/AB1815_A.h **** 			uint8_t EX1P : 1;
 188:Core\Inc/AB1815_A.h **** 			uint8_t EX2P : 1;
 189:Core\Inc/AB1815_A.h **** 			uint8_t SLRES : 1;
 190:Core\Inc/AB1815_A.h **** 			uint8_t SLP : 1;
 191:Core\Inc/AB1815_A.h **** 		} fields;
 192:Core\Inc/AB1815_A.h **** 	};
 193:Core\Inc/AB1815_A.h **** } sleep_control_t;
 194:Core\Inc/AB1815_A.h **** 
 195:Core\Inc/AB1815_A.h **** // 0x18
 196:Core\Inc/AB1815_A.h **** typedef struct
 197:Core\Inc/AB1815_A.h **** {
 198:Core\Inc/AB1815_A.h **** 	union
 199:Core\Inc/AB1815_A.h **** 	{
 200:Core\Inc/AB1815_A.h **** 		uint8_t value;
 201:Core\Inc/AB1815_A.h **** 		struct
 202:Core\Inc/AB1815_A.h **** 		{
 203:Core\Inc/AB1815_A.h **** 			uint8_t TFS : 2;
 204:Core\Inc/AB1815_A.h **** 			uint8_t RPT : 3;
 205:Core\Inc/AB1815_A.h **** 			uint8_t TRPT : 1;
 206:Core\Inc/AB1815_A.h **** 			uint8_t TM : 1;
 207:Core\Inc/AB1815_A.h **** 			uint8_t TE : 1;
 208:Core\Inc/AB1815_A.h **** 		} fields;
 209:Core\Inc/AB1815_A.h **** 	};
 210:Core\Inc/AB1815_A.h **** } countdown_control_t;
 211:Core\Inc/AB1815_A.h **** // 0X19 - Countdown Timer - no struct
 212:Core\Inc/AB1815_A.h **** 
 213:Core\Inc/AB1815_A.h **** // 0x1A - Timer Initial Value - no struct
 214:Core\Inc/AB1815_A.h **** 
 215:Core\Inc/AB1815_A.h **** // 0x1B
 216:Core\Inc/AB1815_A.h **** typedef struct
 217:Core\Inc/AB1815_A.h **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 44


 218:Core\Inc/AB1815_A.h **** 	union
 219:Core\Inc/AB1815_A.h **** 	{
 220:Core\Inc/AB1815_A.h **** 		uint8_t value;
 221:Core\Inc/AB1815_A.h **** 		struct
 222:Core\Inc/AB1815_A.h **** 		{
 223:Core\Inc/AB1815_A.h **** 			uint8_t WRB : 2;
 224:Core\Inc/AB1815_A.h **** 			uint8_t BMB : 5;
 225:Core\Inc/AB1815_A.h **** 			uint8_t WDS : 1;
 226:Core\Inc/AB1815_A.h **** 		} fields;
 227:Core\Inc/AB1815_A.h **** 	};
 228:Core\Inc/AB1815_A.h **** } watchdog_timer_t;
 229:Core\Inc/AB1815_A.h **** 
 230:Core\Inc/AB1815_A.h **** // 0x1C
 231:Core\Inc/AB1815_A.h **** 
 232:Core\Inc/AB1815_A.h **** typedef struct
 233:Core\Inc/AB1815_A.h **** {
 234:Core\Inc/AB1815_A.h **** 	union
 235:Core\Inc/AB1815_A.h **** 	{
 236:Core\Inc/AB1815_A.h **** 		uint8_t value;
 237:Core\Inc/AB1815_A.h **** 		struct
 238:Core\Inc/AB1815_A.h **** 		{
 239:Core\Inc/AB1815_A.h **** 			bool _ACIE : 1;
 240:Core\Inc/AB1815_A.h **** 			bool OFIE : 1;
 241:Core\Inc/AB1815_A.h **** 			bool PWGT : 1;
 242:Core\Inc/AB1815_A.h **** 			bool FOS : 1;
 243:Core\Inc/AB1815_A.h **** 			bool AOS : 1;
 244:Core\Inc/AB1815_A.h **** 			uint8_t ACAL : 2;
 245:Core\Inc/AB1815_A.h **** 			bool OSEL : 1;
 246:Core\Inc/AB1815_A.h **** 		} fields;
 247:Core\Inc/AB1815_A.h **** 	};
 248:Core\Inc/AB1815_A.h **** } oscillator_control_t;
 249:Core\Inc/AB1815_A.h **** 
 250:Core\Inc/AB1815_A.h **** // 0x1D
 251:Core\Inc/AB1815_A.h **** typedef struct
 252:Core\Inc/AB1815_A.h **** {
 253:Core\Inc/AB1815_A.h **** 	union
 254:Core\Inc/AB1815_A.h **** 	{
 255:Core\Inc/AB1815_A.h **** 		uint8_t value;
 256:Core\Inc/AB1815_A.h **** 		struct
 257:Core\Inc/AB1815_A.h **** 		{
 258:Core\Inc/AB1815_A.h **** 			bool ACF : 1;
 259:Core\Inc/AB1815_A.h **** 			bool OF : 1;
 260:Core\Inc/AB1815_A.h **** 			uint8_t RESERVED : 2;
 261:Core\Inc/AB1815_A.h **** 			bool OMODE : 1;
 262:Core\Inc/AB1815_A.h **** 			bool LKO2 : 1;
 263:Core\Inc/AB1815_A.h **** 			uint8_t XTCAL : 2;
 264:Core\Inc/AB1815_A.h **** 		} fields;
 265:Core\Inc/AB1815_A.h **** 	};
 266:Core\Inc/AB1815_A.h **** } oscillator_status_t;
 267:Core\Inc/AB1815_A.h **** 
 268:Core\Inc/AB1815_A.h **** // 0x1F - Configuration Key - See Enums below
 269:Core\Inc/AB1815_A.h **** 
 270:Core\Inc/AB1815_A.h **** // 0x20
 271:Core\Inc/AB1815_A.h **** typedef struct
 272:Core\Inc/AB1815_A.h **** {
 273:Core\Inc/AB1815_A.h **** 	union
 274:Core\Inc/AB1815_A.h **** 	{
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 45


 275:Core\Inc/AB1815_A.h **** 		uint8_t value;
 276:Core\Inc/AB1815_A.h **** 		struct
 277:Core\Inc/AB1815_A.h **** 		{
 278:Core\Inc/AB1815_A.h **** 			uint8_t ROUT : 2;
 279:Core\Inc/AB1815_A.h **** 			uint8_t DIODE : 2;
 280:Core\Inc/AB1815_A.h **** 			uint8_t TCS : 4;
 281:Core\Inc/AB1815_A.h **** 		} fields;
 282:Core\Inc/AB1815_A.h **** 	};
 283:Core\Inc/AB1815_A.h **** } trickle_t;
 284:Core\Inc/AB1815_A.h **** 
 285:Core\Inc/AB1815_A.h **** // 0x21
 286:Core\Inc/AB1815_A.h **** typedef struct
 287:Core\Inc/AB1815_A.h **** {
 288:Core\Inc/AB1815_A.h **** 	union
 289:Core\Inc/AB1815_A.h **** 	{
 290:Core\Inc/AB1815_A.h **** 		uint8_t value;
 291:Core\Inc/AB1815_A.h **** 		struct
 292:Core\Inc/AB1815_A.h **** 		{
 293:Core\Inc/AB1815_A.h **** 			uint8_t RESERVED : 4;
 294:Core\Inc/AB1815_A.h **** 			uint8_t BREF : 4;
 295:Core\Inc/AB1815_A.h **** 		} fields;
 296:Core\Inc/AB1815_A.h **** 	};
 297:Core\Inc/AB1815_A.h **** } bref_control_t;
 298:Core\Inc/AB1815_A.h **** 
 299:Core\Inc/AB1815_A.h **** // 0x26 – AFCTRL - See Enums below
 300:Core\Inc/AB1815_A.h **** 
 301:Core\Inc/AB1815_A.h **** // 0x27
 302:Core\Inc/AB1815_A.h **** typedef struct
 303:Core\Inc/AB1815_A.h **** {
 304:Core\Inc/AB1815_A.h **** 	union
 305:Core\Inc/AB1815_A.h **** 	{
 306:Core\Inc/AB1815_A.h **** 		uint8_t value;
 307:Core\Inc/AB1815_A.h **** 		struct
 308:Core\Inc/AB1815_A.h **** 		{
 309:Core\Inc/AB1815_A.h **** 			uint8_t RESERVED : 7; // Must only be 0b0000000
 310:Core\Inc/AB1815_A.h **** 			bool IOBM : 1;
 311:Core\Inc/AB1815_A.h **** 		} fields;
 312:Core\Inc/AB1815_A.h **** 	};
 313:Core\Inc/AB1815_A.h **** } battery_mode_io_t;
 314:Core\Inc/AB1815_A.h **** 
 315:Core\Inc/AB1815_A.h **** // 0x28
 316:Core\Inc/AB1815_A.h **** typedef struct
 317:Core\Inc/AB1815_A.h **** {
 318:Core\Inc/AB1815_A.h **** 	uint8_t ID0;
 319:Core\Inc/AB1815_A.h **** 	uint8_t ID1;
 320:Core\Inc/AB1815_A.h **** 	union ID2
 321:Core\Inc/AB1815_A.h **** 	{
 322:Core\Inc/AB1815_A.h **** 		uint8_t value;
 323:Core\Inc/AB1815_A.h **** 		struct
 324:Core\Inc/AB1815_A.h **** 		{
 325:Core\Inc/AB1815_A.h **** 			uint8_t MINOR : 3;
 326:Core\Inc/AB1815_A.h **** 			uint8_t MAJOR : 5;
 327:Core\Inc/AB1815_A.h **** 		} Revision;
 328:Core\Inc/AB1815_A.h **** 	} ID2;
 329:Core\Inc/AB1815_A.h **** 	uint8_t ID3;
 330:Core\Inc/AB1815_A.h **** 	uint8_t ID4;
 331:Core\Inc/AB1815_A.h **** 	uint8_t ID5;
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 46


 332:Core\Inc/AB1815_A.h **** 	uint8_t ID6;
 333:Core\Inc/AB1815_A.h **** } ab1815_id_t;
 334:Core\Inc/AB1815_A.h **** 
 335:Core\Inc/AB1815_A.h **** // 0x2F
 336:Core\Inc/AB1815_A.h **** typedef struct
 337:Core\Inc/AB1815_A.h **** {
 338:Core\Inc/AB1815_A.h **** 	union
 339:Core\Inc/AB1815_A.h **** 	{
 340:Core\Inc/AB1815_A.h **** 		uint8_t value;
 341:Core\Inc/AB1815_A.h **** 		struct
 342:Core\Inc/AB1815_A.h **** 		{
 343:Core\Inc/AB1815_A.h **** 			bool RESERVED : 1;
 344:Core\Inc/AB1815_A.h **** 			bool VINT : 1;
 345:Core\Inc/AB1815_A.h **** 			bool RESERVED_2 : 1;
 346:Core\Inc/AB1815_A.h **** 			bool BMIN : 1;
 347:Core\Inc/AB1815_A.h **** 			bool BMOD : 1;
 348:Core\Inc/AB1815_A.h **** 		} fields;
 349:Core\Inc/AB1815_A.h **** 	};
 350:Core\Inc/AB1815_A.h **** } ab1815_analog_status_t;
 351:Core\Inc/AB1815_A.h **** 
 352:Core\Inc/AB1815_A.h **** // 0x30
 353:Core\Inc/AB1815_A.h **** typedef struct
 354:Core\Inc/AB1815_A.h **** {
 355:Core\Inc/AB1815_A.h **** 	uint8_t value;
 356:Core\Inc/AB1815_A.h **** 	struct
 357:Core\Inc/AB1815_A.h **** 	{
 358:Core\Inc/AB1815_A.h **** 		uint8_t O1EN : 1;
 359:Core\Inc/AB1815_A.h **** 		uint8_t O3EN : 1;
 360:Core\Inc/AB1815_A.h **** 		uint8_t O4EN : 1;
 361:Core\Inc/AB1815_A.h **** 		uint8_t RSEN : 1;
 362:Core\Inc/AB1815_A.h **** 		uint8_t EXDS : 1;
 363:Core\Inc/AB1815_A.h **** 		uint8_t WDDS : 1;
 364:Core\Inc/AB1815_A.h **** 		uint8_t EXBM : 1;
 365:Core\Inc/AB1815_A.h **** 		uint8_t WDBM : 1;
 366:Core\Inc/AB1815_A.h **** 	} fields;
 367:Core\Inc/AB1815_A.h **** } ab1815_output_control_t;
 368:Core\Inc/AB1815_A.h **** 
 369:Core\Inc/AB1815_A.h **** // 0x3f
 370:Core\Inc/AB1815_A.h **** typedef struct
 371:Core\Inc/AB1815_A.h **** {
 372:Core\Inc/AB1815_A.h **** 	union
 373:Core\Inc/AB1815_A.h **** 	{
 374:Core\Inc/AB1815_A.h **** 		uint8_t value;
 375:Core\Inc/AB1815_A.h **** 		struct
 376:Core\Inc/AB1815_A.h **** 		{
 377:Core\Inc/AB1815_A.h **** 			uint8_t XADS : 2;
 378:Core\Inc/AB1815_A.h **** 			uint8_t XADA : 1;
 379:Core\Inc/AB1815_A.h **** 			uint8_t RSVD : 1;
 380:Core\Inc/AB1815_A.h **** 			uint8_t EXIN : 1;
 381:Core\Inc/AB1815_A.h **** 			uint8_t WDIN : 1;
 382:Core\Inc/AB1815_A.h **** 			uint8_t BPOL : 1;
 383:Core\Inc/AB1815_A.h **** 			uint8_t O4BM : 1;
 384:Core\Inc/AB1815_A.h **** 		} fields;
 385:Core\Inc/AB1815_A.h **** 	};
 386:Core\Inc/AB1815_A.h **** } extension_ram_t;
 387:Core\Inc/AB1815_A.h **** 
 388:Core\Inc/AB1815_A.h **** // 0x1F
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 47


 389:Core\Inc/AB1815_A.h **** 
 390:Core\Inc/AB1815_A.h **** typedef enum
 391:Core\Inc/AB1815_A.h **** {
 392:Core\Inc/AB1815_A.h **** 	ab1815_oscillator_control = 0xA1,
 393:Core\Inc/AB1815_A.h **** 	ab1815_software_reset = 0x3c,
 394:Core\Inc/AB1815_A.h **** 	ab1815_reg_control = 0x9D,
 395:Core\Inc/AB1815_A.h **** } configuration_key_e;
 396:Core\Inc/AB1815_A.h **** 
 397:Core\Inc/AB1815_A.h **** enum
 398:Core\Inc/AB1815_A.h **** {
 399:Core\Inc/AB1815_A.h **** 	ab1815_clk_format_unset = 0,
 400:Core\Inc/AB1815_A.h **** 	ab1815_clk_format_12_hour = 1,
 401:Core\Inc/AB1815_A.h **** 	ab1815_clk_format_25_hour = 2
 402:Core\Inc/AB1815_A.h **** } ab1815_clk_format_e;
 403:Core\Inc/AB1815_A.h **** 
 404:Core\Inc/AB1815_A.h **** enum
 405:Core\Inc/AB1815_A.h **** {
 406:Core\Inc/AB1815_A.h **** 	ab1815_interrupt_im_level = 0,
 407:Core\Inc/AB1815_A.h **** 	ab1815_interrupt_im_1_8192 = 1,
 408:Core\Inc/AB1815_A.h **** 	ab1815_interrupt_im_1_64 = 2,
 409:Core\Inc/AB1815_A.h **** 	ab1815_interrupt_im_1_4 = 3
 410:Core\Inc/AB1815_A.h **** } ab1815_interrupt_im_e;
 411:Core\Inc/AB1815_A.h **** 
 412:Core\Inc/AB1815_A.h **** enum
 413:Core\Inc/AB1815_A.h **** {
 414:Core\Inc/AB1815_A.h **** 	ab1815_psw_nIRQ_or_OUTB = 0, // If at least one interrupt is enabled
 415:Core\Inc/AB1815_A.h **** 	ab1815_psw_SQW_or_OUTB = 1,	 // If SQWE == 1
 416:Core\Inc/AB1815_A.h **** 	ab1815_psw_RESERVED = 2,
 417:Core\Inc/AB1815_A.h **** 	ab1815_psw_nAIRQ_or_OUTB = 3, // If AIE  == 1
 418:Core\Inc/AB1815_A.h **** 	ab1815_psw_TIRQ_or_OUTB = 4,  // If TIE  == 1
 419:Core\Inc/AB1815_A.h **** 	ab1815_psw_nTIRQ_or_OUTB = 5, // If TIE  == 1
 420:Core\Inc/AB1815_A.h **** 	ab1815_psw_SLEEP = 6,
 421:Core\Inc/AB1815_A.h **** 	ab1815_psw_OUTB = 7
 422:Core\Inc/AB1815_A.h **** } ab1815_psw_nirq2_pin_control_e;
 423:Core\Inc/AB1815_A.h **** 
 424:Core\Inc/AB1815_A.h **** enum
 425:Core\Inc/AB1815_A.h **** {
 426:Core\Inc/AB1815_A.h **** 	ab1815_fout_nIRQ_or_OUT = 0,		// If at least one interrupt is enabled
 427:Core\Inc/AB1815_A.h **** 	ab1815_fout_SQW_or_OUT = 1,			// If SQWE == 1
 428:Core\Inc/AB1815_A.h **** 	ab1815_fout_SQW_or_nIRQ_or_OUT = 2, // If SQWE == 1, else nIRQ if at least one interrupt is enable
 429:Core\Inc/AB1815_A.h **** 	ab1815_fout_nAIRQ_or_OUT = 3		// If AIE == 1
 430:Core\Inc/AB1815_A.h **** } ab1815_fout_nirq_pin_control_e;
 431:Core\Inc/AB1815_A.h **** 
 432:Core\Inc/AB1815_A.h **** enum
 433:Core\Inc/AB1815_A.h **** {
 434:Core\Inc/AB1815_A.h **** 	Sunday = 1,
 435:Core\Inc/AB1815_A.h **** 	Monday = 2,
 436:Core\Inc/AB1815_A.h **** 	Tuesday = 3,
 437:Core\Inc/AB1815_A.h **** 	Wednesday = 4,
 438:Core\Inc/AB1815_A.h **** 	Thursday = 4,
 439:Core\Inc/AB1815_A.h **** 	Friday = 5,
 440:Core\Inc/AB1815_A.h **** 	Saterday = 6
 441:Core\Inc/AB1815_A.h **** } days_of_week_e;
 442:Core\Inc/AB1815_A.h **** 
 443:Core\Inc/AB1815_A.h **** // typedef enum
 444:Core\Inc/AB1815_A.h **** // {
 445:Core\Inc/AB1815_A.h **** // 	ab1815_status_e_OK,
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 48


 446:Core\Inc/AB1815_A.h **** // 	ab1815_status_e_ERROR
 447:Core\Inc/AB1815_A.h **** // } ab1815_status_e;
 448:Core\Inc/AB1815_A.h **** bool ab1815_status_e_OK = 0;
 449:Core\Inc/AB1815_A.h **** bool ab1815_status_e_ERROR = 1;
 450:Core\Inc/AB1815_A.h **** 
 451:Core\Inc/AB1815_A.h **** typedef enum
 452:Core\Inc/AB1815_A.h **** {
 453:Core\Inc/AB1815_A.h **** 	ab1815_batmodeio_disabled = 0,
 454:Core\Inc/AB1815_A.h **** 	ab1815_batmodeio_enabled = 128,
 455:Core\Inc/AB1815_A.h **** } ab1815_batmodeio_e;
 456:Core\Inc/AB1815_A.h **** 
 457:Core\Inc/AB1815_A.h **** // 0x26
 458:Core\Inc/AB1815_A.h **** typedef enum
 459:Core\Inc/AB1815_A.h **** {
 460:Core\Inc/AB1815_A.h **** 	afctrl_disable = 0,
 461:Core\Inc/AB1815_A.h **** 	afctrl_enable = 0xA0,
 462:Core\Inc/AB1815_A.h **** } afctrl_e;
 463:Core\Inc/AB1815_A.h **** 
 464:Core\Inc/AB1815_A.h **** typedef enum
 465:Core\Inc/AB1815_A.h **** {
 466:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_alarm_disabled = 0,
 467:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_year = 1,
 468:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_month = 2,
 469:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_week = 3,
 470:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_day = 4,
 471:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_hour = 5,
 472:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_minute = 6,
 473:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_second = 7,
 474:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_tenth = 8,
 475:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_hundredth = 9 // Invalid without
 476:Core\Inc/AB1815_A.h **** } ab1815_alarm_repeat_mode;
 477:Core\Inc/AB1815_A.h **** 
 478:Core\Inc/AB1815_A.h **** // 0x1B
 479:Core\Inc/AB1815_A.h **** typedef enum
 480:Core\Inc/AB1815_A.h **** {
 481:Core\Inc/AB1815_A.h **** 	ab1815_watchdog_16HZ = 0b00,
 482:Core\Inc/AB1815_A.h **** 	ab1815_watchdog_4HZ = 0b01,
 483:Core\Inc/AB1815_A.h **** 	ab1815_watchdog_1HZ = 0b10,
 484:Core\Inc/AB1815_A.h **** 	ab1815_watchdog_1_4HZ = 0b11, // 1/4 HZ
 485:Core\Inc/AB1815_A.h **** } watchdog_timer_frequency_e;
 486:Core\Inc/AB1815_A.h **** 
 487:Core\Inc/AB1815_A.h **** // 0x20
 488:Core\Inc/AB1815_A.h **** typedef enum
 489:Core\Inc/AB1815_A.h **** {
 490:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_enable = 0b1010,
 491:Core\Inc/AB1815_A.h **** } trickle_charge_tcs_e;
 492:Core\Inc/AB1815_A.h **** 
 493:Core\Inc/AB1815_A.h **** typedef enum
 494:Core\Inc/AB1815_A.h **** {
 495:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_diode_0v6 = 0b10,		// 0.6v standard diode
 496:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_diode_0v3 = 0b01,		// 0.3v schottky diode
 497:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_diode_disable = 0b00, //
 498:Core\Inc/AB1815_A.h **** } trickle_charge_diode_e;
 499:Core\Inc/AB1815_A.h **** 
 500:Core\Inc/AB1815_A.h **** typedef enum
 501:Core\Inc/AB1815_A.h **** {
 502:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_resistor_disable = 0b00,
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 49


 503:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_resistor_3k_ohm = 0b01,
 504:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_resistor_6k_ohm = 0b10,
 505:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_resistor_11k_ohm = 0b11,
 506:Core\Inc/AB1815_A.h **** } trickle_charge_resistor_e;
 507:Core\Inc/AB1815_A.h **** 
 508:Core\Inc/AB1815_A.h **** // 0x21
 509:Core\Inc/AB1815_A.h **** typedef enum
 510:Core\Inc/AB1815_A.h **** {
 511:Core\Inc/AB1815_A.h **** 	ab1815_battery_reference_2v5_3v0 = 0b0111,
 512:Core\Inc/AB1815_A.h **** 	ab1815_battery_reference_2v1_2v5 = 0b1011,
 513:Core\Inc/AB1815_A.h **** 	ab1815_battery_reference_1v8_2v2 = 0b1101,
 514:Core\Inc/AB1815_A.h **** 	ab1815_battery_reference_1v4_1v6 = 0b1111, // Also reset value?
 515:Core\Inc/AB1815_A.h **** } battery_voltage_reference_select_e;
 516:Core\Inc/AB1815_A.h **** 
 517:Core\Inc/AB1815_A.h **** uint64_t error_code;
 518:Core\Inc/AB1815_A.h **** 
 519:Core\Inc/AB1815_A.h **** uint16_t cs_pin;
 520:Core\Inc/AB1815_A.h **** struct
 521:Core\Inc/AB1815_A.h **** {
 522:Core\Inc/AB1815_A.h **** 	uint8_t _12_24 : 2;
 523:Core\Inc/AB1815_A.h **** 	uint8_t clk_source : 2;
 524:Core\Inc/AB1815_A.h **** } fields;
 525:Core\Inc/AB1815_A.h **** 
 526:Core\Inc/AB1815_A.h **** // bool init();
 527:Core\Inc/AB1815_A.h **** bool read(uint8_t offset, uint8_t *buf, uint8_t length);
 528:Core\Inc/AB1815_A.h **** bool write(uint8_t offset, uint8_t *buf, uint8_t length);
 529:Core\Inc/AB1815_A.h **** void spi_select_slave(bool select);
 530:Core\Inc/AB1815_A.h **** 
 531:Core\Inc/AB1815_A.h **** ab1815_id_t id;
 532:Core\Inc/AB1815_A.h **** 
 533:Core\Inc/AB1815_A.h **** // AB1815(uint16_t cs_pin); // ?
 534:Core\Inc/AB1815_A.h **** 
 535:Core\Inc/AB1815_A.h **** // 0x00
 536:Core\Inc/AB1815_A.h **** time_t get();
 537:Core\Inc/AB1815_A.h **** void set(time_t time);
 538:Core\Inc/AB1815_A.h **** bool get_time(ab1815_tmElements_t *time);
 539:Core\Inc/AB1815_A.h **** bool set_time(ab1815_tmElements_t *time);
 540:Core\Inc/AB1815_A.h **** // bool hundrdeds();
 541:Core\Inc/AB1815_A.h **** bool clear_hundrdeds();
 542:Core\Inc/AB1815_A.h **** 
 543:Core\Inc/AB1815_A.h **** // 0x08
 544:Core\Inc/AB1815_A.h **** bool get_alarm(ab1815_tmElements_t *time, ab1815_alarm_repeat_mode *alarm_mode);
 545:Core\Inc/AB1815_A.h **** bool set_alarm(ab1815_tmElements_t *time, ab1815_alarm_repeat_mode alarm_mode);
 546:Core\Inc/AB1815_A.h **** 
 547:Core\Inc/AB1815_A.h **** // 0x0F - See also: ARST in Control1.
 548:Core\Inc/AB1815_A.h **** //	If ARST is a 1, a read of the Status register will produce the current state of all
 549:Core\Inc/AB1815_A.h **** //	the interrupt flags and then clear them
 550:Core\Inc/AB1815_A.h **** bool set_status(status_t *status);
 551:Core\Inc/AB1815_A.h **** bool get_status(status_t *status);
 552:Core\Inc/AB1815_A.h **** 
 553:Core\Inc/AB1815_A.h **** // 0x10
 554:Core\Inc/AB1815_A.h **** bool set_control1(control1_t *control1);
 555:Core\Inc/AB1815_A.h **** bool get_control1(control1_t *control1);
 556:Core\Inc/AB1815_A.h **** 
 557:Core\Inc/AB1815_A.h **** // 0x11
 558:Core\Inc/AB1815_A.h **** bool set_control2(control2_t *control2);
 559:Core\Inc/AB1815_A.h **** bool get_control2(control2_t *control2);
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 50


 560:Core\Inc/AB1815_A.h **** 
 561:Core\Inc/AB1815_A.h **** // 0x12
 562:Core\Inc/AB1815_A.h **** bool set_interrupt_mask(inturrupt_mask_t *inturrupt_mask);
 563:Core\Inc/AB1815_A.h **** bool get_interrupt_mask(inturrupt_mask_t *inturrupt_mask);
 564:Core\Inc/AB1815_A.h **** 
 565:Core\Inc/AB1815_A.h **** // 0x13
 566:Core\Inc/AB1815_A.h **** bool set_square_wave(square_wave_t *square_wave);
 567:Core\Inc/AB1815_A.h **** bool get_square_wave(square_wave_t *square_wave);
 568:Core\Inc/AB1815_A.h **** 
 569:Core\Inc/AB1815_A.h **** // 0x14
 570:Core\Inc/AB1815_A.h **** bool set_cal_xt(cal_xt_t *cal_xt);
 571:Core\Inc/AB1815_A.h **** bool get_cal_xt(cal_xt_t *cal_xt);
 572:Core\Inc/AB1815_A.h **** 
 573:Core\Inc/AB1815_A.h **** // 0x15
 574:Core\Inc/AB1815_A.h **** bool set_cal_rc_hi(cal_rc_hi_t *cal_rc_hi);
 575:Core\Inc/AB1815_A.h **** bool get_cal_rc_hi(cal_rc_hi_t *cal_rc_hi);
 576:Core\Inc/AB1815_A.h **** 
 577:Core\Inc/AB1815_A.h **** // 0x16
 578:Core\Inc/AB1815_A.h **** bool set_cal_rc_low(cal_rc_low_t *cal_rc_low);
 579:Core\Inc/AB1815_A.h **** bool get_cal_rc_low(cal_rc_low_t *cal_rc_low);
 580:Core\Inc/AB1815_A.h **** 
 581:Core\Inc/AB1815_A.h **** // 0x17 sleep_control_t
 582:Core\Inc/AB1815_A.h **** bool set_sleep_control(sleep_control_t *sleep_control);
 583:Core\Inc/AB1815_A.h **** bool get_sleep_control(sleep_control_t *sleep_control);
 584:Core\Inc/AB1815_A.h **** 
 585:Core\Inc/AB1815_A.h **** // 0x18 Set the countdown control register
 586:Core\Inc/AB1815_A.h **** bool set_countdown_control(countdown_control_t *countdown_control);
 587:Core\Inc/AB1815_A.h **** bool get_countdown_control(countdown_control_t *countdown_control);
 588:Core\Inc/AB1815_A.h **** 
 589:Core\Inc/AB1815_A.h **** // 0x19
 590:Core\Inc/AB1815_A.h **** bool set_countdown_timer(uint8_t timer_value);
 591:Core\Inc/AB1815_A.h **** bool get_countdown_timer(uint8_t *timer_value);
 592:Core\Inc/AB1815_A.h **** 
 593:Core\Inc/AB1815_A.h **** // 0x1A
 594:Core\Inc/AB1815_A.h **** bool set_countdown_timer_initial_value(uint8_t timer_value);
 595:Core\Inc/AB1815_A.h **** bool get_countdown_timer_initial_value(uint8_t *timer_value);
 596:Core\Inc/AB1815_A.h **** 
 597:Core\Inc/AB1815_A.h **** // 0x1B
 598:Core\Inc/AB1815_A.h **** bool set_watchdog_timer(watchdog_timer_t *watchdog_timer);
 599:Core\Inc/AB1815_A.h **** bool get_watchdog_timer(watchdog_timer_t *watchdog_timer);
 600:Core\Inc/AB1815_A.h **** 
 601:Core\Inc/AB1815_A.h **** // 0x1C Get the oscillator control register
 602:Core\Inc/AB1815_A.h **** bool get_oscillator_control(oscillator_control_t *oscillator_control);
 603:Core\Inc/AB1815_A.h **** bool set_oscillator_control(oscillator_control_t *oscillator_control);
 604:Core\Inc/AB1815_A.h **** 
 605:Core\Inc/AB1815_A.h **** // 0x1D
 606:Core\Inc/AB1815_A.h **** bool set_oscillator_status(oscillator_status_t *oscillator_status);
 607:Core\Inc/AB1815_A.h **** bool get_oscillator_status(oscillator_status_t *oscillator_status);
 608:Core\Inc/AB1815_A.h **** 
 609:Core\Inc/AB1815_A.h **** // 0x1E - Nothing on the AB1815
 610:Core\Inc/AB1815_A.h **** // 0x1F
 611:Core\Inc/AB1815_A.h **** bool set_configuration_key(configuration_key_e configuration_key);
 612:Core\Inc/AB1815_A.h **** 
 613:Core\Inc/AB1815_A.h **** // 0x20
 614:Core\Inc/AB1815_A.h **** bool set_trickle(trickle_t *trickle);
 615:Core\Inc/AB1815_A.h **** bool get_trickle(trickle_t *trickle);
 616:Core\Inc/AB1815_A.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 51


 617:Core\Inc/AB1815_A.h **** // 0x21
 618:Core\Inc/AB1815_A.h **** bool set_bref_control(bref_control_t *bref_control);
 619:Core\Inc/AB1815_A.h **** bool get_bref_control(bref_control_t *bref_control);
 620:Core\Inc/AB1815_A.h **** 
 621:Core\Inc/AB1815_A.h **** // 0x26
 622:Core\Inc/AB1815_A.h **** bool set_afctrl(afctrl_e afctrl);
 623:Core\Inc/AB1815_A.h **** bool get_(afctrl_e *afctrl);
 624:Core\Inc/AB1815_A.h **** 
 625:Core\Inc/AB1815_A.h **** // 0x27
 626:Core\Inc/AB1815_A.h **** bool set_batmodeio(ab1815_batmodeio_e mode);
 627:Core\Inc/AB1815_A.h **** bool get_batmodeio(ab1815_batmodeio_e *mode);
 628:Core\Inc/AB1815_A.h **** 
 629:Core\Inc/AB1815_A.h **** // 0x28
 630:Core\Inc/AB1815_A.h **** bool get_id(ab1815_id_t *id);
 631:Core\Inc/AB1815_A.h **** 
 632:Core\Inc/AB1815_A.h **** // 0x2F
 633:Core\Inc/AB1815_A.h **** bool set_analog_status_register(ab1815_analog_status_t *analog_status);
 634:Core\Inc/AB1815_A.h **** bool get_analog_status_register(ab1815_analog_status_t *analog_status);
 635:Core\Inc/AB1815_A.h **** 
 636:Core\Inc/AB1815_A.h **** // 0x30
 637:Core\Inc/AB1815_A.h **** bool set_output_control(ab1815_output_control_t *output_control);
 638:Core\Inc/AB1815_A.h **** bool get_output_control(ab1815_output_control_t *output_control);
 639:Core\Inc/AB1815_A.h **** 
 640:Core\Inc/AB1815_A.h **** // 0x3F
 641:Core\Inc/AB1815_A.h **** bool set_extension_ram(extension_ram_t *extension_ram);
 642:Core\Inc/AB1815_A.h **** bool get_extension_ram(extension_ram_t *extension_ram);
 643:Core\Inc/AB1815_A.h **** 
 644:Core\Inc/AB1815_A.h **** void hex_dump(FILE *dump_to);
 645:Core\Inc/AB1815_A.h **** 
 646:Core\Inc/AB1815_A.h **** bool detectChip(void);
 647:Core\Inc/AB1815_A.h **** 
 648:Core\Inc/AB1815_A.h **** inline uint8_t bcd2bin(uint8_t value)
 1815              		.loc 2 648 16 is_stmt 1 view .LVU322
 1816              	.LBB15:
 649:Core\Inc/AB1815_A.h **** {
 650:Core\Inc/AB1815_A.h **** 	return (value & 0x0F) + ((value >> 4) * 10);
 1817              		.loc 2 650 2 view .LVU323
 1818              		.loc 2 650 16 is_stmt 0 view .LVU324
 1819 002a 0F23     		movs	r3, #15
 1820 002c 1900     		movs	r1, r3
 1821 002e 1140     		ands	r1, r2
 1822              		.loc 2 650 24 view .LVU325
 1823 0030 1209     		lsrs	r2, r2, #4
 1824              	.LVL153:
 1825              		.loc 2 650 24 view .LVU326
 1826 0032 9500     		lsls	r5, r2, #2
 1827 0034 5219     		adds	r2, r2, r5
 1828 0036 5200     		lsls	r2, r2, #1
 1829 0038 8A18     		adds	r2, r1, r2
 1830              	.LVL154:
 1831              		.loc 2 650 24 view .LVU327
 1832              	.LBE15:
 1833              	.LBE14:
 472:Core/Src/AB1815.c **** 		id->ID1 = bcd2bin(buffer[1]);
 1834              		.loc 1 472 11 view .LVU328
 1835 003a 2270     		strb	r2, [r4]
 473:Core/Src/AB1815.c **** 		id->ID2.value = buffer[2];
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 52


 1836              		.loc 1 473 3 is_stmt 1 view .LVU329
 473:Core/Src/AB1815.c **** 		id->ID2.value = buffer[2];
 1837              		.loc 1 473 13 is_stmt 0 view .LVU330
 1838 003c 6A46     		mov	r2, sp
 1839 003e 5278     		ldrb	r2, [r2, #1]
 1840              	.LVL155:
 1841              	.LBB16:
 1842              	.LBI16:
 648:Core\Inc/AB1815_A.h **** {
 1843              		.loc 2 648 16 is_stmt 1 view .LVU331
 1844              	.LBB17:
 1845              		.loc 2 650 2 view .LVU332
 1846              		.loc 2 650 16 is_stmt 0 view .LVU333
 1847 0040 1900     		movs	r1, r3
 1848 0042 1140     		ands	r1, r2
 1849              		.loc 2 650 24 view .LVU334
 1850 0044 1209     		lsrs	r2, r2, #4
 1851              	.LVL156:
 1852              		.loc 2 650 24 view .LVU335
 1853 0046 9500     		lsls	r5, r2, #2
 1854 0048 5219     		adds	r2, r2, r5
 1855 004a 5200     		lsls	r2, r2, #1
 1856 004c 8A18     		adds	r2, r1, r2
 1857              	.LVL157:
 1858              		.loc 2 650 24 view .LVU336
 1859              	.LBE17:
 1860              	.LBE16:
 473:Core/Src/AB1815.c **** 		id->ID2.value = buffer[2];
 1861              		.loc 1 473 11 view .LVU337
 1862 004e 6270     		strb	r2, [r4, #1]
 474:Core/Src/AB1815.c **** 		id->ID3 = bcd2bin(buffer[3]);
 1863              		.loc 1 474 3 is_stmt 1 view .LVU338
 474:Core/Src/AB1815.c **** 		id->ID3 = bcd2bin(buffer[3]);
 1864              		.loc 1 474 25 is_stmt 0 view .LVU339
 1865 0050 6A46     		mov	r2, sp
 1866 0052 9278     		ldrb	r2, [r2, #2]
 474:Core/Src/AB1815.c **** 		id->ID3 = bcd2bin(buffer[3]);
 1867              		.loc 1 474 17 view .LVU340
 1868 0054 A270     		strb	r2, [r4, #2]
 475:Core/Src/AB1815.c **** 		id->ID4 = bcd2bin(buffer[4]);
 1869              		.loc 1 475 3 is_stmt 1 view .LVU341
 475:Core/Src/AB1815.c **** 		id->ID4 = bcd2bin(buffer[4]);
 1870              		.loc 1 475 13 is_stmt 0 view .LVU342
 1871 0056 6A46     		mov	r2, sp
 1872 0058 D278     		ldrb	r2, [r2, #3]
 1873              	.LVL158:
 1874              	.LBB18:
 1875              	.LBI18:
 648:Core\Inc/AB1815_A.h **** {
 1876              		.loc 2 648 16 is_stmt 1 view .LVU343
 1877              	.LBB19:
 1878              		.loc 2 650 2 view .LVU344
 1879              		.loc 2 650 16 is_stmt 0 view .LVU345
 1880 005a 1900     		movs	r1, r3
 1881 005c 1140     		ands	r1, r2
 1882              		.loc 2 650 24 view .LVU346
 1883 005e 1209     		lsrs	r2, r2, #4
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 53


 1884              	.LVL159:
 1885              		.loc 2 650 24 view .LVU347
 1886 0060 9500     		lsls	r5, r2, #2
 1887 0062 5219     		adds	r2, r2, r5
 1888 0064 5200     		lsls	r2, r2, #1
 1889 0066 8A18     		adds	r2, r1, r2
 1890              	.LVL160:
 1891              		.loc 2 650 24 view .LVU348
 1892              	.LBE19:
 1893              	.LBE18:
 475:Core/Src/AB1815.c **** 		id->ID4 = bcd2bin(buffer[4]);
 1894              		.loc 1 475 11 view .LVU349
 1895 0068 E270     		strb	r2, [r4, #3]
 476:Core/Src/AB1815.c **** 		id->ID5 = bcd2bin(buffer[5]);
 1896              		.loc 1 476 3 is_stmt 1 view .LVU350
 476:Core/Src/AB1815.c **** 		id->ID5 = bcd2bin(buffer[5]);
 1897              		.loc 1 476 13 is_stmt 0 view .LVU351
 1898 006a 6A46     		mov	r2, sp
 1899 006c 1279     		ldrb	r2, [r2, #4]
 1900              	.LVL161:
 1901              	.LBB20:
 1902              	.LBI20:
 648:Core\Inc/AB1815_A.h **** {
 1903              		.loc 2 648 16 is_stmt 1 view .LVU352
 1904              	.LBB21:
 1905              		.loc 2 650 2 view .LVU353
 1906              		.loc 2 650 16 is_stmt 0 view .LVU354
 1907 006e 1900     		movs	r1, r3
 1908 0070 1140     		ands	r1, r2
 1909              		.loc 2 650 24 view .LVU355
 1910 0072 1209     		lsrs	r2, r2, #4
 1911              	.LVL162:
 1912              		.loc 2 650 24 view .LVU356
 1913 0074 9500     		lsls	r5, r2, #2
 1914 0076 5219     		adds	r2, r2, r5
 1915 0078 5200     		lsls	r2, r2, #1
 1916 007a 8A18     		adds	r2, r1, r2
 1917              	.LVL163:
 1918              		.loc 2 650 24 view .LVU357
 1919              	.LBE21:
 1920              	.LBE20:
 476:Core/Src/AB1815.c **** 		id->ID5 = bcd2bin(buffer[5]);
 1921              		.loc 1 476 11 view .LVU358
 1922 007c 2271     		strb	r2, [r4, #4]
 477:Core/Src/AB1815.c **** 		id->ID6 = bcd2bin(buffer[6]);
 1923              		.loc 1 477 3 is_stmt 1 view .LVU359
 477:Core/Src/AB1815.c **** 		id->ID6 = bcd2bin(buffer[6]);
 1924              		.loc 1 477 13 is_stmt 0 view .LVU360
 1925 007e 6A46     		mov	r2, sp
 1926 0080 5279     		ldrb	r2, [r2, #5]
 1927              	.LVL164:
 1928              	.LBB22:
 1929              	.LBI22:
 648:Core\Inc/AB1815_A.h **** {
 1930              		.loc 2 648 16 is_stmt 1 view .LVU361
 1931              	.LBB23:
 1932              		.loc 2 650 2 view .LVU362
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 54


 1933              		.loc 2 650 16 is_stmt 0 view .LVU363
 1934 0082 1900     		movs	r1, r3
 1935 0084 1140     		ands	r1, r2
 1936              		.loc 2 650 24 view .LVU364
 1937 0086 1209     		lsrs	r2, r2, #4
 1938              	.LVL165:
 1939              		.loc 2 650 24 view .LVU365
 1940 0088 9500     		lsls	r5, r2, #2
 1941 008a 5219     		adds	r2, r2, r5
 1942 008c 5200     		lsls	r2, r2, #1
 1943 008e 8A18     		adds	r2, r1, r2
 1944              	.LVL166:
 1945              		.loc 2 650 24 view .LVU366
 1946              	.LBE23:
 1947              	.LBE22:
 477:Core/Src/AB1815.c **** 		id->ID6 = bcd2bin(buffer[6]);
 1948              		.loc 1 477 11 view .LVU367
 1949 0090 6271     		strb	r2, [r4, #5]
 478:Core/Src/AB1815.c **** 	}
 1950              		.loc 1 478 3 is_stmt 1 view .LVU368
 478:Core/Src/AB1815.c **** 	}
 1951              		.loc 1 478 13 is_stmt 0 view .LVU369
 1952 0092 6A46     		mov	r2, sp
 1953 0094 9279     		ldrb	r2, [r2, #6]
 1954              	.LVL167:
 1955              	.LBB24:
 1956              	.LBI24:
 648:Core\Inc/AB1815_A.h **** {
 1957              		.loc 2 648 16 is_stmt 1 view .LVU370
 1958              	.LBB25:
 1959              		.loc 2 650 2 view .LVU371
 1960              		.loc 2 650 16 is_stmt 0 view .LVU372
 1961 0096 1340     		ands	r3, r2
 1962              		.loc 2 650 24 view .LVU373
 1963 0098 1209     		lsrs	r2, r2, #4
 1964              	.LVL168:
 1965              		.loc 2 650 24 view .LVU374
 1966 009a 9100     		lsls	r1, r2, #2
 1967 009c 5218     		adds	r2, r2, r1
 1968 009e 5200     		lsls	r2, r2, #1
 1969 00a0 9B18     		adds	r3, r3, r2
 1970              	.LVL169:
 1971              		.loc 2 650 24 view .LVU375
 1972              	.LBE25:
 1973              	.LBE24:
 478:Core/Src/AB1815.c **** 	}
 1974              		.loc 1 478 11 view .LVU376
 1975 00a2 A371     		strb	r3, [r4, #6]
 1976 00a4 BDE7     		b	.L69
 1977              	.L72:
 1978 00a6 C046     		.align	2
 1979              	.L71:
 1980 00a8 00000000 		.word	ab1815_status_e_OK
 1981              		.cfi_endproc
 1982              	.LFE471:
 1984              		.section	.text.set_analog_status_register,"ax",%progbits
 1985              		.align	1
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 55


 1986              		.global	set_analog_status_register
 1987              		.syntax unified
 1988              		.code	16
 1989              		.thumb_func
 1991              	set_analog_status_register:
 1992              	.LVL170:
 1993              	.LFB472:
 483:Core/Src/AB1815.c **** 
 484:Core/Src/AB1815.c **** // 0x2F
 485:Core/Src/AB1815.c **** bool set_analog_status_register(ab1815_analog_status_t *analog_status)
 486:Core/Src/AB1815.c **** {
 1994              		.loc 1 486 1 is_stmt 1 view -0
 1995              		.cfi_startproc
 1996              		@ args = 0, pretend = 0, frame = 0
 1997              		@ frame_needed = 0, uses_anonymous_args = 0
 1998              		.loc 1 486 1 is_stmt 0 view .LVU378
 1999 0000 10B5     		push	{r4, lr}
 2000              	.LCFI52:
 2001              		.cfi_def_cfa_offset 8
 2002              		.cfi_offset 4, -8
 2003              		.cfi_offset 14, -4
 2004 0002 0100     		movs	r1, r0
 487:Core/Src/AB1815.c **** 	return write(AB1815_REG_ANALOG_STATUS, &analog_status->value, 1);
 2005              		.loc 1 487 2 is_stmt 1 view .LVU379
 2006              		.loc 1 487 9 is_stmt 0 view .LVU380
 2007 0004 0122     		movs	r2, #1
 2008 0006 2F20     		movs	r0, #47
 2009              	.LVL171:
 2010              		.loc 1 487 9 view .LVU381
 2011 0008 FFF7FEFF 		bl	write
 2012              	.LVL172:
 488:Core/Src/AB1815.c **** }
 2013              		.loc 1 488 1 view .LVU382
 2014              		@ sp needed
 2015 000c 10BD     		pop	{r4, pc}
 2016              		.cfi_endproc
 2017              	.LFE472:
 2019              		.section	.text.get_analog_status_register,"ax",%progbits
 2020              		.align	1
 2021              		.global	get_analog_status_register
 2022              		.syntax unified
 2023              		.code	16
 2024              		.thumb_func
 2026              	get_analog_status_register:
 2027              	.LVL173:
 2028              	.LFB473:
 489:Core/Src/AB1815.c **** 
 490:Core/Src/AB1815.c **** bool get_analog_status_register(ab1815_analog_status_t *analog_status)
 491:Core/Src/AB1815.c **** {
 2029              		.loc 1 491 1 is_stmt 1 view -0
 2030              		.cfi_startproc
 2031              		@ args = 0, pretend = 0, frame = 0
 2032              		@ frame_needed = 0, uses_anonymous_args = 0
 2033              		.loc 1 491 1 is_stmt 0 view .LVU384
 2034 0000 10B5     		push	{r4, lr}
 2035              	.LCFI53:
 2036              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 56


 2037              		.cfi_offset 4, -8
 2038              		.cfi_offset 14, -4
 2039 0002 0100     		movs	r1, r0
 492:Core/Src/AB1815.c **** 	return read(AB1815_REG_ANALOG_STATUS, &analog_status->value, 1);
 2040              		.loc 1 492 2 is_stmt 1 view .LVU385
 2041              		.loc 1 492 9 is_stmt 0 view .LVU386
 2042 0004 0122     		movs	r2, #1
 2043 0006 2F20     		movs	r0, #47
 2044              	.LVL174:
 2045              		.loc 1 492 9 view .LVU387
 2046 0008 FFF7FEFF 		bl	read
 2047              	.LVL175:
 493:Core/Src/AB1815.c **** }
 2048              		.loc 1 493 1 view .LVU388
 2049              		@ sp needed
 2050 000c 10BD     		pop	{r4, pc}
 2051              		.cfi_endproc
 2052              	.LFE473:
 2054              		.section	.text.set_output_control,"ax",%progbits
 2055              		.align	1
 2056              		.global	set_output_control
 2057              		.syntax unified
 2058              		.code	16
 2059              		.thumb_func
 2061              	set_output_control:
 2062              	.LVL176:
 2063              	.LFB474:
 494:Core/Src/AB1815.c **** 
 495:Core/Src/AB1815.c **** // 0x30
 496:Core/Src/AB1815.c **** bool set_output_control(ab1815_output_control_t *output_control)
 497:Core/Src/AB1815.c **** {
 2064              		.loc 1 497 1 is_stmt 1 view -0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 0
 2067              		@ frame_needed = 0, uses_anonymous_args = 0
 2068              		.loc 1 497 1 is_stmt 0 view .LVU390
 2069 0000 10B5     		push	{r4, lr}
 2070              	.LCFI54:
 2071              		.cfi_def_cfa_offset 8
 2072              		.cfi_offset 4, -8
 2073              		.cfi_offset 14, -4
 2074 0002 0100     		movs	r1, r0
 498:Core/Src/AB1815.c **** 	return write(AB1815_REG_OUTPUT_CONTROL, &output_control->value, 1);
 2075              		.loc 1 498 2 is_stmt 1 view .LVU391
 2076              		.loc 1 498 9 is_stmt 0 view .LVU392
 2077 0004 0122     		movs	r2, #1
 2078 0006 3020     		movs	r0, #48
 2079              	.LVL177:
 2080              		.loc 1 498 9 view .LVU393
 2081 0008 FFF7FEFF 		bl	write
 2082              	.LVL178:
 499:Core/Src/AB1815.c **** }
 2083              		.loc 1 499 1 view .LVU394
 2084              		@ sp needed
 2085 000c 10BD     		pop	{r4, pc}
 2086              		.cfi_endproc
 2087              	.LFE474:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 57


 2089              		.section	.text.get_output_control,"ax",%progbits
 2090              		.align	1
 2091              		.global	get_output_control
 2092              		.syntax unified
 2093              		.code	16
 2094              		.thumb_func
 2096              	get_output_control:
 2097              	.LVL179:
 2098              	.LFB475:
 500:Core/Src/AB1815.c **** 
 501:Core/Src/AB1815.c **** bool get_output_control(ab1815_output_control_t *output_control)
 502:Core/Src/AB1815.c **** {
 2099              		.loc 1 502 1 is_stmt 1 view -0
 2100              		.cfi_startproc
 2101              		@ args = 0, pretend = 0, frame = 0
 2102              		@ frame_needed = 0, uses_anonymous_args = 0
 2103              		.loc 1 502 1 is_stmt 0 view .LVU396
 2104 0000 10B5     		push	{r4, lr}
 2105              	.LCFI55:
 2106              		.cfi_def_cfa_offset 8
 2107              		.cfi_offset 4, -8
 2108              		.cfi_offset 14, -4
 2109 0002 0100     		movs	r1, r0
 503:Core/Src/AB1815.c **** 	return read(AB1815_REG_OUTPUT_CONTROL, &output_control->value, 1);
 2110              		.loc 1 503 2 is_stmt 1 view .LVU397
 2111              		.loc 1 503 9 is_stmt 0 view .LVU398
 2112 0004 0122     		movs	r2, #1
 2113 0006 3020     		movs	r0, #48
 2114              	.LVL180:
 2115              		.loc 1 503 9 view .LVU399
 2116 0008 FFF7FEFF 		bl	read
 2117              	.LVL181:
 504:Core/Src/AB1815.c **** }
 2118              		.loc 1 504 1 view .LVU400
 2119              		@ sp needed
 2120 000c 10BD     		pop	{r4, pc}
 2121              		.cfi_endproc
 2122              	.LFE475:
 2124              		.section	.text.set_extension_ram,"ax",%progbits
 2125              		.align	1
 2126              		.global	set_extension_ram
 2127              		.syntax unified
 2128              		.code	16
 2129              		.thumb_func
 2131              	set_extension_ram:
 2132              	.LVL182:
 2133              	.LFB476:
 505:Core/Src/AB1815.c **** 
 506:Core/Src/AB1815.c **** // 0x3F
 507:Core/Src/AB1815.c **** bool set_extension_ram(extension_ram_t *extension_ram)
 508:Core/Src/AB1815.c **** {
 2134              		.loc 1 508 1 is_stmt 1 view -0
 2135              		.cfi_startproc
 2136              		@ args = 0, pretend = 0, frame = 0
 2137              		@ frame_needed = 0, uses_anonymous_args = 0
 2138              		.loc 1 508 1 is_stmt 0 view .LVU402
 2139 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 58


 2140              	.LCFI56:
 2141              		.cfi_def_cfa_offset 8
 2142              		.cfi_offset 4, -8
 2143              		.cfi_offset 14, -4
 2144 0002 0100     		movs	r1, r0
 509:Core/Src/AB1815.c **** 	return write(AB1815_EXTENTION_RAM, &extension_ram->value, 1);
 2145              		.loc 1 509 2 is_stmt 1 view .LVU403
 2146              		.loc 1 509 9 is_stmt 0 view .LVU404
 2147 0004 0122     		movs	r2, #1
 2148 0006 3F20     		movs	r0, #63
 2149              	.LVL183:
 2150              		.loc 1 509 9 view .LVU405
 2151 0008 FFF7FEFF 		bl	write
 2152              	.LVL184:
 510:Core/Src/AB1815.c **** }
 2153              		.loc 1 510 1 view .LVU406
 2154              		@ sp needed
 2155 000c 10BD     		pop	{r4, pc}
 2156              		.cfi_endproc
 2157              	.LFE476:
 2159              		.section	.text.get_extension_ram,"ax",%progbits
 2160              		.align	1
 2161              		.global	get_extension_ram
 2162              		.syntax unified
 2163              		.code	16
 2164              		.thumb_func
 2166              	get_extension_ram:
 2167              	.LVL185:
 2168              	.LFB477:
 511:Core/Src/AB1815.c **** 
 512:Core/Src/AB1815.c **** bool get_extension_ram(extension_ram_t *extension_ram)
 513:Core/Src/AB1815.c **** {
 2169              		.loc 1 513 1 is_stmt 1 view -0
 2170              		.cfi_startproc
 2171              		@ args = 0, pretend = 0, frame = 0
 2172              		@ frame_needed = 0, uses_anonymous_args = 0
 2173              		.loc 1 513 1 is_stmt 0 view .LVU408
 2174 0000 10B5     		push	{r4, lr}
 2175              	.LCFI57:
 2176              		.cfi_def_cfa_offset 8
 2177              		.cfi_offset 4, -8
 2178              		.cfi_offset 14, -4
 2179 0002 0100     		movs	r1, r0
 514:Core/Src/AB1815.c **** 	return read(AB1815_EXTENTION_RAM, &extension_ram->value, 1);
 2180              		.loc 1 514 2 is_stmt 1 view .LVU409
 2181              		.loc 1 514 9 is_stmt 0 view .LVU410
 2182 0004 0122     		movs	r2, #1
 2183 0006 3F20     		movs	r0, #63
 2184              	.LVL186:
 2185              		.loc 1 514 9 view .LVU411
 2186 0008 FFF7FEFF 		bl	read
 2187              	.LVL187:
 515:Core/Src/AB1815.c **** }
 2188              		.loc 1 515 1 view .LVU412
 2189              		@ sp needed
 2190 000c 10BD     		pop	{r4, pc}
 2191              		.cfi_endproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 59


 2192              	.LFE477:
 2194              		.section	.rodata.hex_dump.str1.4,"aMS",%progbits,1
 2195              		.align	2
 2196              	.LC9:
 2197 0000 23203078 		.ascii	"# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
 2197      25303278 
 2197      3A203078 
 2197      25303278 
 2197      20307825 
 2198 0033 20307825 		.ascii	" 0x%02x 0x%02x\015\012\000"
 2198      30327820 
 2198      30782530 
 2198      32780D0A 
 2198      00
 2199              		.section	.text.hex_dump,"ax",%progbits
 2200              		.align	1
 2201              		.global	hex_dump
 2202              		.syntax unified
 2203              		.code	16
 2204              		.thumb_func
 2206              	hex_dump:
 2207              	.LVL188:
 2208              	.LFB478:
 516:Core/Src/AB1815.c **** 
 517:Core/Src/AB1815.c **** void hex_dump(FILE *dump_to)
 518:Core/Src/AB1815.c **** {
 2209              		.loc 1 518 1 is_stmt 1 view -0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 8
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 2213              		.loc 1 518 1 is_stmt 0 view .LVU414
 2214 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2215              	.LCFI58:
 2216              		.cfi_def_cfa_offset 20
 2217              		.cfi_offset 4, -20
 2218              		.cfi_offset 5, -16
 2219              		.cfi_offset 6, -12
 2220              		.cfi_offset 7, -8
 2221              		.cfi_offset 14, -4
 2222 0002 D646     		mov	lr, r10
 2223 0004 4F46     		mov	r7, r9
 2224 0006 4646     		mov	r6, r8
 2225 0008 C0B5     		push	{r6, r7, lr}
 2226              	.LCFI59:
 2227              		.cfi_def_cfa_offset 32
 2228              		.cfi_offset 8, -32
 2229              		.cfi_offset 9, -28
 2230              		.cfi_offset 10, -24
 2231 000a 8AB0     		sub	sp, sp, #40
 2232              	.LCFI60:
 2233              		.cfi_def_cfa_offset 72
 2234 000c 8246     		mov	r10, r0
 519:Core/Src/AB1815.c **** 
 520:Core/Src/AB1815.c **** 	uint8_t buffer[8];
 2235              		.loc 1 520 2 is_stmt 1 view .LVU415
 521:Core/Src/AB1815.c **** 	for (uint8_t pos = 0; pos < 0x7F; pos += 8)
 2236              		.loc 1 521 2 view .LVU416
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 60


 2237              	.LBB26:
 2238              		.loc 1 521 7 view .LVU417
 2239              	.LVL189:
 2240              		.loc 1 521 15 is_stmt 0 view .LVU418
 2241 000e 0025     		movs	r5, #0
 2242              		.loc 1 521 2 view .LVU419
 2243 0010 1FE0     		b	.L80
 2244              	.LVL190:
 2245              	.L81:
 522:Core/Src/AB1815.c **** 	{
 523:Core/Src/AB1815.c **** 		read(pos, buffer, 8);
 2246              		.loc 1 523 3 is_stmt 1 discriminator 3 view .LVU420
 2247 0012 08AC     		add	r4, sp, #32
 2248 0014 0822     		movs	r2, #8
 2249 0016 2100     		movs	r1, r4
 2250 0018 2800     		movs	r0, r5
 2251 001a FFF7FEFF 		bl	read
 2252              	.LVL191:
 524:Core/Src/AB1815.c **** 		fprintf(dump_to, "# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\r\n", pos, bu
 2253              		.loc 1 524 3 discriminator 3 view .LVU421
 2254              		.loc 1 524 104 is_stmt 0 discriminator 3 view .LVU422
 2255 001e 2378     		ldrb	r3, [r4]
 2256              		.loc 1 524 115 discriminator 3 view .LVU423
 2257 0020 6278     		ldrb	r2, [r4, #1]
 2258              		.loc 1 524 126 discriminator 3 view .LVU424
 2259 0022 A078     		ldrb	r0, [r4, #2]
 2260              		.loc 1 524 137 discriminator 3 view .LVU425
 2261 0024 E778     		ldrb	r7, [r4, #3]
 2262              		.loc 1 524 148 discriminator 3 view .LVU426
 2263 0026 2679     		ldrb	r6, [r4, #4]
 2264              		.loc 1 524 159 discriminator 3 view .LVU427
 2265 0028 6179     		ldrb	r1, [r4, #5]
 2266 002a 8846     		mov	r8, r1
 2267              		.loc 1 524 170 discriminator 3 view .LVU428
 2268 002c A179     		ldrb	r1, [r4, #6]
 2269 002e 8946     		mov	r9, r1
 2270              		.loc 1 524 181 discriminator 3 view .LVU429
 2271 0030 E479     		ldrb	r4, [r4, #7]
 2272              		.loc 1 524 3 discriminator 3 view .LVU430
 2273 0032 0C49     		ldr	r1, .L82
 2274 0034 0694     		str	r4, [sp, #24]
 2275 0036 4C46     		mov	r4, r9
 2276 0038 0594     		str	r4, [sp, #20]
 2277 003a 4446     		mov	r4, r8
 2278 003c 0494     		str	r4, [sp, #16]
 2279 003e 0396     		str	r6, [sp, #12]
 2280 0040 0297     		str	r7, [sp, #8]
 2281 0042 0190     		str	r0, [sp, #4]
 2282 0044 0092     		str	r2, [sp]
 2283 0046 2A00     		movs	r2, r5
 2284 0048 5046     		mov	r0, r10
 2285 004a FFF7FEFF 		bl	fprintf
 2286              	.LVL192:
 521:Core/Src/AB1815.c **** 	for (uint8_t pos = 0; pos < 0x7F; pos += 8)
 2287              		.loc 1 521 40 is_stmt 1 discriminator 3 view .LVU431
 2288 004e 0835     		adds	r5, r5, #8
 2289              	.LVL193:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 61


 521:Core/Src/AB1815.c **** 	for (uint8_t pos = 0; pos < 0x7F; pos += 8)
 2290              		.loc 1 521 40 is_stmt 0 discriminator 3 view .LVU432
 2291 0050 EDB2     		uxtb	r5, r5
 2292              	.LVL194:
 2293              	.L80:
 521:Core/Src/AB1815.c **** 	for (uint8_t pos = 0; pos < 0x7F; pos += 8)
 2294              		.loc 1 521 28 is_stmt 1 discriminator 1 view .LVU433
 2295 0052 7E2D     		cmp	r5, #126
 2296 0054 DDD9     		bls	.L81
 2297              	.LBE26:
 525:Core/Src/AB1815.c **** 	}
 526:Core/Src/AB1815.c **** }
 2298              		.loc 1 526 1 is_stmt 0 view .LVU434
 2299 0056 0AB0     		add	sp, sp, #40
 2300              		@ sp needed
 2301              	.LVL195:
 2302              	.LVL196:
 2303              		.loc 1 526 1 view .LVU435
 2304 0058 E0BC     		pop	{r5, r6, r7}
 2305 005a BA46     		mov	r10, r7
 2306 005c B146     		mov	r9, r6
 2307 005e A846     		mov	r8, r5
 2308 0060 F0BD     		pop	{r4, r5, r6, r7, pc}
 2309              	.L83:
 2310 0062 C046     		.align	2
 2311              	.L82:
 2312 0064 00000000 		.word	.LC9
 2313              		.cfi_endproc
 2314              	.LFE478:
 2316              		.section	.rodata.detectChip.str1.4,"aMS",%progbits,1
 2317              		.align	2
 2318              	.LC11:
 2319 0000 464F5554 		.ascii	"FOUT did not go HIGH\000"
 2319      20646964 
 2319      206E6F74 
 2319      20676F20 
 2319      48494748 
 2320 0015 000000   		.align	2
 2321              	.LC13:
 2322 0018 6E6F7420 		.ascii	"not detected\000"
 2322      64657465 
 2322      63746564 
 2322      00
 2323              		.section	.text.detectChip,"ax",%progbits
 2324              		.align	1
 2325              		.global	detectChip
 2326              		.syntax unified
 2327              		.code	16
 2328              		.thumb_func
 2330              	detectChip:
 2331              	.LFB479:
 527:Core/Src/AB1815.c **** 
 528:Core/Src/AB1815.c **** bool detectChip()
 529:Core/Src/AB1815.c **** {
 2332              		.loc 1 529 1 is_stmt 1 view -0
 2333              		.cfi_startproc
 2334              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 62


 2335              		@ frame_needed = 0, uses_anonymous_args = 0
 2336 0000 10B5     		push	{r4, lr}
 2337              	.LCFI61:
 2338              		.cfi_def_cfa_offset 8
 2339              		.cfi_offset 4, -8
 2340              		.cfi_offset 14, -4
 2341 0002 82B0     		sub	sp, sp, #8
 2342              	.LCFI62:
 2343              		.cfi_def_cfa_offset 16
 530:Core/Src/AB1815.c **** 	bool bResult, finalResult = false;
 2344              		.loc 1 530 2 view .LVU437
 2345              	.LVL197:
 531:Core/Src/AB1815.c **** 	uint8_t value = 0;
 2346              		.loc 1 531 2 view .LVU438
 2347              		.loc 1 531 10 is_stmt 0 view .LVU439
 2348 0004 6B46     		mov	r3, sp
 2349 0006 0022     		movs	r2, #0
 2350 0008 DA71     		strb	r2, [r3, #7]
 532:Core/Src/AB1815.c **** 
 533:Core/Src/AB1815.c **** 	// FOUT/nIRQ  will go HIGH when the chip is ready to respond
 534:Core/Src/AB1815.c **** 
 535:Core/Src/AB1815.c **** 	unsigned long start = HAL_GetTick();
 2351              		.loc 1 535 2 is_stmt 1 view .LVU440
 2352              		.loc 1 535 24 is_stmt 0 view .LVU441
 2353 000a FFF7FEFF 		bl	HAL_GetTick
 2354              	.LVL198:
 2355 000e 0400     		movs	r4, r0
 2356              	.LVL199:
 536:Core/Src/AB1815.c **** 	bool ready = false;
 2357              		.loc 1 536 2 is_stmt 1 view .LVU442
 537:Core/Src/AB1815.c **** 	while (HAL_GetTick() - start < 1000)
 2358              		.loc 1 537 2 view .LVU443
 2359              		.loc 1 537 8 is_stmt 0 view .LVU444
 2360 0010 02E0     		b	.L85
 2361              	.LVL200:
 2362              	.L90:
 538:Core/Src/AB1815.c **** 	{
 539:Core/Src/AB1815.c **** 		if (HAL_GPIO_ReadPin(NIRQ_GPIO_Port, NIRQ_Pin) == GPIO_PIN_SET) // B12
 540:Core/Src/AB1815.c **** 		{
 541:Core/Src/AB1815.c **** 			ready = true;
 542:Core/Src/AB1815.c **** 			break;
 543:Core/Src/AB1815.c **** 		}
 544:Core/Src/AB1815.c **** 		if (!ready)
 2363              		.loc 1 544 3 is_stmt 1 view .LVU445
 545:Core/Src/AB1815.c **** 		{
 546:Core/Src/AB1815.c **** 			printf("FOUT did not go HIGH\n");
 2364              		.loc 1 546 4 view .LVU446
 2365 0012 1948     		ldr	r0, .L92
 2366 0014 FFF7FEFF 		bl	puts
 2367              	.LVL201:
 2368              	.L85:
 537:Core/Src/AB1815.c **** 	{
 2369              		.loc 1 537 31 view .LVU447
 537:Core/Src/AB1815.c **** 	{
 2370              		.loc 1 537 9 is_stmt 0 view .LVU448
 2371 0018 FFF7FEFF 		bl	HAL_GetTick
 2372              	.LVL202:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 63


 537:Core/Src/AB1815.c **** 	{
 2373              		.loc 1 537 23 view .LVU449
 2374 001c 001B     		subs	r0, r0, r4
 537:Core/Src/AB1815.c **** 	{
 2375              		.loc 1 537 31 view .LVU450
 2376 001e FA23     		movs	r3, #250
 2377 0020 9B00     		lsls	r3, r3, #2
 2378 0022 9842     		cmp	r0, r3
 2379 0024 06D2     		bcs	.L86
 539:Core/Src/AB1815.c **** 		{
 2380              		.loc 1 539 3 is_stmt 1 view .LVU451
 539:Core/Src/AB1815.c **** 		{
 2381              		.loc 1 539 7 is_stmt 0 view .LVU452
 2382 0026 8021     		movs	r1, #128
 2383 0028 4901     		lsls	r1, r1, #5
 2384 002a 1448     		ldr	r0, .L92+4
 2385 002c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2386              	.LVL203:
 539:Core/Src/AB1815.c **** 		{
 2387              		.loc 1 539 6 view .LVU453
 2388 0030 0128     		cmp	r0, #1
 2389 0032 EED1     		bne	.L90
 2390              	.L86:
 2391              	.LVL204:
 547:Core/Src/AB1815.c **** 			// May just want to return false here
 548:Core/Src/AB1815.c **** 		}
 549:Core/Src/AB1815.c **** 	}
 550:Core/Src/AB1815.c **** 
 551:Core/Src/AB1815.c **** 	bResult = read(AB1815_REG_ID0, &value, 1); // REG_ID0 = 0x28, the upper RW bit indicating read (if
 2392              		.loc 1 551 2 is_stmt 1 view .LVU454
 2393              		.loc 1 551 12 is_stmt 0 view .LVU455
 2394 0034 0122     		movs	r2, #1
 2395 0036 6B46     		mov	r3, sp
 2396 0038 D91D     		adds	r1, r3, #7
 2397 003a 2820     		movs	r0, #40
 2398 003c FFF7FEFF 		bl	read
 2399              	.LVL205:
 552:Core/Src/AB1815.c **** 	if (bResult && value == REG_ID0_AB18XX)
 2400              		.loc 1 552 2 is_stmt 1 view .LVU456
 2401              		.loc 1 552 5 is_stmt 0 view .LVU457
 2402 0040 0028     		cmp	r0, #0
 2403 0042 04D0     		beq	.L88
 2404              		.loc 1 552 23 discriminator 1 view .LVU458
 2405 0044 6B46     		mov	r3, sp
 2406 0046 0733     		adds	r3, r3, #7
 2407 0048 1B78     		ldrb	r3, [r3]
 2408              		.loc 1 552 14 discriminator 1 view .LVU459
 2409 004a 182B     		cmp	r3, #24
 2410 004c 05D0     		beq	.L91
 2411              	.LVL206:
 2412              	.L88:
 553:Core/Src/AB1815.c **** 	{
 554:Core/Src/AB1815.c **** 		bResult = read(AB1815_REG_ID1, &value, 1);
 555:Core/Src/AB1815.c **** 		if (bResult && value == REG_ID1_ABXX15)
 556:Core/Src/AB1815.c **** 		{
 557:Core/Src/AB1815.c **** 			finalResult = true;
 558:Core/Src/AB1815.c **** 		}
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 64


 559:Core/Src/AB1815.c **** 	}
 560:Core/Src/AB1815.c **** 	if (!finalResult)
 561:Core/Src/AB1815.c **** 	{
 562:Core/Src/AB1815.c **** 		printf("not detected\n");
 2413              		.loc 1 562 3 is_stmt 1 view .LVU460
 2414 004e 0C48     		ldr	r0, .L92+8
 2415 0050 FFF7FEFF 		bl	puts
 2416              	.LVL207:
 2417 0054 0020     		movs	r0, #0
 2418              	.L89:
 563:Core/Src/AB1815.c **** 	}
 564:Core/Src/AB1815.c **** 
 565:Core/Src/AB1815.c **** 	return finalResult;
 2419              		.loc 1 565 2 view .LVU461
 566:Core/Src/AB1815.c **** }
 2420              		.loc 1 566 1 is_stmt 0 view .LVU462
 2421 0056 02B0     		add	sp, sp, #8
 2422              		@ sp needed
 2423              	.LVL208:
 2424              		.loc 1 566 1 view .LVU463
 2425 0058 10BD     		pop	{r4, pc}
 2426              	.LVL209:
 2427              	.L91:
 554:Core/Src/AB1815.c **** 		if (bResult && value == REG_ID1_ABXX15)
 2428              		.loc 1 554 3 is_stmt 1 view .LVU464
 554:Core/Src/AB1815.c **** 		if (bResult && value == REG_ID1_ABXX15)
 2429              		.loc 1 554 13 is_stmt 0 view .LVU465
 2430 005a 0122     		movs	r2, #1
 2431 005c 6B46     		mov	r3, sp
 2432 005e D91D     		adds	r1, r3, #7
 2433 0060 2920     		movs	r0, #41
 2434              	.LVL210:
 554:Core/Src/AB1815.c **** 		if (bResult && value == REG_ID1_ABXX15)
 2435              		.loc 1 554 13 view .LVU466
 2436 0062 FFF7FEFF 		bl	read
 2437              	.LVL211:
 555:Core/Src/AB1815.c **** 		{
 2438              		.loc 1 555 3 is_stmt 1 view .LVU467
 555:Core/Src/AB1815.c **** 		{
 2439              		.loc 1 555 6 is_stmt 0 view .LVU468
 2440 0066 0028     		cmp	r0, #0
 2441 0068 F1D0     		beq	.L88
 555:Core/Src/AB1815.c **** 		{
 2442              		.loc 1 555 24 discriminator 1 view .LVU469
 2443 006a 6B46     		mov	r3, sp
 2444 006c 0733     		adds	r3, r3, #7
 2445 006e 1B78     		ldrb	r3, [r3]
 555:Core/Src/AB1815.c **** 		{
 2446              		.loc 1 555 15 discriminator 1 view .LVU470
 2447 0070 052B     		cmp	r3, #5
 2448 0072 ECD1     		bne	.L88
 2449 0074 EFE7     		b	.L89
 2450              	.L93:
 2451 0076 C046     		.align	2
 2452              	.L92:
 2453 0078 00000000 		.word	.LC11
 2454 007c 00040050 		.word	1342178304
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 65


 2455 0080 18000000 		.word	.LC13
 2456              		.cfi_endproc
 2457              	.LFE479:
 2459              		.global	foutPin
 2460              		.section	.bss.foutPin,"aw",%nobits
 2461              		.align	1
 2464              	foutPin:
 2465 0000 0000     		.space	2
 2466              		.global	id
 2467              		.section	.bss.id,"aw",%nobits
 2468              		.align	2
 2471              	id:
 2472 0000 00000000 		.space	7
 2472      000000
 2473              		.global	fields
 2474              		.section	.bss.fields,"aw",%nobits
 2475              		.align	2
 2478              	fields:
 2479 0000 00       		.space	1
 2480              		.global	cs_pin
 2481              		.section	.bss.cs_pin,"aw",%nobits
 2482              		.align	1
 2485              	cs_pin:
 2486 0000 0000     		.space	2
 2487              		.global	error_code
 2488              		.section	.bss.error_code,"aw",%nobits
 2489              		.align	3
 2492              	error_code:
 2493 0000 00000000 		.space	8
 2493      00000000 
 2494              		.global	ab1815_status_e_ERROR
 2495              		.section	.data.ab1815_status_e_ERROR,"aw"
 2498              	ab1815_status_e_ERROR:
 2499 0000 01       		.byte	1
 2500              		.global	ab1815_status_e_OK
 2501              		.section	.bss.ab1815_status_e_OK,"aw",%nobits
 2504              	ab1815_status_e_OK:
 2505 0000 00       		.space	1
 2506              		.global	days_of_week_e
 2507              		.section	.bss.days_of_week_e,"aw",%nobits
 2510              	days_of_week_e:
 2511 0000 00       		.space	1
 2512              		.global	ab1815_fout_nirq_pin_control_e
 2513              		.section	.bss.ab1815_fout_nirq_pin_control_e,"aw",%nobits
 2516              	ab1815_fout_nirq_pin_control_e:
 2517 0000 00       		.space	1
 2518              		.global	ab1815_psw_nirq2_pin_control_e
 2519              		.section	.bss.ab1815_psw_nirq2_pin_control_e,"aw",%nobits
 2522              	ab1815_psw_nirq2_pin_control_e:
 2523 0000 00       		.space	1
 2524              		.global	ab1815_interrupt_im_e
 2525              		.section	.bss.ab1815_interrupt_im_e,"aw",%nobits
 2528              	ab1815_interrupt_im_e:
 2529 0000 00       		.space	1
 2530              		.global	ab1815_clk_format_e
 2531              		.section	.bss.ab1815_clk_format_e,"aw",%nobits
 2534              	ab1815_clk_format_e:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 66


 2535 0000 00       		.space	1
 2536              		.text
 2537              	.Letext0:
 2538              		.file 3 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 2539              		.file 4 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 2540              		.file 5 "Drivers/CMSIS/Device/ST/STM32U0xx/Include/stm32u073xx.h"
 2541              		.file 6 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/inc
 2542              		.file 7 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_def.h"
 2543              		.file 8 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_gpio.h"
 2544              		.file 9 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_dma.h"
 2545              		.file 10 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_spi.h"
 2546              		.file 11 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/..
 2547              		.file 12 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/..
 2548              		.file 13 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/..
 2549              		.file 14 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/..
 2550              		.file 15 "Core\\Inc/SPI.h"
 2551              		.file 16 "Core\\Inc/AB1815.h"
 2552              		.file 17 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_dma.h"
 2553              		.file 18 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/..
 2554              		.file 19 "<built-in>"
 2555              		.file 20 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal.h"
 2556              		.file 21 "Core\\Inc/main.h"
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 67


DEFINED SYMBOLS
                            *ABS*:00000000 AB1815.c
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:19     .text.spi_select_slave:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:25     .text.spi_select_slave:00000000 spi_select_slave
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:57     .text.spi_select_slave:00000018 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:62     .text.read:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:68     .text.read:00000000 read
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:156    .text.read:00000054 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2504   .bss.ab1815_status_e_OK:00000000 ab1815_status_e_OK
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:163    .text.write:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:169    .text.write:00000000 write
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:255    .text.write:00000054 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:262    .text.clear_hundrdeds:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:268    .text.clear_hundrdeds:00000000 clear_hundrdeds
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:301    .text.set_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:307    .text.set_status:00000000 set_status
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:336    .text.get_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:342    .text.get_status:00000000 get_status
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:371    .text.set_control1:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:377    .text.set_control1:00000000 set_control1
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:406    .text.get_control1:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:412    .text.get_control1:00000000 get_control1
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:441    .text.set_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:447    .text.set_control2:00000000 set_control2
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:476    .text.get_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:482    .text.get_control2:00000000 get_control2
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:511    .text.set_interrupt_mask:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:517    .text.set_interrupt_mask:00000000 set_interrupt_mask
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:546    .text.get_interrupt_mask:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:552    .text.get_interrupt_mask:00000000 get_interrupt_mask
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:581    .text.set_square_wave:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:587    .text.set_square_wave:00000000 set_square_wave
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:616    .text.get_square_wave:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:622    .text.get_square_wave:00000000 get_square_wave
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:651    .text.set_cal_xt:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:657    .text.set_cal_xt:00000000 set_cal_xt
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:686    .text.get_cal_xt:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:692    .text.get_cal_xt:00000000 get_cal_xt
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:721    .text.set_cal_rc_hi:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:727    .text.set_cal_rc_hi:00000000 set_cal_rc_hi
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:756    .text.get_cal_rc_hi:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:762    .text.get_cal_rc_hi:00000000 get_cal_rc_hi
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:791    .text.set_cal_rc_low:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:797    .text.set_cal_rc_low:00000000 set_cal_rc_low
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:826    .text.get_cal_rc_low:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:832    .text.get_cal_rc_low:00000000 get_cal_rc_low
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:861    .text.set_sleep_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:867    .text.set_sleep_control:00000000 set_sleep_control
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:896    .text.get_sleep_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:902    .text.get_sleep_control:00000000 get_sleep_control
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:931    .text.set_countdown_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:937    .text.set_countdown_control:00000000 set_countdown_control
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:966    .text.get_countdown_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:972    .text.get_countdown_control:00000000 get_countdown_control
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1001   .text.set_countdown_timer:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1007   .text.set_countdown_timer:00000000 set_countdown_timer
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1041   .text.get_countdown_timer:00000000 $t
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 68


C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1047   .text.get_countdown_timer:00000000 get_countdown_timer
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1076   .text.set_countdown_timer_initial_value:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1082   .text.set_countdown_timer_initial_value:00000000 set_countdown_timer_initial_value
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1116   .text.get_countdown_timer_initial_value:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1122   .text.get_countdown_timer_initial_value:00000000 get_countdown_timer_initial_value
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1151   .text.set_watchdog_timer:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1157   .text.set_watchdog_timer:00000000 set_watchdog_timer
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1186   .text.get_watchdog_timer:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1192   .text.get_watchdog_timer:00000000 get_watchdog_timer
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1221   .text.get_oscillator_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1227   .text.get_oscillator_control:00000000 get_oscillator_control
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1256   .text.set_oscillator_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1262   .text.set_oscillator_status:00000000 set_oscillator_status
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1291   .text.get_oscillator_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1297   .text.get_oscillator_status:00000000 get_oscillator_status
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1326   .text.set_configuration_key:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1332   .text.set_configuration_key:00000000 set_configuration_key
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1366   .text.set_oscillator_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1372   .text.set_oscillator_control:00000000 set_oscillator_control
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1422   .text.set_oscillator_control:00000024 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2498   .data.ab1815_status_e_ERROR:00000000 ab1815_status_e_ERROR
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1428   .text.set_trickle:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1434   .text.set_trickle:00000000 set_trickle
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1463   .text.get_trickle:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1469   .text.get_trickle:00000000 get_trickle
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1498   .text.set_bref_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1504   .text.set_bref_control:00000000 set_bref_control
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1533   .text.get_bref_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1539   .text.get_bref_control:00000000 get_bref_control
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1568   .text.set_afctrl:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1574   .text.set_afctrl:00000000 set_afctrl
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1608   .text.get_:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1614   .text.get_:00000000 get_
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1643   .text.set_batmodeio:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1649   .text.set_batmodeio:00000000 set_batmodeio
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1704   .text.set_batmodeio:0000002c $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1710   .text.get_batmodeio:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1716   .text.get_batmodeio:00000000 get_batmodeio
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1745   .text.get_id:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1751   .text.get_id:00000000 get_id
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1980   .text.get_id:000000a8 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1985   .text.set_analog_status_register:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:1991   .text.set_analog_status_register:00000000 set_analog_status_register
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2020   .text.get_analog_status_register:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2026   .text.get_analog_status_register:00000000 get_analog_status_register
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2055   .text.set_output_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2061   .text.set_output_control:00000000 set_output_control
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2090   .text.get_output_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2096   .text.get_output_control:00000000 get_output_control
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2125   .text.set_extension_ram:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2131   .text.set_extension_ram:00000000 set_extension_ram
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2160   .text.get_extension_ram:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2166   .text.get_extension_ram:00000000 get_extension_ram
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2195   .rodata.hex_dump.str1.4:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2200   .text.hex_dump:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2206   .text.hex_dump:00000000 hex_dump
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2312   .text.hex_dump:00000064 $d
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s 			page 69


C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2317   .rodata.detectChip.str1.4:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2324   .text.detectChip:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2330   .text.detectChip:00000000 detectChip
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2453   .text.detectChip:00000078 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2464   .bss.foutPin:00000000 foutPin
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2461   .bss.foutPin:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2471   .bss.id:00000000 id
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2468   .bss.id:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2478   .bss.fields:00000000 fields
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2475   .bss.fields:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2485   .bss.cs_pin:00000000 cs_pin
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2482   .bss.cs_pin:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2492   .bss.error_code:00000000 error_code
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2489   .bss.error_code:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2505   .bss.ab1815_status_e_OK:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2510   .bss.days_of_week_e:00000000 days_of_week_e
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2511   .bss.days_of_week_e:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2516   .bss.ab1815_fout_nirq_pin_control_e:00000000 ab1815_fout_nirq_pin_control_e
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2517   .bss.ab1815_fout_nirq_pin_control_e:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2522   .bss.ab1815_psw_nirq2_pin_control_e:00000000 ab1815_psw_nirq2_pin_control_e
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2523   .bss.ab1815_psw_nirq2_pin_control_e:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2528   .bss.ab1815_interrupt_im_e:00000000 ab1815_interrupt_im_e
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2529   .bss.ab1815_interrupt_im_e:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2534   .bss.ab1815_clk_format_e:00000000 ab1815_clk_format_e
C:\Users\upo\AppData\Local\Temp\cc1xPmlQ.s:2535   .bss.ab1815_clk_format_e:00000000 $d

UNDEFINED SYMBOLS
HAL_SPI_Transmit
HAL_SPI_Receive
Error_Handler
hspi1
memset
fprintf
HAL_GetTick
puts
HAL_GPIO_ReadPin
