ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"AB1815.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/AB1815.c"
  18              		.section	.text.spi_select_slave,"ax",%progbits
  19              		.align	1
  20              		.global	spi_select_slave
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	spi_select_slave:
  26              	.LVL0:
  27              	.LFB428:
   1:Core/Src/AB1815.c **** /**
   2:Core/Src/AB1815.c ****  *     An Abracon AB18X5 Real-Time Clock library for Arduino
   3:Core/Src/AB1815.c ****  *     Copyright (C) 2015 NigelB
   4:Core/Src/AB1815.c ****  *
   5:Core/Src/AB1815.c ****  *     This program is free software; you can redistribute it and/or modify
   6:Core/Src/AB1815.c ****  *     it under the terms of the GNU General Public License as published by
   7:Core/Src/AB1815.c ****  *     the Free Software Foundation; either version 2 of the License, or
   8:Core/Src/AB1815.c ****  *     (at your option) any later version.
   9:Core/Src/AB1815.c ****  *
  10:Core/Src/AB1815.c ****  *     This program is distributed in the hope that it will be useful,
  11:Core/Src/AB1815.c ****  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:Core/Src/AB1815.c ****  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:Core/Src/AB1815.c ****  *     GNU General Public License for more details.
  14:Core/Src/AB1815.c ****  *
  15:Core/Src/AB1815.c ****  *     You should have received a copy of the GNU General Public License along
  16:Core/Src/AB1815.c ****  *     with this program; if not, write to the Free Software Foundation, Inc.,
  17:Core/Src/AB1815.c ****  *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  18:Core/Src/AB1815.c ****  **/
  19:Core/Src/AB1815.c **** 
  20:Core/Src/AB1815.c **** // #include "AB1815_Arduino.h"
  21:Core/Src/AB1815.c **** #include "SPI.h"
  22:Core/Src/AB1815.c **** #include "stdarg.h"
  23:Core/Src/AB1815.c **** #include "AB1815_A.h"
  24:Core/Src/AB1815.c **** // #include "AB1815.h"
  25:Core/Src/AB1815.c **** #include "TimeLib.h"
  26:Core/Src/AB1815.c **** #include "printf.h"
  27:Core/Src/AB1815.c **** 
  28:Core/Src/AB1815.c **** bool ab1815_status_e_OK = 1;
  29:Core/Src/AB1815.c **** bool ab1815_status_e_ERROR = 0;
  30:Core/Src/AB1815.c **** 
  31:Core/Src/AB1815.c **** void spi_select_slave(bool select) // 1 = high, 0 = low
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 2


  32:Core/Src/AB1815.c **** {
  28              		.loc 1 32 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33:Core/Src/AB1815.c **** 	if (select)
  33              		.loc 1 33 2 view .LVU1
  34              		.loc 1 33 5 is_stmt 0 view .LVU2
  35 0000 0028     		cmp	r0, #0
  36 0002 04D0     		beq	.L2
  34:Core/Src/AB1815.c **** 	{
  35:Core/Src/AB1815.c **** 		RTC_H();
  37              		.loc 1 35 3 is_stmt 1 view .LVU3
  38 0004 044B     		ldr	r3, .L4
  39 0006 8022     		movs	r2, #128
  40 0008 D201     		lsls	r2, r2, #7
  41 000a 9A61     		str	r2, [r3, #24]
  42              	.L1:
  36:Core/Src/AB1815.c **** 	}
  37:Core/Src/AB1815.c **** 	else
  38:Core/Src/AB1815.c **** 	{
  39:Core/Src/AB1815.c **** 		RTC_L();
  40:Core/Src/AB1815.c **** 	}
  41:Core/Src/AB1815.c **** }
  43              		.loc 1 41 1 is_stmt 0 view .LVU4
  44              		@ sp needed
  45 000c 7047     		bx	lr
  46              	.L2:
  39:Core/Src/AB1815.c **** 	}
  47              		.loc 1 39 3 is_stmt 1 view .LVU5
  48 000e 024B     		ldr	r3, .L4
  49 0010 8022     		movs	r2, #128
  50 0012 D205     		lsls	r2, r2, #23
  51 0014 9A61     		str	r2, [r3, #24]
  52              		.loc 1 41 1 is_stmt 0 view .LVU6
  53 0016 F9E7     		b	.L1
  54              	.L5:
  55              		.align	2
  56              	.L4:
  57 0018 00040050 		.word	1342178304
  58              		.cfi_endproc
  59              	.LFE428:
  61              		.section	.text.read,"ax",%progbits
  62              		.align	1
  63              		.global	read
  64              		.syntax unified
  65              		.code	16
  66              		.thumb_func
  68              	read:
  69              	.LVL1:
  70              	.LFB429:
  42:Core/Src/AB1815.c **** 
  43:Core/Src/AB1815.c **** bool read(uint8_t offset, uint8_t *buf, uint8_t length)
  44:Core/Src/AB1815.c **** {
  71              		.loc 1 44 1 is_stmt 1 view -0
  72              		.cfi_startproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 3


  73              		@ args = 0, pretend = 0, frame = 8
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		.loc 1 44 1 is_stmt 0 view .LVU8
  76 0000 70B5     		push	{r4, r5, r6, lr}
  77              	.LCFI0:
  78              		.cfi_def_cfa_offset 16
  79              		.cfi_offset 4, -16
  80              		.cfi_offset 5, -12
  81              		.cfi_offset 6, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 24
  86 0004 0C00     		movs	r4, r1
  87 0006 1500     		movs	r5, r2
  45:Core/Src/AB1815.c **** 	uint8_t address = AB1815_SPI_READ(offset);
  88              		.loc 1 45 2 is_stmt 1 view .LVU9
  89              		.loc 1 45 20 is_stmt 0 view .LVU10
  90 0008 7F23     		movs	r3, #127
  91 000a 0340     		ands	r3, r0
  92              		.loc 1 45 10 view .LVU11
  93 000c 6A46     		mov	r2, sp
  94              	.LVL2:
  95              		.loc 1 45 10 view .LVU12
  96 000e D61D     		adds	r6, r2, #7
  97 0010 D371     		strb	r3, [r2, #7]
  46:Core/Src/AB1815.c **** 
  47:Core/Src/AB1815.c **** 	spi_select_slave(0);
  98              		.loc 1 47 2 is_stmt 1 view .LVU13
  99 0012 0020     		movs	r0, #0
 100              	.LVL3:
 101              		.loc 1 47 2 is_stmt 0 view .LVU14
 102 0014 FFF7FEFF 		bl	spi_select_slave
 103              	.LVL4:
  48:Core/Src/AB1815.c **** 	// SPI.transfer(address);
  49:Core/Src/AB1815.c **** 	// HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint
  50:Core/Src/AB1815.c **** 	if (HAL_SPI_Transmit(&hspi1, &address, 1, 3000) != HAL_OK)
 104              		.loc 1 50 2 is_stmt 1 view .LVU15
 105              		.loc 1 50 6 is_stmt 0 view .LVU16
 106 0018 1048     		ldr	r0, .L11
 107 001a 114B     		ldr	r3, .L11+4
 108 001c 0122     		movs	r2, #1
 109 001e 3100     		movs	r1, r6
 110 0020 FFF7FEFF 		bl	HAL_SPI_Transmit
 111              	.LVL5:
 112              		.loc 1 50 5 view .LVU17
 113 0024 0028     		cmp	r0, #0
 114 0026 0ED1     		bne	.L9
 115              	.L7:
  51:Core/Src/AB1815.c **** 	{
  52:Core/Src/AB1815.c **** 		print_error(__func__, __LINE__);
  53:Core/Src/AB1815.c **** 	}
  54:Core/Src/AB1815.c **** 
  55:Core/Src/AB1815.c **** 	if (HAL_SPI_Receive(&hspi1, buf, length, 3000) != HAL_OK)
 116              		.loc 1 55 2 is_stmt 1 view .LVU18
 117              		.loc 1 55 6 is_stmt 0 view .LVU19
 118 0028 0C48     		ldr	r0, .L11
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 4


 119 002a 0D4B     		ldr	r3, .L11+4
 120 002c 2A00     		movs	r2, r5
 121 002e 2100     		movs	r1, r4
 122 0030 FFF7FEFF 		bl	HAL_SPI_Receive
 123              	.LVL6:
 124              		.loc 1 55 5 view .LVU20
 125 0034 0028     		cmp	r0, #0
 126 0036 0BD1     		bne	.L10
 127              	.L8:
  56:Core/Src/AB1815.c **** 	{
  57:Core/Src/AB1815.c **** 		print_error(__func__, __LINE__);
  58:Core/Src/AB1815.c **** 	}
  59:Core/Src/AB1815.c **** 
  60:Core/Src/AB1815.c **** 	spi_select_slave(1);
 128              		.loc 1 60 2 is_stmt 1 view .LVU21
 129 0038 0120     		movs	r0, #1
 130 003a FFF7FEFF 		bl	spi_select_slave
 131              	.LVL7:
  61:Core/Src/AB1815.c **** 	return ab1815_status_e_OK;
 132              		.loc 1 61 2 view .LVU22
 133              		.loc 1 61 9 is_stmt 0 view .LVU23
 134 003e 094B     		ldr	r3, .L11+8
 135 0040 1878     		ldrb	r0, [r3]
  62:Core/Src/AB1815.c **** };
 136              		.loc 1 62 1 view .LVU24
 137 0042 02B0     		add	sp, sp, #8
 138              		@ sp needed
 139              	.LVL8:
 140              		.loc 1 62 1 view .LVU25
 141 0044 70BD     		pop	{r4, r5, r6, pc}
 142              	.LVL9:
 143              	.L9:
  52:Core/Src/AB1815.c **** 	}
 144              		.loc 1 52 3 is_stmt 1 view .LVU26
 145 0046 0848     		ldr	r0, .L11+12
 146 0048 3421     		movs	r1, #52
 147 004a FFF7FEFF 		bl	print_error
 148              	.LVL10:
 149 004e EBE7     		b	.L7
 150              	.L10:
  57:Core/Src/AB1815.c **** 	}
 151              		.loc 1 57 3 view .LVU27
 152 0050 0548     		ldr	r0, .L11+12
 153 0052 3921     		movs	r1, #57
 154 0054 FFF7FEFF 		bl	print_error
 155              	.LVL11:
 156 0058 EEE7     		b	.L8
 157              	.L12:
 158 005a C046     		.align	2
 159              	.L11:
 160 005c 00000000 		.word	hspi1
 161 0060 B80B0000 		.word	3000
 162 0064 00000000 		.word	ab1815_status_e_OK
 163 0068 00000000 		.word	__func__.1
 164              		.cfi_endproc
 165              	.LFE429:
 167              		.section	.text.write,"ax",%progbits
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 5


 168              		.align	1
 169              		.global	write
 170              		.syntax unified
 171              		.code	16
 172              		.thumb_func
 174              	write:
 175              	.LVL12:
 176              	.LFB430:
  63:Core/Src/AB1815.c **** 
  64:Core/Src/AB1815.c **** bool write(uint8_t offset, uint8_t *buf, uint8_t length)
  65:Core/Src/AB1815.c **** {
 177              		.loc 1 65 1 view -0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 8
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              		.loc 1 65 1 is_stmt 0 view .LVU29
 182 0000 70B5     		push	{r4, r5, r6, lr}
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 16
 185              		.cfi_offset 4, -16
 186              		.cfi_offset 5, -12
 187              		.cfi_offset 6, -8
 188              		.cfi_offset 14, -4
 189 0002 82B0     		sub	sp, sp, #8
 190              	.LCFI3:
 191              		.cfi_def_cfa_offset 24
 192 0004 0C00     		movs	r4, r1
 193 0006 1500     		movs	r5, r2
  66:Core/Src/AB1815.c **** 	uint8_t address = AB1815_SPI_WRITE(offset);
 194              		.loc 1 66 2 is_stmt 1 view .LVU30
 195              		.loc 1 66 10 is_stmt 0 view .LVU31
 196 0008 6B46     		mov	r3, sp
 197 000a DE1D     		adds	r6, r3, #7
 198 000c 8023     		movs	r3, #128
 199 000e 5B42     		rsbs	r3, r3, #0
 200 0010 0343     		orrs	r3, r0
 201 0012 3370     		strb	r3, [r6]
  67:Core/Src/AB1815.c **** 	spi_select_slave(0);
 202              		.loc 1 67 2 is_stmt 1 view .LVU32
 203 0014 0020     		movs	r0, #0
 204              	.LVL13:
 205              		.loc 1 67 2 is_stmt 0 view .LVU33
 206 0016 FFF7FEFF 		bl	spi_select_slave
 207              	.LVL14:
  68:Core/Src/AB1815.c **** 
  69:Core/Src/AB1815.c **** 	if (HAL_SPI_Transmit(&hspi1, &address, 1, 3000) != HAL_OK)
 208              		.loc 1 69 2 is_stmt 1 view .LVU34
 209              		.loc 1 69 6 is_stmt 0 view .LVU35
 210 001a 1048     		ldr	r0, .L18
 211 001c 104B     		ldr	r3, .L18+4
 212 001e 0122     		movs	r2, #1
 213 0020 3100     		movs	r1, r6
 214 0022 FFF7FEFF 		bl	HAL_SPI_Transmit
 215              	.LVL15:
 216              		.loc 1 69 5 view .LVU36
 217 0026 0028     		cmp	r0, #0
 218 0028 0ED1     		bne	.L16
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 6


 219              	.L14:
  70:Core/Src/AB1815.c **** 	{
  71:Core/Src/AB1815.c **** 		print_error(__func__, __LINE__);
  72:Core/Src/AB1815.c **** 	}
  73:Core/Src/AB1815.c **** 
  74:Core/Src/AB1815.c **** 	if (HAL_SPI_Transmit(&hspi1, buf, length, 3000) != HAL_OK)
 220              		.loc 1 74 2 is_stmt 1 view .LVU37
 221              		.loc 1 74 6 is_stmt 0 view .LVU38
 222 002a 0C48     		ldr	r0, .L18
 223 002c 0C4B     		ldr	r3, .L18+4
 224 002e 2A00     		movs	r2, r5
 225 0030 2100     		movs	r1, r4
 226 0032 FFF7FEFF 		bl	HAL_SPI_Transmit
 227              	.LVL16:
 228              		.loc 1 74 5 view .LVU39
 229 0036 0028     		cmp	r0, #0
 230 0038 0BD1     		bne	.L17
 231              	.L15:
  75:Core/Src/AB1815.c **** 	{
  76:Core/Src/AB1815.c **** 		print_error(__func__, __LINE__);
  77:Core/Src/AB1815.c **** 	}
  78:Core/Src/AB1815.c **** 
  79:Core/Src/AB1815.c **** 	spi_select_slave(1); // set 1
 232              		.loc 1 79 2 is_stmt 1 view .LVU40
 233 003a 0120     		movs	r0, #1
 234 003c FFF7FEFF 		bl	spi_select_slave
 235              	.LVL17:
  80:Core/Src/AB1815.c **** 	return ab1815_status_e_OK;
 236              		.loc 1 80 2 view .LVU41
 237              		.loc 1 80 9 is_stmt 0 view .LVU42
 238 0040 084B     		ldr	r3, .L18+8
 239 0042 1878     		ldrb	r0, [r3]
  81:Core/Src/AB1815.c **** };
 240              		.loc 1 81 1 view .LVU43
 241 0044 02B0     		add	sp, sp, #8
 242              		@ sp needed
 243              	.LVL18:
 244              		.loc 1 81 1 view .LVU44
 245 0046 70BD     		pop	{r4, r5, r6, pc}
 246              	.LVL19:
 247              	.L16:
  71:Core/Src/AB1815.c **** 	}
 248              		.loc 1 71 3 is_stmt 1 view .LVU45
 249 0048 0748     		ldr	r0, .L18+12
 250 004a 4721     		movs	r1, #71
 251 004c FFF7FEFF 		bl	print_error
 252              	.LVL20:
 253 0050 EBE7     		b	.L14
 254              	.L17:
  76:Core/Src/AB1815.c **** 	}
 255              		.loc 1 76 3 view .LVU46
 256 0052 0548     		ldr	r0, .L18+12
 257 0054 4C21     		movs	r1, #76
 258 0056 FFF7FEFF 		bl	print_error
 259              	.LVL21:
 260 005a EEE7     		b	.L15
 261              	.L19:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 7


 262              		.align	2
 263              	.L18:
 264 005c 00000000 		.word	hspi1
 265 0060 B80B0000 		.word	3000
 266 0064 00000000 		.word	ab1815_status_e_OK
 267 0068 00000000 		.word	__func__.0
 268              		.cfi_endproc
 269              	.LFE430:
 271              		.section	.text.clear_hundrdeds,"ax",%progbits
 272              		.align	1
 273              		.global	clear_hundrdeds
 274              		.syntax unified
 275              		.code	16
 276              		.thumb_func
 278              	clear_hundrdeds:
 279              	.LFB431:
  82:Core/Src/AB1815.c **** 
  83:Core/Src/AB1815.c **** // // 0x00
  84:Core/Src/AB1815.c **** // time_t get()
  85:Core/Src/AB1815.c **** // {
  86:Core/Src/AB1815.c **** // 	tmElements_t tm;
  87:Core/Src/AB1815.c **** // 	get_time(&tm);
  88:Core/Src/AB1815.c **** // 	return makeTime(tm); // ???
  89:Core/Src/AB1815.c **** // }
  90:Core/Src/AB1815.c **** 
  91:Core/Src/AB1815.c **** // // 0x00
  92:Core/Src/AB1815.c **** // void set(time_t time)
  93:Core/Src/AB1815.c **** // {
  94:Core/Src/AB1815.c **** // 	ab1815_tmElements_t tm;
  95:Core/Src/AB1815.c **** // 	breakTime(time, tm); // void breakTime(time_t timeInput, ab1815_tmElements_t tm)
  96:Core/Src/AB1815.c **** // 	set_time(&tm);		 // bool set_time(ab1815_tmElements_t *time)
  97:Core/Src/AB1815.c **** // }
  98:Core/Src/AB1815.c **** 
  99:Core/Src/AB1815.c **** // // 0x00
 100:Core/Src/AB1815.c **** // bool get_time(ab1815_tmElements_t *time)
 101:Core/Src/AB1815.c **** // {
 102:Core/Src/AB1815.c **** // 	bool to_ret = ab1815_status_e_ERROR;
 103:Core/Src/AB1815.c **** // 	size_t length = (AB1815_REG_ALARM_HUNDREDTHS - AB1815_REG_TIME_HUNDREDTHS);
 104:Core/Src/AB1815.c **** // 	uint8_t buffer[length];
 105:Core/Src/AB1815.c **** // 	memset(buffer, 0, length);
 106:Core/Src/AB1815.c **** // 	if (read(AB1815_REG_TIME_HUNDREDTHS, buffer, length) == ab1815_status_e_OK)
 107:Core/Src/AB1815.c **** // 	{
 108:Core/Src/AB1815.c **** // 		to_ret = ab1815_status_e_OK;
 109:Core/Src/AB1815.c **** // 		time->Hundredth = bcd2bin(buffer[0]);
 110:Core/Src/AB1815.c **** // 		time->Second = bcd2bin(0x7F & buffer[1]);
 111:Core/Src/AB1815.c **** // 		time->Minute = bcd2bin(0x7F & buffer[2]);
 112:Core/Src/AB1815.c **** // 		time->Hour = bcd2bin(0x3F & buffer[3]);
 113:Core/Src/AB1815.c **** // 		time->Day = bcd2bin(0x3F & buffer[4]);
 114:Core/Src/AB1815.c **** // 		time->Month = bcd2bin(0x1F & buffer[5]);
 115:Core/Src/AB1815.c **** // 		time->Year = y2kYearToTm(bcd2bin(buffer[6]));
 116:Core/Src/AB1815.c **** // 		time->Wday = bcd2bin(0x07 & buffer[7]);
 117:Core/Src/AB1815.c **** // 	}
 118:Core/Src/AB1815.c **** // 	return to_ret;
 119:Core/Src/AB1815.c **** // }
 120:Core/Src/AB1815.c **** 
 121:Core/Src/AB1815.c **** // // 0x00
 122:Core/Src/AB1815.c **** // bool set_time(ab1815_tmElements_t *time)
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 8


 123:Core/Src/AB1815.c **** // {
 124:Core/Src/AB1815.c **** // 	size_t length = (AB1815_REG_ALARM_HUNDREDTHS - AB1815_REG_TIME_HUNDREDTHS);
 125:Core/Src/AB1815.c **** // 	uint8_t buffer[length];
 126:Core/Src/AB1815.c **** // 	bool result = ab1815_status_e_ERROR;
 127:Core/Src/AB1815.c **** 
 128:Core/Src/AB1815.c **** // 	memset(buffer, 0, length);
 129:Core/Src/AB1815.c **** // 	buffer[0] = bin2bcd(time->Hundredth);
 130:Core/Src/AB1815.c **** // 	buffer[1] = bin2bcd(0x7F & time->Second);
 131:Core/Src/AB1815.c **** // 	buffer[2] = bin2bcd(0x7F & time->Minute);
 132:Core/Src/AB1815.c **** // 	buffer[3] = bin2bcd(0x3F & time->Hour);
 133:Core/Src/AB1815.c **** // 	buffer[4] = bin2bcd(0x3F & time->Day);
 134:Core/Src/AB1815.c **** // 	buffer[5] = bin2bcd(0x1F & time->Month);
 135:Core/Src/AB1815.c **** // 	buffer[6] = bin2bcd(tmYearToY2k(time->Year));
 136:Core/Src/AB1815.c **** // 	buffer[7] = bin2bcd(0x07 & time->Wday);
 137:Core/Src/AB1815.c **** 
 138:Core/Src/AB1815.c **** // 	if (write(AB1815_REG_TIME_HUNDREDTHS, buffer, length) == ab1815_status_e_OK)
 139:Core/Src/AB1815.c **** // 	{
 140:Core/Src/AB1815.c **** // 		result = ab1815_status_e_OK;
 141:Core/Src/AB1815.c **** // 	}
 142:Core/Src/AB1815.c **** 
 143:Core/Src/AB1815.c **** // 	return result;
 144:Core/Src/AB1815.c **** // };
 145:Core/Src/AB1815.c **** 
 146:Core/Src/AB1815.c **** bool clear_hundrdeds()
 147:Core/Src/AB1815.c **** {
 280              		.loc 1 147 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 8
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284 0000 00B5     		push	{lr}
 285              	.LCFI4:
 286              		.cfi_def_cfa_offset 4
 287              		.cfi_offset 14, -4
 288 0002 83B0     		sub	sp, sp, #12
 289              	.LCFI5:
 290              		.cfi_def_cfa_offset 16
 148:Core/Src/AB1815.c **** 	uint8_t buf[1];
 291              		.loc 1 148 2 view .LVU48
 149:Core/Src/AB1815.c **** 	buf[0] = 0;
 292              		.loc 1 149 2 view .LVU49
 293              		.loc 1 149 9 is_stmt 0 view .LVU50
 294 0004 01A9     		add	r1, sp, #4
 295 0006 0023     		movs	r3, #0
 296 0008 0B70     		strb	r3, [r1]
 150:Core/Src/AB1815.c **** 	return write(AB1815_REG_TIME_HUNDREDTHS, buf, 1);
 297              		.loc 1 150 2 is_stmt 1 view .LVU51
 298              		.loc 1 150 9 is_stmt 0 view .LVU52
 299 000a 0122     		movs	r2, #1
 300 000c 0020     		movs	r0, #0
 301 000e FFF7FEFF 		bl	write
 302              	.LVL22:
 151:Core/Src/AB1815.c **** };
 303              		.loc 1 151 1 view .LVU53
 304 0012 03B0     		add	sp, sp, #12
 305              		@ sp needed
 306 0014 00BD     		pop	{pc}
 307              		.cfi_endproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 9


 308              	.LFE431:
 310              		.section	.text.set_status,"ax",%progbits
 311              		.align	1
 312              		.global	set_status
 313              		.syntax unified
 314              		.code	16
 315              		.thumb_func
 317              	set_status:
 318              	.LVL23:
 319              	.LFB432:
 152:Core/Src/AB1815.c **** 
 153:Core/Src/AB1815.c **** // 0x08
 154:Core/Src/AB1815.c **** // bool get_alarm(ab1815_tmElements_t *time, ab1815_alarm_repeat_mode *alarm_mode)
 155:Core/Src/AB1815.c **** // {
 156:Core/Src/AB1815.c **** // 	bool to_ret = ab1815_status_e_ERROR;
 157:Core/Src/AB1815.c **** // 	size_t length = AB1815_REG_STATUS - AB1815_REG_ALARM_HUNDREDTHS;
 158:Core/Src/AB1815.c **** // 	uint8_t buffer[length];
 159:Core/Src/AB1815.c **** // 	memset(buffer, 0, length);
 160:Core/Src/AB1815.c **** // 	countdown_control_t cd_reg;
 161:Core/Src/AB1815.c **** // 	uint32_t *val = (uint32_t *)alarm_mode;
 162:Core/Src/AB1815.c **** 
 163:Core/Src/AB1815.c **** // 	if (get_countdown_control(&cd_reg) == ab1815_status_e_OK)
 164:Core/Src/AB1815.c **** // 	{
 165:Core/Src/AB1815.c **** // 		if (read(AB1815_REG_ALARM_HUNDREDTHS, buffer, length) == ab1815_status_e_OK)
 166:Core/Src/AB1815.c **** // 		{
 167:Core/Src/AB1815.c **** // 			to_ret = ab1815_status_e_OK;
 168:Core/Src/AB1815.c **** // 			time->Hundredth = bcd2bin(buffer[0]);
 169:Core/Src/AB1815.c **** // 			time->Second = bcd2bin(0x7F & buffer[1]);
 170:Core/Src/AB1815.c **** // 			time->Minute = bcd2bin(0x7F & buffer[2]);
 171:Core/Src/AB1815.c **** // 			time->Hour = bcd2bin(0x3F & buffer[3]);
 172:Core/Src/AB1815.c **** // 			time->Day = bcd2bin(0x3F & buffer[4]);
 173:Core/Src/AB1815.c **** // 			time->Month = bcd2bin(0x1F & buffer[5]);
 174:Core/Src/AB1815.c **** // 			time->Wday = bcd2bin(0x07 & buffer[6]);
 175:Core/Src/AB1815.c **** // 		}
 176:Core/Src/AB1815.c **** // 		*alarm_mode = (ab1815_alarm_repeat_mode)cd_reg.fields.RPT;
 177:Core/Src/AB1815.c **** // 		if (cd_reg.fields.RPT == 7)
 178:Core/Src/AB1815.c **** // 		{
 179:Core/Src/AB1815.c **** // 			if ((time->Hundredth & 0xF0) == 0xF0)
 180:Core/Src/AB1815.c **** // 			{
 181:Core/Src/AB1815.c **** 
 182:Core/Src/AB1815.c **** // 				(*val)++;
 183:Core/Src/AB1815.c **** // 				if ((time->Hundredth & 0xFF) == 0xFF)
 184:Core/Src/AB1815.c **** // 				{
 185:Core/Src/AB1815.c **** // 					(*val)++;
 186:Core/Src/AB1815.c **** // 				}
 187:Core/Src/AB1815.c **** // 			}
 188:Core/Src/AB1815.c **** // 		}
 189:Core/Src/AB1815.c **** // 	}
 190:Core/Src/AB1815.c **** // 	return to_ret;
 191:Core/Src/AB1815.c **** // };
 192:Core/Src/AB1815.c **** 
 193:Core/Src/AB1815.c **** // // 0x08
 194:Core/Src/AB1815.c **** // bool set_alarm(ab1815_tmElements_t *time, ab1815_alarm_repeat_mode alarm_mode)
 195:Core/Src/AB1815.c **** // {
 196:Core/Src/AB1815.c **** // 	size_t length = AB1815_REG_STATUS - AB1815_REG_ALARM_HUNDREDTHS;
 197:Core/Src/AB1815.c **** // 	uint8_t buffer[length];
 198:Core/Src/AB1815.c **** // 	bool result = ab1815_status_e_ERROR;
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 10


 199:Core/Src/AB1815.c **** // 	uint8_t repeat = alarm_mode;
 200:Core/Src/AB1815.c **** 
 201:Core/Src/AB1815.c **** // 	memset(buffer, 0, length);
 202:Core/Src/AB1815.c **** // 	buffer[0] = bin2bcd(time->Hundredth);
 203:Core/Src/AB1815.c **** // 	buffer[1] = bin2bcd(0x7F & time->Second);
 204:Core/Src/AB1815.c **** // 	buffer[2] = bin2bcd(0x7F & time->Minute);
 205:Core/Src/AB1815.c **** // 	buffer[3] = bin2bcd(0x3F & time->Hour);
 206:Core/Src/AB1815.c **** // 	buffer[4] = bin2bcd(0x3F & time->Day);
 207:Core/Src/AB1815.c **** // 	buffer[5] = bin2bcd(0x1F & time->Month);
 208:Core/Src/AB1815.c **** // 	buffer[6] = bin2bcd(0x07 & time->Wday);
 209:Core/Src/AB1815.c **** 
 210:Core/Src/AB1815.c **** // 	switch (alarm_mode)
 211:Core/Src/AB1815.c **** // 	{
 212:Core/Src/AB1815.c **** // 	case ab1815_alarm_repeat_once_per_tenth:
 213:Core/Src/AB1815.c **** // 		repeat = 7;
 214:Core/Src/AB1815.c **** // 		buffer[0] |= 0xF0;
 215:Core/Src/AB1815.c **** // 		break;
 216:Core/Src/AB1815.c **** // 	case ab1815_alarm_repeat_once_per_hundredth:
 217:Core/Src/AB1815.c **** // 		repeat = 7;
 218:Core/Src/AB1815.c **** // 		buffer[0] = 0xFF;
 219:Core/Src/AB1815.c **** // 		break;
 220:Core/Src/AB1815.c **** // 	default:
 221:Core/Src/AB1815.c **** // 		repeat = alarm_mode;
 222:Core/Src/AB1815.c **** // 	}
 223:Core/Src/AB1815.c **** 
 224:Core/Src/AB1815.c **** // 	if (write(AB1815_REG_ALARM_HUNDREDTHS, buffer, length) == ab1815_status_e_OK)
 225:Core/Src/AB1815.c **** // 	{
 226:Core/Src/AB1815.c **** // 		countdown_control_t cd_reg;
 227:Core/Src/AB1815.c **** 
 228:Core/Src/AB1815.c **** // 		if (get_countdown_control(&cd_reg) == ab1815_status_e_OK)
 229:Core/Src/AB1815.c **** // 		{
 230:Core/Src/AB1815.c **** // 			cd_reg.fields.RPT = repeat;
 231:Core/Src/AB1815.c **** // 			return set_countdown_control(&cd_reg);
 232:Core/Src/AB1815.c **** // 		}
 233:Core/Src/AB1815.c **** // 	}
 234:Core/Src/AB1815.c **** // 	return result;
 235:Core/Src/AB1815.c **** // };
 236:Core/Src/AB1815.c **** 
 237:Core/Src/AB1815.c **** // 0x0F - See also: ARST in Control1.
 238:Core/Src/AB1815.c **** //	If ARST is a 1, a read of the Status register will produce the current state of all
 239:Core/Src/AB1815.c **** //	the interrupt flags and then clear them
 240:Core/Src/AB1815.c **** bool set_status(status_t *status)
 241:Core/Src/AB1815.c **** {
 320              		.loc 1 241 1 is_stmt 1 view -0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              		.loc 1 241 1 is_stmt 0 view .LVU55
 325 0000 10B5     		push	{r4, lr}
 326              	.LCFI6:
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 4, -8
 329              		.cfi_offset 14, -4
 330 0002 0100     		movs	r1, r0
 242:Core/Src/AB1815.c **** 	return write(AB1815_REG_STATUS, &status->value, 1);
 331              		.loc 1 242 2 is_stmt 1 view .LVU56
 332              		.loc 1 242 9 is_stmt 0 view .LVU57
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 11


 333 0004 0122     		movs	r2, #1
 334 0006 0F20     		movs	r0, #15
 335              	.LVL24:
 336              		.loc 1 242 9 view .LVU58
 337 0008 FFF7FEFF 		bl	write
 338              	.LVL25:
 243:Core/Src/AB1815.c **** };
 339              		.loc 1 243 1 view .LVU59
 340              		@ sp needed
 341 000c 10BD     		pop	{r4, pc}
 342              		.cfi_endproc
 343              	.LFE432:
 345              		.section	.text.get_status,"ax",%progbits
 346              		.align	1
 347              		.global	get_status
 348              		.syntax unified
 349              		.code	16
 350              		.thumb_func
 352              	get_status:
 353              	.LVL26:
 354              	.LFB433:
 244:Core/Src/AB1815.c **** 
 245:Core/Src/AB1815.c **** bool get_status(status_t *status)
 246:Core/Src/AB1815.c **** {
 355              		.loc 1 246 1 is_stmt 1 view -0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 0
 358              		@ frame_needed = 0, uses_anonymous_args = 0
 359              		.loc 1 246 1 is_stmt 0 view .LVU61
 360 0000 10B5     		push	{r4, lr}
 361              	.LCFI7:
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 4, -8
 364              		.cfi_offset 14, -4
 365 0002 0100     		movs	r1, r0
 247:Core/Src/AB1815.c **** 	return read(AB1815_REG_STATUS, &status->value, 1);
 366              		.loc 1 247 2 is_stmt 1 view .LVU62
 367              		.loc 1 247 9 is_stmt 0 view .LVU63
 368 0004 0122     		movs	r2, #1
 369 0006 0F20     		movs	r0, #15
 370              	.LVL27:
 371              		.loc 1 247 9 view .LVU64
 372 0008 FFF7FEFF 		bl	read
 373              	.LVL28:
 248:Core/Src/AB1815.c **** };
 374              		.loc 1 248 1 view .LVU65
 375              		@ sp needed
 376 000c 10BD     		pop	{r4, pc}
 377              		.cfi_endproc
 378              	.LFE433:
 380              		.section	.text.set_control1,"ax",%progbits
 381              		.align	1
 382              		.global	set_control1
 383              		.syntax unified
 384              		.code	16
 385              		.thumb_func
 387              	set_control1:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 12


 388              	.LVL29:
 389              	.LFB434:
 249:Core/Src/AB1815.c **** 
 250:Core/Src/AB1815.c **** // 0x10
 251:Core/Src/AB1815.c **** bool set_control1(control1_t *control1)
 252:Core/Src/AB1815.c **** {
 390              		.loc 1 252 1 is_stmt 1 view -0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 0
 393              		@ frame_needed = 0, uses_anonymous_args = 0
 394              		.loc 1 252 1 is_stmt 0 view .LVU67
 395 0000 10B5     		push	{r4, lr}
 396              	.LCFI8:
 397              		.cfi_def_cfa_offset 8
 398              		.cfi_offset 4, -8
 399              		.cfi_offset 14, -4
 400 0002 0100     		movs	r1, r0
 253:Core/Src/AB1815.c **** 	return write(AB1815_REG_CONTROL1, &control1->value, 1);
 401              		.loc 1 253 2 is_stmt 1 view .LVU68
 402              		.loc 1 253 9 is_stmt 0 view .LVU69
 403 0004 0122     		movs	r2, #1
 404 0006 1020     		movs	r0, #16
 405              	.LVL30:
 406              		.loc 1 253 9 view .LVU70
 407 0008 FFF7FEFF 		bl	write
 408              	.LVL31:
 254:Core/Src/AB1815.c **** };
 409              		.loc 1 254 1 view .LVU71
 410              		@ sp needed
 411 000c 10BD     		pop	{r4, pc}
 412              		.cfi_endproc
 413              	.LFE434:
 415              		.section	.text.get_control1,"ax",%progbits
 416              		.align	1
 417              		.global	get_control1
 418              		.syntax unified
 419              		.code	16
 420              		.thumb_func
 422              	get_control1:
 423              	.LVL32:
 424              	.LFB435:
 255:Core/Src/AB1815.c **** 
 256:Core/Src/AB1815.c **** bool get_control1(control1_t *control1)
 257:Core/Src/AB1815.c **** {
 425              		.loc 1 257 1 is_stmt 1 view -0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              		.loc 1 257 1 is_stmt 0 view .LVU73
 430 0000 10B5     		push	{r4, lr}
 431              	.LCFI9:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 4, -8
 434              		.cfi_offset 14, -4
 435 0002 0100     		movs	r1, r0
 258:Core/Src/AB1815.c **** 	return read(AB1815_REG_CONTROL1, &control1->value, 1);
 436              		.loc 1 258 2 is_stmt 1 view .LVU74
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 13


 437              		.loc 1 258 9 is_stmt 0 view .LVU75
 438 0004 0122     		movs	r2, #1
 439 0006 1020     		movs	r0, #16
 440              	.LVL33:
 441              		.loc 1 258 9 view .LVU76
 442 0008 FFF7FEFF 		bl	read
 443              	.LVL34:
 259:Core/Src/AB1815.c **** };
 444              		.loc 1 259 1 view .LVU77
 445              		@ sp needed
 446 000c 10BD     		pop	{r4, pc}
 447              		.cfi_endproc
 448              	.LFE435:
 450              		.section	.text.set_control2,"ax",%progbits
 451              		.align	1
 452              		.global	set_control2
 453              		.syntax unified
 454              		.code	16
 455              		.thumb_func
 457              	set_control2:
 458              	.LVL35:
 459              	.LFB436:
 260:Core/Src/AB1815.c **** 
 261:Core/Src/AB1815.c **** // 0x11
 262:Core/Src/AB1815.c **** bool set_control2(control2_t *control2)
 263:Core/Src/AB1815.c **** {
 460              		.loc 1 263 1 is_stmt 1 view -0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 0
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              		.loc 1 263 1 is_stmt 0 view .LVU79
 465 0000 10B5     		push	{r4, lr}
 466              	.LCFI10:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 4, -8
 469              		.cfi_offset 14, -4
 470 0002 0100     		movs	r1, r0
 264:Core/Src/AB1815.c **** 	return write(AB1815_REG_CONTROL2, &control2->value, 1);
 471              		.loc 1 264 2 is_stmt 1 view .LVU80
 472              		.loc 1 264 9 is_stmt 0 view .LVU81
 473 0004 0122     		movs	r2, #1
 474 0006 1120     		movs	r0, #17
 475              	.LVL36:
 476              		.loc 1 264 9 view .LVU82
 477 0008 FFF7FEFF 		bl	write
 478              	.LVL37:
 265:Core/Src/AB1815.c **** };
 479              		.loc 1 265 1 view .LVU83
 480              		@ sp needed
 481 000c 10BD     		pop	{r4, pc}
 482              		.cfi_endproc
 483              	.LFE436:
 485              		.section	.text.get_control2,"ax",%progbits
 486              		.align	1
 487              		.global	get_control2
 488              		.syntax unified
 489              		.code	16
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 14


 490              		.thumb_func
 492              	get_control2:
 493              	.LVL38:
 494              	.LFB437:
 266:Core/Src/AB1815.c **** 
 267:Core/Src/AB1815.c **** bool get_control2(control2_t *control2)
 268:Core/Src/AB1815.c **** {
 495              		.loc 1 268 1 is_stmt 1 view -0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              		.loc 1 268 1 is_stmt 0 view .LVU85
 500 0000 10B5     		push	{r4, lr}
 501              	.LCFI11:
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 4, -8
 504              		.cfi_offset 14, -4
 505 0002 0100     		movs	r1, r0
 269:Core/Src/AB1815.c **** 	return read(AB1815_REG_CONTROL2, &control2->value, 1);
 506              		.loc 1 269 2 is_stmt 1 view .LVU86
 507              		.loc 1 269 9 is_stmt 0 view .LVU87
 508 0004 0122     		movs	r2, #1
 509 0006 1120     		movs	r0, #17
 510              	.LVL39:
 511              		.loc 1 269 9 view .LVU88
 512 0008 FFF7FEFF 		bl	read
 513              	.LVL40:
 270:Core/Src/AB1815.c **** };
 514              		.loc 1 270 1 view .LVU89
 515              		@ sp needed
 516 000c 10BD     		pop	{r4, pc}
 517              		.cfi_endproc
 518              	.LFE437:
 520              		.section	.text.set_interrupt_mask,"ax",%progbits
 521              		.align	1
 522              		.global	set_interrupt_mask
 523              		.syntax unified
 524              		.code	16
 525              		.thumb_func
 527              	set_interrupt_mask:
 528              	.LVL41:
 529              	.LFB438:
 271:Core/Src/AB1815.c **** 
 272:Core/Src/AB1815.c **** // 0x12
 273:Core/Src/AB1815.c **** bool set_interrupt_mask(inturrupt_mask_t *inturrupt_mask)
 274:Core/Src/AB1815.c **** {
 530              		.loc 1 274 1 is_stmt 1 view -0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              		.loc 1 274 1 is_stmt 0 view .LVU91
 535 0000 10B5     		push	{r4, lr}
 536              	.LCFI12:
 537              		.cfi_def_cfa_offset 8
 538              		.cfi_offset 4, -8
 539              		.cfi_offset 14, -4
 540 0002 0100     		movs	r1, r0
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 15


 275:Core/Src/AB1815.c **** 	return write(AB1815_REG_INTERRUPT_MASK, &inturrupt_mask->value, 1);
 541              		.loc 1 275 2 is_stmt 1 view .LVU92
 542              		.loc 1 275 9 is_stmt 0 view .LVU93
 543 0004 0122     		movs	r2, #1
 544 0006 1220     		movs	r0, #18
 545              	.LVL42:
 546              		.loc 1 275 9 view .LVU94
 547 0008 FFF7FEFF 		bl	write
 548              	.LVL43:
 276:Core/Src/AB1815.c **** };
 549              		.loc 1 276 1 view .LVU95
 550              		@ sp needed
 551 000c 10BD     		pop	{r4, pc}
 552              		.cfi_endproc
 553              	.LFE438:
 555              		.section	.text.get_interrupt_mask,"ax",%progbits
 556              		.align	1
 557              		.global	get_interrupt_mask
 558              		.syntax unified
 559              		.code	16
 560              		.thumb_func
 562              	get_interrupt_mask:
 563              	.LVL44:
 564              	.LFB439:
 277:Core/Src/AB1815.c **** 
 278:Core/Src/AB1815.c **** bool get_interrupt_mask(inturrupt_mask_t *inturrupt_mask)
 279:Core/Src/AB1815.c **** {
 565              		.loc 1 279 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              		.loc 1 279 1 is_stmt 0 view .LVU97
 570 0000 10B5     		push	{r4, lr}
 571              	.LCFI13:
 572              		.cfi_def_cfa_offset 8
 573              		.cfi_offset 4, -8
 574              		.cfi_offset 14, -4
 575 0002 0100     		movs	r1, r0
 280:Core/Src/AB1815.c **** 	return read(AB1815_REG_INTERRUPT_MASK, &inturrupt_mask->value, 1);
 576              		.loc 1 280 2 is_stmt 1 view .LVU98
 577              		.loc 1 280 9 is_stmt 0 view .LVU99
 578 0004 0122     		movs	r2, #1
 579 0006 1220     		movs	r0, #18
 580              	.LVL45:
 581              		.loc 1 280 9 view .LVU100
 582 0008 FFF7FEFF 		bl	read
 583              	.LVL46:
 281:Core/Src/AB1815.c **** };
 584              		.loc 1 281 1 view .LVU101
 585              		@ sp needed
 586 000c 10BD     		pop	{r4, pc}
 587              		.cfi_endproc
 588              	.LFE439:
 590              		.section	.text.set_square_wave,"ax",%progbits
 591              		.align	1
 592              		.global	set_square_wave
 593              		.syntax unified
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 16


 594              		.code	16
 595              		.thumb_func
 597              	set_square_wave:
 598              	.LVL47:
 599              	.LFB440:
 282:Core/Src/AB1815.c **** 
 283:Core/Src/AB1815.c **** // 0x13
 284:Core/Src/AB1815.c **** bool set_square_wave(square_wave_t *square_wave)
 285:Core/Src/AB1815.c **** {
 600              		.loc 1 285 1 is_stmt 1 view -0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              		.loc 1 285 1 is_stmt 0 view .LVU103
 605 0000 10B5     		push	{r4, lr}
 606              	.LCFI14:
 607              		.cfi_def_cfa_offset 8
 608              		.cfi_offset 4, -8
 609              		.cfi_offset 14, -4
 610 0002 0100     		movs	r1, r0
 286:Core/Src/AB1815.c **** 	return write(AB1815_REG_SQW, &square_wave->value, 1);
 611              		.loc 1 286 2 is_stmt 1 view .LVU104
 612              		.loc 1 286 9 is_stmt 0 view .LVU105
 613 0004 0122     		movs	r2, #1
 614 0006 1320     		movs	r0, #19
 615              	.LVL48:
 616              		.loc 1 286 9 view .LVU106
 617 0008 FFF7FEFF 		bl	write
 618              	.LVL49:
 287:Core/Src/AB1815.c **** }
 619              		.loc 1 287 1 view .LVU107
 620              		@ sp needed
 621 000c 10BD     		pop	{r4, pc}
 622              		.cfi_endproc
 623              	.LFE440:
 625              		.section	.text.get_square_wave,"ax",%progbits
 626              		.align	1
 627              		.global	get_square_wave
 628              		.syntax unified
 629              		.code	16
 630              		.thumb_func
 632              	get_square_wave:
 633              	.LVL50:
 634              	.LFB441:
 288:Core/Src/AB1815.c **** 
 289:Core/Src/AB1815.c **** bool get_square_wave(square_wave_t *square_wave)
 290:Core/Src/AB1815.c **** {
 635              		.loc 1 290 1 is_stmt 1 view -0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              		.loc 1 290 1 is_stmt 0 view .LVU109
 640 0000 10B5     		push	{r4, lr}
 641              	.LCFI15:
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 4, -8
 644              		.cfi_offset 14, -4
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 17


 645 0002 0100     		movs	r1, r0
 291:Core/Src/AB1815.c **** 	return read(AB1815_REG_SQW, &square_wave->value, 1);
 646              		.loc 1 291 2 is_stmt 1 view .LVU110
 647              		.loc 1 291 9 is_stmt 0 view .LVU111
 648 0004 0122     		movs	r2, #1
 649 0006 1320     		movs	r0, #19
 650              	.LVL51:
 651              		.loc 1 291 9 view .LVU112
 652 0008 FFF7FEFF 		bl	read
 653              	.LVL52:
 292:Core/Src/AB1815.c **** }
 654              		.loc 1 292 1 view .LVU113
 655              		@ sp needed
 656 000c 10BD     		pop	{r4, pc}
 657              		.cfi_endproc
 658              	.LFE441:
 660              		.section	.text.set_cal_xt,"ax",%progbits
 661              		.align	1
 662              		.global	set_cal_xt
 663              		.syntax unified
 664              		.code	16
 665              		.thumb_func
 667              	set_cal_xt:
 668              	.LVL53:
 669              	.LFB442:
 293:Core/Src/AB1815.c **** 
 294:Core/Src/AB1815.c **** // 0x14
 295:Core/Src/AB1815.c **** bool set_cal_xt(cal_xt_t *cal_xt)
 296:Core/Src/AB1815.c **** {
 670              		.loc 1 296 1 is_stmt 1 view -0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674              		.loc 1 296 1 is_stmt 0 view .LVU115
 675 0000 10B5     		push	{r4, lr}
 676              	.LCFI16:
 677              		.cfi_def_cfa_offset 8
 678              		.cfi_offset 4, -8
 679              		.cfi_offset 14, -4
 680 0002 0100     		movs	r1, r0
 297:Core/Src/AB1815.c **** 	return write(AB1815_REG_CAL_XT, &cal_xt->value, 1);
 681              		.loc 1 297 2 is_stmt 1 view .LVU116
 682              		.loc 1 297 9 is_stmt 0 view .LVU117
 683 0004 0122     		movs	r2, #1
 684 0006 1420     		movs	r0, #20
 685              	.LVL54:
 686              		.loc 1 297 9 view .LVU118
 687 0008 FFF7FEFF 		bl	write
 688              	.LVL55:
 298:Core/Src/AB1815.c **** }
 689              		.loc 1 298 1 view .LVU119
 690              		@ sp needed
 691 000c 10BD     		pop	{r4, pc}
 692              		.cfi_endproc
 693              	.LFE442:
 695              		.section	.text.get_cal_xt,"ax",%progbits
 696              		.align	1
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 18


 697              		.global	get_cal_xt
 698              		.syntax unified
 699              		.code	16
 700              		.thumb_func
 702              	get_cal_xt:
 703              	.LVL56:
 704              	.LFB443:
 299:Core/Src/AB1815.c **** 
 300:Core/Src/AB1815.c **** bool get_cal_xt(cal_xt_t *cal_xt)
 301:Core/Src/AB1815.c **** {
 705              		.loc 1 301 1 is_stmt 1 view -0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 709              		.loc 1 301 1 is_stmt 0 view .LVU121
 710 0000 10B5     		push	{r4, lr}
 711              	.LCFI17:
 712              		.cfi_def_cfa_offset 8
 713              		.cfi_offset 4, -8
 714              		.cfi_offset 14, -4
 715 0002 0100     		movs	r1, r0
 302:Core/Src/AB1815.c **** 	return read(AB1815_REG_CAL_XT, &cal_xt->value, 1);
 716              		.loc 1 302 2 is_stmt 1 view .LVU122
 717              		.loc 1 302 9 is_stmt 0 view .LVU123
 718 0004 0122     		movs	r2, #1
 719 0006 1420     		movs	r0, #20
 720              	.LVL57:
 721              		.loc 1 302 9 view .LVU124
 722 0008 FFF7FEFF 		bl	read
 723              	.LVL58:
 303:Core/Src/AB1815.c **** }
 724              		.loc 1 303 1 view .LVU125
 725              		@ sp needed
 726 000c 10BD     		pop	{r4, pc}
 727              		.cfi_endproc
 728              	.LFE443:
 730              		.section	.text.set_cal_rc_hi,"ax",%progbits
 731              		.align	1
 732              		.global	set_cal_rc_hi
 733              		.syntax unified
 734              		.code	16
 735              		.thumb_func
 737              	set_cal_rc_hi:
 738              	.LVL59:
 739              	.LFB444:
 304:Core/Src/AB1815.c **** 
 305:Core/Src/AB1815.c **** // 0x15
 306:Core/Src/AB1815.c **** bool set_cal_rc_hi(cal_rc_hi_t *cal_rc_hi)
 307:Core/Src/AB1815.c **** {
 740              		.loc 1 307 1 is_stmt 1 view -0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              		.loc 1 307 1 is_stmt 0 view .LVU127
 745 0000 10B5     		push	{r4, lr}
 746              	.LCFI18:
 747              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 19


 748              		.cfi_offset 4, -8
 749              		.cfi_offset 14, -4
 750 0002 0100     		movs	r1, r0
 308:Core/Src/AB1815.c **** 	return write(AB1815_REG_CAL_RC_HI, &cal_rc_hi->value, 1);
 751              		.loc 1 308 2 is_stmt 1 view .LVU128
 752              		.loc 1 308 9 is_stmt 0 view .LVU129
 753 0004 0122     		movs	r2, #1
 754 0006 1520     		movs	r0, #21
 755              	.LVL60:
 756              		.loc 1 308 9 view .LVU130
 757 0008 FFF7FEFF 		bl	write
 758              	.LVL61:
 309:Core/Src/AB1815.c **** }
 759              		.loc 1 309 1 view .LVU131
 760              		@ sp needed
 761 000c 10BD     		pop	{r4, pc}
 762              		.cfi_endproc
 763              	.LFE444:
 765              		.section	.text.get_cal_rc_hi,"ax",%progbits
 766              		.align	1
 767              		.global	get_cal_rc_hi
 768              		.syntax unified
 769              		.code	16
 770              		.thumb_func
 772              	get_cal_rc_hi:
 773              	.LVL62:
 774              	.LFB445:
 310:Core/Src/AB1815.c **** 
 311:Core/Src/AB1815.c **** bool get_cal_rc_hi(cal_rc_hi_t *cal_rc_hi)
 312:Core/Src/AB1815.c **** {
 775              		.loc 1 312 1 is_stmt 1 view -0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              		.loc 1 312 1 is_stmt 0 view .LVU133
 780 0000 10B5     		push	{r4, lr}
 781              	.LCFI19:
 782              		.cfi_def_cfa_offset 8
 783              		.cfi_offset 4, -8
 784              		.cfi_offset 14, -4
 785 0002 0100     		movs	r1, r0
 313:Core/Src/AB1815.c **** 	return read(AB1815_REG_CAL_RC_HI, &cal_rc_hi->value, 1);
 786              		.loc 1 313 2 is_stmt 1 view .LVU134
 787              		.loc 1 313 9 is_stmt 0 view .LVU135
 788 0004 0122     		movs	r2, #1
 789 0006 1520     		movs	r0, #21
 790              	.LVL63:
 791              		.loc 1 313 9 view .LVU136
 792 0008 FFF7FEFF 		bl	read
 793              	.LVL64:
 314:Core/Src/AB1815.c **** }
 794              		.loc 1 314 1 view .LVU137
 795              		@ sp needed
 796 000c 10BD     		pop	{r4, pc}
 797              		.cfi_endproc
 798              	.LFE445:
 800              		.section	.text.set_cal_rc_low,"ax",%progbits
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 20


 801              		.align	1
 802              		.global	set_cal_rc_low
 803              		.syntax unified
 804              		.code	16
 805              		.thumb_func
 807              	set_cal_rc_low:
 808              	.LVL65:
 809              	.LFB446:
 315:Core/Src/AB1815.c **** 
 316:Core/Src/AB1815.c **** // 0x16
 317:Core/Src/AB1815.c **** bool set_cal_rc_low(cal_rc_low_t *cal_rc_low)
 318:Core/Src/AB1815.c **** {
 810              		.loc 1 318 1 is_stmt 1 view -0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 0
 813              		@ frame_needed = 0, uses_anonymous_args = 0
 814              		.loc 1 318 1 is_stmt 0 view .LVU139
 815 0000 10B5     		push	{r4, lr}
 816              	.LCFI20:
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 4, -8
 819              		.cfi_offset 14, -4
 820 0002 0100     		movs	r1, r0
 319:Core/Src/AB1815.c **** 	return write(AB1815_REG_CAL_RC_LOW, &cal_rc_low->OFFSETR, 1);
 821              		.loc 1 319 2 is_stmt 1 view .LVU140
 822              		.loc 1 319 9 is_stmt 0 view .LVU141
 823 0004 0122     		movs	r2, #1
 824 0006 1620     		movs	r0, #22
 825              	.LVL66:
 826              		.loc 1 319 9 view .LVU142
 827 0008 FFF7FEFF 		bl	write
 828              	.LVL67:
 320:Core/Src/AB1815.c **** }
 829              		.loc 1 320 1 view .LVU143
 830              		@ sp needed
 831 000c 10BD     		pop	{r4, pc}
 832              		.cfi_endproc
 833              	.LFE446:
 835              		.section	.text.get_cal_rc_low,"ax",%progbits
 836              		.align	1
 837              		.global	get_cal_rc_low
 838              		.syntax unified
 839              		.code	16
 840              		.thumb_func
 842              	get_cal_rc_low:
 843              	.LVL68:
 844              	.LFB447:
 321:Core/Src/AB1815.c **** 
 322:Core/Src/AB1815.c **** bool get_cal_rc_low(cal_rc_low_t *cal_rc_low)
 323:Core/Src/AB1815.c **** {
 845              		.loc 1 323 1 is_stmt 1 view -0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              		.loc 1 323 1 is_stmt 0 view .LVU145
 850 0000 10B5     		push	{r4, lr}
 851              	.LCFI21:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 21


 852              		.cfi_def_cfa_offset 8
 853              		.cfi_offset 4, -8
 854              		.cfi_offset 14, -4
 855 0002 0100     		movs	r1, r0
 324:Core/Src/AB1815.c **** 	return read(AB1815_REG_CAL_RC_LOW, &cal_rc_low->OFFSETR, 1);
 856              		.loc 1 324 2 is_stmt 1 view .LVU146
 857              		.loc 1 324 9 is_stmt 0 view .LVU147
 858 0004 0122     		movs	r2, #1
 859 0006 1620     		movs	r0, #22
 860              	.LVL69:
 861              		.loc 1 324 9 view .LVU148
 862 0008 FFF7FEFF 		bl	read
 863              	.LVL70:
 325:Core/Src/AB1815.c **** }
 864              		.loc 1 325 1 view .LVU149
 865              		@ sp needed
 866 000c 10BD     		pop	{r4, pc}
 867              		.cfi_endproc
 868              	.LFE447:
 870              		.section	.text.set_sleep_control,"ax",%progbits
 871              		.align	1
 872              		.global	set_sleep_control
 873              		.syntax unified
 874              		.code	16
 875              		.thumb_func
 877              	set_sleep_control:
 878              	.LVL71:
 879              	.LFB448:
 326:Core/Src/AB1815.c **** 
 327:Core/Src/AB1815.c **** // 0x17 sleep_control_t
 328:Core/Src/AB1815.c **** bool set_sleep_control(sleep_control_t *sleep_control)
 329:Core/Src/AB1815.c **** {
 880              		.loc 1 329 1 is_stmt 1 view -0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              		.loc 1 329 1 is_stmt 0 view .LVU151
 885 0000 10B5     		push	{r4, lr}
 886              	.LCFI22:
 887              		.cfi_def_cfa_offset 8
 888              		.cfi_offset 4, -8
 889              		.cfi_offset 14, -4
 890 0002 0100     		movs	r1, r0
 330:Core/Src/AB1815.c **** 	return write(AB1815_REG_SLEEP_CONTROL, &sleep_control->value, 1);
 891              		.loc 1 330 2 is_stmt 1 view .LVU152
 892              		.loc 1 330 9 is_stmt 0 view .LVU153
 893 0004 0122     		movs	r2, #1
 894 0006 1720     		movs	r0, #23
 895              	.LVL72:
 896              		.loc 1 330 9 view .LVU154
 897 0008 FFF7FEFF 		bl	write
 898              	.LVL73:
 331:Core/Src/AB1815.c **** };
 899              		.loc 1 331 1 view .LVU155
 900              		@ sp needed
 901 000c 10BD     		pop	{r4, pc}
 902              		.cfi_endproc
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 22


 903              	.LFE448:
 905              		.section	.text.get_sleep_control,"ax",%progbits
 906              		.align	1
 907              		.global	get_sleep_control
 908              		.syntax unified
 909              		.code	16
 910              		.thumb_func
 912              	get_sleep_control:
 913              	.LVL74:
 914              	.LFB449:
 332:Core/Src/AB1815.c **** 
 333:Core/Src/AB1815.c **** bool get_sleep_control(sleep_control_t *sleep_control)
 334:Core/Src/AB1815.c **** {
 915              		.loc 1 334 1 is_stmt 1 view -0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 0
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919              		.loc 1 334 1 is_stmt 0 view .LVU157
 920 0000 10B5     		push	{r4, lr}
 921              	.LCFI23:
 922              		.cfi_def_cfa_offset 8
 923              		.cfi_offset 4, -8
 924              		.cfi_offset 14, -4
 925 0002 0100     		movs	r1, r0
 335:Core/Src/AB1815.c **** 	return read(AB1815_REG_SLEEP_CONTROL, &sleep_control->value, 1);
 926              		.loc 1 335 2 is_stmt 1 view .LVU158
 927              		.loc 1 335 9 is_stmt 0 view .LVU159
 928 0004 0122     		movs	r2, #1
 929 0006 1720     		movs	r0, #23
 930              	.LVL75:
 931              		.loc 1 335 9 view .LVU160
 932 0008 FFF7FEFF 		bl	read
 933              	.LVL76:
 336:Core/Src/AB1815.c **** };
 934              		.loc 1 336 1 view .LVU161
 935              		@ sp needed
 936 000c 10BD     		pop	{r4, pc}
 937              		.cfi_endproc
 938              	.LFE449:
 940              		.section	.text.set_countdown_control,"ax",%progbits
 941              		.align	1
 942              		.global	set_countdown_control
 943              		.syntax unified
 944              		.code	16
 945              		.thumb_func
 947              	set_countdown_control:
 948              	.LVL77:
 949              	.LFB450:
 337:Core/Src/AB1815.c **** 
 338:Core/Src/AB1815.c **** // 0x18
 339:Core/Src/AB1815.c **** bool set_countdown_control(countdown_control_t *countdown_control)
 340:Core/Src/AB1815.c **** {
 950              		.loc 1 340 1 is_stmt 1 view -0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 0
 953              		@ frame_needed = 0, uses_anonymous_args = 0
 954              		.loc 1 340 1 is_stmt 0 view .LVU163
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 23


 955 0000 10B5     		push	{r4, lr}
 956              	.LCFI24:
 957              		.cfi_def_cfa_offset 8
 958              		.cfi_offset 4, -8
 959              		.cfi_offset 14, -4
 960 0002 0100     		movs	r1, r0
 341:Core/Src/AB1815.c **** 	return write(AB1815_REG_COUNTDOWN_TIMER_CONTROL, &countdown_control->value, 1);
 961              		.loc 1 341 2 is_stmt 1 view .LVU164
 962              		.loc 1 341 9 is_stmt 0 view .LVU165
 963 0004 0122     		movs	r2, #1
 964 0006 1820     		movs	r0, #24
 965              	.LVL78:
 966              		.loc 1 341 9 view .LVU166
 967 0008 FFF7FEFF 		bl	write
 968              	.LVL79:
 342:Core/Src/AB1815.c **** };
 969              		.loc 1 342 1 view .LVU167
 970              		@ sp needed
 971 000c 10BD     		pop	{r4, pc}
 972              		.cfi_endproc
 973              	.LFE450:
 975              		.section	.text.get_countdown_control,"ax",%progbits
 976              		.align	1
 977              		.global	get_countdown_control
 978              		.syntax unified
 979              		.code	16
 980              		.thumb_func
 982              	get_countdown_control:
 983              	.LVL80:
 984              	.LFB451:
 343:Core/Src/AB1815.c **** 
 344:Core/Src/AB1815.c **** bool get_countdown_control(countdown_control_t *countdown_control)
 345:Core/Src/AB1815.c **** {
 985              		.loc 1 345 1 is_stmt 1 view -0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989              		.loc 1 345 1 is_stmt 0 view .LVU169
 990 0000 10B5     		push	{r4, lr}
 991              	.LCFI25:
 992              		.cfi_def_cfa_offset 8
 993              		.cfi_offset 4, -8
 994              		.cfi_offset 14, -4
 995 0002 0100     		movs	r1, r0
 346:Core/Src/AB1815.c **** 	return read(AB1815_REG_COUNTDOWN_TIMER_CONTROL, &countdown_control->value, 1);
 996              		.loc 1 346 2 is_stmt 1 view .LVU170
 997              		.loc 1 346 9 is_stmt 0 view .LVU171
 998 0004 0122     		movs	r2, #1
 999 0006 1820     		movs	r0, #24
 1000              	.LVL81:
 1001              		.loc 1 346 9 view .LVU172
 1002 0008 FFF7FEFF 		bl	read
 1003              	.LVL82:
 347:Core/Src/AB1815.c **** };
 1004              		.loc 1 347 1 view .LVU173
 1005              		@ sp needed
 1006 000c 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 24


 1007              		.cfi_endproc
 1008              	.LFE451:
 1010              		.section	.text.set_countdown_timer,"ax",%progbits
 1011              		.align	1
 1012              		.global	set_countdown_timer
 1013              		.syntax unified
 1014              		.code	16
 1015              		.thumb_func
 1017              	set_countdown_timer:
 1018              	.LVL83:
 1019              	.LFB452:
 348:Core/Src/AB1815.c **** 
 349:Core/Src/AB1815.c **** // 0x19
 350:Core/Src/AB1815.c **** bool set_countdown_timer(uint8_t timer_value)
 351:Core/Src/AB1815.c **** {
 1020              		.loc 1 351 1 is_stmt 1 view -0
 1021              		.cfi_startproc
 1022              		@ args = 0, pretend = 0, frame = 8
 1023              		@ frame_needed = 0, uses_anonymous_args = 0
 1024              		.loc 1 351 1 is_stmt 0 view .LVU175
 1025 0000 00B5     		push	{lr}
 1026              	.LCFI26:
 1027              		.cfi_def_cfa_offset 4
 1028              		.cfi_offset 14, -4
 1029 0002 83B0     		sub	sp, sp, #12
 1030              	.LCFI27:
 1031              		.cfi_def_cfa_offset 16
 1032 0004 6B46     		mov	r3, sp
 1033 0006 D91D     		adds	r1, r3, #7
 1034 0008 0870     		strb	r0, [r1]
 352:Core/Src/AB1815.c **** 	return write(AB1815_REG_COUNTDOWN_TIMER, &timer_value, 1);
 1035              		.loc 1 352 2 is_stmt 1 view .LVU176
 1036              		.loc 1 352 9 is_stmt 0 view .LVU177
 1037 000a 0122     		movs	r2, #1
 1038 000c 1920     		movs	r0, #25
 1039              	.LVL84:
 1040              		.loc 1 352 9 view .LVU178
 1041 000e FFF7FEFF 		bl	write
 1042              	.LVL85:
 353:Core/Src/AB1815.c **** }
 1043              		.loc 1 353 1 view .LVU179
 1044 0012 03B0     		add	sp, sp, #12
 1045              		@ sp needed
 1046 0014 00BD     		pop	{pc}
 1047              		.cfi_endproc
 1048              	.LFE452:
 1050              		.section	.text.get_countdown_timer,"ax",%progbits
 1051              		.align	1
 1052              		.global	get_countdown_timer
 1053              		.syntax unified
 1054              		.code	16
 1055              		.thumb_func
 1057              	get_countdown_timer:
 1058              	.LVL86:
 1059              	.LFB453:
 354:Core/Src/AB1815.c **** 
 355:Core/Src/AB1815.c **** bool get_countdown_timer(uint8_t *timer_value)
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 25


 356:Core/Src/AB1815.c **** {
 1060              		.loc 1 356 1 is_stmt 1 view -0
 1061              		.cfi_startproc
 1062              		@ args = 0, pretend = 0, frame = 0
 1063              		@ frame_needed = 0, uses_anonymous_args = 0
 1064              		.loc 1 356 1 is_stmt 0 view .LVU181
 1065 0000 10B5     		push	{r4, lr}
 1066              	.LCFI28:
 1067              		.cfi_def_cfa_offset 8
 1068              		.cfi_offset 4, -8
 1069              		.cfi_offset 14, -4
 1070 0002 0100     		movs	r1, r0
 357:Core/Src/AB1815.c **** 	return read(AB1815_REG_COUNTDOWN_TIMER, timer_value, 1);
 1071              		.loc 1 357 2 is_stmt 1 view .LVU182
 1072              		.loc 1 357 9 is_stmt 0 view .LVU183
 1073 0004 0122     		movs	r2, #1
 1074 0006 1920     		movs	r0, #25
 1075              	.LVL87:
 1076              		.loc 1 357 9 view .LVU184
 1077 0008 FFF7FEFF 		bl	read
 1078              	.LVL88:
 358:Core/Src/AB1815.c **** }
 1079              		.loc 1 358 1 view .LVU185
 1080              		@ sp needed
 1081 000c 10BD     		pop	{r4, pc}
 1082              		.cfi_endproc
 1083              	.LFE453:
 1085              		.section	.text.set_countdown_timer_initial_value,"ax",%progbits
 1086              		.align	1
 1087              		.global	set_countdown_timer_initial_value
 1088              		.syntax unified
 1089              		.code	16
 1090              		.thumb_func
 1092              	set_countdown_timer_initial_value:
 1093              	.LVL89:
 1094              	.LFB454:
 359:Core/Src/AB1815.c **** 
 360:Core/Src/AB1815.c **** // 0x1A
 361:Core/Src/AB1815.c **** bool set_countdown_timer_initial_value(uint8_t timer_value)
 362:Core/Src/AB1815.c **** {
 1095              		.loc 1 362 1 is_stmt 1 view -0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 8
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		.loc 1 362 1 is_stmt 0 view .LVU187
 1100 0000 00B5     		push	{lr}
 1101              	.LCFI29:
 1102              		.cfi_def_cfa_offset 4
 1103              		.cfi_offset 14, -4
 1104 0002 83B0     		sub	sp, sp, #12
 1105              	.LCFI30:
 1106              		.cfi_def_cfa_offset 16
 1107 0004 6B46     		mov	r3, sp
 1108 0006 D91D     		adds	r1, r3, #7
 1109 0008 0870     		strb	r0, [r1]
 363:Core/Src/AB1815.c **** 	return write(AB1815_REG_COUNTDOWN_TIMER_INITIAL, &timer_value, 1);
 1110              		.loc 1 363 2 is_stmt 1 view .LVU188
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 26


 1111              		.loc 1 363 9 is_stmt 0 view .LVU189
 1112 000a 0122     		movs	r2, #1
 1113 000c 1A20     		movs	r0, #26
 1114              	.LVL90:
 1115              		.loc 1 363 9 view .LVU190
 1116 000e FFF7FEFF 		bl	write
 1117              	.LVL91:
 364:Core/Src/AB1815.c **** }
 1118              		.loc 1 364 1 view .LVU191
 1119 0012 03B0     		add	sp, sp, #12
 1120              		@ sp needed
 1121 0014 00BD     		pop	{pc}
 1122              		.cfi_endproc
 1123              	.LFE454:
 1125              		.section	.text.get_countdown_timer_initial_value,"ax",%progbits
 1126              		.align	1
 1127              		.global	get_countdown_timer_initial_value
 1128              		.syntax unified
 1129              		.code	16
 1130              		.thumb_func
 1132              	get_countdown_timer_initial_value:
 1133              	.LVL92:
 1134              	.LFB455:
 365:Core/Src/AB1815.c **** 
 366:Core/Src/AB1815.c **** bool get_countdown_timer_initial_value(uint8_t *timer_value)
 367:Core/Src/AB1815.c **** {
 1135              		.loc 1 367 1 is_stmt 1 view -0
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 0
 1138              		@ frame_needed = 0, uses_anonymous_args = 0
 1139              		.loc 1 367 1 is_stmt 0 view .LVU193
 1140 0000 10B5     		push	{r4, lr}
 1141              	.LCFI31:
 1142              		.cfi_def_cfa_offset 8
 1143              		.cfi_offset 4, -8
 1144              		.cfi_offset 14, -4
 1145 0002 0100     		movs	r1, r0
 368:Core/Src/AB1815.c **** 	return read(AB1815_REG_COUNTDOWN_TIMER_INITIAL, timer_value, 1);
 1146              		.loc 1 368 2 is_stmt 1 view .LVU194
 1147              		.loc 1 368 9 is_stmt 0 view .LVU195
 1148 0004 0122     		movs	r2, #1
 1149 0006 1A20     		movs	r0, #26
 1150              	.LVL93:
 1151              		.loc 1 368 9 view .LVU196
 1152 0008 FFF7FEFF 		bl	read
 1153              	.LVL94:
 369:Core/Src/AB1815.c **** }
 1154              		.loc 1 369 1 view .LVU197
 1155              		@ sp needed
 1156 000c 10BD     		pop	{r4, pc}
 1157              		.cfi_endproc
 1158              	.LFE455:
 1160              		.section	.text.set_watchdog_timer,"ax",%progbits
 1161              		.align	1
 1162              		.global	set_watchdog_timer
 1163              		.syntax unified
 1164              		.code	16
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 27


 1165              		.thumb_func
 1167              	set_watchdog_timer:
 1168              	.LVL95:
 1169              	.LFB456:
 370:Core/Src/AB1815.c **** 
 371:Core/Src/AB1815.c **** // 0x1B
 372:Core/Src/AB1815.c **** bool set_watchdog_timer(watchdog_timer_t *watchdog_timer)
 373:Core/Src/AB1815.c **** {
 1170              		.loc 1 373 1 is_stmt 1 view -0
 1171              		.cfi_startproc
 1172              		@ args = 0, pretend = 0, frame = 0
 1173              		@ frame_needed = 0, uses_anonymous_args = 0
 1174              		.loc 1 373 1 is_stmt 0 view .LVU199
 1175 0000 10B5     		push	{r4, lr}
 1176              	.LCFI32:
 1177              		.cfi_def_cfa_offset 8
 1178              		.cfi_offset 4, -8
 1179              		.cfi_offset 14, -4
 1180 0002 0100     		movs	r1, r0
 374:Core/Src/AB1815.c **** 	return write(AB1815_REG_WATCHDOG_TIMER, &watchdog_timer->value, 1);
 1181              		.loc 1 374 2 is_stmt 1 view .LVU200
 1182              		.loc 1 374 9 is_stmt 0 view .LVU201
 1183 0004 0122     		movs	r2, #1
 1184 0006 1B20     		movs	r0, #27
 1185              	.LVL96:
 1186              		.loc 1 374 9 view .LVU202
 1187 0008 FFF7FEFF 		bl	write
 1188              	.LVL97:
 375:Core/Src/AB1815.c **** }
 1189              		.loc 1 375 1 view .LVU203
 1190              		@ sp needed
 1191 000c 10BD     		pop	{r4, pc}
 1192              		.cfi_endproc
 1193              	.LFE456:
 1195              		.section	.text.get_watchdog_timer,"ax",%progbits
 1196              		.align	1
 1197              		.global	get_watchdog_timer
 1198              		.syntax unified
 1199              		.code	16
 1200              		.thumb_func
 1202              	get_watchdog_timer:
 1203              	.LVL98:
 1204              	.LFB457:
 376:Core/Src/AB1815.c **** 
 377:Core/Src/AB1815.c **** bool get_watchdog_timer(watchdog_timer_t *watchdog_timer)
 378:Core/Src/AB1815.c **** {
 1205              		.loc 1 378 1 is_stmt 1 view -0
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 0
 1208              		@ frame_needed = 0, uses_anonymous_args = 0
 1209              		.loc 1 378 1 is_stmt 0 view .LVU205
 1210 0000 10B5     		push	{r4, lr}
 1211              	.LCFI33:
 1212              		.cfi_def_cfa_offset 8
 1213              		.cfi_offset 4, -8
 1214              		.cfi_offset 14, -4
 1215 0002 0100     		movs	r1, r0
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 28


 379:Core/Src/AB1815.c **** 	return read(AB1815_REG_WATCHDOG_TIMER, &watchdog_timer->value, 1);
 1216              		.loc 1 379 2 is_stmt 1 view .LVU206
 1217              		.loc 1 379 9 is_stmt 0 view .LVU207
 1218 0004 0122     		movs	r2, #1
 1219 0006 1B20     		movs	r0, #27
 1220              	.LVL99:
 1221              		.loc 1 379 9 view .LVU208
 1222 0008 FFF7FEFF 		bl	read
 1223              	.LVL100:
 380:Core/Src/AB1815.c **** }
 1224              		.loc 1 380 1 view .LVU209
 1225              		@ sp needed
 1226 000c 10BD     		pop	{r4, pc}
 1227              		.cfi_endproc
 1228              	.LFE457:
 1230              		.section	.text.get_oscillator_control,"ax",%progbits
 1231              		.align	1
 1232              		.global	get_oscillator_control
 1233              		.syntax unified
 1234              		.code	16
 1235              		.thumb_func
 1237              	get_oscillator_control:
 1238              	.LVL101:
 1239              	.LFB458:
 381:Core/Src/AB1815.c **** 
 382:Core/Src/AB1815.c **** // 0x1C Get the oscillator control register
 383:Core/Src/AB1815.c **** bool get_oscillator_control(oscillator_control_t *oscillator_control)
 384:Core/Src/AB1815.c **** {
 1240              		.loc 1 384 1 is_stmt 1 view -0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 0
 1243              		@ frame_needed = 0, uses_anonymous_args = 0
 1244              		.loc 1 384 1 is_stmt 0 view .LVU211
 1245 0000 10B5     		push	{r4, lr}
 1246              	.LCFI34:
 1247              		.cfi_def_cfa_offset 8
 1248              		.cfi_offset 4, -8
 1249              		.cfi_offset 14, -4
 1250 0002 0100     		movs	r1, r0
 385:Core/Src/AB1815.c **** 	return read(AB1815_REG_OSCILLATOR_CONTROL, &oscillator_control->value, 1);
 1251              		.loc 1 385 2 is_stmt 1 view .LVU212
 1252              		.loc 1 385 9 is_stmt 0 view .LVU213
 1253 0004 0122     		movs	r2, #1
 1254 0006 1C20     		movs	r0, #28
 1255              	.LVL102:
 1256              		.loc 1 385 9 view .LVU214
 1257 0008 FFF7FEFF 		bl	read
 1258              	.LVL103:
 386:Core/Src/AB1815.c **** };
 1259              		.loc 1 386 1 view .LVU215
 1260              		@ sp needed
 1261 000c 10BD     		pop	{r4, pc}
 1262              		.cfi_endproc
 1263              	.LFE458:
 1265              		.section	.text.set_oscillator_status,"ax",%progbits
 1266              		.align	1
 1267              		.global	set_oscillator_status
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 29


 1268              		.syntax unified
 1269              		.code	16
 1270              		.thumb_func
 1272              	set_oscillator_status:
 1273              	.LVL104:
 1274              	.LFB460:
 387:Core/Src/AB1815.c **** 
 388:Core/Src/AB1815.c **** bool set_oscillator_control(oscillator_control_t *oscillator_control)
 389:Core/Src/AB1815.c **** {
 390:Core/Src/AB1815.c **** 	if (set_configuration_key(ab1815_oscillator_control) != ab1815_status_e_OK)
 391:Core/Src/AB1815.c **** 	{
 392:Core/Src/AB1815.c **** 		return ab1815_status_e_ERROR;
 393:Core/Src/AB1815.c **** 	}
 394:Core/Src/AB1815.c **** 	return write(AB1815_REG_OSCILLATOR_CONTROL, &oscillator_control->value, 1);
 395:Core/Src/AB1815.c **** };
 396:Core/Src/AB1815.c **** 
 397:Core/Src/AB1815.c **** // 0x1D
 398:Core/Src/AB1815.c **** bool set_oscillator_status(oscillator_status_t *oscillator_status)
 399:Core/Src/AB1815.c **** {
 1275              		.loc 1 399 1 is_stmt 1 view -0
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 0
 1278              		@ frame_needed = 0, uses_anonymous_args = 0
 1279              		.loc 1 399 1 is_stmt 0 view .LVU217
 1280 0000 10B5     		push	{r4, lr}
 1281              	.LCFI35:
 1282              		.cfi_def_cfa_offset 8
 1283              		.cfi_offset 4, -8
 1284              		.cfi_offset 14, -4
 1285 0002 0100     		movs	r1, r0
 400:Core/Src/AB1815.c **** 	return write(AB1815_REG_OSCILLATOR_STATUS, &oscillator_status->value, 1);
 1286              		.loc 1 400 2 is_stmt 1 view .LVU218
 1287              		.loc 1 400 9 is_stmt 0 view .LVU219
 1288 0004 0122     		movs	r2, #1
 1289 0006 1D20     		movs	r0, #29
 1290              	.LVL105:
 1291              		.loc 1 400 9 view .LVU220
 1292 0008 FFF7FEFF 		bl	write
 1293              	.LVL106:
 401:Core/Src/AB1815.c **** }
 1294              		.loc 1 401 1 view .LVU221
 1295              		@ sp needed
 1296 000c 10BD     		pop	{r4, pc}
 1297              		.cfi_endproc
 1298              	.LFE460:
 1300              		.section	.text.get_oscillator_status,"ax",%progbits
 1301              		.align	1
 1302              		.global	get_oscillator_status
 1303              		.syntax unified
 1304              		.code	16
 1305              		.thumb_func
 1307              	get_oscillator_status:
 1308              	.LVL107:
 1309              	.LFB461:
 402:Core/Src/AB1815.c **** 
 403:Core/Src/AB1815.c **** bool get_oscillator_status(oscillator_status_t *oscillator_status)
 404:Core/Src/AB1815.c **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 30


 1310              		.loc 1 404 1 is_stmt 1 view -0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 0
 1313              		@ frame_needed = 0, uses_anonymous_args = 0
 1314              		.loc 1 404 1 is_stmt 0 view .LVU223
 1315 0000 10B5     		push	{r4, lr}
 1316              	.LCFI36:
 1317              		.cfi_def_cfa_offset 8
 1318              		.cfi_offset 4, -8
 1319              		.cfi_offset 14, -4
 1320 0002 0100     		movs	r1, r0
 405:Core/Src/AB1815.c **** 	return read(AB1815_REG_OSCILLATOR_STATUS, &oscillator_status->value, 1);
 1321              		.loc 1 405 2 is_stmt 1 view .LVU224
 1322              		.loc 1 405 9 is_stmt 0 view .LVU225
 1323 0004 0122     		movs	r2, #1
 1324 0006 1D20     		movs	r0, #29
 1325              	.LVL108:
 1326              		.loc 1 405 9 view .LVU226
 1327 0008 FFF7FEFF 		bl	read
 1328              	.LVL109:
 406:Core/Src/AB1815.c **** }
 1329              		.loc 1 406 1 view .LVU227
 1330              		@ sp needed
 1331 000c 10BD     		pop	{r4, pc}
 1332              		.cfi_endproc
 1333              	.LFE461:
 1335              		.section	.text.set_configuration_key,"ax",%progbits
 1336              		.align	1
 1337              		.global	set_configuration_key
 1338              		.syntax unified
 1339              		.code	16
 1340              		.thumb_func
 1342              	set_configuration_key:
 1343              	.LVL110:
 1344              	.LFB462:
 407:Core/Src/AB1815.c **** 
 408:Core/Src/AB1815.c **** // 0x1E - Nothing on the AB1815
 409:Core/Src/AB1815.c **** // 0x1F
 410:Core/Src/AB1815.c **** bool set_configuration_key(configuration_key_e configuration_key)
 411:Core/Src/AB1815.c **** {
 1345              		.loc 1 411 1 is_stmt 1 view -0
 1346              		.cfi_startproc
 1347              		@ args = 0, pretend = 0, frame = 8
 1348              		@ frame_needed = 0, uses_anonymous_args = 0
 1349              		.loc 1 411 1 is_stmt 0 view .LVU229
 1350 0000 00B5     		push	{lr}
 1351              	.LCFI37:
 1352              		.cfi_def_cfa_offset 4
 1353              		.cfi_offset 14, -4
 1354 0002 83B0     		sub	sp, sp, #12
 1355              	.LCFI38:
 1356              		.cfi_def_cfa_offset 16
 1357 0004 6B46     		mov	r3, sp
 1358 0006 D91D     		adds	r1, r3, #7
 1359 0008 0870     		strb	r0, [r1]
 412:Core/Src/AB1815.c **** 	return write(AB1815_REG_CONFIGURATION_KEY, (uint8_t *)&configuration_key, 1);
 1360              		.loc 1 412 2 is_stmt 1 view .LVU230
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 31


 1361              		.loc 1 412 9 is_stmt 0 view .LVU231
 1362 000a 0122     		movs	r2, #1
 1363 000c 1F20     		movs	r0, #31
 1364              	.LVL111:
 1365              		.loc 1 412 9 view .LVU232
 1366 000e FFF7FEFF 		bl	write
 1367              	.LVL112:
 413:Core/Src/AB1815.c **** };
 1368              		.loc 1 413 1 view .LVU233
 1369 0012 03B0     		add	sp, sp, #12
 1370              		@ sp needed
 1371 0014 00BD     		pop	{pc}
 1372              		.cfi_endproc
 1373              	.LFE462:
 1375              		.section	.text.set_oscillator_control,"ax",%progbits
 1376              		.align	1
 1377              		.global	set_oscillator_control
 1378              		.syntax unified
 1379              		.code	16
 1380              		.thumb_func
 1382              	set_oscillator_control:
 1383              	.LVL113:
 1384              	.LFB459:
 389:Core/Src/AB1815.c **** 	if (set_configuration_key(ab1815_oscillator_control) != ab1815_status_e_OK)
 1385              		.loc 1 389 1 is_stmt 1 view -0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 389:Core/Src/AB1815.c **** 	if (set_configuration_key(ab1815_oscillator_control) != ab1815_status_e_OK)
 1389              		.loc 1 389 1 is_stmt 0 view .LVU235
 1390 0000 10B5     		push	{r4, lr}
 1391              	.LCFI39:
 1392              		.cfi_def_cfa_offset 8
 1393              		.cfi_offset 4, -8
 1394              		.cfi_offset 14, -4
 1395 0002 0400     		movs	r4, r0
 390:Core/Src/AB1815.c **** 	{
 1396              		.loc 1 390 2 is_stmt 1 view .LVU236
 390:Core/Src/AB1815.c **** 	{
 1397              		.loc 1 390 6 is_stmt 0 view .LVU237
 1398 0004 A120     		movs	r0, #161
 1399              	.LVL114:
 390:Core/Src/AB1815.c **** 	{
 1400              		.loc 1 390 6 view .LVU238
 1401 0006 FFF7FEFF 		bl	set_configuration_key
 1402              	.LVL115:
 390:Core/Src/AB1815.c **** 	{
 1403              		.loc 1 390 55 view .LVU239
 1404 000a 064B     		ldr	r3, .L54
 1405 000c 1B78     		ldrb	r3, [r3]
 390:Core/Src/AB1815.c **** 	{
 1406              		.loc 1 390 5 view .LVU240
 1407 000e 9842     		cmp	r0, r3
 1408 0010 02D0     		beq	.L52
 392:Core/Src/AB1815.c **** 	}
 1409              		.loc 1 392 3 is_stmt 1 view .LVU241
 392:Core/Src/AB1815.c **** 	}
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 32


 1410              		.loc 1 392 10 is_stmt 0 view .LVU242
 1411 0012 054B     		ldr	r3, .L54+4
 1412 0014 1878     		ldrb	r0, [r3]
 1413              	.L53:
 395:Core/Src/AB1815.c **** 
 1414              		.loc 1 395 1 view .LVU243
 1415              		@ sp needed
 1416              	.LVL116:
 395:Core/Src/AB1815.c **** 
 1417              		.loc 1 395 1 view .LVU244
 1418 0016 10BD     		pop	{r4, pc}
 1419              	.LVL117:
 1420              	.L52:
 394:Core/Src/AB1815.c **** };
 1421              		.loc 1 394 2 is_stmt 1 view .LVU245
 394:Core/Src/AB1815.c **** };
 1422              		.loc 1 394 9 is_stmt 0 view .LVU246
 1423 0018 0122     		movs	r2, #1
 1424 001a 2100     		movs	r1, r4
 1425 001c 1C20     		movs	r0, #28
 1426 001e FFF7FEFF 		bl	write
 1427              	.LVL118:
 1428 0022 F8E7     		b	.L53
 1429              	.L55:
 1430              		.align	2
 1431              	.L54:
 1432 0024 00000000 		.word	ab1815_status_e_OK
 1433 0028 00000000 		.word	ab1815_status_e_ERROR
 1434              		.cfi_endproc
 1435              	.LFE459:
 1437              		.section	.text.set_trickle,"ax",%progbits
 1438              		.align	1
 1439              		.global	set_trickle
 1440              		.syntax unified
 1441              		.code	16
 1442              		.thumb_func
 1444              	set_trickle:
 1445              	.LVL119:
 1446              	.LFB463:
 414:Core/Src/AB1815.c **** 
 415:Core/Src/AB1815.c **** // 0x20
 416:Core/Src/AB1815.c **** bool set_trickle(trickle_t *trickle)
 417:Core/Src/AB1815.c **** {
 1447              		.loc 1 417 1 is_stmt 1 view -0
 1448              		.cfi_startproc
 1449              		@ args = 0, pretend = 0, frame = 0
 1450              		@ frame_needed = 0, uses_anonymous_args = 0
 1451              		.loc 1 417 1 is_stmt 0 view .LVU248
 1452 0000 10B5     		push	{r4, lr}
 1453              	.LCFI40:
 1454              		.cfi_def_cfa_offset 8
 1455              		.cfi_offset 4, -8
 1456              		.cfi_offset 14, -4
 1457 0002 0100     		movs	r1, r0
 418:Core/Src/AB1815.c **** 	return write(AB1815_REG_TRICKLE_CONTROL, &trickle->value, 1);
 1458              		.loc 1 418 2 is_stmt 1 view .LVU249
 1459              		.loc 1 418 9 is_stmt 0 view .LVU250
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 33


 1460 0004 0122     		movs	r2, #1
 1461 0006 2020     		movs	r0, #32
 1462              	.LVL120:
 1463              		.loc 1 418 9 view .LVU251
 1464 0008 FFF7FEFF 		bl	write
 1465              	.LVL121:
 419:Core/Src/AB1815.c **** }
 1466              		.loc 1 419 1 view .LVU252
 1467              		@ sp needed
 1468 000c 10BD     		pop	{r4, pc}
 1469              		.cfi_endproc
 1470              	.LFE463:
 1472              		.section	.text.get_trickle,"ax",%progbits
 1473              		.align	1
 1474              		.global	get_trickle
 1475              		.syntax unified
 1476              		.code	16
 1477              		.thumb_func
 1479              	get_trickle:
 1480              	.LVL122:
 1481              	.LFB464:
 420:Core/Src/AB1815.c **** 
 421:Core/Src/AB1815.c **** bool get_trickle(trickle_t *trickle)
 422:Core/Src/AB1815.c **** {
 1482              		.loc 1 422 1 is_stmt 1 view -0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 0
 1485              		@ frame_needed = 0, uses_anonymous_args = 0
 1486              		.loc 1 422 1 is_stmt 0 view .LVU254
 1487 0000 10B5     		push	{r4, lr}
 1488              	.LCFI41:
 1489              		.cfi_def_cfa_offset 8
 1490              		.cfi_offset 4, -8
 1491              		.cfi_offset 14, -4
 1492 0002 0100     		movs	r1, r0
 423:Core/Src/AB1815.c **** 	return read(AB1815_REG_TRICKLE_CONTROL, &trickle->value, 1);
 1493              		.loc 1 423 2 is_stmt 1 view .LVU255
 1494              		.loc 1 423 9 is_stmt 0 view .LVU256
 1495 0004 0122     		movs	r2, #1
 1496 0006 2020     		movs	r0, #32
 1497              	.LVL123:
 1498              		.loc 1 423 9 view .LVU257
 1499 0008 FFF7FEFF 		bl	read
 1500              	.LVL124:
 424:Core/Src/AB1815.c **** }
 1501              		.loc 1 424 1 view .LVU258
 1502              		@ sp needed
 1503 000c 10BD     		pop	{r4, pc}
 1504              		.cfi_endproc
 1505              	.LFE464:
 1507              		.section	.text.set_bref_control,"ax",%progbits
 1508              		.align	1
 1509              		.global	set_bref_control
 1510              		.syntax unified
 1511              		.code	16
 1512              		.thumb_func
 1514              	set_bref_control:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 34


 1515              	.LVL125:
 1516              	.LFB465:
 425:Core/Src/AB1815.c **** 
 426:Core/Src/AB1815.c **** // 0x21
 427:Core/Src/AB1815.c **** bool set_bref_control(bref_control_t *bref_control)
 428:Core/Src/AB1815.c **** {
 1517              		.loc 1 428 1 is_stmt 1 view -0
 1518              		.cfi_startproc
 1519              		@ args = 0, pretend = 0, frame = 0
 1520              		@ frame_needed = 0, uses_anonymous_args = 0
 1521              		.loc 1 428 1 is_stmt 0 view .LVU260
 1522 0000 10B5     		push	{r4, lr}
 1523              	.LCFI42:
 1524              		.cfi_def_cfa_offset 8
 1525              		.cfi_offset 4, -8
 1526              		.cfi_offset 14, -4
 1527 0002 0100     		movs	r1, r0
 429:Core/Src/AB1815.c **** 	return write(AB1815_REG_BREF_CONTROL, &bref_control->value, 1);
 1528              		.loc 1 429 2 is_stmt 1 view .LVU261
 1529              		.loc 1 429 9 is_stmt 0 view .LVU262
 1530 0004 0122     		movs	r2, #1
 1531 0006 2120     		movs	r0, #33
 1532              	.LVL126:
 1533              		.loc 1 429 9 view .LVU263
 1534 0008 FFF7FEFF 		bl	write
 1535              	.LVL127:
 430:Core/Src/AB1815.c **** }
 1536              		.loc 1 430 1 view .LVU264
 1537              		@ sp needed
 1538 000c 10BD     		pop	{r4, pc}
 1539              		.cfi_endproc
 1540              	.LFE465:
 1542              		.section	.text.get_bref_control,"ax",%progbits
 1543              		.align	1
 1544              		.global	get_bref_control
 1545              		.syntax unified
 1546              		.code	16
 1547              		.thumb_func
 1549              	get_bref_control:
 1550              	.LVL128:
 1551              	.LFB466:
 431:Core/Src/AB1815.c **** 
 432:Core/Src/AB1815.c **** bool get_bref_control(bref_control_t *bref_control)
 433:Core/Src/AB1815.c **** {
 1552              		.loc 1 433 1 is_stmt 1 view -0
 1553              		.cfi_startproc
 1554              		@ args = 0, pretend = 0, frame = 0
 1555              		@ frame_needed = 0, uses_anonymous_args = 0
 1556              		.loc 1 433 1 is_stmt 0 view .LVU266
 1557 0000 10B5     		push	{r4, lr}
 1558              	.LCFI43:
 1559              		.cfi_def_cfa_offset 8
 1560              		.cfi_offset 4, -8
 1561              		.cfi_offset 14, -4
 1562 0002 0100     		movs	r1, r0
 434:Core/Src/AB1815.c **** 	return read(AB1815_REG_BREF_CONTROL, &bref_control->value, 1);
 1563              		.loc 1 434 2 is_stmt 1 view .LVU267
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 35


 1564              		.loc 1 434 9 is_stmt 0 view .LVU268
 1565 0004 0122     		movs	r2, #1
 1566 0006 2120     		movs	r0, #33
 1567              	.LVL129:
 1568              		.loc 1 434 9 view .LVU269
 1569 0008 FFF7FEFF 		bl	read
 1570              	.LVL130:
 435:Core/Src/AB1815.c **** }
 1571              		.loc 1 435 1 view .LVU270
 1572              		@ sp needed
 1573 000c 10BD     		pop	{r4, pc}
 1574              		.cfi_endproc
 1575              	.LFE466:
 1577              		.section	.text.set_afctrl,"ax",%progbits
 1578              		.align	1
 1579              		.global	set_afctrl
 1580              		.syntax unified
 1581              		.code	16
 1582              		.thumb_func
 1584              	set_afctrl:
 1585              	.LVL131:
 1586              	.LFB467:
 436:Core/Src/AB1815.c **** 
 437:Core/Src/AB1815.c **** // 0x26
 438:Core/Src/AB1815.c **** bool set_afctrl(afctrl_e afctrl)
 439:Core/Src/AB1815.c **** {
 1587              		.loc 1 439 1 is_stmt 1 view -0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 8
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
 1591              		.loc 1 439 1 is_stmt 0 view .LVU272
 1592 0000 00B5     		push	{lr}
 1593              	.LCFI44:
 1594              		.cfi_def_cfa_offset 4
 1595              		.cfi_offset 14, -4
 1596 0002 83B0     		sub	sp, sp, #12
 1597              	.LCFI45:
 1598              		.cfi_def_cfa_offset 16
 1599 0004 6B46     		mov	r3, sp
 1600 0006 D91D     		adds	r1, r3, #7
 1601 0008 0870     		strb	r0, [r1]
 440:Core/Src/AB1815.c **** 	return write(AB1815_REG_AFCTRL, (uint8_t *)&afctrl, 1);
 1602              		.loc 1 440 2 is_stmt 1 view .LVU273
 1603              		.loc 1 440 9 is_stmt 0 view .LVU274
 1604 000a 0122     		movs	r2, #1
 1605 000c 2620     		movs	r0, #38
 1606              	.LVL132:
 1607              		.loc 1 440 9 view .LVU275
 1608 000e FFF7FEFF 		bl	write
 1609              	.LVL133:
 441:Core/Src/AB1815.c **** }
 1610              		.loc 1 441 1 view .LVU276
 1611 0012 03B0     		add	sp, sp, #12
 1612              		@ sp needed
 1613 0014 00BD     		pop	{pc}
 1614              		.cfi_endproc
 1615              	.LFE467:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 36


 1617              		.section	.text.get_,"ax",%progbits
 1618              		.align	1
 1619              		.global	get_
 1620              		.syntax unified
 1621              		.code	16
 1622              		.thumb_func
 1624              	get_:
 1625              	.LVL134:
 1626              	.LFB468:
 442:Core/Src/AB1815.c **** 
 443:Core/Src/AB1815.c **** bool get_(afctrl_e *afctrl)
 444:Core/Src/AB1815.c **** {
 1627              		.loc 1 444 1 is_stmt 1 view -0
 1628              		.cfi_startproc
 1629              		@ args = 0, pretend = 0, frame = 0
 1630              		@ frame_needed = 0, uses_anonymous_args = 0
 1631              		.loc 1 444 1 is_stmt 0 view .LVU278
 1632 0000 10B5     		push	{r4, lr}
 1633              	.LCFI46:
 1634              		.cfi_def_cfa_offset 8
 1635              		.cfi_offset 4, -8
 1636              		.cfi_offset 14, -4
 1637 0002 0100     		movs	r1, r0
 445:Core/Src/AB1815.c **** 	return read(AB1815_REG_AFCTRL, (uint8_t *)afctrl, 1);
 1638              		.loc 1 445 2 is_stmt 1 view .LVU279
 1639              		.loc 1 445 9 is_stmt 0 view .LVU280
 1640 0004 0122     		movs	r2, #1
 1641 0006 2620     		movs	r0, #38
 1642              	.LVL135:
 1643              		.loc 1 445 9 view .LVU281
 1644 0008 FFF7FEFF 		bl	read
 1645              	.LVL136:
 446:Core/Src/AB1815.c **** }
 1646              		.loc 1 446 1 view .LVU282
 1647              		@ sp needed
 1648 000c 10BD     		pop	{r4, pc}
 1649              		.cfi_endproc
 1650              	.LFE468:
 1652              		.section	.text.set_batmodeio,"ax",%progbits
 1653              		.align	1
 1654              		.global	set_batmodeio
 1655              		.syntax unified
 1656              		.code	16
 1657              		.thumb_func
 1659              	set_batmodeio:
 1660              	.LVL137:
 1661              	.LFB469:
 447:Core/Src/AB1815.c **** 
 448:Core/Src/AB1815.c **** // 0x27
 449:Core/Src/AB1815.c **** bool set_batmodeio(ab1815_batmodeio_e mode)
 450:Core/Src/AB1815.c **** {
 1662              		.loc 1 450 1 is_stmt 1 view -0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 8
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 1666              		.loc 1 450 1 is_stmt 0 view .LVU284
 1667 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 37


 1668              	.LCFI47:
 1669              		.cfi_def_cfa_offset 8
 1670              		.cfi_offset 4, -8
 1671              		.cfi_offset 14, -4
 1672 0002 82B0     		sub	sp, sp, #8
 1673              	.LCFI48:
 1674              		.cfi_def_cfa_offset 16
 1675 0004 0400     		movs	r4, r0
 451:Core/Src/AB1815.c **** 	if (set_configuration_key(ab1815_reg_control) != ab1815_status_e_OK)
 1676              		.loc 1 451 2 is_stmt 1 view .LVU285
 1677              		.loc 1 451 6 is_stmt 0 view .LVU286
 1678 0006 9D20     		movs	r0, #157
 1679              	.LVL138:
 1680              		.loc 1 451 6 view .LVU287
 1681 0008 FFF7FEFF 		bl	set_configuration_key
 1682              	.LVL139:
 1683              		.loc 1 451 48 view .LVU288
 1684 000c 074B     		ldr	r3, .L65
 1685 000e 1B78     		ldrb	r3, [r3]
 1686              		.loc 1 451 5 view .LVU289
 1687 0010 9842     		cmp	r0, r3
 1688 0012 03D0     		beq	.L63
 452:Core/Src/AB1815.c **** 	{
 453:Core/Src/AB1815.c **** 		return ab1815_status_e_ERROR;
 1689              		.loc 1 453 3 is_stmt 1 view .LVU290
 1690              		.loc 1 453 10 is_stmt 0 view .LVU291
 1691 0014 064B     		ldr	r3, .L65+4
 1692 0016 1878     		ldrb	r0, [r3]
 1693              	.L64:
 454:Core/Src/AB1815.c **** 	}
 455:Core/Src/AB1815.c **** 	uint8_t buf[1];
 456:Core/Src/AB1815.c **** 	buf[0] = mode;
 457:Core/Src/AB1815.c **** 	return write(AB1815_REG_BATMODE_IO, buf, 1);
 458:Core/Src/AB1815.c **** };
 1694              		.loc 1 458 1 view .LVU292
 1695 0018 02B0     		add	sp, sp, #8
 1696              		@ sp needed
 1697 001a 10BD     		pop	{r4, pc}
 1698              	.L63:
 455:Core/Src/AB1815.c **** 	buf[0] = mode;
 1699              		.loc 1 455 2 is_stmt 1 view .LVU293
 456:Core/Src/AB1815.c **** 	return write(AB1815_REG_BATMODE_IO, buf, 1);
 1700              		.loc 1 456 2 view .LVU294
 456:Core/Src/AB1815.c **** 	return write(AB1815_REG_BATMODE_IO, buf, 1);
 1701              		.loc 1 456 9 is_stmt 0 view .LVU295
 1702 001c 01A9     		add	r1, sp, #4
 1703 001e 0C70     		strb	r4, [r1]
 457:Core/Src/AB1815.c **** };
 1704              		.loc 1 457 2 is_stmt 1 view .LVU296
 457:Core/Src/AB1815.c **** };
 1705              		.loc 1 457 9 is_stmt 0 view .LVU297
 1706 0020 0122     		movs	r2, #1
 1707 0022 2720     		movs	r0, #39
 1708 0024 FFF7FEFF 		bl	write
 1709              	.LVL140:
 1710 0028 F6E7     		b	.L64
 1711              	.L66:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 38


 1712 002a C046     		.align	2
 1713              	.L65:
 1714 002c 00000000 		.word	ab1815_status_e_OK
 1715 0030 00000000 		.word	ab1815_status_e_ERROR
 1716              		.cfi_endproc
 1717              	.LFE469:
 1719              		.section	.text.get_batmodeio,"ax",%progbits
 1720              		.align	1
 1721              		.global	get_batmodeio
 1722              		.syntax unified
 1723              		.code	16
 1724              		.thumb_func
 1726              	get_batmodeio:
 1727              	.LVL141:
 1728              	.LFB470:
 459:Core/Src/AB1815.c **** 
 460:Core/Src/AB1815.c **** bool get_batmodeio(ab1815_batmodeio_e *mode)
 461:Core/Src/AB1815.c **** {
 1729              		.loc 1 461 1 is_stmt 1 view -0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 0
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 1733              		.loc 1 461 1 is_stmt 0 view .LVU299
 1734 0000 10B5     		push	{r4, lr}
 1735              	.LCFI49:
 1736              		.cfi_def_cfa_offset 8
 1737              		.cfi_offset 4, -8
 1738              		.cfi_offset 14, -4
 1739 0002 0100     		movs	r1, r0
 462:Core/Src/AB1815.c **** 	return read(AB1815_REG_BATMODE_IO, (uint8_t *)mode, 1);
 1740              		.loc 1 462 2 is_stmt 1 view .LVU300
 1741              		.loc 1 462 9 is_stmt 0 view .LVU301
 1742 0004 0122     		movs	r2, #1
 1743 0006 2720     		movs	r0, #39
 1744              	.LVL142:
 1745              		.loc 1 462 9 view .LVU302
 1746 0008 FFF7FEFF 		bl	read
 1747              	.LVL143:
 463:Core/Src/AB1815.c **** }
 1748              		.loc 1 463 1 view .LVU303
 1749              		@ sp needed
 1750 000c 10BD     		pop	{r4, pc}
 1751              		.cfi_endproc
 1752              	.LFE470:
 1754              		.section	.text.get_id,"ax",%progbits
 1755              		.align	1
 1756              		.global	get_id
 1757              		.syntax unified
 1758              		.code	16
 1759              		.thumb_func
 1761              	get_id:
 1762              	.LVL144:
 1763              	.LFB471:
 464:Core/Src/AB1815.c **** 
 465:Core/Src/AB1815.c **** // 0x28
 466:Core/Src/AB1815.c **** bool get_id(ab1815_id_t *id)
 467:Core/Src/AB1815.c **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 39


 1764              		.loc 1 467 1 is_stmt 1 view -0
 1765              		.cfi_startproc
 1766              		@ args = 0, pretend = 0, frame = 8
 1767              		@ frame_needed = 0, uses_anonymous_args = 0
 1768              		.loc 1 467 1 is_stmt 0 view .LVU305
 1769 0000 30B5     		push	{r4, r5, lr}
 1770              	.LCFI50:
 1771              		.cfi_def_cfa_offset 12
 1772              		.cfi_offset 4, -12
 1773              		.cfi_offset 5, -8
 1774              		.cfi_offset 14, -4
 1775 0002 83B0     		sub	sp, sp, #12
 1776              	.LCFI51:
 1777              		.cfi_def_cfa_offset 24
 1778 0004 0400     		movs	r4, r0
 468:Core/Src/AB1815.c **** 	size_t length = AB1815_REG_ID6 - AB1815_REG_ID0;
 1779              		.loc 1 468 2 is_stmt 1 view .LVU306
 1780              	.LVL145:
 469:Core/Src/AB1815.c **** 	uint8_t buffer[length];
 1781              		.loc 1 469 2 view .LVU307
 470:Core/Src/AB1815.c **** 	memset(buffer, 0, length);
 1782              		.loc 1 470 2 view .LVU308
 1783 0006 0622     		movs	r2, #6
 1784 0008 0021     		movs	r1, #0
 1785 000a 6846     		mov	r0, sp
 1786              	.LVL146:
 1787              		.loc 1 470 2 is_stmt 0 view .LVU309
 1788 000c FFF7FEFF 		bl	memset
 1789              	.LVL147:
 471:Core/Src/AB1815.c **** 	bool result = ab1815_status_e_ERROR;
 1790              		.loc 1 471 2 is_stmt 1 view .LVU310
 472:Core/Src/AB1815.c **** 
 473:Core/Src/AB1815.c **** 	result = read(AB1815_REG_ID0, buffer, length);
 1791              		.loc 1 473 2 view .LVU311
 1792              		.loc 1 473 11 is_stmt 0 view .LVU312
 1793 0010 0622     		movs	r2, #6
 1794 0012 6946     		mov	r1, sp
 1795 0014 2820     		movs	r0, #40
 1796 0016 FFF7FEFF 		bl	read
 1797              	.LVL148:
 474:Core/Src/AB1815.c **** 	if (result == ab1815_status_e_OK)
 1798              		.loc 1 474 2 is_stmt 1 view .LVU313
 1799              		.loc 1 474 13 is_stmt 0 view .LVU314
 1800 001a 234B     		ldr	r3, .L71
 1801 001c 1B78     		ldrb	r3, [r3]
 1802              		.loc 1 474 5 view .LVU315
 1803 001e 8342     		cmp	r3, r0
 1804 0020 01D0     		beq	.L70
 1805              	.L69:
 475:Core/Src/AB1815.c **** 	{
 476:Core/Src/AB1815.c **** 		id->ID0 = bcd2bin(buffer[0]);
 477:Core/Src/AB1815.c **** 		id->ID1 = bcd2bin(buffer[1]);
 478:Core/Src/AB1815.c **** 		id->ID2.value = buffer[2];
 479:Core/Src/AB1815.c **** 		id->ID3 = bcd2bin(buffer[3]);
 480:Core/Src/AB1815.c **** 		id->ID4 = bcd2bin(buffer[4]);
 481:Core/Src/AB1815.c **** 		id->ID5 = bcd2bin(buffer[5]);
 482:Core/Src/AB1815.c **** 		id->ID6 = bcd2bin(buffer[6]);
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 40


 483:Core/Src/AB1815.c **** 	}
 484:Core/Src/AB1815.c **** 
 485:Core/Src/AB1815.c **** 	return result;
 1806              		.loc 1 485 2 is_stmt 1 view .LVU316
 486:Core/Src/AB1815.c **** };
 1807              		.loc 1 486 1 is_stmt 0 view .LVU317
 1808 0022 03B0     		add	sp, sp, #12
 1809              	.LVL149:
 1810              		.loc 1 486 1 view .LVU318
 1811              		@ sp needed
 1812              	.LVL150:
 1813              		.loc 1 486 1 view .LVU319
 1814 0024 30BD     		pop	{r4, r5, pc}
 1815              	.LVL151:
 1816              	.L70:
 476:Core/Src/AB1815.c **** 		id->ID1 = bcd2bin(buffer[1]);
 1817              		.loc 1 476 3 is_stmt 1 view .LVU320
 476:Core/Src/AB1815.c **** 		id->ID1 = bcd2bin(buffer[1]);
 1818              		.loc 1 476 13 is_stmt 0 view .LVU321
 1819 0026 6B46     		mov	r3, sp
 1820 0028 1A78     		ldrb	r2, [r3]
 1821              	.LVL152:
 1822              	.LBB14:
 1823              	.LBI14:
 1824              		.file 2 "Core\\Inc/AB1815_A.h"
   1:Core\Inc/AB1815_A.h **** /**
   2:Core\Inc/AB1815_A.h ****  *     An Abracon AB18X5 Real-Time Clock library for Arduino
   3:Core\Inc/AB1815_A.h ****  *     Copyright (C) 2015 NigelB
   4:Core\Inc/AB1815_A.h ****  *
   5:Core\Inc/AB1815_A.h ****  *     This program is free software; you can redistribute it and/or modify
   6:Core\Inc/AB1815_A.h ****  *     it under the terms of the GNU General Public License as published by
   7:Core\Inc/AB1815_A.h ****  *     the Free Software Foundation; either version 2 of the License, or
   8:Core\Inc/AB1815_A.h ****  *     (at your option) any later version.
   9:Core\Inc/AB1815_A.h ****  *
  10:Core\Inc/AB1815_A.h ****  *     This program is distributed in the hope that it will be useful,
  11:Core\Inc/AB1815_A.h ****  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:Core\Inc/AB1815_A.h ****  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:Core\Inc/AB1815_A.h ****  *     GNU General Public License for more details.
  14:Core\Inc/AB1815_A.h ****  *
  15:Core\Inc/AB1815_A.h ****  *     You should have received a copy of the GNU General Public License along
  16:Core\Inc/AB1815_A.h ****  *     with this program; if not, write to the Free Software Foundation, Inc.,
  17:Core\Inc/AB1815_A.h ****  *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  18:Core\Inc/AB1815_A.h ****  **/
  19:Core\Inc/AB1815_A.h **** 
  20:Core\Inc/AB1815_A.h **** #ifndef AB1815_H_
  21:Core\Inc/AB1815_A.h **** #define AB1815_H_
  22:Core\Inc/AB1815_A.h **** 
  23:Core\Inc/AB1815_A.h **** #include "AB1815_registers.h"
  24:Core\Inc/AB1815_A.h **** #include <stdbool.h>
  25:Core\Inc/AB1815_A.h **** #include <Time.h>
  26:Core\Inc/AB1815_A.h **** 
  27:Core\Inc/AB1815_A.h **** // Base structure representing time elements
  28:Core\Inc/AB1815_A.h **** typedef struct
  29:Core\Inc/AB1815_A.h **** {
  30:Core\Inc/AB1815_A.h **** 	uint8_t Second;
  31:Core\Inc/AB1815_A.h **** 	uint8_t Minute;
  32:Core\Inc/AB1815_A.h **** 	uint8_t Hour;
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 41


  33:Core\Inc/AB1815_A.h **** 	uint8_t Wday; // day of week, sunday is day 1
  34:Core\Inc/AB1815_A.h **** 	uint8_t Day;
  35:Core\Inc/AB1815_A.h **** 	uint8_t Month;
  36:Core\Inc/AB1815_A.h **** 	uint8_t Year; // offset from 1970;
  37:Core\Inc/AB1815_A.h **** } tmElements_t;
  38:Core\Inc/AB1815_A.h **** 
  39:Core\Inc/AB1815_A.h **** // Extended structure that includes base structure and adds a new member
  40:Core\Inc/AB1815_A.h **** typedef struct
  41:Core\Inc/AB1815_A.h **** {
  42:Core\Inc/AB1815_A.h **** 	uint8_t Second;
  43:Core\Inc/AB1815_A.h **** 	uint8_t Minute;
  44:Core\Inc/AB1815_A.h **** 	uint8_t Hour;
  45:Core\Inc/AB1815_A.h **** 	uint8_t Wday; // day of week, sunday is day 1
  46:Core\Inc/AB1815_A.h **** 	uint8_t Day;
  47:Core\Inc/AB1815_A.h **** 	uint8_t Month;
  48:Core\Inc/AB1815_A.h **** 	uint8_t Year; // offset from 1970;
  49:Core\Inc/AB1815_A.h **** 	uint8_t Hundredth;
  50:Core\Inc/AB1815_A.h **** } ab1815_tmElements_t;
  51:Core\Inc/AB1815_A.h **** 
  52:Core\Inc/AB1815_A.h **** // 0x0F
  53:Core\Inc/AB1815_A.h **** typedef struct
  54:Core\Inc/AB1815_A.h **** {
  55:Core\Inc/AB1815_A.h **** 	union
  56:Core\Inc/AB1815_A.h **** 	{
  57:Core\Inc/AB1815_A.h **** 		uint8_t value;
  58:Core\Inc/AB1815_A.h **** 		struct
  59:Core\Inc/AB1815_A.h **** 		{
  60:Core\Inc/AB1815_A.h **** 			bool EX1 : 1;
  61:Core\Inc/AB1815_A.h **** 			bool EX2 : 1;
  62:Core\Inc/AB1815_A.h **** 			bool ALM : 1;
  63:Core\Inc/AB1815_A.h **** 			bool TIM : 1;
  64:Core\Inc/AB1815_A.h **** 			bool BL : 1;
  65:Core\Inc/AB1815_A.h **** 			bool WD_T : 1;
  66:Core\Inc/AB1815_A.h **** 			bool BAT : 1;
  67:Core\Inc/AB1815_A.h **** 			bool CB : 1;
  68:Core\Inc/AB1815_A.h **** 		} fields;
  69:Core\Inc/AB1815_A.h **** 	};
  70:Core\Inc/AB1815_A.h **** } status_t;
  71:Core\Inc/AB1815_A.h **** 
  72:Core\Inc/AB1815_A.h **** // 0x10
  73:Core\Inc/AB1815_A.h **** typedef struct
  74:Core\Inc/AB1815_A.h **** {
  75:Core\Inc/AB1815_A.h **** 	union
  76:Core\Inc/AB1815_A.h **** 	{
  77:Core\Inc/AB1815_A.h **** 		uint8_t value;
  78:Core\Inc/AB1815_A.h **** 		struct
  79:Core\Inc/AB1815_A.h **** 		{
  80:Core\Inc/AB1815_A.h **** 			bool WRTC : 1;
  81:Core\Inc/AB1815_A.h **** 			bool PWR2 : 1;
  82:Core\Inc/AB1815_A.h **** 			bool ARST : 1;
  83:Core\Inc/AB1815_A.h **** 			bool RSP : 1;
  84:Core\Inc/AB1815_A.h **** 			bool OUT : 1;
  85:Core\Inc/AB1815_A.h **** 			bool OUTB : 1;
  86:Core\Inc/AB1815_A.h **** 			bool _12_24 : 1;
  87:Core\Inc/AB1815_A.h **** 			bool STOP : 1;
  88:Core\Inc/AB1815_A.h **** 		} fields;
  89:Core\Inc/AB1815_A.h **** 	};
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 42


  90:Core\Inc/AB1815_A.h **** } control1_t;
  91:Core\Inc/AB1815_A.h **** 
  92:Core\Inc/AB1815_A.h **** // 0x11
  93:Core\Inc/AB1815_A.h **** typedef struct control2_t
  94:Core\Inc/AB1815_A.h **** {
  95:Core\Inc/AB1815_A.h **** 	union
  96:Core\Inc/AB1815_A.h **** 	{
  97:Core\Inc/AB1815_A.h **** 		uint8_t value;
  98:Core\Inc/AB1815_A.h **** 		struct
  99:Core\Inc/AB1815_A.h **** 		{
 100:Core\Inc/AB1815_A.h **** 			uint8_t OUT1S : 2;
 101:Core\Inc/AB1815_A.h **** 			uint8_t OUT2S : 3;
 102:Core\Inc/AB1815_A.h **** 			bool RS1E : 1;
 103:Core\Inc/AB1815_A.h **** 			bool PAD : 1;
 104:Core\Inc/AB1815_A.h **** 			bool OUTPP : 1;
 105:Core\Inc/AB1815_A.h **** 		} fields;
 106:Core\Inc/AB1815_A.h **** 	};
 107:Core\Inc/AB1815_A.h **** } control2_t;
 108:Core\Inc/AB1815_A.h **** 
 109:Core\Inc/AB1815_A.h **** // 0x12
 110:Core\Inc/AB1815_A.h **** typedef struct inturrupt_mask_t
 111:Core\Inc/AB1815_A.h **** {
 112:Core\Inc/AB1815_A.h **** 	union
 113:Core\Inc/AB1815_A.h **** 	{
 114:Core\Inc/AB1815_A.h **** 		uint8_t value;
 115:Core\Inc/AB1815_A.h **** 		struct
 116:Core\Inc/AB1815_A.h **** 		{
 117:Core\Inc/AB1815_A.h **** 			bool EX1E : 1;
 118:Core\Inc/AB1815_A.h **** 			bool EX2E : 1;
 119:Core\Inc/AB1815_A.h **** 			bool AIE : 1;
 120:Core\Inc/AB1815_A.h **** 			bool TIE : 1;
 121:Core\Inc/AB1815_A.h **** 			bool BLIE : 1;
 122:Core\Inc/AB1815_A.h **** 			uint8_t IM : 2;
 123:Core\Inc/AB1815_A.h **** 			bool CEB : 1;
 124:Core\Inc/AB1815_A.h **** 		} fields;
 125:Core\Inc/AB1815_A.h **** 	};
 126:Core\Inc/AB1815_A.h **** } inturrupt_mask_t;
 127:Core\Inc/AB1815_A.h **** 
 128:Core\Inc/AB1815_A.h **** // 0x13
 129:Core\Inc/AB1815_A.h **** typedef struct
 130:Core\Inc/AB1815_A.h **** {
 131:Core\Inc/AB1815_A.h **** 	union
 132:Core\Inc/AB1815_A.h **** 	{
 133:Core\Inc/AB1815_A.h **** 		uint8_t value;
 134:Core\Inc/AB1815_A.h **** 		struct
 135:Core\Inc/AB1815_A.h **** 		{
 136:Core\Inc/AB1815_A.h **** 			uint8_t SQFS : 5;
 137:Core\Inc/AB1815_A.h **** 			uint8_t PAD : 2;
 138:Core\Inc/AB1815_A.h **** 			bool SQWE : 1;
 139:Core\Inc/AB1815_A.h **** 		} fields;
 140:Core\Inc/AB1815_A.h **** 	};
 141:Core\Inc/AB1815_A.h **** } square_wave_t;
 142:Core\Inc/AB1815_A.h **** 
 143:Core\Inc/AB1815_A.h **** // 0x14
 144:Core\Inc/AB1815_A.h **** typedef struct
 145:Core\Inc/AB1815_A.h **** {
 146:Core\Inc/AB1815_A.h **** 	union
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 43


 147:Core\Inc/AB1815_A.h **** 	{
 148:Core\Inc/AB1815_A.h **** 		uint8_t value;
 149:Core\Inc/AB1815_A.h **** 		struct
 150:Core\Inc/AB1815_A.h **** 		{
 151:Core\Inc/AB1815_A.h **** 			uint8_t OFFSETX : 7;
 152:Core\Inc/AB1815_A.h **** 			uint8_t CMDX : 1;
 153:Core\Inc/AB1815_A.h **** 		} fields;
 154:Core\Inc/AB1815_A.h **** 	};
 155:Core\Inc/AB1815_A.h **** } cal_xt_t;
 156:Core\Inc/AB1815_A.h **** 
 157:Core\Inc/AB1815_A.h **** // 0x15
 158:Core\Inc/AB1815_A.h **** typedef struct
 159:Core\Inc/AB1815_A.h **** {
 160:Core\Inc/AB1815_A.h **** 	union
 161:Core\Inc/AB1815_A.h **** 	{
 162:Core\Inc/AB1815_A.h **** 		uint8_t value;
 163:Core\Inc/AB1815_A.h **** 		struct
 164:Core\Inc/AB1815_A.h **** 		{
 165:Core\Inc/AB1815_A.h **** 			uint8_t OFFSETR : 6;
 166:Core\Inc/AB1815_A.h **** 			uint8_t CMDR : 2;
 167:Core\Inc/AB1815_A.h **** 		} fields;
 168:Core\Inc/AB1815_A.h **** 	};
 169:Core\Inc/AB1815_A.h **** } cal_rc_hi_t;
 170:Core\Inc/AB1815_A.h **** 
 171:Core\Inc/AB1815_A.h **** // 0x16
 172:Core\Inc/AB1815_A.h **** typedef struct
 173:Core\Inc/AB1815_A.h **** {
 174:Core\Inc/AB1815_A.h **** 	uint8_t OFFSETR;
 175:Core\Inc/AB1815_A.h **** } cal_rc_low_t;
 176:Core\Inc/AB1815_A.h **** 
 177:Core\Inc/AB1815_A.h **** // 0x17
 178:Core\Inc/AB1815_A.h **** typedef struct
 179:Core\Inc/AB1815_A.h **** {
 180:Core\Inc/AB1815_A.h **** 	union
 181:Core\Inc/AB1815_A.h **** 	{
 182:Core\Inc/AB1815_A.h **** 		uint8_t value;
 183:Core\Inc/AB1815_A.h **** 		struct
 184:Core\Inc/AB1815_A.h **** 		{
 185:Core\Inc/AB1815_A.h **** 			uint8_t SLTO : 3;
 186:Core\Inc/AB1815_A.h **** 			uint8_t SLST : 1;
 187:Core\Inc/AB1815_A.h **** 			uint8_t EX1P : 1;
 188:Core\Inc/AB1815_A.h **** 			uint8_t EX2P : 1;
 189:Core\Inc/AB1815_A.h **** 			uint8_t SLRES : 1;
 190:Core\Inc/AB1815_A.h **** 			uint8_t SLP : 1;
 191:Core\Inc/AB1815_A.h **** 		} fields;
 192:Core\Inc/AB1815_A.h **** 	};
 193:Core\Inc/AB1815_A.h **** } sleep_control_t;
 194:Core\Inc/AB1815_A.h **** 
 195:Core\Inc/AB1815_A.h **** // 0x18
 196:Core\Inc/AB1815_A.h **** typedef struct
 197:Core\Inc/AB1815_A.h **** {
 198:Core\Inc/AB1815_A.h **** 	union
 199:Core\Inc/AB1815_A.h **** 	{
 200:Core\Inc/AB1815_A.h **** 		uint8_t value;
 201:Core\Inc/AB1815_A.h **** 		struct
 202:Core\Inc/AB1815_A.h **** 		{
 203:Core\Inc/AB1815_A.h **** 			uint8_t TFS : 2;
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 44


 204:Core\Inc/AB1815_A.h **** 			uint8_t RPT : 3;
 205:Core\Inc/AB1815_A.h **** 			uint8_t TRPT : 1;
 206:Core\Inc/AB1815_A.h **** 			uint8_t TM : 1;
 207:Core\Inc/AB1815_A.h **** 			uint8_t TE : 1;
 208:Core\Inc/AB1815_A.h **** 		} fields;
 209:Core\Inc/AB1815_A.h **** 	};
 210:Core\Inc/AB1815_A.h **** } countdown_control_t;
 211:Core\Inc/AB1815_A.h **** // 0X19 - Countdown Timer - no struct
 212:Core\Inc/AB1815_A.h **** 
 213:Core\Inc/AB1815_A.h **** // 0x1A - Timer Initial Value - no struct
 214:Core\Inc/AB1815_A.h **** 
 215:Core\Inc/AB1815_A.h **** // 0x1B
 216:Core\Inc/AB1815_A.h **** typedef struct
 217:Core\Inc/AB1815_A.h **** {
 218:Core\Inc/AB1815_A.h **** 	union
 219:Core\Inc/AB1815_A.h **** 	{
 220:Core\Inc/AB1815_A.h **** 		uint8_t value;
 221:Core\Inc/AB1815_A.h **** 		struct
 222:Core\Inc/AB1815_A.h **** 		{
 223:Core\Inc/AB1815_A.h **** 			uint8_t WRB : 2;
 224:Core\Inc/AB1815_A.h **** 			uint8_t BMB : 5;
 225:Core\Inc/AB1815_A.h **** 			uint8_t WDS : 1;
 226:Core\Inc/AB1815_A.h **** 		} fields;
 227:Core\Inc/AB1815_A.h **** 	};
 228:Core\Inc/AB1815_A.h **** } watchdog_timer_t;
 229:Core\Inc/AB1815_A.h **** 
 230:Core\Inc/AB1815_A.h **** // 0x1C
 231:Core\Inc/AB1815_A.h **** 
 232:Core\Inc/AB1815_A.h **** typedef struct
 233:Core\Inc/AB1815_A.h **** {
 234:Core\Inc/AB1815_A.h **** 	union
 235:Core\Inc/AB1815_A.h **** 	{
 236:Core\Inc/AB1815_A.h **** 		uint8_t value;
 237:Core\Inc/AB1815_A.h **** 		struct
 238:Core\Inc/AB1815_A.h **** 		{
 239:Core\Inc/AB1815_A.h **** 			bool _ACIE : 1;
 240:Core\Inc/AB1815_A.h **** 			bool OFIE : 1;
 241:Core\Inc/AB1815_A.h **** 			bool PWGT : 1;
 242:Core\Inc/AB1815_A.h **** 			bool FOS : 1;
 243:Core\Inc/AB1815_A.h **** 			bool AOS : 1;
 244:Core\Inc/AB1815_A.h **** 			uint8_t ACAL : 2;
 245:Core\Inc/AB1815_A.h **** 			bool OSEL : 1;
 246:Core\Inc/AB1815_A.h **** 		} fields;
 247:Core\Inc/AB1815_A.h **** 	};
 248:Core\Inc/AB1815_A.h **** } oscillator_control_t;
 249:Core\Inc/AB1815_A.h **** 
 250:Core\Inc/AB1815_A.h **** // 0x1D
 251:Core\Inc/AB1815_A.h **** typedef struct
 252:Core\Inc/AB1815_A.h **** {
 253:Core\Inc/AB1815_A.h **** 	union
 254:Core\Inc/AB1815_A.h **** 	{
 255:Core\Inc/AB1815_A.h **** 		uint8_t value;
 256:Core\Inc/AB1815_A.h **** 		struct
 257:Core\Inc/AB1815_A.h **** 		{
 258:Core\Inc/AB1815_A.h **** 			bool ACF : 1;
 259:Core\Inc/AB1815_A.h **** 			bool OF : 1;
 260:Core\Inc/AB1815_A.h **** 			uint8_t RESERVED : 2;
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 45


 261:Core\Inc/AB1815_A.h **** 			bool OMODE : 1;
 262:Core\Inc/AB1815_A.h **** 			bool LKO2 : 1;
 263:Core\Inc/AB1815_A.h **** 			uint8_t XTCAL : 2;
 264:Core\Inc/AB1815_A.h **** 		} fields;
 265:Core\Inc/AB1815_A.h **** 	};
 266:Core\Inc/AB1815_A.h **** } oscillator_status_t;
 267:Core\Inc/AB1815_A.h **** 
 268:Core\Inc/AB1815_A.h **** // 0x1F - Configuration Key - See Enums below
 269:Core\Inc/AB1815_A.h **** 
 270:Core\Inc/AB1815_A.h **** // 0x20
 271:Core\Inc/AB1815_A.h **** typedef struct
 272:Core\Inc/AB1815_A.h **** {
 273:Core\Inc/AB1815_A.h **** 	union
 274:Core\Inc/AB1815_A.h **** 	{
 275:Core\Inc/AB1815_A.h **** 		uint8_t value;
 276:Core\Inc/AB1815_A.h **** 		struct
 277:Core\Inc/AB1815_A.h **** 		{
 278:Core\Inc/AB1815_A.h **** 			uint8_t ROUT : 2;
 279:Core\Inc/AB1815_A.h **** 			uint8_t DIODE : 2;
 280:Core\Inc/AB1815_A.h **** 			uint8_t TCS : 4;
 281:Core\Inc/AB1815_A.h **** 		} fields;
 282:Core\Inc/AB1815_A.h **** 	};
 283:Core\Inc/AB1815_A.h **** } trickle_t;
 284:Core\Inc/AB1815_A.h **** 
 285:Core\Inc/AB1815_A.h **** // 0x21
 286:Core\Inc/AB1815_A.h **** typedef struct
 287:Core\Inc/AB1815_A.h **** {
 288:Core\Inc/AB1815_A.h **** 	union
 289:Core\Inc/AB1815_A.h **** 	{
 290:Core\Inc/AB1815_A.h **** 		uint8_t value;
 291:Core\Inc/AB1815_A.h **** 		struct
 292:Core\Inc/AB1815_A.h **** 		{
 293:Core\Inc/AB1815_A.h **** 			uint8_t RESERVED : 4;
 294:Core\Inc/AB1815_A.h **** 			uint8_t BREF : 4;
 295:Core\Inc/AB1815_A.h **** 		} fields;
 296:Core\Inc/AB1815_A.h **** 	};
 297:Core\Inc/AB1815_A.h **** } bref_control_t;
 298:Core\Inc/AB1815_A.h **** 
 299:Core\Inc/AB1815_A.h **** // 0x26 – AFCTRL - See Enums below
 300:Core\Inc/AB1815_A.h **** 
 301:Core\Inc/AB1815_A.h **** // 0x27
 302:Core\Inc/AB1815_A.h **** typedef struct
 303:Core\Inc/AB1815_A.h **** {
 304:Core\Inc/AB1815_A.h **** 	union
 305:Core\Inc/AB1815_A.h **** 	{
 306:Core\Inc/AB1815_A.h **** 		uint8_t value;
 307:Core\Inc/AB1815_A.h **** 		struct
 308:Core\Inc/AB1815_A.h **** 		{
 309:Core\Inc/AB1815_A.h **** 			uint8_t RESERVED : 7; // Must only be 0b0000000
 310:Core\Inc/AB1815_A.h **** 			bool IOBM : 1;
 311:Core\Inc/AB1815_A.h **** 		} fields;
 312:Core\Inc/AB1815_A.h **** 	};
 313:Core\Inc/AB1815_A.h **** } battery_mode_io_t;
 314:Core\Inc/AB1815_A.h **** 
 315:Core\Inc/AB1815_A.h **** // 0x28
 316:Core\Inc/AB1815_A.h **** typedef struct
 317:Core\Inc/AB1815_A.h **** {
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 46


 318:Core\Inc/AB1815_A.h **** 	uint8_t ID0;
 319:Core\Inc/AB1815_A.h **** 	uint8_t ID1;
 320:Core\Inc/AB1815_A.h **** 	union ID2
 321:Core\Inc/AB1815_A.h **** 	{
 322:Core\Inc/AB1815_A.h **** 		uint8_t value;
 323:Core\Inc/AB1815_A.h **** 		struct
 324:Core\Inc/AB1815_A.h **** 		{
 325:Core\Inc/AB1815_A.h **** 			uint8_t MINOR : 3;
 326:Core\Inc/AB1815_A.h **** 			uint8_t MAJOR : 5;
 327:Core\Inc/AB1815_A.h **** 		} Revision;
 328:Core\Inc/AB1815_A.h **** 	} ID2;
 329:Core\Inc/AB1815_A.h **** 	uint8_t ID3;
 330:Core\Inc/AB1815_A.h **** 	uint8_t ID4;
 331:Core\Inc/AB1815_A.h **** 	uint8_t ID5;
 332:Core\Inc/AB1815_A.h **** 	uint8_t ID6;
 333:Core\Inc/AB1815_A.h **** } ab1815_id_t;
 334:Core\Inc/AB1815_A.h **** 
 335:Core\Inc/AB1815_A.h **** // 0x2F
 336:Core\Inc/AB1815_A.h **** typedef struct
 337:Core\Inc/AB1815_A.h **** {
 338:Core\Inc/AB1815_A.h **** 	union
 339:Core\Inc/AB1815_A.h **** 	{
 340:Core\Inc/AB1815_A.h **** 		uint8_t value;
 341:Core\Inc/AB1815_A.h **** 		struct
 342:Core\Inc/AB1815_A.h **** 		{
 343:Core\Inc/AB1815_A.h **** 			bool RESERVED : 1;
 344:Core\Inc/AB1815_A.h **** 			bool VINT : 1;
 345:Core\Inc/AB1815_A.h **** 			bool RESERVED_2 : 1;
 346:Core\Inc/AB1815_A.h **** 			bool BMIN : 1;
 347:Core\Inc/AB1815_A.h **** 			bool BMOD : 1;
 348:Core\Inc/AB1815_A.h **** 		} fields;
 349:Core\Inc/AB1815_A.h **** 	};
 350:Core\Inc/AB1815_A.h **** } ab1815_analog_status_t;
 351:Core\Inc/AB1815_A.h **** 
 352:Core\Inc/AB1815_A.h **** // 0x30
 353:Core\Inc/AB1815_A.h **** typedef struct
 354:Core\Inc/AB1815_A.h **** {
 355:Core\Inc/AB1815_A.h **** 	uint8_t value;
 356:Core\Inc/AB1815_A.h **** 	struct
 357:Core\Inc/AB1815_A.h **** 	{
 358:Core\Inc/AB1815_A.h **** 		uint8_t O1EN : 1;
 359:Core\Inc/AB1815_A.h **** 		uint8_t O3EN : 1;
 360:Core\Inc/AB1815_A.h **** 		uint8_t O4EN : 1;
 361:Core\Inc/AB1815_A.h **** 		uint8_t RSEN : 1;
 362:Core\Inc/AB1815_A.h **** 		uint8_t EXDS : 1;
 363:Core\Inc/AB1815_A.h **** 		uint8_t WDDS : 1;
 364:Core\Inc/AB1815_A.h **** 		uint8_t EXBM : 1;
 365:Core\Inc/AB1815_A.h **** 		uint8_t WDBM : 1;
 366:Core\Inc/AB1815_A.h **** 	} fields;
 367:Core\Inc/AB1815_A.h **** } ab1815_output_control_t;
 368:Core\Inc/AB1815_A.h **** 
 369:Core\Inc/AB1815_A.h **** // 0x3f
 370:Core\Inc/AB1815_A.h **** typedef struct
 371:Core\Inc/AB1815_A.h **** {
 372:Core\Inc/AB1815_A.h **** 	union
 373:Core\Inc/AB1815_A.h **** 	{
 374:Core\Inc/AB1815_A.h **** 		uint8_t value;
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 47


 375:Core\Inc/AB1815_A.h **** 		struct
 376:Core\Inc/AB1815_A.h **** 		{
 377:Core\Inc/AB1815_A.h **** 			uint8_t XADS : 2;
 378:Core\Inc/AB1815_A.h **** 			uint8_t XADA : 1;
 379:Core\Inc/AB1815_A.h **** 			uint8_t RSVD : 1;
 380:Core\Inc/AB1815_A.h **** 			uint8_t EXIN : 1;
 381:Core\Inc/AB1815_A.h **** 			uint8_t WDIN : 1;
 382:Core\Inc/AB1815_A.h **** 			uint8_t BPOL : 1;
 383:Core\Inc/AB1815_A.h **** 			uint8_t O4BM : 1;
 384:Core\Inc/AB1815_A.h **** 		} fields;
 385:Core\Inc/AB1815_A.h **** 	};
 386:Core\Inc/AB1815_A.h **** } extension_ram_t;
 387:Core\Inc/AB1815_A.h **** 
 388:Core\Inc/AB1815_A.h **** // 0x1F
 389:Core\Inc/AB1815_A.h **** 
 390:Core\Inc/AB1815_A.h **** typedef enum
 391:Core\Inc/AB1815_A.h **** {
 392:Core\Inc/AB1815_A.h **** 	ab1815_oscillator_control = 0xA1,
 393:Core\Inc/AB1815_A.h **** 	ab1815_software_reset = 0x3c,
 394:Core\Inc/AB1815_A.h **** 	ab1815_reg_control = 0x9D,
 395:Core\Inc/AB1815_A.h **** } configuration_key_e;
 396:Core\Inc/AB1815_A.h **** 
 397:Core\Inc/AB1815_A.h **** typedef enum
 398:Core\Inc/AB1815_A.h **** {
 399:Core\Inc/AB1815_A.h **** 	ab1815_clk_format_unset = 0,
 400:Core\Inc/AB1815_A.h **** 	ab1815_clk_format_12_hour = 1,
 401:Core\Inc/AB1815_A.h **** 	ab1815_clk_format_25_hour = 2
 402:Core\Inc/AB1815_A.h **** } ab1815_clk_format_e;
 403:Core\Inc/AB1815_A.h **** 
 404:Core\Inc/AB1815_A.h **** typedef enum
 405:Core\Inc/AB1815_A.h **** {
 406:Core\Inc/AB1815_A.h **** 	ab1815_interrupt_im_level = 0,
 407:Core\Inc/AB1815_A.h **** 	ab1815_interrupt_im_1_8192 = 1,
 408:Core\Inc/AB1815_A.h **** 	ab1815_interrupt_im_1_64 = 2,
 409:Core\Inc/AB1815_A.h **** 	ab1815_interrupt_im_1_4 = 3
 410:Core\Inc/AB1815_A.h **** } ab1815_interrupt_im_e;
 411:Core\Inc/AB1815_A.h **** 
 412:Core\Inc/AB1815_A.h **** typedef enum
 413:Core\Inc/AB1815_A.h **** {
 414:Core\Inc/AB1815_A.h **** 	ab1815_psw_nIRQ_or_OUTB = 0, // If at least one interrupt is enabled
 415:Core\Inc/AB1815_A.h **** 	ab1815_psw_SQW_or_OUTB = 1,	 // If SQWE == 1
 416:Core\Inc/AB1815_A.h **** 	ab1815_psw_RESERVED = 2,
 417:Core\Inc/AB1815_A.h **** 	ab1815_psw_nAIRQ_or_OUTB = 3, // If AIE  == 1
 418:Core\Inc/AB1815_A.h **** 	ab1815_psw_TIRQ_or_OUTB = 4,  // If TIE  == 1
 419:Core\Inc/AB1815_A.h **** 	ab1815_psw_nTIRQ_or_OUTB = 5, // If TIE  == 1
 420:Core\Inc/AB1815_A.h **** 	ab1815_psw_SLEEP = 6,
 421:Core\Inc/AB1815_A.h **** 	ab1815_psw_OUTB = 7
 422:Core\Inc/AB1815_A.h **** } ab1815_psw_nirq2_pin_control_e;
 423:Core\Inc/AB1815_A.h **** 
 424:Core\Inc/AB1815_A.h **** typedef enum
 425:Core\Inc/AB1815_A.h **** {
 426:Core\Inc/AB1815_A.h **** 	ab1815_fout_nIRQ_or_OUT = 0,		// If at least one interrupt is enabled
 427:Core\Inc/AB1815_A.h **** 	ab1815_fout_SQW_or_OUT = 1,			// If SQWE == 1
 428:Core\Inc/AB1815_A.h **** 	ab1815_fout_SQW_or_nIRQ_or_OUT = 2, // If SQWE == 1, else nIRQ if at least one interrupt is enable
 429:Core\Inc/AB1815_A.h **** 	ab1815_fout_nAIRQ_or_OUT = 3		// If AIE == 1
 430:Core\Inc/AB1815_A.h **** } ab1815_fout_nirq_pin_control_e;
 431:Core\Inc/AB1815_A.h **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 48


 432:Core\Inc/AB1815_A.h **** typedef enum
 433:Core\Inc/AB1815_A.h **** {
 434:Core\Inc/AB1815_A.h **** 	Sunday = 1,
 435:Core\Inc/AB1815_A.h **** 	Monday = 2,
 436:Core\Inc/AB1815_A.h **** 	Tuesday = 3,
 437:Core\Inc/AB1815_A.h **** 	Wednesday = 4,
 438:Core\Inc/AB1815_A.h **** 	Thursday = 4,
 439:Core\Inc/AB1815_A.h **** 	Friday = 5,
 440:Core\Inc/AB1815_A.h **** 	Saterday = 6
 441:Core\Inc/AB1815_A.h **** } days_of_week_e;
 442:Core\Inc/AB1815_A.h **** 
 443:Core\Inc/AB1815_A.h **** // typedef enum
 444:Core\Inc/AB1815_A.h **** // {
 445:Core\Inc/AB1815_A.h **** // 	ab1815_status_e_OK,
 446:Core\Inc/AB1815_A.h **** // 	ab1815_status_e_ERROR
 447:Core\Inc/AB1815_A.h **** // } ab1815_status_e;
 448:Core\Inc/AB1815_A.h **** // bool ab1815_status_e_OK = 0;
 449:Core\Inc/AB1815_A.h **** // bool ab1815_status_e_ERROR = 1;
 450:Core\Inc/AB1815_A.h **** 
 451:Core\Inc/AB1815_A.h **** typedef enum
 452:Core\Inc/AB1815_A.h **** {
 453:Core\Inc/AB1815_A.h **** 	ab1815_batmodeio_disabled = 0,
 454:Core\Inc/AB1815_A.h **** 	ab1815_batmodeio_enabled = 128,
 455:Core\Inc/AB1815_A.h **** } ab1815_batmodeio_e;
 456:Core\Inc/AB1815_A.h **** 
 457:Core\Inc/AB1815_A.h **** // 0x26
 458:Core\Inc/AB1815_A.h **** typedef enum
 459:Core\Inc/AB1815_A.h **** {
 460:Core\Inc/AB1815_A.h **** 	afctrl_disable = 0,
 461:Core\Inc/AB1815_A.h **** 	afctrl_enable = 0xA0,
 462:Core\Inc/AB1815_A.h **** } afctrl_e;
 463:Core\Inc/AB1815_A.h **** 
 464:Core\Inc/AB1815_A.h **** typedef enum
 465:Core\Inc/AB1815_A.h **** {
 466:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_alarm_disabled = 0,
 467:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_year = 1,
 468:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_month = 2,
 469:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_week = 3,
 470:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_day = 4,
 471:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_hour = 5,
 472:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_minute = 6,
 473:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_second = 7,
 474:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_tenth = 8,
 475:Core\Inc/AB1815_A.h **** 	ab1815_alarm_repeat_once_per_hundredth = 9 // Invalid without
 476:Core\Inc/AB1815_A.h **** } ab1815_alarm_repeat_mode;
 477:Core\Inc/AB1815_A.h **** 
 478:Core\Inc/AB1815_A.h **** // 0x1B
 479:Core\Inc/AB1815_A.h **** typedef enum
 480:Core\Inc/AB1815_A.h **** {
 481:Core\Inc/AB1815_A.h **** 	ab1815_watchdog_16HZ = 0b00,
 482:Core\Inc/AB1815_A.h **** 	ab1815_watchdog_4HZ = 0b01,
 483:Core\Inc/AB1815_A.h **** 	ab1815_watchdog_1HZ = 0b10,
 484:Core\Inc/AB1815_A.h **** 	ab1815_watchdog_1_4HZ = 0b11, // 1/4 HZ
 485:Core\Inc/AB1815_A.h **** } watchdog_timer_frequency_e;
 486:Core\Inc/AB1815_A.h **** 
 487:Core\Inc/AB1815_A.h **** // 0x20
 488:Core\Inc/AB1815_A.h **** typedef enum
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 49


 489:Core\Inc/AB1815_A.h **** {
 490:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_enable = 0b1010,
 491:Core\Inc/AB1815_A.h **** } trickle_charge_tcs_e;
 492:Core\Inc/AB1815_A.h **** 
 493:Core\Inc/AB1815_A.h **** typedef enum
 494:Core\Inc/AB1815_A.h **** {
 495:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_diode_0v6 = 0b10,		// 0.6v standard diode
 496:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_diode_0v3 = 0b01,		// 0.3v schottky diode
 497:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_diode_disable = 0b00, //
 498:Core\Inc/AB1815_A.h **** } trickle_charge_diode_e;
 499:Core\Inc/AB1815_A.h **** 
 500:Core\Inc/AB1815_A.h **** typedef enum
 501:Core\Inc/AB1815_A.h **** {
 502:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_resistor_disable = 0b00,
 503:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_resistor_3k_ohm = 0b01,
 504:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_resistor_6k_ohm = 0b10,
 505:Core\Inc/AB1815_A.h **** 	ab1815_trickle_charge_resistor_11k_ohm = 0b11,
 506:Core\Inc/AB1815_A.h **** } trickle_charge_resistor_e;
 507:Core\Inc/AB1815_A.h **** 
 508:Core\Inc/AB1815_A.h **** // 0x21
 509:Core\Inc/AB1815_A.h **** typedef enum
 510:Core\Inc/AB1815_A.h **** {
 511:Core\Inc/AB1815_A.h **** 	ab1815_battery_reference_2v5_3v0 = 0b0111,
 512:Core\Inc/AB1815_A.h **** 	ab1815_battery_reference_2v1_2v5 = 0b1011,
 513:Core\Inc/AB1815_A.h **** 	ab1815_battery_reference_1v8_2v2 = 0b1101,
 514:Core\Inc/AB1815_A.h **** 	ab1815_battery_reference_1v4_1v6 = 0b1111, // Also reset value?
 515:Core\Inc/AB1815_A.h **** } battery_voltage_reference_select_e;
 516:Core\Inc/AB1815_A.h **** 
 517:Core\Inc/AB1815_A.h **** // uint64_t error_code;
 518:Core\Inc/AB1815_A.h **** //
 519:Core\Inc/AB1815_A.h **** // uint16_t cs_pin;
 520:Core\Inc/AB1815_A.h **** // struct
 521:Core\Inc/AB1815_A.h **** //{
 522:Core\Inc/AB1815_A.h **** //	uint8_t _12_24 : 2;
 523:Core\Inc/AB1815_A.h **** //	uint8_t clk_source : 2;
 524:Core\Inc/AB1815_A.h **** // } fields;
 525:Core\Inc/AB1815_A.h **** 
 526:Core\Inc/AB1815_A.h **** // bool init();
 527:Core\Inc/AB1815_A.h **** bool read(uint8_t offset, uint8_t *buf, uint8_t length);
 528:Core\Inc/AB1815_A.h **** bool write(uint8_t offset, uint8_t *buf, uint8_t length);
 529:Core\Inc/AB1815_A.h **** void spi_select_slave(bool select);
 530:Core\Inc/AB1815_A.h **** 
 531:Core\Inc/AB1815_A.h **** // ab1815_id_t id;
 532:Core\Inc/AB1815_A.h **** 
 533:Core\Inc/AB1815_A.h **** // AB1815(uint16_t cs_pin); // ?
 534:Core\Inc/AB1815_A.h **** 
 535:Core\Inc/AB1815_A.h **** // 0x00
 536:Core\Inc/AB1815_A.h **** time_t get();
 537:Core\Inc/AB1815_A.h **** void set(time_t time);
 538:Core\Inc/AB1815_A.h **** bool get_time(ab1815_tmElements_t *time);
 539:Core\Inc/AB1815_A.h **** bool set_time(ab1815_tmElements_t *time);
 540:Core\Inc/AB1815_A.h **** // bool hundrdeds();
 541:Core\Inc/AB1815_A.h **** bool clear_hundrdeds();
 542:Core\Inc/AB1815_A.h **** 
 543:Core\Inc/AB1815_A.h **** // 0x08
 544:Core\Inc/AB1815_A.h **** bool get_alarm(ab1815_tmElements_t *time, ab1815_alarm_repeat_mode *alarm_mode);
 545:Core\Inc/AB1815_A.h **** bool set_alarm(ab1815_tmElements_t *time, ab1815_alarm_repeat_mode alarm_mode);
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 50


 546:Core\Inc/AB1815_A.h **** 
 547:Core\Inc/AB1815_A.h **** // 0x0F - See also: ARST in Control1.
 548:Core\Inc/AB1815_A.h **** //	If ARST is a 1, a read of the Status register will produce the current state of all
 549:Core\Inc/AB1815_A.h **** //	the interrupt flags and then clear them
 550:Core\Inc/AB1815_A.h **** bool set_status(status_t *status);
 551:Core\Inc/AB1815_A.h **** bool get_status(status_t *status);
 552:Core\Inc/AB1815_A.h **** 
 553:Core\Inc/AB1815_A.h **** // 0x10
 554:Core\Inc/AB1815_A.h **** bool set_control1(control1_t *control1);
 555:Core\Inc/AB1815_A.h **** bool get_control1(control1_t *control1);
 556:Core\Inc/AB1815_A.h **** 
 557:Core\Inc/AB1815_A.h **** // 0x11
 558:Core\Inc/AB1815_A.h **** bool set_control2(control2_t *control2);
 559:Core\Inc/AB1815_A.h **** bool get_control2(control2_t *control2);
 560:Core\Inc/AB1815_A.h **** 
 561:Core\Inc/AB1815_A.h **** // 0x12
 562:Core\Inc/AB1815_A.h **** bool set_interrupt_mask(inturrupt_mask_t *inturrupt_mask);
 563:Core\Inc/AB1815_A.h **** bool get_interrupt_mask(inturrupt_mask_t *inturrupt_mask);
 564:Core\Inc/AB1815_A.h **** 
 565:Core\Inc/AB1815_A.h **** // 0x13
 566:Core\Inc/AB1815_A.h **** bool set_square_wave(square_wave_t *square_wave);
 567:Core\Inc/AB1815_A.h **** bool get_square_wave(square_wave_t *square_wave);
 568:Core\Inc/AB1815_A.h **** 
 569:Core\Inc/AB1815_A.h **** // 0x14
 570:Core\Inc/AB1815_A.h **** bool set_cal_xt(cal_xt_t *cal_xt);
 571:Core\Inc/AB1815_A.h **** bool get_cal_xt(cal_xt_t *cal_xt);
 572:Core\Inc/AB1815_A.h **** 
 573:Core\Inc/AB1815_A.h **** // 0x15
 574:Core\Inc/AB1815_A.h **** bool set_cal_rc_hi(cal_rc_hi_t *cal_rc_hi);
 575:Core\Inc/AB1815_A.h **** bool get_cal_rc_hi(cal_rc_hi_t *cal_rc_hi);
 576:Core\Inc/AB1815_A.h **** 
 577:Core\Inc/AB1815_A.h **** // 0x16
 578:Core\Inc/AB1815_A.h **** bool set_cal_rc_low(cal_rc_low_t *cal_rc_low);
 579:Core\Inc/AB1815_A.h **** bool get_cal_rc_low(cal_rc_low_t *cal_rc_low);
 580:Core\Inc/AB1815_A.h **** 
 581:Core\Inc/AB1815_A.h **** // 0x17 sleep_control_t
 582:Core\Inc/AB1815_A.h **** bool set_sleep_control(sleep_control_t *sleep_control);
 583:Core\Inc/AB1815_A.h **** bool get_sleep_control(sleep_control_t *sleep_control);
 584:Core\Inc/AB1815_A.h **** 
 585:Core\Inc/AB1815_A.h **** // 0x18 Set the countdown control register
 586:Core\Inc/AB1815_A.h **** bool set_countdown_control(countdown_control_t *countdown_control);
 587:Core\Inc/AB1815_A.h **** bool get_countdown_control(countdown_control_t *countdown_control);
 588:Core\Inc/AB1815_A.h **** 
 589:Core\Inc/AB1815_A.h **** // 0x19
 590:Core\Inc/AB1815_A.h **** bool set_countdown_timer(uint8_t timer_value);
 591:Core\Inc/AB1815_A.h **** bool get_countdown_timer(uint8_t *timer_value);
 592:Core\Inc/AB1815_A.h **** 
 593:Core\Inc/AB1815_A.h **** // 0x1A
 594:Core\Inc/AB1815_A.h **** bool set_countdown_timer_initial_value(uint8_t timer_value);
 595:Core\Inc/AB1815_A.h **** bool get_countdown_timer_initial_value(uint8_t *timer_value);
 596:Core\Inc/AB1815_A.h **** 
 597:Core\Inc/AB1815_A.h **** // 0x1B
 598:Core\Inc/AB1815_A.h **** bool set_watchdog_timer(watchdog_timer_t *watchdog_timer);
 599:Core\Inc/AB1815_A.h **** bool get_watchdog_timer(watchdog_timer_t *watchdog_timer);
 600:Core\Inc/AB1815_A.h **** 
 601:Core\Inc/AB1815_A.h **** // 0x1C Get the oscillator control register
 602:Core\Inc/AB1815_A.h **** bool get_oscillator_control(oscillator_control_t *oscillator_control);
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 51


 603:Core\Inc/AB1815_A.h **** bool set_oscillator_control(oscillator_control_t *oscillator_control);
 604:Core\Inc/AB1815_A.h **** 
 605:Core\Inc/AB1815_A.h **** // 0x1D
 606:Core\Inc/AB1815_A.h **** bool set_oscillator_status(oscillator_status_t *oscillator_status);
 607:Core\Inc/AB1815_A.h **** bool get_oscillator_status(oscillator_status_t *oscillator_status);
 608:Core\Inc/AB1815_A.h **** 
 609:Core\Inc/AB1815_A.h **** // 0x1E - Nothing on the AB1815
 610:Core\Inc/AB1815_A.h **** // 0x1F
 611:Core\Inc/AB1815_A.h **** bool set_configuration_key(configuration_key_e configuration_key);
 612:Core\Inc/AB1815_A.h **** 
 613:Core\Inc/AB1815_A.h **** // 0x20
 614:Core\Inc/AB1815_A.h **** bool set_trickle(trickle_t *trickle);
 615:Core\Inc/AB1815_A.h **** bool get_trickle(trickle_t *trickle);
 616:Core\Inc/AB1815_A.h **** 
 617:Core\Inc/AB1815_A.h **** // 0x21
 618:Core\Inc/AB1815_A.h **** bool set_bref_control(bref_control_t *bref_control);
 619:Core\Inc/AB1815_A.h **** bool get_bref_control(bref_control_t *bref_control);
 620:Core\Inc/AB1815_A.h **** 
 621:Core\Inc/AB1815_A.h **** // 0x26
 622:Core\Inc/AB1815_A.h **** bool set_afctrl(afctrl_e afctrl);
 623:Core\Inc/AB1815_A.h **** bool get_(afctrl_e *afctrl);
 624:Core\Inc/AB1815_A.h **** 
 625:Core\Inc/AB1815_A.h **** // 0x27
 626:Core\Inc/AB1815_A.h **** bool set_batmodeio(ab1815_batmodeio_e mode);
 627:Core\Inc/AB1815_A.h **** bool get_batmodeio(ab1815_batmodeio_e *mode);
 628:Core\Inc/AB1815_A.h **** 
 629:Core\Inc/AB1815_A.h **** // 0x28
 630:Core\Inc/AB1815_A.h **** bool get_id(ab1815_id_t *id);
 631:Core\Inc/AB1815_A.h **** 
 632:Core\Inc/AB1815_A.h **** // 0x2F
 633:Core\Inc/AB1815_A.h **** bool set_analog_status_register(ab1815_analog_status_t *analog_status);
 634:Core\Inc/AB1815_A.h **** bool get_analog_status_register(ab1815_analog_status_t *analog_status);
 635:Core\Inc/AB1815_A.h **** 
 636:Core\Inc/AB1815_A.h **** // 0x30
 637:Core\Inc/AB1815_A.h **** bool set_output_control(ab1815_output_control_t *output_control);
 638:Core\Inc/AB1815_A.h **** bool get_output_control(ab1815_output_control_t *output_control);
 639:Core\Inc/AB1815_A.h **** 
 640:Core\Inc/AB1815_A.h **** // 0x3F
 641:Core\Inc/AB1815_A.h **** bool set_extension_ram(extension_ram_t *extension_ram);
 642:Core\Inc/AB1815_A.h **** bool get_extension_ram(extension_ram_t *extension_ram);
 643:Core\Inc/AB1815_A.h **** 
 644:Core\Inc/AB1815_A.h **** void hex_dump(void);
 645:Core\Inc/AB1815_A.h **** 
 646:Core\Inc/AB1815_A.h **** bool detectChip(void);
 647:Core\Inc/AB1815_A.h **** 
 648:Core\Inc/AB1815_A.h **** inline uint8_t bcd2bin(uint8_t value)
 1825              		.loc 2 648 16 is_stmt 1 view .LVU322
 1826              	.LBB15:
 649:Core\Inc/AB1815_A.h **** {
 650:Core\Inc/AB1815_A.h **** 	return (value & 0x0F) + ((value >> 4) * 10);
 1827              		.loc 2 650 2 view .LVU323
 1828              		.loc 2 650 16 is_stmt 0 view .LVU324
 1829 002a 0F23     		movs	r3, #15
 1830 002c 1900     		movs	r1, r3
 1831 002e 1140     		ands	r1, r2
 1832              		.loc 2 650 24 view .LVU325
 1833 0030 1209     		lsrs	r2, r2, #4
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 52


 1834              	.LVL153:
 1835              		.loc 2 650 24 view .LVU326
 1836 0032 9500     		lsls	r5, r2, #2
 1837 0034 5219     		adds	r2, r2, r5
 1838 0036 5200     		lsls	r2, r2, #1
 1839 0038 8A18     		adds	r2, r1, r2
 1840              	.LVL154:
 1841              		.loc 2 650 24 view .LVU327
 1842              	.LBE15:
 1843              	.LBE14:
 476:Core/Src/AB1815.c **** 		id->ID1 = bcd2bin(buffer[1]);
 1844              		.loc 1 476 11 view .LVU328
 1845 003a 2270     		strb	r2, [r4]
 477:Core/Src/AB1815.c **** 		id->ID2.value = buffer[2];
 1846              		.loc 1 477 3 is_stmt 1 view .LVU329
 477:Core/Src/AB1815.c **** 		id->ID2.value = buffer[2];
 1847              		.loc 1 477 13 is_stmt 0 view .LVU330
 1848 003c 6A46     		mov	r2, sp
 1849 003e 5278     		ldrb	r2, [r2, #1]
 1850              	.LVL155:
 1851              	.LBB16:
 1852              	.LBI16:
 648:Core\Inc/AB1815_A.h **** {
 1853              		.loc 2 648 16 is_stmt 1 view .LVU331
 1854              	.LBB17:
 1855              		.loc 2 650 2 view .LVU332
 1856              		.loc 2 650 16 is_stmt 0 view .LVU333
 1857 0040 1900     		movs	r1, r3
 1858 0042 1140     		ands	r1, r2
 1859              		.loc 2 650 24 view .LVU334
 1860 0044 1209     		lsrs	r2, r2, #4
 1861              	.LVL156:
 1862              		.loc 2 650 24 view .LVU335
 1863 0046 9500     		lsls	r5, r2, #2
 1864 0048 5219     		adds	r2, r2, r5
 1865 004a 5200     		lsls	r2, r2, #1
 1866 004c 8A18     		adds	r2, r1, r2
 1867              	.LVL157:
 1868              		.loc 2 650 24 view .LVU336
 1869              	.LBE17:
 1870              	.LBE16:
 477:Core/Src/AB1815.c **** 		id->ID2.value = buffer[2];
 1871              		.loc 1 477 11 view .LVU337
 1872 004e 6270     		strb	r2, [r4, #1]
 478:Core/Src/AB1815.c **** 		id->ID3 = bcd2bin(buffer[3]);
 1873              		.loc 1 478 3 is_stmt 1 view .LVU338
 478:Core/Src/AB1815.c **** 		id->ID3 = bcd2bin(buffer[3]);
 1874              		.loc 1 478 25 is_stmt 0 view .LVU339
 1875 0050 6A46     		mov	r2, sp
 1876 0052 9278     		ldrb	r2, [r2, #2]
 478:Core/Src/AB1815.c **** 		id->ID3 = bcd2bin(buffer[3]);
 1877              		.loc 1 478 17 view .LVU340
 1878 0054 A270     		strb	r2, [r4, #2]
 479:Core/Src/AB1815.c **** 		id->ID4 = bcd2bin(buffer[4]);
 1879              		.loc 1 479 3 is_stmt 1 view .LVU341
 479:Core/Src/AB1815.c **** 		id->ID4 = bcd2bin(buffer[4]);
 1880              		.loc 1 479 13 is_stmt 0 view .LVU342
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 53


 1881 0056 6A46     		mov	r2, sp
 1882 0058 D278     		ldrb	r2, [r2, #3]
 1883              	.LVL158:
 1884              	.LBB18:
 1885              	.LBI18:
 648:Core\Inc/AB1815_A.h **** {
 1886              		.loc 2 648 16 is_stmt 1 view .LVU343
 1887              	.LBB19:
 1888              		.loc 2 650 2 view .LVU344
 1889              		.loc 2 650 16 is_stmt 0 view .LVU345
 1890 005a 1900     		movs	r1, r3
 1891 005c 1140     		ands	r1, r2
 1892              		.loc 2 650 24 view .LVU346
 1893 005e 1209     		lsrs	r2, r2, #4
 1894              	.LVL159:
 1895              		.loc 2 650 24 view .LVU347
 1896 0060 9500     		lsls	r5, r2, #2
 1897 0062 5219     		adds	r2, r2, r5
 1898 0064 5200     		lsls	r2, r2, #1
 1899 0066 8A18     		adds	r2, r1, r2
 1900              	.LVL160:
 1901              		.loc 2 650 24 view .LVU348
 1902              	.LBE19:
 1903              	.LBE18:
 479:Core/Src/AB1815.c **** 		id->ID4 = bcd2bin(buffer[4]);
 1904              		.loc 1 479 11 view .LVU349
 1905 0068 E270     		strb	r2, [r4, #3]
 480:Core/Src/AB1815.c **** 		id->ID5 = bcd2bin(buffer[5]);
 1906              		.loc 1 480 3 is_stmt 1 view .LVU350
 480:Core/Src/AB1815.c **** 		id->ID5 = bcd2bin(buffer[5]);
 1907              		.loc 1 480 13 is_stmt 0 view .LVU351
 1908 006a 6A46     		mov	r2, sp
 1909 006c 1279     		ldrb	r2, [r2, #4]
 1910              	.LVL161:
 1911              	.LBB20:
 1912              	.LBI20:
 648:Core\Inc/AB1815_A.h **** {
 1913              		.loc 2 648 16 is_stmt 1 view .LVU352
 1914              	.LBB21:
 1915              		.loc 2 650 2 view .LVU353
 1916              		.loc 2 650 16 is_stmt 0 view .LVU354
 1917 006e 1900     		movs	r1, r3
 1918 0070 1140     		ands	r1, r2
 1919              		.loc 2 650 24 view .LVU355
 1920 0072 1209     		lsrs	r2, r2, #4
 1921              	.LVL162:
 1922              		.loc 2 650 24 view .LVU356
 1923 0074 9500     		lsls	r5, r2, #2
 1924 0076 5219     		adds	r2, r2, r5
 1925 0078 5200     		lsls	r2, r2, #1
 1926 007a 8A18     		adds	r2, r1, r2
 1927              	.LVL163:
 1928              		.loc 2 650 24 view .LVU357
 1929              	.LBE21:
 1930              	.LBE20:
 480:Core/Src/AB1815.c **** 		id->ID5 = bcd2bin(buffer[5]);
 1931              		.loc 1 480 11 view .LVU358
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 54


 1932 007c 2271     		strb	r2, [r4, #4]
 481:Core/Src/AB1815.c **** 		id->ID6 = bcd2bin(buffer[6]);
 1933              		.loc 1 481 3 is_stmt 1 view .LVU359
 481:Core/Src/AB1815.c **** 		id->ID6 = bcd2bin(buffer[6]);
 1934              		.loc 1 481 13 is_stmt 0 view .LVU360
 1935 007e 6A46     		mov	r2, sp
 1936 0080 5279     		ldrb	r2, [r2, #5]
 1937              	.LVL164:
 1938              	.LBB22:
 1939              	.LBI22:
 648:Core\Inc/AB1815_A.h **** {
 1940              		.loc 2 648 16 is_stmt 1 view .LVU361
 1941              	.LBB23:
 1942              		.loc 2 650 2 view .LVU362
 1943              		.loc 2 650 16 is_stmt 0 view .LVU363
 1944 0082 1900     		movs	r1, r3
 1945 0084 1140     		ands	r1, r2
 1946              		.loc 2 650 24 view .LVU364
 1947 0086 1209     		lsrs	r2, r2, #4
 1948              	.LVL165:
 1949              		.loc 2 650 24 view .LVU365
 1950 0088 9500     		lsls	r5, r2, #2
 1951 008a 5219     		adds	r2, r2, r5
 1952 008c 5200     		lsls	r2, r2, #1
 1953 008e 8A18     		adds	r2, r1, r2
 1954              	.LVL166:
 1955              		.loc 2 650 24 view .LVU366
 1956              	.LBE23:
 1957              	.LBE22:
 481:Core/Src/AB1815.c **** 		id->ID6 = bcd2bin(buffer[6]);
 1958              		.loc 1 481 11 view .LVU367
 1959 0090 6271     		strb	r2, [r4, #5]
 482:Core/Src/AB1815.c **** 	}
 1960              		.loc 1 482 3 is_stmt 1 view .LVU368
 482:Core/Src/AB1815.c **** 	}
 1961              		.loc 1 482 13 is_stmt 0 view .LVU369
 1962 0092 6A46     		mov	r2, sp
 1963 0094 9279     		ldrb	r2, [r2, #6]
 1964              	.LVL167:
 1965              	.LBB24:
 1966              	.LBI24:
 648:Core\Inc/AB1815_A.h **** {
 1967              		.loc 2 648 16 is_stmt 1 view .LVU370
 1968              	.LBB25:
 1969              		.loc 2 650 2 view .LVU371
 1970              		.loc 2 650 16 is_stmt 0 view .LVU372
 1971 0096 1340     		ands	r3, r2
 1972              		.loc 2 650 24 view .LVU373
 1973 0098 1209     		lsrs	r2, r2, #4
 1974              	.LVL168:
 1975              		.loc 2 650 24 view .LVU374
 1976 009a 9100     		lsls	r1, r2, #2
 1977 009c 5218     		adds	r2, r2, r1
 1978 009e 5200     		lsls	r2, r2, #1
 1979 00a0 9B18     		adds	r3, r3, r2
 1980              	.LVL169:
 1981              		.loc 2 650 24 view .LVU375
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 55


 1982              	.LBE25:
 1983              	.LBE24:
 482:Core/Src/AB1815.c **** 	}
 1984              		.loc 1 482 11 view .LVU376
 1985 00a2 A371     		strb	r3, [r4, #6]
 1986 00a4 BDE7     		b	.L69
 1987              	.L72:
 1988 00a6 C046     		.align	2
 1989              	.L71:
 1990 00a8 00000000 		.word	ab1815_status_e_OK
 1991              		.cfi_endproc
 1992              	.LFE471:
 1994              		.section	.text.set_analog_status_register,"ax",%progbits
 1995              		.align	1
 1996              		.global	set_analog_status_register
 1997              		.syntax unified
 1998              		.code	16
 1999              		.thumb_func
 2001              	set_analog_status_register:
 2002              	.LVL170:
 2003              	.LFB472:
 487:Core/Src/AB1815.c **** 
 488:Core/Src/AB1815.c **** // 0x2F
 489:Core/Src/AB1815.c **** bool set_analog_status_register(ab1815_analog_status_t *analog_status)
 490:Core/Src/AB1815.c **** {
 2004              		.loc 1 490 1 is_stmt 1 view -0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		.loc 1 490 1 is_stmt 0 view .LVU378
 2009 0000 10B5     		push	{r4, lr}
 2010              	.LCFI52:
 2011              		.cfi_def_cfa_offset 8
 2012              		.cfi_offset 4, -8
 2013              		.cfi_offset 14, -4
 2014 0002 0100     		movs	r1, r0
 491:Core/Src/AB1815.c **** 	return write(AB1815_REG_ANALOG_STATUS, &analog_status->value, 1);
 2015              		.loc 1 491 2 is_stmt 1 view .LVU379
 2016              		.loc 1 491 9 is_stmt 0 view .LVU380
 2017 0004 0122     		movs	r2, #1
 2018 0006 2F20     		movs	r0, #47
 2019              	.LVL171:
 2020              		.loc 1 491 9 view .LVU381
 2021 0008 FFF7FEFF 		bl	write
 2022              	.LVL172:
 492:Core/Src/AB1815.c **** }
 2023              		.loc 1 492 1 view .LVU382
 2024              		@ sp needed
 2025 000c 10BD     		pop	{r4, pc}
 2026              		.cfi_endproc
 2027              	.LFE472:
 2029              		.section	.text.get_analog_status_register,"ax",%progbits
 2030              		.align	1
 2031              		.global	get_analog_status_register
 2032              		.syntax unified
 2033              		.code	16
 2034              		.thumb_func
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 56


 2036              	get_analog_status_register:
 2037              	.LVL173:
 2038              	.LFB473:
 493:Core/Src/AB1815.c **** 
 494:Core/Src/AB1815.c **** bool get_analog_status_register(ab1815_analog_status_t *analog_status)
 495:Core/Src/AB1815.c **** {
 2039              		.loc 1 495 1 is_stmt 1 view -0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 0
 2042              		@ frame_needed = 0, uses_anonymous_args = 0
 2043              		.loc 1 495 1 is_stmt 0 view .LVU384
 2044 0000 10B5     		push	{r4, lr}
 2045              	.LCFI53:
 2046              		.cfi_def_cfa_offset 8
 2047              		.cfi_offset 4, -8
 2048              		.cfi_offset 14, -4
 2049 0002 0100     		movs	r1, r0
 496:Core/Src/AB1815.c **** 	return read(AB1815_REG_ANALOG_STATUS, &analog_status->value, 1);
 2050              		.loc 1 496 2 is_stmt 1 view .LVU385
 2051              		.loc 1 496 9 is_stmt 0 view .LVU386
 2052 0004 0122     		movs	r2, #1
 2053 0006 2F20     		movs	r0, #47
 2054              	.LVL174:
 2055              		.loc 1 496 9 view .LVU387
 2056 0008 FFF7FEFF 		bl	read
 2057              	.LVL175:
 497:Core/Src/AB1815.c **** }
 2058              		.loc 1 497 1 view .LVU388
 2059              		@ sp needed
 2060 000c 10BD     		pop	{r4, pc}
 2061              		.cfi_endproc
 2062              	.LFE473:
 2064              		.section	.text.set_output_control,"ax",%progbits
 2065              		.align	1
 2066              		.global	set_output_control
 2067              		.syntax unified
 2068              		.code	16
 2069              		.thumb_func
 2071              	set_output_control:
 2072              	.LVL176:
 2073              	.LFB474:
 498:Core/Src/AB1815.c **** 
 499:Core/Src/AB1815.c **** // 0x30
 500:Core/Src/AB1815.c **** bool set_output_control(ab1815_output_control_t *output_control)
 501:Core/Src/AB1815.c **** {
 2074              		.loc 1 501 1 is_stmt 1 view -0
 2075              		.cfi_startproc
 2076              		@ args = 0, pretend = 0, frame = 0
 2077              		@ frame_needed = 0, uses_anonymous_args = 0
 2078              		.loc 1 501 1 is_stmt 0 view .LVU390
 2079 0000 10B5     		push	{r4, lr}
 2080              	.LCFI54:
 2081              		.cfi_def_cfa_offset 8
 2082              		.cfi_offset 4, -8
 2083              		.cfi_offset 14, -4
 2084 0002 0100     		movs	r1, r0
 502:Core/Src/AB1815.c **** 	return write(AB1815_REG_OUTPUT_CONTROL, &output_control->value, 1);
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 57


 2085              		.loc 1 502 2 is_stmt 1 view .LVU391
 2086              		.loc 1 502 9 is_stmt 0 view .LVU392
 2087 0004 0122     		movs	r2, #1
 2088 0006 3020     		movs	r0, #48
 2089              	.LVL177:
 2090              		.loc 1 502 9 view .LVU393
 2091 0008 FFF7FEFF 		bl	write
 2092              	.LVL178:
 503:Core/Src/AB1815.c **** }
 2093              		.loc 1 503 1 view .LVU394
 2094              		@ sp needed
 2095 000c 10BD     		pop	{r4, pc}
 2096              		.cfi_endproc
 2097              	.LFE474:
 2099              		.section	.text.get_output_control,"ax",%progbits
 2100              		.align	1
 2101              		.global	get_output_control
 2102              		.syntax unified
 2103              		.code	16
 2104              		.thumb_func
 2106              	get_output_control:
 2107              	.LVL179:
 2108              	.LFB475:
 504:Core/Src/AB1815.c **** 
 505:Core/Src/AB1815.c **** bool get_output_control(ab1815_output_control_t *output_control)
 506:Core/Src/AB1815.c **** {
 2109              		.loc 1 506 1 is_stmt 1 view -0
 2110              		.cfi_startproc
 2111              		@ args = 0, pretend = 0, frame = 0
 2112              		@ frame_needed = 0, uses_anonymous_args = 0
 2113              		.loc 1 506 1 is_stmt 0 view .LVU396
 2114 0000 10B5     		push	{r4, lr}
 2115              	.LCFI55:
 2116              		.cfi_def_cfa_offset 8
 2117              		.cfi_offset 4, -8
 2118              		.cfi_offset 14, -4
 2119 0002 0100     		movs	r1, r0
 507:Core/Src/AB1815.c **** 	return read(AB1815_REG_OUTPUT_CONTROL, &output_control->value, 1);
 2120              		.loc 1 507 2 is_stmt 1 view .LVU397
 2121              		.loc 1 507 9 is_stmt 0 view .LVU398
 2122 0004 0122     		movs	r2, #1
 2123 0006 3020     		movs	r0, #48
 2124              	.LVL180:
 2125              		.loc 1 507 9 view .LVU399
 2126 0008 FFF7FEFF 		bl	read
 2127              	.LVL181:
 508:Core/Src/AB1815.c **** }
 2128              		.loc 1 508 1 view .LVU400
 2129              		@ sp needed
 2130 000c 10BD     		pop	{r4, pc}
 2131              		.cfi_endproc
 2132              	.LFE475:
 2134              		.section	.text.set_extension_ram,"ax",%progbits
 2135              		.align	1
 2136              		.global	set_extension_ram
 2137              		.syntax unified
 2138              		.code	16
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 58


 2139              		.thumb_func
 2141              	set_extension_ram:
 2142              	.LVL182:
 2143              	.LFB476:
 509:Core/Src/AB1815.c **** 
 510:Core/Src/AB1815.c **** // 0x3F
 511:Core/Src/AB1815.c **** bool set_extension_ram(extension_ram_t *extension_ram)
 512:Core/Src/AB1815.c **** {
 2144              		.loc 1 512 1 is_stmt 1 view -0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 2148              		.loc 1 512 1 is_stmt 0 view .LVU402
 2149 0000 10B5     		push	{r4, lr}
 2150              	.LCFI56:
 2151              		.cfi_def_cfa_offset 8
 2152              		.cfi_offset 4, -8
 2153              		.cfi_offset 14, -4
 2154 0002 0100     		movs	r1, r0
 513:Core/Src/AB1815.c **** 	return write(AB1815_EXTENTION_RAM, &extension_ram->value, 1);
 2155              		.loc 1 513 2 is_stmt 1 view .LVU403
 2156              		.loc 1 513 9 is_stmt 0 view .LVU404
 2157 0004 0122     		movs	r2, #1
 2158 0006 3F20     		movs	r0, #63
 2159              	.LVL183:
 2160              		.loc 1 513 9 view .LVU405
 2161 0008 FFF7FEFF 		bl	write
 2162              	.LVL184:
 514:Core/Src/AB1815.c **** }
 2163              		.loc 1 514 1 view .LVU406
 2164              		@ sp needed
 2165 000c 10BD     		pop	{r4, pc}
 2166              		.cfi_endproc
 2167              	.LFE476:
 2169              		.section	.text.get_extension_ram,"ax",%progbits
 2170              		.align	1
 2171              		.global	get_extension_ram
 2172              		.syntax unified
 2173              		.code	16
 2174              		.thumb_func
 2176              	get_extension_ram:
 2177              	.LVL185:
 2178              	.LFB477:
 515:Core/Src/AB1815.c **** 
 516:Core/Src/AB1815.c **** bool get_extension_ram(extension_ram_t *extension_ram)
 517:Core/Src/AB1815.c **** {
 2179              		.loc 1 517 1 is_stmt 1 view -0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 0
 2182              		@ frame_needed = 0, uses_anonymous_args = 0
 2183              		.loc 1 517 1 is_stmt 0 view .LVU408
 2184 0000 10B5     		push	{r4, lr}
 2185              	.LCFI57:
 2186              		.cfi_def_cfa_offset 8
 2187              		.cfi_offset 4, -8
 2188              		.cfi_offset 14, -4
 2189 0002 0100     		movs	r1, r0
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 59


 518:Core/Src/AB1815.c **** 	return read(AB1815_EXTENTION_RAM, &extension_ram->value, 1);
 2190              		.loc 1 518 2 is_stmt 1 view .LVU409
 2191              		.loc 1 518 9 is_stmt 0 view .LVU410
 2192 0004 0122     		movs	r2, #1
 2193 0006 3F20     		movs	r0, #63
 2194              	.LVL186:
 2195              		.loc 1 518 9 view .LVU411
 2196 0008 FFF7FEFF 		bl	read
 2197              	.LVL187:
 519:Core/Src/AB1815.c **** }
 2198              		.loc 1 519 1 view .LVU412
 2199              		@ sp needed
 2200 000c 10BD     		pop	{r4, pc}
 2201              		.cfi_endproc
 2202              	.LFE477:
 2204              		.section	.rodata.hex_dump.str1.4,"aMS",%progbits,1
 2205              		.align	2
 2206              	.LC11:
 2207 0000 23203078 		.ascii	"# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x"
 2207      25303278 
 2207      3A203078 
 2207      25303278 
 2207      20307825 
 2208 0033 20307825 		.ascii	" 0x%02x 0x%02x\015\012\000"
 2208      30327820 
 2208      30782530 
 2208      32780D0A 
 2208      00
 2209              		.section	.text.hex_dump,"ax",%progbits
 2210              		.align	1
 2211              		.global	hex_dump
 2212              		.syntax unified
 2213              		.code	16
 2214              		.thumb_func
 2216              	hex_dump:
 2217              	.LFB478:
 520:Core/Src/AB1815.c **** 
 521:Core/Src/AB1815.c **** void hex_dump(void)
 522:Core/Src/AB1815.c **** {
 2218              		.loc 1 522 1 is_stmt 1 view -0
 2219              		.cfi_startproc
 2220              		@ args = 0, pretend = 0, frame = 8
 2221              		@ frame_needed = 0, uses_anonymous_args = 0
 2222 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2223              	.LCFI58:
 2224              		.cfi_def_cfa_offset 20
 2225              		.cfi_offset 4, -20
 2226              		.cfi_offset 5, -16
 2227              		.cfi_offset 6, -12
 2228              		.cfi_offset 7, -8
 2229              		.cfi_offset 14, -4
 2230 0002 C646     		mov	lr, r8
 2231 0004 00B5     		push	{lr}
 2232              	.LCFI59:
 2233              		.cfi_def_cfa_offset 24
 2234              		.cfi_offset 8, -24
 2235 0006 88B0     		sub	sp, sp, #32
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 60


 2236              	.LCFI60:
 2237              		.cfi_def_cfa_offset 56
 523:Core/Src/AB1815.c **** 	uint8_t buffer[8];
 2238              		.loc 1 523 2 view .LVU414
 524:Core/Src/AB1815.c **** 	for (uint8_t pos = 0; pos < 0x7F; pos += 8)
 2239              		.loc 1 524 2 view .LVU415
 2240              	.LBB26:
 2241              		.loc 1 524 7 view .LVU416
 2242              	.LVL188:
 2243              		.loc 1 524 15 is_stmt 0 view .LVU417
 2244 0008 0025     		movs	r5, #0
 2245              		.loc 1 524 2 view .LVU418
 2246 000a 1DE0     		b	.L80
 2247              	.LVL189:
 2248              	.L81:
 525:Core/Src/AB1815.c **** 	{
 526:Core/Src/AB1815.c **** 		read(pos, buffer, 8);
 2249              		.loc 1 526 3 is_stmt 1 discriminator 3 view .LVU419
 2250 000c 06AC     		add	r4, sp, #24
 2251 000e 0822     		movs	r2, #8
 2252 0010 2100     		movs	r1, r4
 2253 0012 2800     		movs	r0, r5
 2254 0014 FFF7FEFF 		bl	read
 2255              	.LVL190:
 527:Core/Src/AB1815.c **** 		printf("# 0x%02x: 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\r\n", pos, buffer[0], b
 2256              		.loc 1 527 3 discriminator 3 view .LVU420
 2257              		.loc 1 527 94 is_stmt 0 discriminator 3 view .LVU421
 2258 0018 2278     		ldrb	r2, [r4]
 2259              		.loc 1 527 105 discriminator 3 view .LVU422
 2260 001a 6378     		ldrb	r3, [r4, #1]
 2261              		.loc 1 527 116 discriminator 3 view .LVU423
 2262 001c A178     		ldrb	r1, [r4, #2]
 2263              		.loc 1 527 127 discriminator 3 view .LVU424
 2264 001e E678     		ldrb	r6, [r4, #3]
 2265              		.loc 1 527 138 discriminator 3 view .LVU425
 2266 0020 2779     		ldrb	r7, [r4, #4]
 2267              		.loc 1 527 149 discriminator 3 view .LVU426
 2268 0022 6079     		ldrb	r0, [r4, #5]
 2269 0024 8446     		mov	ip, r0
 2270              		.loc 1 527 160 discriminator 3 view .LVU427
 2271 0026 A079     		ldrb	r0, [r4, #6]
 2272 0028 8046     		mov	r8, r0
 2273              		.loc 1 527 171 discriminator 3 view .LVU428
 2274 002a E479     		ldrb	r4, [r4, #7]
 2275              		.loc 1 527 3 discriminator 3 view .LVU429
 2276 002c 0948     		ldr	r0, .L82
 2277 002e 0594     		str	r4, [sp, #20]
 2278 0030 4446     		mov	r4, r8
 2279 0032 0494     		str	r4, [sp, #16]
 2280 0034 6446     		mov	r4, ip
 2281 0036 0394     		str	r4, [sp, #12]
 2282 0038 0297     		str	r7, [sp, #8]
 2283 003a 0196     		str	r6, [sp, #4]
 2284 003c 0091     		str	r1, [sp]
 2285 003e 2900     		movs	r1, r5
 2286 0040 FFF7FEFF 		bl	printf_
 2287              	.LVL191:
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 61


 524:Core/Src/AB1815.c **** 	for (uint8_t pos = 0; pos < 0x7F; pos += 8)
 2288              		.loc 1 524 40 is_stmt 1 discriminator 3 view .LVU430
 2289 0044 0835     		adds	r5, r5, #8
 2290              	.LVL192:
 524:Core/Src/AB1815.c **** 	for (uint8_t pos = 0; pos < 0x7F; pos += 8)
 2291              		.loc 1 524 40 is_stmt 0 discriminator 3 view .LVU431
 2292 0046 EDB2     		uxtb	r5, r5
 2293              	.LVL193:
 2294              	.L80:
 524:Core/Src/AB1815.c **** 	for (uint8_t pos = 0; pos < 0x7F; pos += 8)
 2295              		.loc 1 524 28 is_stmt 1 discriminator 1 view .LVU432
 2296 0048 7E2D     		cmp	r5, #126
 2297 004a DFD9     		bls	.L81
 2298              	.LBE26:
 528:Core/Src/AB1815.c **** 	}
 529:Core/Src/AB1815.c **** }
 2299              		.loc 1 529 1 is_stmt 0 view .LVU433
 2300 004c 08B0     		add	sp, sp, #32
 2301              		@ sp needed
 2302              	.LVL194:
 2303              		.loc 1 529 1 view .LVU434
 2304 004e 80BC     		pop	{r7}
 2305 0050 B846     		mov	r8, r7
 2306 0052 F0BD     		pop	{r4, r5, r6, r7, pc}
 2307              	.L83:
 2308              		.align	2
 2309              	.L82:
 2310 0054 00000000 		.word	.LC11
 2311              		.cfi_endproc
 2312              	.LFE478:
 2314              		.section	.rodata.detectChip.str1.4,"aMS",%progbits,1
 2315              		.align	2
 2316              	.LC13:
 2317 0000 464F5554 		.ascii	"FOUT did not go HIGH\012\000"
 2317      20646964 
 2317      206E6F74 
 2317      20676F20 
 2317      48494748 
 2318 0016 0000     		.align	2
 2319              	.LC15:
 2320 0018 5245475F 		.ascii	"REG_ID0 = %X\000"
 2320      49443020 
 2320      3D202558 
 2320      00
 2321 0025 000000   		.align	2
 2322              	.LC17:
 2323 0028 25580A00 		.ascii	"%X\012\000"
 2324              		.align	2
 2325              	.LC19:
 2326 002c 6E6F7420 		.ascii	"not detected\012\000"
 2326      64657465 
 2326      63746564 
 2326      0A00
 2327              		.section	.text.detectChip,"ax",%progbits
 2328              		.align	1
 2329              		.global	detectChip
 2330              		.syntax unified
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 62


 2331              		.code	16
 2332              		.thumb_func
 2334              	detectChip:
 2335              	.LFB479:
 530:Core/Src/AB1815.c **** 
 531:Core/Src/AB1815.c **** bool detectChip()
 532:Core/Src/AB1815.c **** {
 2336              		.loc 1 532 1 is_stmt 1 view -0
 2337              		.cfi_startproc
 2338              		@ args = 0, pretend = 0, frame = 8
 2339              		@ frame_needed = 0, uses_anonymous_args = 0
 2340 0000 10B5     		push	{r4, lr}
 2341              	.LCFI61:
 2342              		.cfi_def_cfa_offset 8
 2343              		.cfi_offset 4, -8
 2344              		.cfi_offset 14, -4
 2345 0002 82B0     		sub	sp, sp, #8
 2346              	.LCFI62:
 2347              		.cfi_def_cfa_offset 16
 533:Core/Src/AB1815.c **** 	bool bResult, finalResult = false;
 2348              		.loc 1 533 2 view .LVU436
 2349              	.LVL195:
 534:Core/Src/AB1815.c **** 	uint8_t value = 0;
 2350              		.loc 1 534 2 view .LVU437
 2351              		.loc 1 534 10 is_stmt 0 view .LVU438
 2352 0004 6B46     		mov	r3, sp
 2353 0006 0022     		movs	r2, #0
 2354 0008 DA71     		strb	r2, [r3, #7]
 535:Core/Src/AB1815.c **** 
 536:Core/Src/AB1815.c **** 	// FOUT/nIRQ  will go HIGH when the chip is ready to respond
 537:Core/Src/AB1815.c **** 
 538:Core/Src/AB1815.c **** 	unsigned long start = HAL_GetTick();
 2355              		.loc 1 538 2 is_stmt 1 view .LVU439
 2356              		.loc 1 538 24 is_stmt 0 view .LVU440
 2357 000a FFF7FEFF 		bl	HAL_GetTick
 2358              	.LVL196:
 2359 000e 0400     		movs	r4, r0
 2360              	.LVL197:
 539:Core/Src/AB1815.c **** 	bool ready = false;
 2361              		.loc 1 539 2 is_stmt 1 view .LVU441
 540:Core/Src/AB1815.c **** 	while (HAL_GetTick() - start < 1000)
 2362              		.loc 1 540 2 view .LVU442
 2363              		.loc 1 540 8 is_stmt 0 view .LVU443
 2364 0010 02E0     		b	.L85
 2365              	.LVL198:
 2366              	.L90:
 541:Core/Src/AB1815.c **** 	{
 542:Core/Src/AB1815.c **** 		if (HAL_GPIO_ReadPin(NIRQ_GPIO_Port, NIRQ_Pin) == GPIO_PIN_SET) // B12
 543:Core/Src/AB1815.c **** 		{
 544:Core/Src/AB1815.c **** 			ready = true;
 545:Core/Src/AB1815.c **** 			break;
 546:Core/Src/AB1815.c **** 		}
 547:Core/Src/AB1815.c **** 		if (!ready)
 2367              		.loc 1 547 3 is_stmt 1 view .LVU444
 548:Core/Src/AB1815.c **** 		{
 549:Core/Src/AB1815.c **** 			printf("FOUT did not go HIGH\n");
 2368              		.loc 1 549 4 view .LVU445
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 63


 2369 0012 1B48     		ldr	r0, .L92
 2370 0014 FFF7FEFF 		bl	printf_
 2371              	.LVL199:
 2372              	.L85:
 540:Core/Src/AB1815.c **** 	{
 2373              		.loc 1 540 31 view .LVU446
 540:Core/Src/AB1815.c **** 	{
 2374              		.loc 1 540 9 is_stmt 0 view .LVU447
 2375 0018 FFF7FEFF 		bl	HAL_GetTick
 2376              	.LVL200:
 540:Core/Src/AB1815.c **** 	{
 2377              		.loc 1 540 23 view .LVU448
 2378 001c 001B     		subs	r0, r0, r4
 540:Core/Src/AB1815.c **** 	{
 2379              		.loc 1 540 31 view .LVU449
 2380 001e FA23     		movs	r3, #250
 2381 0020 9B00     		lsls	r3, r3, #2
 2382 0022 9842     		cmp	r0, r3
 2383 0024 06D2     		bcs	.L86
 542:Core/Src/AB1815.c **** 		{
 2384              		.loc 1 542 3 is_stmt 1 view .LVU450
 542:Core/Src/AB1815.c **** 		{
 2385              		.loc 1 542 7 is_stmt 0 view .LVU451
 2386 0026 8021     		movs	r1, #128
 2387 0028 4901     		lsls	r1, r1, #5
 2388 002a 1648     		ldr	r0, .L92+4
 2389 002c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2390              	.LVL201:
 542:Core/Src/AB1815.c **** 		{
 2391              		.loc 1 542 6 view .LVU452
 2392 0030 0128     		cmp	r0, #1
 2393 0032 EED1     		bne	.L90
 2394              	.L86:
 2395              	.LVL202:
 550:Core/Src/AB1815.c **** 			// May just want to return false here
 551:Core/Src/AB1815.c **** 		}
 552:Core/Src/AB1815.c **** 	}
 553:Core/Src/AB1815.c **** 
 554:Core/Src/AB1815.c **** 	bResult = read(AB1815_REG_ID0, &value, 1); // REG_ID0 = 0x28, the upper RW bit indicating read (if
 2396              		.loc 1 554 2 is_stmt 1 view .LVU453
 2397              		.loc 1 554 12 is_stmt 0 view .LVU454
 2398 0034 0122     		movs	r2, #1
 2399 0036 6B46     		mov	r3, sp
 2400 0038 D91D     		adds	r1, r3, #7
 2401 003a 2820     		movs	r0, #40
 2402 003c FFF7FEFF 		bl	read
 2403              	.LVL203:
 555:Core/Src/AB1815.c **** 	if (bResult && value == REG_ID0_AB18XX)
 2404              		.loc 1 555 2 is_stmt 1 view .LVU455
 2405              		.loc 1 555 5 is_stmt 0 view .LVU456
 2406 0040 0028     		cmp	r0, #0
 2407 0042 03D0     		beq	.L88
 2408              		.loc 1 555 23 discriminator 1 view .LVU457
 2409 0044 6B46     		mov	r3, sp
 2410 0046 D979     		ldrb	r1, [r3, #7]
 2411              		.loc 1 555 14 discriminator 1 view .LVU458
 2412 0048 1829     		cmp	r1, #24
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 64


 2413 004a 06D0     		beq	.L91
 2414              	.LVL204:
 2415              	.L88:
 556:Core/Src/AB1815.c **** 	{
 557:Core/Src/AB1815.c **** 		printf("REG_ID0 = %X", value);
 558:Core/Src/AB1815.c **** 		bResult = read(AB1815_REG_ID1, &value, 1);
 559:Core/Src/AB1815.c **** 		if (bResult && value == REG_ID1_ABXX15)
 560:Core/Src/AB1815.c **** 		{
 561:Core/Src/AB1815.c **** 			printf("%X\n", value);
 562:Core/Src/AB1815.c **** 			finalResult = true;
 563:Core/Src/AB1815.c **** 		}
 564:Core/Src/AB1815.c **** 	}
 565:Core/Src/AB1815.c **** 	if (!finalResult)
 566:Core/Src/AB1815.c **** 	{
 567:Core/Src/AB1815.c **** 		printf("not detected\n");
 2416              		.loc 1 567 3 is_stmt 1 view .LVU459
 2417 004c 0E48     		ldr	r0, .L92+8
 2418 004e FFF7FEFF 		bl	printf_
 2419              	.LVL205:
 2420 0052 0024     		movs	r4, #0
 2421              	.L89:
 568:Core/Src/AB1815.c **** 	}
 569:Core/Src/AB1815.c **** 
 570:Core/Src/AB1815.c **** 	return finalResult;
 2422              		.loc 1 570 2 view .LVU460
 571:Core/Src/AB1815.c **** }
 2423              		.loc 1 571 1 is_stmt 0 view .LVU461
 2424 0054 2000     		movs	r0, r4
 2425 0056 02B0     		add	sp, sp, #8
 2426              		@ sp needed
 2427 0058 10BD     		pop	{r4, pc}
 2428              	.LVL206:
 2429              	.L91:
 557:Core/Src/AB1815.c **** 		bResult = read(AB1815_REG_ID1, &value, 1);
 2430              		.loc 1 557 3 is_stmt 1 view .LVU462
 2431 005a 0C48     		ldr	r0, .L92+12
 2432              	.LVL207:
 557:Core/Src/AB1815.c **** 		bResult = read(AB1815_REG_ID1, &value, 1);
 2433              		.loc 1 557 3 is_stmt 0 view .LVU463
 2434 005c FFF7FEFF 		bl	printf_
 2435              	.LVL208:
 558:Core/Src/AB1815.c **** 		if (bResult && value == REG_ID1_ABXX15)
 2436              		.loc 1 558 3 is_stmt 1 view .LVU464
 558:Core/Src/AB1815.c **** 		if (bResult && value == REG_ID1_ABXX15)
 2437              		.loc 1 558 13 is_stmt 0 view .LVU465
 2438 0060 0122     		movs	r2, #1
 2439 0062 6B46     		mov	r3, sp
 2440 0064 D91D     		adds	r1, r3, #7
 2441 0066 2920     		movs	r0, #41
 2442 0068 FFF7FEFF 		bl	read
 2443              	.LVL209:
 2444 006c 041E     		subs	r4, r0, #0
 2445              	.LVL210:
 559:Core/Src/AB1815.c **** 		{
 2446              		.loc 1 559 3 is_stmt 1 view .LVU466
 559:Core/Src/AB1815.c **** 		{
 2447              		.loc 1 559 6 is_stmt 0 view .LVU467
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 65


 2448 006e EDD0     		beq	.L88
 559:Core/Src/AB1815.c **** 		{
 2449              		.loc 1 559 24 discriminator 1 view .LVU468
 2450 0070 6B46     		mov	r3, sp
 2451 0072 D979     		ldrb	r1, [r3, #7]
 559:Core/Src/AB1815.c **** 		{
 2452              		.loc 1 559 15 discriminator 1 view .LVU469
 2453 0074 1529     		cmp	r1, #21
 2454 0076 E9D1     		bne	.L88
 561:Core/Src/AB1815.c **** 			finalResult = true;
 2455              		.loc 1 561 4 is_stmt 1 view .LVU470
 2456 0078 0548     		ldr	r0, .L92+16
 2457              	.LVL211:
 561:Core/Src/AB1815.c **** 			finalResult = true;
 2458              		.loc 1 561 4 is_stmt 0 view .LVU471
 2459 007a FFF7FEFF 		bl	printf_
 2460              	.LVL212:
 562:Core/Src/AB1815.c **** 		}
 2461              		.loc 1 562 4 is_stmt 1 view .LVU472
 565:Core/Src/AB1815.c **** 	{
 2462              		.loc 1 565 2 view .LVU473
 2463 007e E9E7     		b	.L89
 2464              	.L93:
 2465              		.align	2
 2466              	.L92:
 2467 0080 00000000 		.word	.LC13
 2468 0084 00040050 		.word	1342178304
 2469 0088 2C000000 		.word	.LC19
 2470 008c 18000000 		.word	.LC15
 2471 0090 28000000 		.word	.LC17
 2472              		.cfi_endproc
 2473              	.LFE479:
 2475              		.section	.rodata.initialize_clock.str1.4,"aMS",%progbits,1
 2476              		.align	2
 2477              	.LC21:
 2478 0000 23207265 		.ascii	"# retrieved oscillator_control: %X\012\000"
 2478      74726965 
 2478      76656420 
 2478      6F736369 
 2478      6C6C6174 
 2479              		.align	2
 2480              	.LC23:
 2481 0024 23207365 		.ascii	"# set oscillator_control: %X\012\000"
 2481      74206F73 
 2481      63696C6C 
 2481      61746F72 
 2481      5F636F6E 
 2482              		.section	.text.initialize_clock,"ax",%progbits
 2483              		.align	1
 2484              		.global	initialize_clock
 2485              		.syntax unified
 2486              		.code	16
 2487              		.thumb_func
 2489              	initialize_clock:
 2490              	.LFB480:
 572:Core/Src/AB1815.c **** 
 573:Core/Src/AB1815.c **** void initialize_clock(void)
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 66


 574:Core/Src/AB1815.c **** {
 2491              		.loc 1 574 1 view -0
 2492              		.cfi_startproc
 2493              		@ args = 0, pretend = 0, frame = 16
 2494              		@ frame_needed = 0, uses_anonymous_args = 0
 2495 0000 30B5     		push	{r4, r5, lr}
 2496              	.LCFI63:
 2497              		.cfi_def_cfa_offset 12
 2498              		.cfi_offset 4, -12
 2499              		.cfi_offset 5, -8
 2500              		.cfi_offset 14, -4
 2501 0002 85B0     		sub	sp, sp, #20
 2502              	.LCFI64:
 2503              		.cfi_def_cfa_offset 32
 575:Core/Src/AB1815.c **** 	oscillator_control_t oscillator_control;
 2504              		.loc 1 575 2 view .LVU475
 576:Core/Src/AB1815.c **** 	get_oscillator_control(&oscillator_control);
 2505              		.loc 1 576 2 view .LVU476
 2506 0004 03AC     		add	r4, sp, #12
 2507 0006 2000     		movs	r0, r4
 2508 0008 FFF7FEFF 		bl	get_oscillator_control
 2509              	.LVL213:
 577:Core/Src/AB1815.c **** 	printf("# retrieved oscillator_control: %X\n", oscillator_control.value);
 2510              		.loc 1 577 2 view .LVU477
 2511              		.loc 1 577 67 is_stmt 0 view .LVU478
 2512 000c 2178     		ldrb	r1, [r4]
 2513              		.loc 1 577 2 view .LVU479
 2514 000e 1F48     		ldr	r0, .L95
 2515 0010 FFF7FEFF 		bl	printf_
 2516              	.LVL214:
 578:Core/Src/AB1815.c **** 
 579:Core/Src/AB1815.c **** 	//  OSEL = 1 when using RC oscillator instead of XTAL
 580:Core/Src/AB1815.c **** 	oscillator_control.fields.OSEL = 1;
 2517              		.loc 1 580 2 is_stmt 1 view .LVU480
 2518              		.loc 1 580 33 is_stmt 0 view .LVU481
 2519 0014 2278     		ldrb	r2, [r4]
 2520 0016 8023     		movs	r3, #128
 2521 0018 5B42     		rsbs	r3, r3, #0
 2522 001a 1343     		orrs	r3, r2
 2523 001c 2370     		strb	r3, [r4]
 581:Core/Src/AB1815.c **** 
 582:Core/Src/AB1815.c **** 	//  Disable I/O Interface during sleep to ensure the clock it not corrupted
 583:Core/Src/AB1815.c **** 	//  by floating pins and what not.
 584:Core/Src/AB1815.c **** 	oscillator_control.fields.PWGT = 1;
 2524              		.loc 1 584 2 is_stmt 1 view .LVU482
 2525              		.loc 1 584 33 is_stmt 0 view .LVU483
 2526 001e DBB2     		uxtb	r3, r3
 2527 0020 0425     		movs	r5, #4
 2528 0022 2B43     		orrs	r3, r5
 2529 0024 2370     		strb	r3, [r4]
 585:Core/Src/AB1815.c **** 	printf("# set oscillator_control: %X\n", oscillator_control.value);
 2530              		.loc 1 585 2 is_stmt 1 view .LVU484
 2531              		.loc 1 585 61 is_stmt 0 view .LVU485
 2532 0026 D9B2     		uxtb	r1, r3
 2533              		.loc 1 585 2 view .LVU486
 2534 0028 1948     		ldr	r0, .L95+4
 2535 002a FFF7FEFF 		bl	printf_
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 67


 2536              	.LVL215:
 586:Core/Src/AB1815.c **** 
 587:Core/Src/AB1815.c **** 	set_oscillator_control(&oscillator_control);
 2537              		.loc 1 587 2 is_stmt 1 view .LVU487
 2538 002e 2000     		movs	r0, r4
 2539 0030 FFF7FEFF 		bl	set_oscillator_control
 2540              	.LVL216:
 588:Core/Src/AB1815.c **** 
 589:Core/Src/AB1815.c **** 	//  Hundredths don't seem to tick over when using the RC clock source
 590:Core/Src/AB1815.c **** 	//  So I clear them
 591:Core/Src/AB1815.c **** 	clear_hundrdeds();
 2541              		.loc 1 591 2 view .LVU488
 2542 0034 FFF7FEFF 		bl	clear_hundrdeds
 2543              	.LVL217:
 592:Core/Src/AB1815.c **** 
 593:Core/Src/AB1815.c **** 	control1_t control1;
 2544              		.loc 1 593 2 view .LVU489
 594:Core/Src/AB1815.c **** 	get_control1(&control1);
 2545              		.loc 1 594 2 view .LVU490
 2546 0038 02AC     		add	r4, sp, #8
 2547 003a 2000     		movs	r0, r4
 2548 003c FFF7FEFF 		bl	get_control1
 2549              	.LVL218:
 595:Core/Src/AB1815.c **** 
 596:Core/Src/AB1815.c **** 	//	0 is 24 Hour Mode
 597:Core/Src/AB1815.c **** 	control1.fields._12_24 = 0;
 2550              		.loc 1 597 2 view .LVU491
 2551              		.loc 1 597 25 is_stmt 0 view .LVU492
 2552 0040 2378     		ldrb	r3, [r4]
 2553 0042 4022     		movs	r2, #64
 2554 0044 9343     		bics	r3, r2
 2555 0046 2370     		strb	r3, [r4]
 598:Core/Src/AB1815.c **** 
 599:Core/Src/AB1815.c **** 	//  1 is Power Switch Mode
 600:Core/Src/AB1815.c **** 	control1.fields.PWR2 = 1;
 2556              		.loc 1 600 2 is_stmt 1 view .LVU493
 2557              		.loc 1 600 23 is_stmt 0 view .LVU494
 2558 0048 DBB2     		uxtb	r3, r3
 2559 004a 0222     		movs	r2, #2
 2560 004c 1343     		orrs	r3, r2
 2561 004e 2370     		strb	r3, [r4]
 601:Core/Src/AB1815.c **** 	set_control1(&control1);
 2562              		.loc 1 601 2 is_stmt 1 view .LVU495
 2563 0050 2000     		movs	r0, r4
 2564 0052 FFF7FEFF 		bl	set_control1
 2565              	.LVL219:
 602:Core/Src/AB1815.c **** 
 603:Core/Src/AB1815.c **** 	inturrupt_mask_t int_mask;
 2566              		.loc 1 603 2 view .LVU496
 604:Core/Src/AB1815.c **** 	get_interrupt_mask(&int_mask);
 2567              		.loc 1 604 2 view .LVU497
 2568 0056 01AC     		add	r4, sp, #4
 2569 0058 2000     		movs	r0, r4
 2570 005a FFF7FEFF 		bl	get_interrupt_mask
 2571              	.LVL220:
 605:Core/Src/AB1815.c **** 
 606:Core/Src/AB1815.c **** 	//  Alarm Interrupt Enable = true
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 68


 607:Core/Src/AB1815.c **** 	int_mask.fields.AIE = 1;
 2572              		.loc 1 607 2 view .LVU498
 2573              		.loc 1 607 22 is_stmt 0 view .LVU499
 2574 005e 2378     		ldrb	r3, [r4]
 2575 0060 2B43     		orrs	r3, r5
 2576 0062 2370     		strb	r3, [r4]
 608:Core/Src/AB1815.c **** 
 609:Core/Src/AB1815.c **** 	//  Set Interrupt Mode to be a Logic Level (opposed to a pulse)
 610:Core/Src/AB1815.c **** 	int_mask.fields.IM = ab1815_interrupt_im_level;
 2577              		.loc 1 610 2 is_stmt 1 view .LVU500
 2578              		.loc 1 610 21 is_stmt 0 view .LVU501
 2579 0064 DBB2     		uxtb	r3, r3
 2580 0066 6022     		movs	r2, #96
 2581 0068 9343     		bics	r3, r2
 2582 006a 2370     		strb	r3, [r4]
 611:Core/Src/AB1815.c **** 	set_interrupt_mask(&int_mask);
 2583              		.loc 1 611 2 is_stmt 1 view .LVU502
 2584 006c 2000     		movs	r0, r4
 2585 006e FFF7FEFF 		bl	set_interrupt_mask
 2586              	.LVL221:
 612:Core/Src/AB1815.c **** 
 613:Core/Src/AB1815.c **** 	control2_t control2;
 2587              		.loc 1 613 2 view .LVU503
 614:Core/Src/AB1815.c **** 
 615:Core/Src/AB1815.c **** 	//  Set NIRQ Pin to output NIRQ (since AIE is enabled)
 616:Core/Src/AB1815.c **** 	//    control2.fields.OUT1S = ab1815_fout_nIRQ_or_OUT;
 617:Core/Src/AB1815.c **** 
 618:Core/Src/AB1815.c **** 	//  Set NIRQ2 pin to be power switched sleep
 619:Core/Src/AB1815.c **** 	control2.fields.OUT2S = ab1815_psw_SLEEP;
 2588              		.loc 1 619 2 view .LVU504
 2589              		.loc 1 619 24 is_stmt 0 view .LVU505
 2590 0072 6B46     		mov	r3, sp
 2591 0074 1B78     		ldrb	r3, [r3]
 2592 0076 1C22     		movs	r2, #28
 2593 0078 9343     		bics	r3, r2
 2594 007a 1822     		movs	r2, #24
 2595 007c 1343     		orrs	r3, r2
 2596 007e 6A46     		mov	r2, sp
 2597 0080 1370     		strb	r3, [r2]
 620:Core/Src/AB1815.c **** 	set_control2(&control2);
 2598              		.loc 1 620 2 is_stmt 1 view .LVU506
 2599 0082 6846     		mov	r0, sp
 2600 0084 FFF7FEFF 		bl	set_control2
 2601              	.LVL222:
 621:Core/Src/AB1815.c **** }
 2602              		.loc 1 621 1 is_stmt 0 view .LVU507
 2603 0088 05B0     		add	sp, sp, #20
 2604              		@ sp needed
 2605 008a 30BD     		pop	{r4, r5, pc}
 2606              	.L96:
 2607              		.align	2
 2608              	.L95:
 2609 008c 00000000 		.word	.LC21
 2610 0090 24000000 		.word	.LC23
 2611              		.cfi_endproc
 2612              	.LFE480:
 2614              		.section	.text.set_timer,"ax",%progbits
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 69


 2615              		.align	1
 2616              		.global	set_timer
 2617              		.syntax unified
 2618              		.code	16
 2619              		.thumb_func
 2621              	set_timer:
 2622              	.LFB481:
 622:Core/Src/AB1815.c **** 
 623:Core/Src/AB1815.c **** void set_timer(void)
 624:Core/Src/AB1815.c **** {
 2623              		.loc 1 624 1 is_stmt 1 view -0
 2624              		.cfi_startproc
 2625              		@ args = 0, pretend = 0, frame = 8
 2626              		@ frame_needed = 0, uses_anonymous_args = 0
 2627 0000 00B5     		push	{lr}
 2628              	.LCFI65:
 2629              		.cfi_def_cfa_offset 4
 2630              		.cfi_offset 14, -4
 2631 0002 83B0     		sub	sp, sp, #12
 2632              	.LCFI66:
 2633              		.cfi_def_cfa_offset 16
 625:Core/Src/AB1815.c **** 	countdown_control_t control;
 2634              		.loc 1 625 2 view .LVU509
 626:Core/Src/AB1815.c **** 	inturrupt_mask_t int_mask;
 2635              		.loc 1 626 2 view .LVU510
 627:Core/Src/AB1815.c **** 	int_mask.fields.TIE = 1;
 2636              		.loc 1 627 2 view .LVU511
 2637              		.loc 1 627 22 is_stmt 0 view .LVU512
 2638 0004 6B46     		mov	r3, sp
 2639 0006 1B78     		ldrb	r3, [r3]
 2640 0008 0822     		movs	r2, #8
 2641 000a 1343     		orrs	r3, r2
 2642 000c 6A46     		mov	r2, sp
 2643 000e 1370     		strb	r3, [r2]
 628:Core/Src/AB1815.c **** 	set_interrupt_mask(&int_mask);
 2644              		.loc 1 628 2 is_stmt 1 view .LVU513
 2645 0010 6846     		mov	r0, sp
 2646 0012 FFF7FEFF 		bl	set_interrupt_mask
 2647              	.LVL223:
 629:Core/Src/AB1815.c **** 	// Clear any pending interrupts
 630:Core/Src/AB1815.c **** 	write(AB1815_REG_STATUS, 0, 1); // REG_STATUS_DEFAULT= 0x00; //!< Status register, default
 2648              		.loc 1 630 2 view .LVU514
 2649 0016 0122     		movs	r2, #1
 2650 0018 0021     		movs	r1, #0
 2651 001a 0F20     		movs	r0, #15
 2652 001c FFF7FEFF 		bl	write
 2653              	.LVL224:
 631:Core/Src/AB1815.c **** 	// Stop countdown timer if already running since it can't be set while running
 632:Core/Src/AB1815.c **** 	// REG_TIMER_CTRL_DEFAULT   = 0x23; //!< Countdown timer control, 0b00100011 (TFPT + TFS = 1/60 Hz
 633:Core/Src/AB1815.c **** 	write(AB1815_REG_COUNTDOWN_TIMER_CONTROL, (uint8_t *)0x23, 1);
 2654              		.loc 1 633 2 view .LVU515
 2655 0020 0122     		movs	r2, #1
 2656 0022 2321     		movs	r1, #35
 2657 0024 1820     		movs	r0, #24
 2658 0026 FFF7FEFF 		bl	write
 2659              	.LVL225:
 634:Core/Src/AB1815.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 70


 635:Core/Src/AB1815.c **** 	control.fields.TM = 1;
 2660              		.loc 1 635 2 view .LVU516
 2661              		.loc 1 635 20 is_stmt 0 view .LVU517
 2662 002a 01A8     		add	r0, sp, #4
 2663 002c 0378     		ldrb	r3, [r0]
 2664 002e 4022     		movs	r2, #64
 2665 0030 1343     		orrs	r3, r2
 2666 0032 0370     		strb	r3, [r0]
 636:Core/Src/AB1815.c **** 	control.fields.TRPT = 1;
 2667              		.loc 1 636 2 is_stmt 1 view .LVU518
 2668              		.loc 1 636 22 is_stmt 0 view .LVU519
 2669 0034 DBB2     		uxtb	r3, r3
 2670 0036 2022     		movs	r2, #32
 2671 0038 1343     		orrs	r3, r2
 2672 003a 0370     		strb	r3, [r0]
 637:Core/Src/AB1815.c **** 	control.fields.TFS = 0b11;
 2673              		.loc 1 637 2 is_stmt 1 view .LVU520
 2674              		.loc 1 637 21 is_stmt 0 view .LVU521
 2675 003c DBB2     		uxtb	r3, r3
 2676 003e 0322     		movs	r2, #3
 2677 0040 1343     		orrs	r3, r2
 2678 0042 0370     		strb	r3, [r0]
 638:Core/Src/AB1815.c **** 	set_countdown_control(&control);
 2679              		.loc 1 638 2 is_stmt 1 view .LVU522
 2680 0044 FFF7FEFF 		bl	set_countdown_control
 2681              	.LVL226:
 639:Core/Src/AB1815.c **** 	set_countdown_timer(60);
 2682              		.loc 1 639 2 view .LVU523
 2683 0048 3C20     		movs	r0, #60
 2684 004a FFF7FEFF 		bl	set_countdown_timer
 2685              	.LVL227:
 640:Core/Src/AB1815.c **** }
 2686              		.loc 1 640 1 is_stmt 0 view .LVU524
 2687 004e 03B0     		add	sp, sp, #12
 2688              		@ sp needed
 2689 0050 00BD     		pop	{pc}
 2690              		.cfi_endproc
 2691              	.LFE481:
 2693              		.section	.text.enable_countdown,"ax",%progbits
 2694              		.align	1
 2695              		.global	enable_countdown
 2696              		.syntax unified
 2697              		.code	16
 2698              		.thumb_func
 2700              	enable_countdown:
 2701              	.LFB482:
 641:Core/Src/AB1815.c **** 
 642:Core/Src/AB1815.c **** void enable_countdown(void)
 643:Core/Src/AB1815.c **** {
 2702              		.loc 1 643 1 is_stmt 1 view -0
 2703              		.cfi_startproc
 2704              		@ args = 0, pretend = 0, frame = 8
 2705              		@ frame_needed = 0, uses_anonymous_args = 0
 2706 0000 00B5     		push	{lr}
 2707              	.LCFI67:
 2708              		.cfi_def_cfa_offset 4
 2709              		.cfi_offset 14, -4
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 71


 2710 0002 83B0     		sub	sp, sp, #12
 2711              	.LCFI68:
 2712              		.cfi_def_cfa_offset 16
 644:Core/Src/AB1815.c **** 	countdown_control_t control;
 2713              		.loc 1 644 2 view .LVU526
 645:Core/Src/AB1815.c **** 	control.fields.TE = 1;
 2714              		.loc 1 645 2 view .LVU527
 2715              		.loc 1 645 20 is_stmt 0 view .LVU528
 2716 0004 6B46     		mov	r3, sp
 2717 0006 1A79     		ldrb	r2, [r3, #4]
 2718 0008 8023     		movs	r3, #128
 2719 000a 5B42     		rsbs	r3, r3, #0
 2720 000c 1343     		orrs	r3, r2
 2721 000e 6A46     		mov	r2, sp
 2722 0010 1371     		strb	r3, [r2, #4]
 646:Core/Src/AB1815.c **** 	set_countdown_control(&control);
 2723              		.loc 1 646 2 is_stmt 1 view .LVU529
 2724 0012 01A8     		add	r0, sp, #4
 2725 0014 FFF7FEFF 		bl	set_countdown_control
 2726              	.LVL228:
 647:Core/Src/AB1815.c **** }
 2727              		.loc 1 647 1 is_stmt 0 view .LVU530
 2728 0018 03B0     		add	sp, sp, #12
 2729              		@ sp needed
 2730 001a 00BD     		pop	{pc}
 2731              		.cfi_endproc
 2732              	.LFE482:
 2734              		.section	.rodata.__func__.0,"a"
 2735              		.align	2
 2738              	__func__.0:
 2739 0000 77726974 		.ascii	"write\000"
 2739      6500
 2740              		.section	.rodata.__func__.1,"a"
 2741              		.align	2
 2744              	__func__.1:
 2745 0000 72656164 		.ascii	"read\000"
 2745      00
 2746              		.global	ab1815_status_e_ERROR
 2747              		.section	.bss.ab1815_status_e_ERROR,"aw",%nobits
 2750              	ab1815_status_e_ERROR:
 2751 0000 00       		.space	1
 2752              		.global	ab1815_status_e_OK
 2753              		.section	.data.ab1815_status_e_OK,"aw"
 2756              	ab1815_status_e_OK:
 2757 0000 01       		.byte	1
 2758              		.text
 2759              	.Letext0:
 2760              		.file 3 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 2761              		.file 4 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 2762              		.file 5 "Drivers/CMSIS/Device/ST/STM32U0xx/Include/stm32u073xx.h"
 2763              		.file 6 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/inc
 2764              		.file 7 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_def.h"
 2765              		.file 8 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_gpio.h"
 2766              		.file 9 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_dma.h"
 2767              		.file 10 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_spi.h"
 2768              		.file 11 "Core\\Inc/SPI.h"
 2769              		.file 12 "Core\\Inc/printf.h"
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 72


 2770              		.file 13 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/..
 2771              		.file 14 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_dma.h"
 2772              		.file 15 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal.h"
 2773              		.file 16 "Core\\Inc/main.h"
 2774              		.file 17 "<built-in>"
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 73


DEFINED SYMBOLS
                            *ABS*:00000000 AB1815.c
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:19     .text.spi_select_slave:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:25     .text.spi_select_slave:00000000 spi_select_slave
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:57     .text.spi_select_slave:00000018 $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:62     .text.read:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:68     .text.read:00000000 read
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:160    .text.read:0000005c $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2756   .data.ab1815_status_e_OK:00000000 ab1815_status_e_OK
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2744   .rodata.__func__.1:00000000 __func__.1
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:168    .text.write:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:174    .text.write:00000000 write
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:264    .text.write:0000005c $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2738   .rodata.__func__.0:00000000 __func__.0
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:272    .text.clear_hundrdeds:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:278    .text.clear_hundrdeds:00000000 clear_hundrdeds
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:311    .text.set_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:317    .text.set_status:00000000 set_status
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:346    .text.get_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:352    .text.get_status:00000000 get_status
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:381    .text.set_control1:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:387    .text.set_control1:00000000 set_control1
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:416    .text.get_control1:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:422    .text.get_control1:00000000 get_control1
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:451    .text.set_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:457    .text.set_control2:00000000 set_control2
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:486    .text.get_control2:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:492    .text.get_control2:00000000 get_control2
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:521    .text.set_interrupt_mask:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:527    .text.set_interrupt_mask:00000000 set_interrupt_mask
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:556    .text.get_interrupt_mask:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:562    .text.get_interrupt_mask:00000000 get_interrupt_mask
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:591    .text.set_square_wave:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:597    .text.set_square_wave:00000000 set_square_wave
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:626    .text.get_square_wave:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:632    .text.get_square_wave:00000000 get_square_wave
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:661    .text.set_cal_xt:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:667    .text.set_cal_xt:00000000 set_cal_xt
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:696    .text.get_cal_xt:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:702    .text.get_cal_xt:00000000 get_cal_xt
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:731    .text.set_cal_rc_hi:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:737    .text.set_cal_rc_hi:00000000 set_cal_rc_hi
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:766    .text.get_cal_rc_hi:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:772    .text.get_cal_rc_hi:00000000 get_cal_rc_hi
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:801    .text.set_cal_rc_low:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:807    .text.set_cal_rc_low:00000000 set_cal_rc_low
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:836    .text.get_cal_rc_low:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:842    .text.get_cal_rc_low:00000000 get_cal_rc_low
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:871    .text.set_sleep_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:877    .text.set_sleep_control:00000000 set_sleep_control
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:906    .text.get_sleep_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:912    .text.get_sleep_control:00000000 get_sleep_control
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:941    .text.set_countdown_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:947    .text.set_countdown_control:00000000 set_countdown_control
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:976    .text.get_countdown_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:982    .text.get_countdown_control:00000000 get_countdown_control
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1011   .text.set_countdown_timer:00000000 $t
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 74


C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1017   .text.set_countdown_timer:00000000 set_countdown_timer
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1051   .text.get_countdown_timer:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1057   .text.get_countdown_timer:00000000 get_countdown_timer
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1086   .text.set_countdown_timer_initial_value:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1092   .text.set_countdown_timer_initial_value:00000000 set_countdown_timer_initial_value
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1126   .text.get_countdown_timer_initial_value:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1132   .text.get_countdown_timer_initial_value:00000000 get_countdown_timer_initial_value
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1161   .text.set_watchdog_timer:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1167   .text.set_watchdog_timer:00000000 set_watchdog_timer
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1196   .text.get_watchdog_timer:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1202   .text.get_watchdog_timer:00000000 get_watchdog_timer
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1231   .text.get_oscillator_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1237   .text.get_oscillator_control:00000000 get_oscillator_control
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1266   .text.set_oscillator_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1272   .text.set_oscillator_status:00000000 set_oscillator_status
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1301   .text.get_oscillator_status:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1307   .text.get_oscillator_status:00000000 get_oscillator_status
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1336   .text.set_configuration_key:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1342   .text.set_configuration_key:00000000 set_configuration_key
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1376   .text.set_oscillator_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1382   .text.set_oscillator_control:00000000 set_oscillator_control
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1432   .text.set_oscillator_control:00000024 $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2750   .bss.ab1815_status_e_ERROR:00000000 ab1815_status_e_ERROR
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1438   .text.set_trickle:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1444   .text.set_trickle:00000000 set_trickle
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1473   .text.get_trickle:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1479   .text.get_trickle:00000000 get_trickle
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1508   .text.set_bref_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1514   .text.set_bref_control:00000000 set_bref_control
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1543   .text.get_bref_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1549   .text.get_bref_control:00000000 get_bref_control
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1578   .text.set_afctrl:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1584   .text.set_afctrl:00000000 set_afctrl
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1618   .text.get_:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1624   .text.get_:00000000 get_
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1653   .text.set_batmodeio:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1659   .text.set_batmodeio:00000000 set_batmodeio
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1714   .text.set_batmodeio:0000002c $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1720   .text.get_batmodeio:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1726   .text.get_batmodeio:00000000 get_batmodeio
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1755   .text.get_id:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1761   .text.get_id:00000000 get_id
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1990   .text.get_id:000000a8 $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:1995   .text.set_analog_status_register:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2001   .text.set_analog_status_register:00000000 set_analog_status_register
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2030   .text.get_analog_status_register:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2036   .text.get_analog_status_register:00000000 get_analog_status_register
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2065   .text.set_output_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2071   .text.set_output_control:00000000 set_output_control
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2100   .text.get_output_control:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2106   .text.get_output_control:00000000 get_output_control
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2135   .text.set_extension_ram:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2141   .text.set_extension_ram:00000000 set_extension_ram
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2170   .text.get_extension_ram:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2176   .text.get_extension_ram:00000000 get_extension_ram
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2205   .rodata.hex_dump.str1.4:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2210   .text.hex_dump:00000000 $t
ARM GAS  C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s 			page 75


C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2216   .text.hex_dump:00000000 hex_dump
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2310   .text.hex_dump:00000054 $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2315   .rodata.detectChip.str1.4:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2328   .text.detectChip:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2334   .text.detectChip:00000000 detectChip
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2467   .text.detectChip:00000080 $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2476   .rodata.initialize_clock.str1.4:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2483   .text.initialize_clock:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2489   .text.initialize_clock:00000000 initialize_clock
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2609   .text.initialize_clock:0000008c $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2615   .text.set_timer:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2621   .text.set_timer:00000000 set_timer
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2694   .text.enable_countdown:00000000 $t
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2700   .text.enable_countdown:00000000 enable_countdown
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2735   .rodata.__func__.0:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2741   .rodata.__func__.1:00000000 $d
C:\Users\upo\AppData\Local\Temp\cc2CZs6Q.s:2751   .bss.ab1815_status_e_ERROR:00000000 $d

UNDEFINED SYMBOLS
HAL_SPI_Transmit
HAL_SPI_Receive
print_error
hspi1
memset
printf_
HAL_GetTick
HAL_GPIO_ReadPin
