ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32u0xx_hal_pwr.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c"
  18              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  19              		.align	1
  20              		.p2align 2,,3
  21              		.global	HAL_PWR_DeInit
  22              		.syntax unified
  23              		.code	16
  24              		.thumb_func
  26              	HAL_PWR_DeInit:
  27              	.LFB334:
   1:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
   2:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   ******************************************************************************
   3:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @file    stm32u0xx_hal_pwr.c
   4:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @author  MCD Application Team
   5:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *           + Initialization/de-initialization functions
   9:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *           + Peripheral Control functions
  10:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *
  11:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   ******************************************************************************
  12:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @attention
  13:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *
  14:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * Copyright (c) 2023 STMicroelectronics.
  15:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * All rights reserved.
  16:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *
  17:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * This software is licensed under terms that can be found in the LICENSE file
  18:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * in the root directory of this software component.
  19:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  20:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *
  21:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   ******************************************************************************
  22:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  23:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  24:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  25:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** #include "stm32u0xx_hal.h"
  26:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  27:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /** @addtogroup STM32U0xx_HAL_Driver
  28:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @{
  29:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  30:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  31:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /** @defgroup PWR PWR
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 2


  32:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief PWR HAL module driver
  33:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @{
  34:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  35:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  36:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  37:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  38:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  39:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  40:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  41:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /** @defgroup PWR_Private_Defines PWR Private Defines
  42:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @{
  43:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  44:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  45:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
  46:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @{
  47:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  48:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** #define PVD_MODE_IT               0x00010000U   /*!< Mask for interruption yielded by PVD threshold
  49:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** #define PVD_MODE_EVT              0x00020000U   /*!< Mask for event yielded by PVD threshold crossi
  50:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** #define PVD_RISING_EDGE           0x00000001U   /*!< Mask for rising edge set as PVD trigger       
  51:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** #define PVD_FALLING_EDGE          0x00000002U   /*!< Mask for falling edge set as PVD trigger      
  52:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
  53:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @}
  54:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  55:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  56:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /** @defgroup PWR_Enable_PWR PWR EWUP All Pins
  57:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @{
  58:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  59:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** #define PWR_EWUP_Msk              0x0000005FU   /*!< Mask for all wake-up pins */
  60:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
  61:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @}
  62:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  63:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  64:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
  65:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @}
  66:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  67:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  68:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  69:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  70:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  71:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /* Exported functions --------------------------------------------------------*/
  72:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  73:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  74:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @{
  75:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  76:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  77:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions
  78:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  79:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *
  80:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** @verbatim
  81:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****  ===============================================================================
  82:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  83:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****  ===============================================================================
  84:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     [..]
  85:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  86:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** @endverbatim
  87:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @{
  88:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 3


  89:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
  90:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
  91:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Deinitialize the HAL PWR peripheral registers to their default reset values.
  92:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
  93:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
  94:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
  95:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
  28              		.loc 1 95 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  96:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  33              		.loc 1 96 3 view .LVU1
  34 0000 8022     		movs	r2, #128
  97:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  98:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
  35              		.loc 1 98 1 is_stmt 0 view .LVU2
  36              		@ sp needed
  96:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  37              		.loc 1 96 3 view .LVU3
  38 0002 054B     		ldr	r3, .L3
  39 0004 5205     		lsls	r2, r2, #21
  40 0006 996B     		ldr	r1, [r3, #56]
  41 0008 0A43     		orrs	r2, r1
  42 000a 9A63     		str	r2, [r3, #56]
  97:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  43              		.loc 1 97 3 is_stmt 1 view .LVU4
  44 000c 9A6B     		ldr	r2, [r3, #56]
  45 000e 0349     		ldr	r1, .L3+4
  46 0010 0A40     		ands	r2, r1
  47 0012 9A63     		str	r2, [r3, #56]
  48              		.loc 1 98 1 is_stmt 0 view .LVU5
  49 0014 7047     		bx	lr
  50              	.L4:
  51 0016 C046     		.align	2
  52              	.L3:
  53 0018 00100240 		.word	1073876992
  54 001c FFFFFFEF 		.word	-268435457
  55              		.cfi_endproc
  56              	.LFE334:
  58              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  59              		.align	1
  60              		.p2align 2,,3
  61              		.global	HAL_PWR_EnableBkUpAccess
  62              		.syntax unified
  63              		.code	16
  64              		.thumb_func
  66              	HAL_PWR_EnableBkUpAccess:
  67              	.LFB335:
  99:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 100:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 101:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Enable access to the backup domain
 102:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        (RTC registers, RTC backup data registers).
 103:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  After reset, the backup domain is protected against
 104:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        possible unwanted write accesses.
 105:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  RTCSEL that sets the RTC clock source selection is in the RTC back-up domain.
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 4


 106:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        In order to set or modify the RTC clock, the backup domain access must be
 107:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        disabled.
 108:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
 109:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        back-up domain.
 110:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 111:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 112:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 113:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
  68              		.loc 1 113 1 is_stmt 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
 114:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   SET_BIT(PWR->CR1, PWR_CR1_DBP);
  73              		.loc 1 114 3 view .LVU7
  74 0000 8023     		movs	r3, #128
 115:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
  75              		.loc 1 115 1 is_stmt 0 view .LVU8
  76              		@ sp needed
 114:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   SET_BIT(PWR->CR1, PWR_CR1_DBP);
  77              		.loc 1 114 3 view .LVU9
  78 0002 034A     		ldr	r2, .L6
  79 0004 5B00     		lsls	r3, r3, #1
  80 0006 1168     		ldr	r1, [r2]
  81 0008 0B43     		orrs	r3, r1
  82 000a 1360     		str	r3, [r2]
  83              		.loc 1 115 1 view .LVU10
  84 000c 7047     		bx	lr
  85              	.L7:
  86 000e C046     		.align	2
  87              	.L6:
  88 0010 00700040 		.word	1073770496
  89              		.cfi_endproc
  90              	.LFE335:
  92              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
  93              		.align	1
  94              		.p2align 2,,3
  95              		.global	HAL_PWR_DisableBkUpAccess
  96              		.syntax unified
  97              		.code	16
  98              		.thumb_func
 100              	HAL_PWR_DisableBkUpAccess:
 101              	.LFB336:
 116:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 117:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 118:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Disable access to the backup domain
 119:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        (RTC registers, RTC backup data registers).
 120:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 121:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 122:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 123:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 102              		.loc 1 123 1 is_stmt 1 view -0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 124:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 5


 107              		.loc 1 124 3 view .LVU12
 108 0000 024A     		ldr	r2, .L9
 109 0002 0349     		ldr	r1, .L9+4
 110 0004 1368     		ldr	r3, [r2]
 125:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 111              		.loc 1 125 1 is_stmt 0 view .LVU13
 112              		@ sp needed
 124:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 113              		.loc 1 124 3 view .LVU14
 114 0006 0B40     		ands	r3, r1
 115 0008 1360     		str	r3, [r2]
 116              		.loc 1 125 1 view .LVU15
 117 000a 7047     		bx	lr
 118              	.L10:
 119              		.align	2
 120              	.L9:
 121 000c 00700040 		.word	1073770496
 122 0010 FFFEFFFF 		.word	-257
 123              		.cfi_endproc
 124              	.LFE336:
 126              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 127              		.align	1
 128              		.p2align 2,,3
 129              		.global	HAL_PWR_ConfigPVD
 130              		.syntax unified
 131              		.code	16
 132              		.thumb_func
 134              	HAL_PWR_ConfigPVD:
 135              	.LVL0:
 136              	.LFB337:
 126:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 127:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @}
 128:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 129:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 130:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 131:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions
 132:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions
 133:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *
 134:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** @verbatim
 135:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 136:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****  ===============================================================================
 137:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 138:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****  ===============================================================================
 139:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 140:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****      [..]
 141:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****      *** PVD configuration ***
 142:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     =========================
 143:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     [..]
 144:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a
 145:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in PWR_CR2 register).
 146:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 147:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) PVDO flag is available to indicate if VDD/VDDA is higher or lower
 148:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI
 149:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 150:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           __HAL_PVD_EXTI_ENABLE_IT() macro.
 151:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 152:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 6


 153:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 154:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     *** WakeUp pin configuration ***
 155:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     ================================
 156:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     [..]
 157:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) WakeUp pins are used to wakeup the system from Standby mode or Shutdown mode.
 158:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           The polarity of these pins can be set to configure event detection on high
 159:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           level (rising edge) or low level (falling edge).
 160:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 161:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 162:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 163:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     *** Low Power modes configuration ***
 164:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     =====================================
 165:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     [..]
 166:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       The devices feature 8 low-power modes:
 167:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Low-power Run mode: core and peripherals are running, main regulator off, low power regul
 168:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running, main and low power regulato
 169:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Low-power Sleep mode: Cortex-M4 core stopped, peripherals kept running, main regulator of
 170:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           low power regulator on.
 171:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Stop 0 mode: all clocks are stopped except LSI and LSE, main and low power regulators on.
 172:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Stop 1 mode: all clocks are stopped except LSI and LSE, main regulator off, low power reg
 173:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Stop 2 mode: all clocks are stopped except LSI and LSE, main regulator off, low power reg
 174:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           reduced set of waking up IPs compared to Stop 1 mode.
 175:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Standby mode with SRAM2: all clocks are stopped except LSI and LSE, SRAM2 content preserv
 176:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           main regulator off, low power regulator on.
 177:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Standby mode without SRAM2: all clocks are stopped except LSI and LSE, main and low power
 178:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Shutdown mode: all clocks are stopped except LSE, main and low power regulators off.
 179:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 180:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 181:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    *** Low-power run mode ***
 182:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    ==========================
 183:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     [..]
 184:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Entry: (from main run mode)
 185:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         (++) set LPR bit with HAL_PWREx_EnableLowPowerRunMode() API after having decreased the syst
 186:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 187:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Exit:
 188:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         (++) clear LPR bit then wait for REGLP bit to be reset with HAL_PWREx_DisableLowPowerRunMod
 189:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****              then can the system clock frequency be increased above 2 MHz.
 190:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 191:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 192:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    *** Sleep mode / Low-power sleep mode ***
 193:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    =========================================
 194:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     [..]
 195:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Entry:
 196:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           The Sleep mode / Low-power Sleep mode is entered through HAL_PWR_EnterSLEEPMode() API
 197:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           in specifying whether or not the regulator is forced to low-power mode and if exit is int
 198:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           or event-triggered.
 199:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) PWR_MAINREGULATOR_ON: Sleep mode (regulator in main mode).
 200:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) PWR_LOWPOWERREGULATOR_ON: Low-power sleep (regulator in low power mode).
 201:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           In the latter case, the system clock frequency must have been decreased below 2 MHz befor
 202:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 203:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 204:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 205:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) WFI Exit:
 206:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         (++) Any peripheral interrupt acknowledged by the nested vectored interrupt
 207:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****              controller (NVIC) or any wake-up event.
 208:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 209:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) WFE Exit:
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 7


 210:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         (++) Any wake-up event such as an EXTI line configured in event mode.
 211:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 212:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****          [..] When exiting the Low-power sleep mode by issuing an interrupt or a wakeup event,
 213:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****              the MCU is in Low-power Run mode.
 214:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 215:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    *** Stop 0, Stop 1 and Stop 2 modes ***
 216:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    ===============================
 217:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     [..]
 218:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Entry:
 219:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           The Stop 0, Stop 1 or Stop 2 modes are entered through the following API's:
 220:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) HAL_PWREx_EnterSTOP0Mode() for mode 0 or HAL_PWREx_EnterSTOP1Mode() for mode 1 or
 221:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****                for porting reasons HAL_PWR_EnterSTOPMode().
 222:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) HAL_PWREx_EnterSTOP2Mode() for mode 2.
 223:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Regulator setting (applicable to HAL_PWR_EnterSTOPMode() only):
 224:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) PWR_MAINREGULATOR_ON
 225:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) PWR_LOWPOWERREGULATOR_ON
 226:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Exit (interrupt or event-triggered, specified when entering STOP mode):
 227:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFI: enter Stop mode with WFI instruction
 228:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) PWR_STOPENTRY_WFE: enter Stop mode with WFE instruction
 229:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 230:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) WFI Exit:
 231:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) Any EXTI Line (Internal or External) configured in Interrupt mode.
 232:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) Some specific communication peripherals (USART, LPUART, I2C) interrupts
 233:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****                when programmed in wakeup mode.
 234:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) WFE Exit:
 235:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) Any EXTI Line (Internal or External) configured in Event mode.
 236:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 237:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****        [..]
 238:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           When exiting Stop 0 and Stop 1 modes, the MCU is either in Run mode or in Low-power Run m
 239:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           depending on the LPR bit setting.
 240:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           When exiting Stop 2 mode, the MCU is in Run mode.
 241:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 242:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    *** Standby mode ***
 243:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    ====================
 244:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****      [..]
 245:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       The Standby mode offers two options:
 246:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) option a) all clocks off except LSI and LSE, RRS bit set (keeps voltage regulator in low 
 247:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         SRAM and registers contents are lost except for the SRAM2 content, the RTC registers, RTC b
 248:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         and Standby circuitry.
 249:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) option b) all clocks off except LSI and LSE, RRS bit cleared (voltage regulator then disa
 250:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         SRAM and register contents are lost except for the RTC registers, RTC backup registers
 251:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         and Standby circuitry.
 252:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 253:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (++) Entry:
 254:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (+++) The Standby mode is entered through HAL_PWR_EnterSTANDBYMode() API.
 255:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****                 SRAM1 and register contents are lost except for registers in the Backup domain and
 256:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****                 Standby circuitry. SRAM2 content can be preserved if the bit RRS is set in PWR_CR3 
 257:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****                 To enable this feature, the user can resort to HAL_PWREx_EnableSRAM2ContentRetentio
 258:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****                 to set RRS bit.
 259:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 260:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (++) Exit:
 261:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (+++) WKUP pin rising edge, RTC alarm or wakeup, tamper event, time-stamp event,
 262:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****                 external reset in NRST pin, IWDG reset.
 263:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 264:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       [..]    After waking up from Standby mode, program execution restarts in the same way as afte
 265:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 266:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 8


 267:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     *** Shutdown mode ***
 268:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    ======================
 269:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****      [..]
 270:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       In Shutdown mode,
 271:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         voltage regulator is disabled, all clocks are off except LSE, RRS bit is cleared.
 272:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         SRAM and registers contents are lost except for backup domain registers.
 273:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 274:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Entry:
 275:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           The Shutdown mode is entered through HAL_PWREx_EnterSHUTDOWNMode() API.
 276:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 277:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) Exit:
 278:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****           (++) WKUP pin rising edge, RTC alarm or wakeup, tamper event, time-stamp event,
 279:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****                external reset in NRST pin.
 280:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 281:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****          [..] After waking up from Shutdown mode, program execution restarts in the same way as aft
 282:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 283:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 284:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    *** Auto-wakeup (AWU) from low-power mode ***
 285:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    =============================================
 286:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     [..]
 287:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC
 288:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       Wakeup event, a tamper event or a time-stamp event, without depending on
 289:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       an external interrupt (Auto-wakeup mode).
 290:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 291:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       (+) RTC auto-wakeup (AWU) from the Stop, Standby and Shutdown modes
 292:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 293:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 294:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to
 295:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****              configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 296:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 297:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it
 298:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****              is necessary to configure the RTC to detect the tamper or time stamp event using the
 299:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****              HAL_RTCEx_SetTimeStamp_IT() or HAL_RTCEx_SetTamper_IT() functions.
 300:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 301:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC WakeUp event, it is necessary to
 302:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****               configure the RTC to generate the RTC WakeUp event using the HAL_RTCEx_SetWakeUpTimer
 303:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 304:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** @endverbatim
 305:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @{
 306:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 307:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 308:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 309:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Configure the voltage threshold detected by the Power Voltage Detector (PVD).
 310:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @param sConfigPVD: pointer to a PWR_PVDTypeDef structure that contains the PVD
 311:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        configuration information.
 312:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note Refer to the electrical characteristics of your device datasheet for
 313:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         more details about the voltage thresholds corresponding to each
 314:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         detection level.
 315:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 316:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 317:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** HAL_StatusTypeDef HAL_PWR_ConfigPVD(const PWR_PVDTypeDef *sConfigPVD)
 318:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 137              		.loc 1 318 1 is_stmt 1 view -0
 138              		.cfi_startproc
 139              		@ args = 0, pretend = 0, frame = 0
 140              		@ frame_needed = 0, uses_anonymous_args = 0
 319:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Check the parameters */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 9


 320:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 141              		.loc 1 320 3 view .LVU17
 321:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 142              		.loc 1 321 3 view .LVU18
 322:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 323:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Set PLS bits according to PVDLevel value */
 324:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 143              		.loc 1 324 3 view .LVU19
 144 0000 0E21     		movs	r1, #14
 318:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Check the parameters */
 145              		.loc 1 318 1 is_stmt 0 view .LVU20
 146 0002 10B5     		push	{r4, lr}
 147              	.LCFI0:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 4, -8
 150              		.cfi_offset 14, -4
 325:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 326:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 327:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 151              		.loc 1 327 3 view .LVU21
 152 0004 8424     		movs	r4, #132
 324:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 153              		.loc 1 324 3 view .LVU22
 154 0006 1C4A     		ldr	r2, .L31
 155 0008 5368     		ldr	r3, [r2, #4]
 156 000a 8B43     		bics	r3, r1
 157 000c 0168     		ldr	r1, [r0]
 158 000e 0B43     		orrs	r3, r1
 159 0010 5360     		str	r3, [r2, #4]
 160              		.loc 1 327 3 is_stmt 1 view .LVU23
 161 0012 1A4B     		ldr	r3, .L31+4
 162 0014 1A4A     		ldr	r2, .L31+8
 163 0016 1959     		ldr	r1, [r3, r4]
 164 0018 1140     		ands	r1, r2
 165 001a 1951     		str	r1, [r3, r4]
 328:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 166              		.loc 1 328 3 view .LVU24
 167 001c 8021     		movs	r1, #128
 168 001e 5C58     		ldr	r4, [r3, r1]
 169 0020 1440     		ands	r4, r2
 170 0022 5C50     		str	r4, [r3, r1]
 329:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 171              		.loc 1 329 3 view .LVU25
 172 0024 5C68     		ldr	r4, [r3, #4]
 173 0026 1440     		ands	r4, r2
 174 0028 5C60     		str	r4, [r3, #4]
 330:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 175              		.loc 1 330 3 view .LVU26
 176 002a 1C68     		ldr	r4, [r3]
 177 002c 2240     		ands	r2, r4
 178 002e 1A60     		str	r2, [r3]
 331:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 332:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Configure interrupt mode */
 333:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 179              		.loc 1 333 3 view .LVU27
 180              		.loc 1 333 18 is_stmt 0 view .LVU28
 181 0030 4268     		ldr	r2, [r0, #4]
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 10


 182              		.loc 1 333 25 view .LVU29
 183 0032 8020     		movs	r0, #128
 184              	.LVL1:
 185              		.loc 1 333 25 view .LVU30
 186 0034 4002     		lsls	r0, r0, #9
 187              		.loc 1 333 6 view .LVU31
 188 0036 0242     		tst	r2, r0
 189 0038 02D0     		beq	.L12
 334:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 335:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 190              		.loc 1 335 5 is_stmt 1 view .LVU32
 191 003a 5C58     		ldr	r4, [r3, r1]
 192 003c 2043     		orrs	r0, r4
 193 003e 5850     		str	r0, [r3, r1]
 194              	.L12:
 336:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 337:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 338:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Configure event mode */
 339:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 195              		.loc 1 339 3 view .LVU33
 196              		.loc 1 339 6 is_stmt 0 view .LVU34
 197 0040 9303     		lsls	r3, r2, #14
 198 0042 06D5     		bpl	.L13
 340:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 341:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 199              		.loc 1 341 5 is_stmt 1 view .LVU35
 200 0044 8421     		movs	r1, #132
 201 0046 8023     		movs	r3, #128
 202 0048 0C48     		ldr	r0, .L31+4
 203 004a 5B02     		lsls	r3, r3, #9
 204 004c 4458     		ldr	r4, [r0, r1]
 205 004e 2343     		orrs	r3, r4
 206 0050 4350     		str	r3, [r0, r1]
 207              	.L13:
 342:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 343:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 344:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Configure the edge */
 345:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 208              		.loc 1 345 3 view .LVU36
 209              		.loc 1 345 6 is_stmt 0 view .LVU37
 210 0052 D307     		lsls	r3, r2, #31
 211 0054 05D5     		bpl	.L14
 346:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 347:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 212              		.loc 1 347 5 is_stmt 1 view .LVU38
 213 0056 8023     		movs	r3, #128
 214 0058 0849     		ldr	r1, .L31+4
 215 005a 5B02     		lsls	r3, r3, #9
 216 005c 0868     		ldr	r0, [r1]
 217 005e 0343     		orrs	r3, r0
 218 0060 0B60     		str	r3, [r1]
 219              	.L14:
 348:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 349:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 350:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 220              		.loc 1 350 3 view .LVU39
 221              		.loc 1 350 6 is_stmt 0 view .LVU40
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 11


 222 0062 9207     		lsls	r2, r2, #30
 223 0064 05D5     		bpl	.L15
 351:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 352:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 224              		.loc 1 352 5 is_stmt 1 view .LVU41
 225 0066 8023     		movs	r3, #128
 226 0068 044A     		ldr	r2, .L31+4
 227 006a 5B02     		lsls	r3, r3, #9
 228 006c 5168     		ldr	r1, [r2, #4]
 229 006e 0B43     		orrs	r3, r1
 230 0070 5360     		str	r3, [r2, #4]
 231              	.L15:
 353:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 354:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 355:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   return HAL_OK;
 232              		.loc 1 355 3 view .LVU42
 356:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 233              		.loc 1 356 1 is_stmt 0 view .LVU43
 234 0072 0020     		movs	r0, #0
 235              		@ sp needed
 236 0074 10BD     		pop	{r4, pc}
 237              	.L32:
 238 0076 C046     		.align	2
 239              	.L31:
 240 0078 00700040 		.word	1073770496
 241 007c 00180240 		.word	1073879040
 242 0080 FFFFFEFF 		.word	-65537
 243              		.cfi_endproc
 244              	.LFE337:
 246              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 247              		.align	1
 248              		.p2align 2,,3
 249              		.global	HAL_PWR_EnablePVD
 250              		.syntax unified
 251              		.code	16
 252              		.thumb_func
 254              	HAL_PWR_EnablePVD:
 255              	.LFB338:
 357:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 358:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 359:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Enable the Power Voltage Detector (PVD).
 360:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 361:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 362:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 363:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 256              		.loc 1 363 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 364:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 261              		.loc 1 364 3 view .LVU45
 262 0000 0121     		movs	r1, #1
 365:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 263              		.loc 1 365 1 is_stmt 0 view .LVU46
 264              		@ sp needed
 364:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   SET_BIT(PWR->CR2, PWR_CR2_PVDE);
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 12


 265              		.loc 1 364 3 view .LVU47
 266 0002 024A     		ldr	r2, .L34
 267 0004 5368     		ldr	r3, [r2, #4]
 268 0006 0B43     		orrs	r3, r1
 269 0008 5360     		str	r3, [r2, #4]
 270              		.loc 1 365 1 view .LVU48
 271 000a 7047     		bx	lr
 272              	.L35:
 273              		.align	2
 274              	.L34:
 275 000c 00700040 		.word	1073770496
 276              		.cfi_endproc
 277              	.LFE338:
 279              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 280              		.align	1
 281              		.p2align 2,,3
 282              		.global	HAL_PWR_DisablePVD
 283              		.syntax unified
 284              		.code	16
 285              		.thumb_func
 287              	HAL_PWR_DisablePVD:
 288              	.LFB339:
 366:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 367:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 368:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Disable the Power Voltage Detector (PVD).
 369:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 370:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 371:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 372:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 289              		.loc 1 372 1 is_stmt 1 view -0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 373:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 294              		.loc 1 373 3 view .LVU50
 295 0000 0121     		movs	r1, #1
 374:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 296              		.loc 1 374 1 is_stmt 0 view .LVU51
 297              		@ sp needed
 373:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 298              		.loc 1 373 3 view .LVU52
 299 0002 024A     		ldr	r2, .L37
 300 0004 5368     		ldr	r3, [r2, #4]
 301 0006 8B43     		bics	r3, r1
 302 0008 5360     		str	r3, [r2, #4]
 303              		.loc 1 374 1 view .LVU53
 304 000a 7047     		bx	lr
 305              	.L38:
 306              		.align	2
 307              	.L37:
 308 000c 00700040 		.word	1073770496
 309              		.cfi_endproc
 310              	.LFE339:
 312              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 313              		.align	1
 314              		.p2align 2,,3
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 13


 315              		.global	HAL_PWR_EnableWakeUpPin
 316              		.syntax unified
 317              		.code	16
 318              		.thumb_func
 320              	HAL_PWR_EnableWakeUpPin:
 321              	.LVL2:
 322              	.LFB340:
 375:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 376:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 377:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Enable the WakeUp PINx functionality.
 378:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @param WakeUpPinPolarity: Specifies which Wake-Up pin to enable.
 379:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         This parameter can be one of the following legacy values which set the default polarity
 380:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         i.e. detection on high level (rising edge):
 381:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAK
 382:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *
 383:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         or one of the following value where the user can explicitly specify the enabled pin and
 384:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         the chosen polarity:
 385:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1_HIGH or PWR_WAKEUP_PIN1_LOW
 386:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN2_HIGH or PWR_WAKEUP_PIN2_LOW
 387:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN3_HIGH or PWR_WAKEUP_PIN3_LOW
 388:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN4_HIGH or PWR_WAKEUP_PIN4_LOW
 389:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
 390:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
 391:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 392:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 393:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
 394:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 323              		.loc 1 394 1 is_stmt 1 view -0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 395:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
 328              		.loc 1 395 3 view .LVU55
 396:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 397:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Specifies the Wake-Up pin polarity for the event detection
 398:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     (rising or falling edge) */
 399:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   MODIFY_REG(PWR->CR4, (PWR_EWUP_Msk & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_S
 329              		.loc 1 399 3 view .LVU56
 330 0000 5F23     		movs	r3, #95
 400:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 401:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Enable wake-up pin */
 402:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   SET_BIT(PWR->CR3, (PWR_EWUP_Msk & WakeUpPinPolarity));
 403:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 331              		.loc 1 403 1 is_stmt 0 view .LVU57
 332              		@ sp needed
 399:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 333              		.loc 1 399 3 view .LVU58
 334 0002 0549     		ldr	r1, .L40
 335 0004 0340     		ands	r3, r0
 336 0006 CA68     		ldr	r2, [r1, #12]
 337 0008 C009     		lsrs	r0, r0, #7
 338              	.LVL3:
 399:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 339              		.loc 1 399 3 view .LVU59
 340 000a 9A43     		bics	r2, r3
 341 000c 0243     		orrs	r2, r0
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 14


 342 000e CA60     		str	r2, [r1, #12]
 402:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 343              		.loc 1 402 3 is_stmt 1 view .LVU60
 344 0010 8A68     		ldr	r2, [r1, #8]
 345 0012 1343     		orrs	r3, r2
 346 0014 8B60     		str	r3, [r1, #8]
 347              		.loc 1 403 1 is_stmt 0 view .LVU61
 348 0016 7047     		bx	lr
 349              	.L41:
 350              		.align	2
 351              	.L40:
 352 0018 00700040 		.word	1073770496
 353              		.cfi_endproc
 354              	.LFE340:
 356              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 357              		.align	1
 358              		.p2align 2,,3
 359              		.global	HAL_PWR_DisableWakeUpPin
 360              		.syntax unified
 361              		.code	16
 362              		.thumb_func
 364              	HAL_PWR_DisableWakeUpPin:
 365              	.LVL4:
 366              	.LFB341:
 404:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 405:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 406:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Disable the WakeUp PINx functionality.
 407:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @param WakeUpPinx: Specifies the Power Wake-Up pin to disable.
 408:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 409:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAK
 410:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 411:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 412:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 413:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 367              		.loc 1 413 1 is_stmt 1 view -0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 414:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 372              		.loc 1 414 3 view .LVU63
 415:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 416:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   CLEAR_BIT(PWR->CR3, (PWR_EWUP_Msk & WakeUpPinx));
 373              		.loc 1 416 3 view .LVU64
 374 0000 5F22     		movs	r2, #95
 417:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 375              		.loc 1 417 1 is_stmt 0 view .LVU65
 376              		@ sp needed
 416:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 377              		.loc 1 416 3 view .LVU66
 378 0002 0349     		ldr	r1, .L43
 379 0004 0240     		ands	r2, r0
 380 0006 8B68     		ldr	r3, [r1, #8]
 381 0008 9343     		bics	r3, r2
 382 000a 8B60     		str	r3, [r1, #8]
 383              		.loc 1 417 1 view .LVU67
 384 000c 7047     		bx	lr
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 15


 385              	.L44:
 386 000e C046     		.align	2
 387              	.L43:
 388 0010 00700040 		.word	1073770496
 389              		.cfi_endproc
 390              	.LFE341:
 392              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 393              		.align	1
 394              		.p2align 2,,3
 395              		.global	HAL_PWR_EnterSLEEPMode
 396              		.syntax unified
 397              		.code	16
 398              		.thumb_func
 400              	HAL_PWR_EnterSLEEPMode:
 401              	.LVL5:
 402              	.LFB342:
 418:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 419:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 420:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Enter Sleep or Low-power Sleep mode.
 421:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  In Sleep/Low-power Sleep mode, all I/O pins keep the same state as in Run mode.
 422:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Sleep/Low-power Sleep mode.
 423:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 424:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *            @arg @ref PWR_MAINREGULATOR_ON Sleep mode (regulator in main mode)
 425:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *            @arg @ref PWR_LOWPOWERREGULATOR_ON Low-power Sleep mode (regulator in low-power mode
 426:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  Low-power Sleep mode is entered from Low-power Run mode. Therefore, if not yet
 427:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        in Low-power Run mode before calling HAL_PWR_EnterSLEEPMode() with Regulator set
 428:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        to PWR_LOWPOWERREGULATOR_ON, the user can optionally configure the
 429:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        Flash in power-down monde in setting the SLEEP_PD bit in FLASH_ACR register.
 430:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        Additionally, the clock frequency must be reduced below 2 MHz.
 431:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        Setting SLEEP_PD in FLASH_ACR then appropriately reducing the clock frequency must
 432:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        be done before calling HAL_PWR_EnterSLEEPMode() API.
 433:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  When exiting Low-power Sleep mode, the MCU is in Low-power Run mode. To move in
 434:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        Run mode, the user must resort to HAL_PWREx_DisableLowPowerRunMode() API.
 435:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @param SLEEPEntry: Specifies if Sleep mode is entered with WFI or WFE instruction.
 436:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *           This parameter can be one of the following values:
 437:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *            @arg @ref PWR_SLEEPENTRY_WFI enter Sleep or Low-power Sleep mode with WFI instructio
 438:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *            @arg @ref PWR_SLEEPENTRY_WFE enter Sleep or Low-power Sleep mode with WFE instructio
 439:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
 440:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        the interrupt wake up source.
 441:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 442:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 443:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 444:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 403              		.loc 1 444 1 is_stmt 1 view -0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 445:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Check the parameters */
 446:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 407              		.loc 1 446 3 view .LVU69
 447:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 408              		.loc 1 447 3 view .LVU70
 448:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 449:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Set Regulator parameter */
 450:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   if (Regulator == PWR_MAINREGULATOR_ON)
 409              		.loc 1 450 3 view .LVU71
 451:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 16


 452:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     /* If in low-power run mode at this point, exit it */
 453:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 410              		.loc 1 453 9 is_stmt 0 view .LVU72
 411 0000 124B     		ldr	r3, .L56
 444:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Check the parameters */
 412              		.loc 1 444 1 view .LVU73
 413 0002 10B5     		push	{r4, lr}
 414              	.LCFI1:
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 4, -8
 417              		.cfi_offset 14, -4
 418              		.loc 1 453 9 view .LVU74
 419 0004 5B69     		ldr	r3, [r3, #20]
 444:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Check the parameters */
 420              		.loc 1 444 1 view .LVU75
 421 0006 0C00     		movs	r4, r1
 450:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 422              		.loc 1 450 6 view .LVU76
 423 0008 0028     		cmp	r0, #0
 424 000a 0CD1     		bne	.L46
 425              		.loc 1 453 5 is_stmt 1 view .LVU77
 426              		.loc 1 453 8 is_stmt 0 view .LVU78
 427 000c 9B05     		lsls	r3, r3, #22
 428 000e 17D4     		bmi	.L54
 429              	.LVL6:
 430              	.L48:
 454:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     {
 455:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 456:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       {
 457:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****         return ;
 458:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       }
 459:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     }
 460:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     /* Regulator now in main mode. */
 461:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 462:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   else
 463:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 464:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     /* If in run mode, first move to low-power run mode.
 465:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****        The system clock frequency must be below 2 MHz at this point. */
 466:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 467:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     {
 468:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       HAL_PWREx_EnableLowPowerRunMode();
 469:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     }
 470:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 471:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 472:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 473:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 431              		.loc 1 473 3 is_stmt 1 view .LVU79
 432 0010 0421     		movs	r1, #4
 433 0012 0F4A     		ldr	r2, .L56+4
 434 0014 1369     		ldr	r3, [r2, #16]
 435 0016 8B43     		bics	r3, r1
 436 0018 1361     		str	r3, [r2, #16]
 474:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 475:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 476:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 437              		.loc 1 476 3 view .LVU80
 438              		.loc 1 476 6 is_stmt 0 view .LVU81
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 17


 439 001a 012C     		cmp	r4, #1
 440 001c 0ED0     		beq	.L55
 441              	.L51:
 477:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 478:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 479:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __WFI();
 480:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 481:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   else
 482:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 483:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     /* Request Wait For Event */
 484:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __SEV();
 442              		.loc 1 484 5 is_stmt 1 view .LVU82
 443              		.syntax divided
 444              	@ 484 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c" 1
 445 001e 40BF     		sev
 446              	@ 0 "" 2
 485:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __WFE();
 447              		.loc 1 485 5 view .LVU83
 448              	@ 485 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c" 1
 449 0020 20BF     		wfe
 450              	@ 0 "" 2
 486:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __WFE();
 451              		.loc 1 486 5 view .LVU84
 452              	@ 486 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c" 1
 453 0022 20BF     		wfe
 454              	@ 0 "" 2
 455              		.thumb
 456              		.syntax unified
 457              	.L45:
 487:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 488:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 458              		.loc 1 488 1 is_stmt 0 view .LVU85
 459              		@ sp needed
 460 0024 10BD     		pop	{r4, pc}
 461              	.LVL7:
 462              	.L46:
 466:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     {
 463              		.loc 1 466 5 is_stmt 1 view .LVU86
 466:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     {
 464              		.loc 1 466 8 is_stmt 0 view .LVU87
 465 0026 9B05     		lsls	r3, r3, #22
 466 0028 F2D4     		bmi	.L48
 468:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     }
 467              		.loc 1 468 7 is_stmt 1 view .LVU88
 468 002a FFF7FEFF 		bl	HAL_PWREx_EnableLowPowerRunMode
 469              	.LVL8:
 473:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 470              		.loc 1 473 3 view .LVU89
 471 002e 0421     		movs	r1, #4
 472 0030 074A     		ldr	r2, .L56+4
 473 0032 1369     		ldr	r3, [r2, #16]
 474 0034 8B43     		bics	r3, r1
 475 0036 1361     		str	r3, [r2, #16]
 476:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 476              		.loc 1 476 3 view .LVU90
 476:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 477              		.loc 1 476 6 is_stmt 0 view .LVU91
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 18


 478 0038 012C     		cmp	r4, #1
 479 003a F0D1     		bne	.L51
 480              	.L55:
 479:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 481              		.loc 1 479 5 is_stmt 1 view .LVU92
 482              		.syntax divided
 483              	@ 479 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c" 1
 484 003c 30BF     		wfi
 485              	@ 0 "" 2
 486              		.thumb
 487              		.syntax unified
 488 003e F1E7     		b	.L45
 489              	.LVL9:
 490              	.L54:
 455:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       {
 491              		.loc 1 455 7 view .LVU93
 455:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       {
 492              		.loc 1 455 11 is_stmt 0 view .LVU94
 493 0040 FFF7FEFF 		bl	HAL_PWREx_DisableLowPowerRunMode
 494              	.LVL10:
 455:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****       {
 495              		.loc 1 455 10 view .LVU95
 496 0044 0028     		cmp	r0, #0
 497 0046 E3D0     		beq	.L48
 498 0048 ECE7     		b	.L45
 499              	.L57:
 500 004a C046     		.align	2
 501              	.L56:
 502 004c 00700040 		.word	1073770496
 503 0050 00ED00E0 		.word	-536810240
 504              		.cfi_endproc
 505              	.LFE342:
 507              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 508              		.align	1
 509              		.p2align 2,,3
 510              		.global	HAL_PWR_EnterSTOPMode
 511              		.syntax unified
 512              		.code	16
 513              		.thumb_func
 515              	HAL_PWR_EnterSTOPMode:
 516              	.LVL11:
 517              	.LFB343:
 489:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 490:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 491:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Enter Stop 0 mode
 492:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  This API is named HAL_PWR_EnterSTOPMode to ensure compatibility with legacy code running
 493:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        on devices where only "Stop mode" is mentioned with main or low power regulator ON.
 494:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  In Stop mode, all I/O pins keep the same state as in Run mode.
 495:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  All clocks in the VCORE domain are stopped; the PLL, the MSI,
 496:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        the HSI and the HSE oscillators are disabled. Some peripherals with the wakeup capabilit
 497:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        (I2Cx, USARTx and LPUART) can switch on the HSI to receive a frame, and switch off the H
 498:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        after receiving the frame if it is not a wakeup frame. In this case, the HSI clock is pr
 499:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        only to the peripheral requesting it.
 500:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        SRAM1, SRAM2 and register contents are preserved.
 501:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        The BOR is available.
 502:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        The voltage regulator can be configured either in normal (Stop 0) or low-power mode (Sto
 503:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  When exiting Stop 0 or Stop 1 mode by issuing an interrupt or a wakeup event,
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 19


 504:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in RCC_CFGR register
 505:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         is set; the MSI oscillator is selected if STOPWUCK is cleared.
 506:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  When the voltage regulator operates in low power mode (Stop 1), an additional
 507:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         startup delay is incurred when waking up.
 508:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode (Stop 0), the consumption
 509:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *         is higher although the startup time is reduced.
 510:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @param Regulator: Specifies the regulator state in Stop mode.
 511:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 512:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *            @arg @ref PWR_MAINREGULATOR_ON  Stop 0 mode (main regulator ON)
 513:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *            @arg @ref PWR_LOWPOWERREGULATOR_ON  Stop 1 mode (low power regulator ON)
 514:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @param STOPEntry: Specifies Stop 0 or Stop 1 mode is entered with WFI or WFE instruction.
 515:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 516:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
 517:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
 518:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 519:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 520:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 521:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 518              		.loc 1 521 1 is_stmt 1 view -0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 523:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Check the parameters */
 524:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 522              		.loc 1 524 3 view .LVU97
 525:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 523              		.loc 1 525 3 view .LVU98
 526:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Select the regulator state in STOP mode */
 527:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPR, Regulator);
 524              		.loc 1 527 3 view .LVU99
 525 0000 0E4A     		ldr	r2, .L62
 521:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 526              		.loc 1 521 1 is_stmt 0 view .LVU100
 527 0002 10B5     		push	{r4, lr}
 528              	.LCFI2:
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 4, -8
 531              		.cfi_offset 14, -4
 532              		.loc 1 527 3 view .LVU101
 533 0004 1368     		ldr	r3, [r2]
 534 0006 0E4C     		ldr	r4, .L62+4
 535 0008 2340     		ands	r3, r4
 536 000a 0343     		orrs	r3, r0
 528:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Stop 0 mode with Main Regulator */
 529:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, 0U);
 537              		.loc 1 529 3 view .LVU102
 538 000c 0720     		movs	r0, #7
 539              	.LVL12:
 527:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Stop 0 mode with Main Regulator */
 540              		.loc 1 527 3 view .LVU103
 541 000e 1360     		str	r3, [r2]
 542              		.loc 1 529 3 is_stmt 1 view .LVU104
 543 0010 1368     		ldr	r3, [r2]
 544 0012 8343     		bics	r3, r0
 545 0014 1360     		str	r3, [r2]
 530:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 20


 531:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 546              		.loc 1 531 3 view .LVU105
 547 0016 0B4A     		ldr	r2, .L62+8
 548 0018 0338     		subs	r0, r0, #3
 549 001a 1369     		ldr	r3, [r2, #16]
 550 001c 0343     		orrs	r3, r0
 551 001e 1361     		str	r3, [r2, #16]
 532:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Select Stop mode entry --------------------------------------------------*/
 533:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   if (STOPEntry == PWR_STOPENTRY_WFI)
 552              		.loc 1 533 3 view .LVU106
 553              		.loc 1 533 6 is_stmt 0 view .LVU107
 554 0020 0129     		cmp	r1, #1
 555 0022 08D0     		beq	.L61
 534:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 535:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 536:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __WFI();
 537:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 538:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   else
 539:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   {
 540:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     /* Request Wait For Event */
 541:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __SEV();
 556              		.loc 1 541 5 is_stmt 1 view .LVU108
 557              		.syntax divided
 558              	@ 541 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c" 1
 559 0024 40BF     		sev
 560              	@ 0 "" 2
 542:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __WFE();
 561              		.loc 1 542 5 view .LVU109
 562              	@ 542 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c" 1
 563 0026 20BF     		wfe
 564              	@ 0 "" 2
 543:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****     __WFE();
 565              		.loc 1 543 5 view .LVU110
 566              	@ 543 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c" 1
 567 0028 20BF     		wfe
 568              	@ 0 "" 2
 569              		.thumb
 570              		.syntax unified
 571              	.L60:
 544:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 545:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 546:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 572              		.loc 1 546 3 view .LVU111
 547:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 573              		.loc 1 547 1 is_stmt 0 view .LVU112
 574              		@ sp needed
 546:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 575              		.loc 1 546 3 view .LVU113
 576 002a 0421     		movs	r1, #4
 577              	.LVL13:
 546:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 578              		.loc 1 546 3 view .LVU114
 579 002c 054A     		ldr	r2, .L62+8
 580 002e 1369     		ldr	r3, [r2, #16]
 581 0030 8B43     		bics	r3, r1
 582 0032 1361     		str	r3, [r2, #16]
 583              		.loc 1 547 1 view .LVU115
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 21


 584 0034 10BD     		pop	{r4, pc}
 585              	.LVL14:
 586              	.L61:
 536:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   }
 587              		.loc 1 536 5 is_stmt 1 view .LVU116
 588              		.syntax divided
 589              	@ 536 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c" 1
 590 0036 30BF     		wfi
 591              	@ 0 "" 2
 592              		.thumb
 593              		.syntax unified
 594 0038 F7E7     		b	.L60
 595              	.L63:
 596 003a C046     		.align	2
 597              	.L62:
 598 003c 00700040 		.word	1073770496
 599 0040 FFBFFFFF 		.word	-16385
 600 0044 00ED00E0 		.word	-536810240
 601              		.cfi_endproc
 602              	.LFE343:
 604              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 605              		.align	1
 606              		.p2align 2,,3
 607              		.global	HAL_PWR_EnterSTANDBYMode
 608              		.syntax unified
 609              		.code	16
 610              		.thumb_func
 612              	HAL_PWR_EnterSTANDBYMode:
 613              	.LFB344:
 548:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 549:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 550:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Enter Standby mode.
 551:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  In Standby mode, the PLL, the HSI, the MSI and the HSE oscillators are switched
 552:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        off. The voltage regulator is disabled, except when SRAM2 content is preserved
 553:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        in which case the regulator is in low-power mode.
 554:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        SRAM1 and register contents are lost except for registers in the Backup domain and
 555:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        Standby circuitry. SRAM2 content can be preserved if the bit RRS is set in PWR_CR3 regis
 556:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        To enable this feature, the user can resort to HAL_PWREx_EnableSRAM2ContentRetention() A
 557:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        to set RRS bit.
 558:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        The BOR is available.
 559:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog s
 560:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() respectively enable Pull
 561:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        Pull Down state, HAL_PWREx_DisableGPIOPullUp() and HAL_PWREx_DisableGPIOPullDown() disab
 562:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        same.
 563:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        These states are effective in Standby mode only if APC bit is set through
 564:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        HAL_PWREx_EnablePullUpPullDownConfig() API.
 565:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 566:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 567:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 568:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 614              		.loc 1 568 1 view -0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 569:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Set Stand-by mode */
 570:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, (PWR_CR1_LPMS_1 | PWR_CR1_LPMS_0));
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 22


 619              		.loc 1 570 3 view .LVU118
 620 0000 0721     		movs	r1, #7
 621 0002 064A     		ldr	r2, .L65
 622 0004 1368     		ldr	r3, [r2]
 623 0006 8B43     		bics	r3, r1
 624 0008 0439     		subs	r1, r1, #4
 625 000a 0B43     		orrs	r3, r1
 626 000c 1360     		str	r3, [r2]
 571:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 572:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 573:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 627              		.loc 1 573 3 view .LVU119
 628 000e 044A     		ldr	r2, .L65+4
 629 0010 0131     		adds	r1, r1, #1
 630 0012 1369     		ldr	r3, [r2, #16]
 631 0014 0B43     		orrs	r3, r1
 632 0016 1361     		str	r3, [r2, #16]
 574:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 575:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 576:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __WFI();
 633              		.loc 1 576 3 view .LVU120
 634              		.syntax divided
 635              	@ 576 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c" 1
 636 0018 30BF     		wfi
 637              	@ 0 "" 2
 577:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 638              		.loc 1 577 1 is_stmt 0 view .LVU121
 639              		.thumb
 640              		.syntax unified
 641              		@ sp needed
 642 001a 7047     		bx	lr
 643              	.L66:
 644              		.align	2
 645              	.L65:
 646 001c 00700040 		.word	1073770496
 647 0020 00ED00E0 		.word	-536810240
 648              		.cfi_endproc
 649              	.LFE344:
 651              		.section	.text.HAL_PWR_EnterSHUTDOWNMode,"ax",%progbits
 652              		.align	1
 653              		.p2align 2,,3
 654              		.global	HAL_PWR_EnterSHUTDOWNMode
 655              		.syntax unified
 656              		.code	16
 657              		.thumb_func
 659              	HAL_PWR_EnterSHUTDOWNMode:
 660              	.LFB345:
 578:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 579:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 580:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Enter Shutdown mode.
 581:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  In Shutdown mode, the PLL, the HSI, the MSI, the LSI and the HSE oscillators are switche
 582:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        off. The voltage regulator is disabled and Vcore domain is powered off.
 583:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        SRAM1, SRAM2 and registers contents are lost except for registers in the Backup domain.
 584:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *        The BOR is not available.
 585:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog s
 586:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 587:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 23


 588:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_EnterSHUTDOWNMode(void)
 589:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 661              		.loc 1 589 1 is_stmt 1 view -0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665              		@ link register save eliminated.
 590:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 591:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Set Shutdown mode */
 592:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_2);
 666              		.loc 1 592 3 view .LVU123
 667 0000 0721     		movs	r1, #7
 668 0002 064A     		ldr	r2, .L68
 669 0004 1368     		ldr	r3, [r2]
 670 0006 8B43     		bics	r3, r1
 671 0008 0339     		subs	r1, r1, #3
 672 000a 0B43     		orrs	r3, r1
 673 000c 1360     		str	r3, [r2]
 593:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 594:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 595:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 596:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 674              		.loc 1 596 3 view .LVU124
 675 000e 044A     		ldr	r2, .L68+4
 676 0010 1369     		ldr	r3, [r2, #16]
 677 0012 0B43     		orrs	r3, r1
 678 0014 1361     		str	r3, [r2, #16]
 597:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 598:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 599:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** #if defined ( __CC_ARM)
 600:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __force_stores();
 601:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** #endif /* __CC_ARM */
 602:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 603:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   __WFI();
 679              		.loc 1 603 3 view .LVU125
 680              		.syntax divided
 681              	@ 603 "Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c" 1
 682 0016 30BF     		wfi
 683              	@ 0 "" 2
 604:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 684              		.loc 1 604 1 is_stmt 0 view .LVU126
 685              		.thumb
 686              		.syntax unified
 687              		@ sp needed
 688 0018 7047     		bx	lr
 689              	.L69:
 690 001a C046     		.align	2
 691              	.L68:
 692 001c 00700040 		.word	1073770496
 693 0020 00ED00E0 		.word	-536810240
 694              		.cfi_endproc
 695              	.LFE345:
 697              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 698              		.align	1
 699              		.p2align 2,,3
 700              		.global	HAL_PWR_EnableSleepOnExit
 701              		.syntax unified
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 24


 702              		.code	16
 703              		.thumb_func
 705              	HAL_PWR_EnableSleepOnExit:
 706              	.LFB346:
 605:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 606:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 607:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Indicate Sleep-On-Exit when returning from Handler mode to Thread mode.
 608:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor
 609:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 610:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 611:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *       interruptions handling.
 612:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 613:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 614:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 615:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 707              		.loc 1 615 1 is_stmt 1 view -0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
 616:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 617:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 712              		.loc 1 617 3 view .LVU128
 713 0000 0221     		movs	r1, #2
 618:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 714              		.loc 1 618 1 is_stmt 0 view .LVU129
 715              		@ sp needed
 617:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 716              		.loc 1 617 3 view .LVU130
 717 0002 024A     		ldr	r2, .L71
 718 0004 1369     		ldr	r3, [r2, #16]
 719 0006 0B43     		orrs	r3, r1
 720 0008 1361     		str	r3, [r2, #16]
 721              		.loc 1 618 1 view .LVU131
 722 000a 7047     		bx	lr
 723              	.L72:
 724              		.align	2
 725              	.L71:
 726 000c 00ED00E0 		.word	-536810240
 727              		.cfi_endproc
 728              	.LFE346:
 730              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 731              		.align	1
 732              		.p2align 2,,3
 733              		.global	HAL_PWR_DisableSleepOnExit
 734              		.syntax unified
 735              		.code	16
 736              		.thumb_func
 738              	HAL_PWR_DisableSleepOnExit:
 739              	.LFB347:
 619:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 620:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 621:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Disable Sleep-On-Exit feature when returning from Handler mode to Thread mode.
 622:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
 623:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 624:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 625:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 25


 626:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 627:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 740              		.loc 1 627 1 is_stmt 1 view -0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              		@ link register save eliminated.
 628:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 629:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 745              		.loc 1 629 3 view .LVU133
 746 0000 0221     		movs	r1, #2
 630:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 747              		.loc 1 630 1 is_stmt 0 view .LVU134
 748              		@ sp needed
 629:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 749              		.loc 1 629 3 view .LVU135
 750 0002 024A     		ldr	r2, .L74
 751 0004 1369     		ldr	r3, [r2, #16]
 752 0006 8B43     		bics	r3, r1
 753 0008 1361     		str	r3, [r2, #16]
 754              		.loc 1 630 1 view .LVU136
 755 000a 7047     		bx	lr
 756              	.L75:
 757              		.align	2
 758              	.L74:
 759 000c 00ED00E0 		.word	-536810240
 760              		.cfi_endproc
 761              	.LFE347:
 763              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 764              		.align	1
 765              		.p2align 2,,3
 766              		.global	HAL_PWR_EnableSEVOnPend
 767              		.syntax unified
 768              		.code	16
 769              		.thumb_func
 771              	HAL_PWR_EnableSEVOnPend:
 772              	.LFB348:
 631:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 632:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 633:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Enable CORTEX M4 SEVONPEND bit.
 634:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note Set SEVONPEND bit of SCR register. When this bit is set, this causes
 635:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 636:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 637:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 638:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 639:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 773              		.loc 1 639 1 is_stmt 1 view -0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 640:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 641:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 778              		.loc 1 641 3 view .LVU138
 779 0000 1021     		movs	r1, #16
 642:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 780              		.loc 1 642 1 is_stmt 0 view .LVU139
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 26


 781              		@ sp needed
 641:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 782              		.loc 1 641 3 view .LVU140
 783 0002 024A     		ldr	r2, .L77
 784 0004 1369     		ldr	r3, [r2, #16]
 785 0006 0B43     		orrs	r3, r1
 786 0008 1361     		str	r3, [r2, #16]
 787              		.loc 1 642 1 view .LVU141
 788 000a 7047     		bx	lr
 789              	.L78:
 790              		.align	2
 791              	.L77:
 792 000c 00ED00E0 		.word	-536810240
 793              		.cfi_endproc
 794              	.LFE348:
 796              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 797              		.align	1
 798              		.p2align 2,,3
 799              		.global	HAL_PWR_DisableSEVOnPend
 800              		.syntax unified
 801              		.code	16
 802              		.thumb_func
 804              	HAL_PWR_DisableSEVOnPend:
 805              	.LFB349:
 643:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 644:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 645:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief Disable CORTEX M4 SEVONPEND bit.
 646:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @note Clear SEVONPEND bit of SCR register. When this bit is set, this causes
 647:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 648:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 649:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 650:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 651:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 806              		.loc 1 651 1 is_stmt 1 view -0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 0, uses_anonymous_args = 0
 810              		@ link register save eliminated.
 652:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 653:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 811              		.loc 1 653 3 view .LVU143
 812 0000 1021     		movs	r1, #16
 654:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 813              		.loc 1 654 1 is_stmt 0 view .LVU144
 814              		@ sp needed
 653:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 815              		.loc 1 653 3 view .LVU145
 816 0002 024A     		ldr	r2, .L80
 817 0004 1369     		ldr	r3, [r2, #16]
 818 0006 8B43     		bics	r3, r1
 819 0008 1361     		str	r3, [r2, #16]
 820              		.loc 1 654 1 view .LVU146
 821 000a 7047     		bx	lr
 822              	.L81:
 823              		.align	2
 824              	.L80:
 825 000c 00ED00E0 		.word	-536810240
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 27


 826              		.cfi_endproc
 827              	.LFE349:
 829              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 830              		.align	1
 831              		.p2align 2,,3
 832              		.weak	HAL_PWR_PVDCallback
 833              		.syntax unified
 834              		.code	16
 835              		.thumb_func
 837              	HAL_PWR_PVDCallback:
 838              	.LFB350:
 655:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** 
 656:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** /**
 657:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @brief PWR PVD interrupt callback
 658:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   * @retval None
 659:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   */
 660:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 661:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** {
 839              		.loc 1 661 1 is_stmt 1 view -0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              		@ link register save eliminated.
 662:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****   /* NOTE : This function should not be modified; when the callback is needed,
 663:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****             the HAL_PWR_PVDCallback can be implemented in the user file
 664:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c ****    */
 665:Drivers/STM32U0xx_HAL_Driver/Src/stm32u0xx_hal_pwr.c **** }
 844              		.loc 1 665 1 view .LVU148
 845              		@ sp needed
 846 0000 7047     		bx	lr
 847              		.cfi_endproc
 848              	.LFE350:
 850 0002 C046     		.text
 851              	.Letext0:
 852              		.file 2 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 853              		.file 3 "C:\\ST\\STM32CubeCLT_1.15.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 854              		.file 4 "Drivers/CMSIS/Include/core_cm0plus.h"
 855              		.file 5 "Drivers/CMSIS/Device/ST/STM32U0xx/Include/stm32u073xx.h"
 856              		.file 6 "Drivers/CMSIS/Device/ST/STM32U0xx/Include/stm32u0xx.h"
 857              		.file 7 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_def.h"
 858              		.file 8 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_pwr.h"
 859              		.file 9 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_ll_dma.h"
 860              		.file 10 "Drivers/STM32U0xx_HAL_Driver/Inc/stm32u0xx_hal_pwr_ex.h"
ARM GAS  C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s 			page 28


DEFINED SYMBOLS
                            *ABS*:00000000 stm32u0xx_hal_pwr.c
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:19     .text.HAL_PWR_DeInit:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:26     .text.HAL_PWR_DeInit:00000000 HAL_PWR_DeInit
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:53     .text.HAL_PWR_DeInit:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:59     .text.HAL_PWR_EnableBkUpAccess:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:66     .text.HAL_PWR_EnableBkUpAccess:00000000 HAL_PWR_EnableBkUpAccess
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:88     .text.HAL_PWR_EnableBkUpAccess:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:93     .text.HAL_PWR_DisableBkUpAccess:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:100    .text.HAL_PWR_DisableBkUpAccess:00000000 HAL_PWR_DisableBkUpAccess
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:121    .text.HAL_PWR_DisableBkUpAccess:0000000c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:127    .text.HAL_PWR_ConfigPVD:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:134    .text.HAL_PWR_ConfigPVD:00000000 HAL_PWR_ConfigPVD
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:240    .text.HAL_PWR_ConfigPVD:00000078 $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:247    .text.HAL_PWR_EnablePVD:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:254    .text.HAL_PWR_EnablePVD:00000000 HAL_PWR_EnablePVD
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:275    .text.HAL_PWR_EnablePVD:0000000c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:280    .text.HAL_PWR_DisablePVD:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:287    .text.HAL_PWR_DisablePVD:00000000 HAL_PWR_DisablePVD
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:308    .text.HAL_PWR_DisablePVD:0000000c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:313    .text.HAL_PWR_EnableWakeUpPin:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:320    .text.HAL_PWR_EnableWakeUpPin:00000000 HAL_PWR_EnableWakeUpPin
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:352    .text.HAL_PWR_EnableWakeUpPin:00000018 $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:357    .text.HAL_PWR_DisableWakeUpPin:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:364    .text.HAL_PWR_DisableWakeUpPin:00000000 HAL_PWR_DisableWakeUpPin
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:388    .text.HAL_PWR_DisableWakeUpPin:00000010 $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:393    .text.HAL_PWR_EnterSLEEPMode:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:400    .text.HAL_PWR_EnterSLEEPMode:00000000 HAL_PWR_EnterSLEEPMode
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:502    .text.HAL_PWR_EnterSLEEPMode:0000004c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:508    .text.HAL_PWR_EnterSTOPMode:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:515    .text.HAL_PWR_EnterSTOPMode:00000000 HAL_PWR_EnterSTOPMode
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:598    .text.HAL_PWR_EnterSTOPMode:0000003c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:605    .text.HAL_PWR_EnterSTANDBYMode:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:612    .text.HAL_PWR_EnterSTANDBYMode:00000000 HAL_PWR_EnterSTANDBYMode
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:646    .text.HAL_PWR_EnterSTANDBYMode:0000001c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:652    .text.HAL_PWR_EnterSHUTDOWNMode:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:659    .text.HAL_PWR_EnterSHUTDOWNMode:00000000 HAL_PWR_EnterSHUTDOWNMode
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:692    .text.HAL_PWR_EnterSHUTDOWNMode:0000001c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:698    .text.HAL_PWR_EnableSleepOnExit:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:705    .text.HAL_PWR_EnableSleepOnExit:00000000 HAL_PWR_EnableSleepOnExit
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:726    .text.HAL_PWR_EnableSleepOnExit:0000000c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:731    .text.HAL_PWR_DisableSleepOnExit:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:738    .text.HAL_PWR_DisableSleepOnExit:00000000 HAL_PWR_DisableSleepOnExit
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:759    .text.HAL_PWR_DisableSleepOnExit:0000000c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:764    .text.HAL_PWR_EnableSEVOnPend:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:771    .text.HAL_PWR_EnableSEVOnPend:00000000 HAL_PWR_EnableSEVOnPend
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:792    .text.HAL_PWR_EnableSEVOnPend:0000000c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:797    .text.HAL_PWR_DisableSEVOnPend:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:804    .text.HAL_PWR_DisableSEVOnPend:00000000 HAL_PWR_DisableSEVOnPend
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:825    .text.HAL_PWR_DisableSEVOnPend:0000000c $d
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:830    .text.HAL_PWR_PVDCallback:00000000 $t
C:\Users\upo\AppData\Local\Temp\ccNOn2ab.s:837    .text.HAL_PWR_PVDCallback:00000000 HAL_PWR_PVDCallback

UNDEFINED SYMBOLS
HAL_PWREx_EnableLowPowerRunMode
HAL_PWREx_DisableLowPowerRunMode
